/* automatically generated by rust-bindgen */

use std::libc::*;
pub type __int128_t = c_void;
pub type __uint128_t = c_void;
pub type __builtin_va_list = [__va_list_tag, ..1u];
pub type ptrdiff_t = c_long;
pub type size_t = c_ulong;
pub type wchar_t = c_int;
pub type gint8 = c_schar;
pub type guint8 = c_uchar;
pub type gint16 = c_short;
pub type guint16 = c_ushort;
pub type gint32 = c_int;
pub type guint32 = c_uint;
pub type gint64 = c_long;
pub type guint64 = c_ulong;
pub type gssize = c_long;
pub type gsize = c_ulong;
pub type goffset = gint64;
pub type gintptr = c_long;
pub type guintptr = c_ulong;
pub type GPid = c_int;
pub type __u_char = c_uchar;
pub type __u_short = c_ushort;
pub type __u_int = c_uint;
pub type __u_long = c_ulong;
pub type __int8_t = c_schar;
pub type __uint8_t = c_uchar;
pub type __int16_t = c_short;
pub type __uint16_t = c_ushort;
pub type __int32_t = c_int;
pub type __uint32_t = c_uint;
pub type __int64_t = c_long;
pub type __uint64_t = c_ulong;
pub type __quad_t = c_long;
pub type __u_quad_t = c_ulong;
pub type __dev_t = c_ulong;
pub type __uid_t = c_uint;
pub type __gid_t = c_uint;
pub type __ino_t = c_ulong;
pub type __ino64_t = c_ulong;
pub type __mode_t = c_uint;
pub type __nlink_t = c_ulong;
pub type __off_t = c_long;
pub type __off64_t = c_long;
pub type __pid_t = c_int;
pub struct __fsid_t {
    __val: [c_int, ..2u],
}
pub type __clock_t = c_long;
pub type __rlim_t = c_ulong;
pub type __rlim64_t = c_ulong;
pub type __id_t = c_uint;
pub type __time_t = c_long;
pub type __useconds_t = c_uint;
pub type __suseconds_t = c_long;
pub type __daddr_t = c_int;
pub type __key_t = c_int;
pub type __clockid_t = c_int;
pub type __timer_t = *mut c_void;
pub type __blksize_t = c_long;
pub type __blkcnt_t = c_long;
pub type __blkcnt64_t = c_long;
pub type __fsblkcnt_t = c_ulong;
pub type __fsblkcnt64_t = c_ulong;
pub type __fsfilcnt_t = c_ulong;
pub type __fsfilcnt64_t = c_ulong;
pub type __fsword_t = c_long;
pub type __ssize_t = c_long;
pub type __syscall_slong_t = c_long;
pub type __syscall_ulong_t = c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut c_schar;
pub type __intptr_t = c_long;
pub type __socklen_t = c_uint;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub struct Struct_timespec {
    tv_sec: __time_t,
    tv_nsec: __syscall_slong_t,
}
pub struct Struct_tm {
    tm_sec: c_int,
    tm_min: c_int,
    tm_hour: c_int,
    tm_mday: c_int,
    tm_mon: c_int,
    tm_year: c_int,
    tm_wday: c_int,
    tm_yday: c_int,
    tm_isdst: c_int,
    tm_gmtoff: c_long,
    tm_zone: *c_schar,
}
pub struct Struct_itimerspec {
    it_interval: Struct_timespec,
    it_value: Struct_timespec,
}
pub type pid_t = __pid_t;
pub struct Struct___locale_struct {
    __locales: [*mut Struct___locale_data, ..13u],
    __ctype_b: *c_ushort,
    __ctype_tolower: *c_int,
    __ctype_toupper: *c_int,
    __names: [*c_schar, ..13u],
}
pub type Struct___locale_data = c_void;
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub type gchar = c_schar;
pub type gshort = c_short;
pub type glong = c_long;
pub type gint = c_int;
pub type gboolean = gint;
pub type guchar = c_uchar;
pub type gushort = c_ushort;
pub type gulong = c_ulong;
pub type guint = c_uint;
pub type gfloat = c_float;
pub type gdouble = c_double;
pub type gpointer = *mut c_void;
pub type gconstpointer = *c_void;
pub type GCompareFunc =
    extern "C" fn(arg1: gconstpointer, arg2: gconstpointer) -> gint;
pub type GCompareDataFunc =
    extern "C" fn(arg1: gconstpointer, arg2: gconstpointer, arg3: gpointer)
        -> gint;
pub type GEqualFunc =
    extern "C" fn(arg1: gconstpointer, arg2: gconstpointer) -> gboolean;
pub type GDestroyNotify = extern "C" fn(arg1: gpointer);
pub type GFunc = extern "C" fn(arg1: gpointer, arg2: gpointer);
pub type GHashFunc = extern "C" fn(arg1: gconstpointer) -> guint;
pub type GHFunc =
    extern "C" fn(arg1: gpointer, arg2: gpointer, arg3: gpointer);
pub type GFreeFunc = extern "C" fn(arg1: gpointer);
pub type GTranslateFunc =
    extern "C" fn(arg1: *gchar, arg2: gpointer) -> *gchar;
pub type GDoubleIEEE754 = Union__GDoubleIEEE754;
pub type GFloatIEEE754 = Union__GFloatIEEE754;
pub struct Union__GFloatIEEE754 {
    data: [u32, ..1u],
}
impl Union__GFloatIEEE754 {
    pub fn v_float(&mut self) -> *mut gfloat {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn mpn(&mut self) -> *mut Struct_Unnamed1 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct_Unnamed1 {
    mantissa: guint,
    biased_exponent: guint,
    sign: guint,
}
pub struct Union__GDoubleIEEE754 {
    data: [u64, ..1u],
}
impl Union__GDoubleIEEE754 {
    pub fn v_double(&mut self) -> *mut gdouble {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn mpn(&mut self) -> *mut Struct_Unnamed2 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct_Unnamed2 {
    mantissa_low: guint,
    mantissa_high: guint,
    biased_exponent: guint,
    sign: guint,
}
pub type GTimeVal = Struct__GTimeVal;
pub struct Struct__GTimeVal {
    tv_sec: glong,
    tv_usec: glong,
}
pub type Struct__GBytes = c_void;
pub type GBytes = Struct__GBytes;
pub type GArray = Struct__GArray;
pub type GByteArray = Struct__GByteArray;
pub type GPtrArray = Struct__GPtrArray;
pub struct Struct__GArray {
    data: *mut gchar,
    len: guint,
}
pub struct Struct__GByteArray {
    data: *mut guint8,
    len: guint,
}
pub struct Struct__GPtrArray {
    pdata: *mut gpointer,
    len: guint,
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type GQuark = guint32;
pub type GError = Struct__GError;
pub struct Struct__GError {
    domain: GQuark,
    code: gint,
    message: *mut gchar,
}
pub type GThreadError = c_uint;
pub static G_THREAD_ERROR_AGAIN: c_uint = 0;
pub type GThreadFunc = extern "C" fn(arg1: gpointer) -> gpointer;
pub type GThread = Struct__GThread;
pub type GMutex = Union__GMutex;
pub type GRecMutex = Struct__GRecMutex;
pub type GRWLock = Struct__GRWLock;
pub type GCond = Struct__GCond;
pub type GPrivate = Struct__GPrivate;
pub type GOnce = Struct__GOnce;
pub struct Union__GMutex {
    data: [u64, ..1u],
}
impl Union__GMutex {
    pub fn p(&mut self) -> *mut gpointer {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn i(&mut self) -> *mut [guint, ..2u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct__GRWLock {
    p: gpointer,
    i: [guint, ..2u],
}
pub struct Struct__GCond {
    p: gpointer,
    i: [guint, ..2u],
}
pub struct Struct__GRecMutex {
    p: gpointer,
    i: [guint, ..2u],
}
pub struct Struct__GPrivate {
    p: gpointer,
    notify: GDestroyNotify,
    future: [gpointer, ..2u],
}
pub type GOnceStatus = c_uint;
pub static G_ONCE_STATUS_NOTCALLED: c_uint = 0;
pub static G_ONCE_STATUS_PROGRESS: c_uint = 1;
pub static G_ONCE_STATUS_READY: c_uint = 2;
pub struct Struct__GOnce {
    status: GOnceStatus,
    retval: gpointer,
}
pub type Struct__GAsyncQueue = c_void;
pub type GAsyncQueue = Struct__GAsyncQueue;
pub type __sig_atomic_t = c_int;
pub struct __sigset_t {
    __val: [c_ulong, ..16u],
}
pub type sig_atomic_t = __sig_atomic_t;
pub type sigset_t = __sigset_t;
pub type uid_t = __uid_t;
pub struct Union_sigval {
    data: [u64, ..1u],
}
impl Union_sigval {
    pub fn sival_int(&mut self) -> *mut c_int {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn sival_ptr(&mut self) -> *mut *mut c_void {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub type sigval_t = Union_sigval;
pub type __sigchld_clock_t = __clock_t;
pub struct Union_Unnamed3 {
    data: [u64, ..14u],
}
impl Union_Unnamed3 {
    pub fn _pad(&mut self) -> *mut [c_int, ..28u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn _kill(&mut self) -> *mut Struct_Unnamed4 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn _timer(&mut self) -> *mut Struct_Unnamed5 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn _rt(&mut self) -> *mut Struct_Unnamed6 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn _sigchld(&mut self) -> *mut Struct_Unnamed7 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn _sigfault(&mut self) -> *mut Struct_Unnamed8 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn _sigpoll(&mut self) -> *mut Struct_Unnamed9 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn _sigsys(&mut self) -> *mut Struct_Unnamed10 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct_Unnamed4 {
    si_pid: __pid_t,
    si_uid: __uid_t,
}
pub struct Struct_Unnamed5 {
    si_tid: c_int,
    si_overrun: c_int,
    si_sigval: sigval_t,
}
pub struct Struct_Unnamed6 {
    si_pid: __pid_t,
    si_uid: __uid_t,
    si_sigval: sigval_t,
}
pub struct Struct_Unnamed7 {
    si_pid: __pid_t,
    si_uid: __uid_t,
    si_status: c_int,
    si_utime: __sigchld_clock_t,
    si_stime: __sigchld_clock_t,
}
pub struct Struct_Unnamed8 {
    si_addr: *mut c_void,
    si_addr_lsb: c_short,
}
pub struct Struct_Unnamed9 {
    si_band: c_long,
    si_fd: c_int,
}
pub struct Struct_Unnamed10 {
    _call_addr: *mut c_void,
    _syscall: c_int,
    _arch: c_uint,
}
pub struct siginfo_t {
    si_signo: c_int,
    si_errno: c_int,
    si_code: c_int,
    _sifields: Union_Unnamed3,
}
pub type Enum_Unnamed11 = c_int;
pub static SI_ASYNCNL: c_int = -60;
pub static SI_TKILL: c_int = -6;
pub static SI_SIGIO: c_int = -5;
pub static SI_ASYNCIO: c_int = -4;
pub static SI_MESGQ: c_int = -3;
pub static SI_TIMER: c_int = -2;
pub static SI_QUEUE: c_int = -1;
pub static SI_USER: c_int = 0;
pub static SI_KERNEL: c_int = 128;
pub type Enum_Unnamed12 = c_uint;
pub static ILL_ILLOPC: c_uint = 1;
pub static ILL_ILLOPN: c_uint = 2;
pub static ILL_ILLADR: c_uint = 3;
pub static ILL_ILLTRP: c_uint = 4;
pub static ILL_PRVOPC: c_uint = 5;
pub static ILL_PRVREG: c_uint = 6;
pub static ILL_COPROC: c_uint = 7;
pub static ILL_BADSTK: c_uint = 8;
pub type Enum_Unnamed13 = c_uint;
pub static FPE_INTDIV: c_uint = 1;
pub static FPE_INTOVF: c_uint = 2;
pub static FPE_FLTDIV: c_uint = 3;
pub static FPE_FLTOVF: c_uint = 4;
pub static FPE_FLTUND: c_uint = 5;
pub static FPE_FLTRES: c_uint = 6;
pub static FPE_FLTINV: c_uint = 7;
pub static FPE_FLTSUB: c_uint = 8;
pub type Enum_Unnamed14 = c_uint;
pub static SEGV_MAPERR: c_uint = 1;
pub static SEGV_ACCERR: c_uint = 2;
pub type Enum_Unnamed15 = c_uint;
pub static BUS_ADRALN: c_uint = 1;
pub static BUS_ADRERR: c_uint = 2;
pub static BUS_OBJERR: c_uint = 3;
pub static BUS_MCEERR_AR: c_uint = 4;
pub static BUS_MCEERR_AO: c_uint = 5;
pub type Enum_Unnamed16 = c_uint;
pub static TRAP_BRKPT: c_uint = 1;
pub static TRAP_TRACE: c_uint = 2;
pub type Enum_Unnamed17 = c_uint;
pub static CLD_EXITED: c_uint = 1;
pub static CLD_KILLED: c_uint = 2;
pub static CLD_DUMPED: c_uint = 3;
pub static CLD_TRAPPED: c_uint = 4;
pub static CLD_STOPPED: c_uint = 5;
pub static CLD_CONTINUED: c_uint = 6;
pub type Enum_Unnamed18 = c_uint;
pub static POLL_IN: c_uint = 1;
pub static POLL_OUT: c_uint = 2;
pub static POLL_MSG: c_uint = 3;
pub static POLL_ERR: c_uint = 4;
pub static POLL_PRI: c_uint = 5;
pub static POLL_HUP: c_uint = 6;
pub type pthread_attr_t = Union_pthread_attr_t;
pub struct Struct_sigevent {
    sigev_value: sigval_t,
    sigev_signo: c_int,
    sigev_notify: c_int,
    _sigev_un: Union_Unnamed19,
}
pub struct Union_Unnamed19 {
    data: [u64, ..6u],
}
impl Union_Unnamed19 {
    pub fn _pad(&mut self) -> *mut [c_int, ..12u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn _tid(&mut self) -> *mut __pid_t {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn _sigev_thread(&mut self) -> *mut Struct_Unnamed20 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct_Unnamed20 {
    _function: extern "C" fn(arg1: sigval_t),
    _attribute: *mut pthread_attr_t,
}
pub type sigevent_t = Struct_sigevent;
pub type Enum_Unnamed21 = c_uint;
pub static SIGEV_SIGNAL: c_uint = 0;
pub static SIGEV_NONE: c_uint = 1;
pub static SIGEV_THREAD: c_uint = 2;
pub static SIGEV_THREAD_ID: c_uint = 4;
pub type __sighandler_t = extern "C" fn(arg1: c_int);
pub type sig_t = __sighandler_t;
pub struct Struct_sigaction {
    __sigaction_handler: Union_Unnamed22,
    sa_mask: __sigset_t,
    sa_flags: c_int,
    sa_restorer: extern "C" fn(),
}
pub struct Union_Unnamed22 {
    data: [u64, ..1u],
}
impl Union_Unnamed22 {
    pub fn sa_handler(&mut self) -> *mut __sighandler_t {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn sa_sigaction(&mut self) ->
     *mut extern "C" fn
              (arg1: c_int, arg2: *mut siginfo_t, arg3: *mut c_void) {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct_sigvec {
    sv_handler: __sighandler_t,
    sv_mask: c_int,
    sv_flags: c_int,
}
pub struct Struct__fpx_sw_bytes {
    magic1: __uint32_t,
    extended_size: __uint32_t,
    xstate_bv: __uint64_t,
    xstate_size: __uint32_t,
    padding: [__uint32_t, ..7u],
}
pub struct Struct__fpreg {
    significand: [c_ushort, ..4u],
    exponent: c_ushort,
}
pub struct Struct__fpxreg {
    significand: [c_ushort, ..4u],
    exponent: c_ushort,
    padding: [c_ushort, ..3u],
}
pub struct Struct__xmmreg {
    element: [__uint32_t, ..4u],
}
pub struct Struct__fpstate {
    cwd: __uint16_t,
    swd: __uint16_t,
    ftw: __uint16_t,
    fop: __uint16_t,
    rip: __uint64_t,
    rdp: __uint64_t,
    mxcsr: __uint32_t,
    mxcr_mask: __uint32_t,
    _st: [Struct__fpxreg, ..8u],
    _xmm: [Struct__xmmreg, ..16u],
    padding: [__uint32_t, ..24u],
}
pub struct Struct_sigcontext {
    r8: __uint64_t,
    r9: __uint64_t,
    r10: __uint64_t,
    r11: __uint64_t,
    r12: __uint64_t,
    r13: __uint64_t,
    r14: __uint64_t,
    r15: __uint64_t,
    rdi: __uint64_t,
    rsi: __uint64_t,
    rbp: __uint64_t,
    rbx: __uint64_t,
    rdx: __uint64_t,
    rax: __uint64_t,
    rcx: __uint64_t,
    rsp: __uint64_t,
    rip: __uint64_t,
    eflags: __uint64_t,
    cs: c_ushort,
    gs: c_ushort,
    fs: c_ushort,
    __pad0: c_ushort,
    err: __uint64_t,
    trapno: __uint64_t,
    oldmask: __uint64_t,
    cr2: __uint64_t,
    __reserved1: [__uint64_t, ..8u],
}
pub struct Union_Unnamed23 {
    data: [u64, ..1u],
}
impl Union_Unnamed23 {
    pub fn fpstate(&mut self) -> *mut *mut Struct__fpstate {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __fpstate_word(&mut self) -> *mut __uint64_t {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct__xsave_hdr {
    xstate_bv: __uint64_t,
    reserved1: [__uint64_t, ..2u],
    reserved2: [__uint64_t, ..5u],
}
pub struct Struct__ymmh_state {
    ymmh_space: [__uint32_t, ..64u],
}
pub struct Struct__xstate {
    fpstate: Struct__fpstate,
    xstate_hdr: Struct__xsave_hdr,
    ymmh: Struct__ymmh_state,
}
pub struct Struct_sigstack {
    ss_sp: *mut c_void,
    ss_onstack: c_int,
}
pub type Enum_Unnamed24 = c_uint;
pub static SS_ONSTACK: c_uint = 1;
pub static SS_DISABLE: c_uint = 2;
pub struct Struct_sigaltstack {
    ss_sp: *mut c_void,
    ss_flags: c_int,
    ss_size: size_t,
}
pub type stack_t = Struct_sigaltstack;
pub type greg_t = c_longlong;
pub type gregset_t = [greg_t, ..23u];
pub struct Struct__libc_fpxreg {
    significand: [c_ushort, ..4u],
    exponent: c_ushort,
    padding: [c_ushort, ..3u],
}
pub struct Struct__libc_xmmreg {
    element: [__uint32_t, ..4u],
}
pub struct Struct__libc_fpstate {
    cwd: __uint16_t,
    swd: __uint16_t,
    ftw: __uint16_t,
    fop: __uint16_t,
    rip: __uint64_t,
    rdp: __uint64_t,
    mxcsr: __uint32_t,
    mxcr_mask: __uint32_t,
    _st: [Struct__libc_fpxreg, ..8u],
    _xmm: [Struct__libc_xmmreg, ..16u],
    padding: [__uint32_t, ..24u],
}
pub type fpregset_t = *mut Struct__libc_fpstate;
pub struct mcontext_t {
    gregs: gregset_t,
    fpregs: fpregset_t,
    __reserved1: [c_ulonglong, ..8u],
}
pub struct Struct_ucontext {
    uc_flags: c_ulong,
    uc_link: *mut Struct_ucontext,
    uc_stack: stack_t,
    uc_mcontext: mcontext_t,
    uc_sigmask: __sigset_t,
    __fpregs_mem: Struct__libc_fpstate,
}
pub type ucontext_t = Struct_ucontext;
pub type pthread_t = c_ulong;
pub struct Union_pthread_attr_t {
    data: [u64, ..7u],
}
impl Union_pthread_attr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..56u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct___pthread_internal_list {
    __prev: *mut Struct___pthread_internal_list,
    __next: *mut Struct___pthread_internal_list,
}
pub type __pthread_list_t = Struct___pthread_internal_list;
pub struct Struct___pthread_mutex_s {
    __lock: c_int,
    __count: c_uint,
    __owner: c_int,
    __nusers: c_uint,
    __kind: c_int,
    __spins: c_short,
    __elision: c_short,
    __list: __pthread_list_t,
}
pub struct pthread_mutex_t {
    data: [u64, ..5u],
}
impl pthread_mutex_t {
    pub fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __size(&mut self) -> *mut [c_schar, ..40u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct pthread_mutexattr_t {
    data: [u32, ..1u],
}
impl pthread_mutexattr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..4u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_int {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct_Unnamed25 {
    __lock: c_int,
    __futex: c_uint,
    __total_seq: c_ulonglong,
    __wakeup_seq: c_ulonglong,
    __woken_seq: c_ulonglong,
    __mutex: *mut c_void,
    __nwaiters: c_uint,
    __broadcast_seq: c_uint,
}
pub struct pthread_cond_t {
    data: [u64, ..6u],
}
impl pthread_cond_t {
    pub fn __data(&mut self) -> *mut Struct_Unnamed25 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __size(&mut self) -> *mut [c_schar, ..48u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_longlong {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct pthread_condattr_t {
    data: [u32, ..1u],
}
impl pthread_condattr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..4u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_int {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub type pthread_key_t = c_uint;
pub type pthread_once_t = c_int;
pub struct Struct_Unnamed26 {
    __lock: c_int,
    __nr_readers: c_uint,
    __readers_wakeup: c_uint,
    __writer_wakeup: c_uint,
    __nr_readers_queued: c_uint,
    __nr_writers_queued: c_uint,
    __writer: c_int,
    __shared: c_int,
    __pad1: c_ulong,
    __pad2: c_ulong,
    __flags: c_uint,
}
pub struct pthread_rwlock_t {
    data: [u64, ..7u],
}
impl pthread_rwlock_t {
    pub fn __data(&mut self) -> *mut Struct_Unnamed26 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __size(&mut self) -> *mut [c_schar, ..56u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct pthread_rwlockattr_t {
    data: [u64, ..1u],
}
impl pthread_rwlockattr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..8u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub type pthread_spinlock_t = c_int;
pub struct pthread_barrier_t {
    data: [u64, ..4u],
}
impl pthread_barrier_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..32u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct pthread_barrierattr_t {
    data: [u32, ..1u],
}
impl pthread_barrierattr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..4u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_int {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub type GBookmarkFileError = c_uint;
pub static G_BOOKMARK_FILE_ERROR_INVALID_URI: c_uint = 0;
pub static G_BOOKMARK_FILE_ERROR_INVALID_VALUE: c_uint = 1;
pub static G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED: c_uint = 2;
pub static G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND: c_uint = 3;
pub static G_BOOKMARK_FILE_ERROR_READ: c_uint = 4;
pub static G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING: c_uint = 5;
pub static G_BOOKMARK_FILE_ERROR_WRITE: c_uint = 6;
pub static G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND: c_uint = 7;
pub type Struct__GBookmarkFile = c_void;
pub type GBookmarkFile = Struct__GBookmarkFile;
pub type GChecksumType = c_uint;
pub static G_CHECKSUM_MD5: c_uint = 0;
pub static G_CHECKSUM_SHA1: c_uint = 1;
pub static G_CHECKSUM_SHA256: c_uint = 2;
pub static G_CHECKSUM_SHA512: c_uint = 3;
pub type Struct__GChecksum = c_void;
pub type GChecksum = Struct__GChecksum;
pub type GConvertError = c_uint;
pub static G_CONVERT_ERROR_NO_CONVERSION: c_uint = 0;
pub static G_CONVERT_ERROR_ILLEGAL_SEQUENCE: c_uint = 1;
pub static G_CONVERT_ERROR_FAILED: c_uint = 2;
pub static G_CONVERT_ERROR_PARTIAL_INPUT: c_uint = 3;
pub static G_CONVERT_ERROR_BAD_URI: c_uint = 4;
pub static G_CONVERT_ERROR_NOT_ABSOLUTE_PATH: c_uint = 5;
pub type Struct__GIConv = c_void;
pub type GIConv = *mut Struct__GIConv;
pub type Struct__GData = c_void;
pub type GData = Struct__GData;
pub type GDataForeachFunc =
    extern "C" fn(arg1: GQuark, arg2: gpointer, arg3: gpointer);
pub type GDuplicateFunc =
    extern "C" fn(arg1: gpointer, arg2: gpointer) -> gpointer;
pub type GTime = gint32;
pub type GDateYear = guint16;
pub type GDateDay = guint8;
pub type GDate = Struct__GDate;
pub type GDateDMY = c_uint;
pub static G_DATE_DAY: c_uint = 0;
pub static G_DATE_MONTH: c_uint = 1;
pub static G_DATE_YEAR: c_uint = 2;
pub type GDateWeekday = c_uint;
pub static G_DATE_BAD_WEEKDAY: c_uint = 0;
pub static G_DATE_MONDAY: c_uint = 1;
pub static G_DATE_TUESDAY: c_uint = 2;
pub static G_DATE_WEDNESDAY: c_uint = 3;
pub static G_DATE_THURSDAY: c_uint = 4;
pub static G_DATE_FRIDAY: c_uint = 5;
pub static G_DATE_SATURDAY: c_uint = 6;
pub static G_DATE_SUNDAY: c_uint = 7;
pub type GDateMonth = c_uint;
pub static G_DATE_BAD_MONTH: c_uint = 0;
pub static G_DATE_JANUARY: c_uint = 1;
pub static G_DATE_FEBRUARY: c_uint = 2;
pub static G_DATE_MARCH: c_uint = 3;
pub static G_DATE_APRIL: c_uint = 4;
pub static G_DATE_MAY: c_uint = 5;
pub static G_DATE_JUNE: c_uint = 6;
pub static G_DATE_JULY: c_uint = 7;
pub static G_DATE_AUGUST: c_uint = 8;
pub static G_DATE_SEPTEMBER: c_uint = 9;
pub static G_DATE_OCTOBER: c_uint = 10;
pub static G_DATE_NOVEMBER: c_uint = 11;
pub static G_DATE_DECEMBER: c_uint = 12;
pub struct Struct__GDate {
    julian_days: guint,
    julian: guint,
    dmy: guint,
    day: guint,
    month: guint,
    year: guint,
}
pub type Struct__GTimeZone = c_void;
pub type GTimeZone = Struct__GTimeZone;
pub type GTimeType = c_uint;
pub static G_TIME_TYPE_STANDARD: c_uint = 0;
pub static G_TIME_TYPE_DAYLIGHT: c_uint = 1;
pub static G_TIME_TYPE_UNIVERSAL: c_uint = 2;
pub type GTimeSpan = gint64;
pub type Struct__GDateTime = c_void;
pub type GDateTime = Struct__GDateTime;
pub struct Struct_dirent {
    d_ino: __ino_t,
    d_off: __off_t,
    d_reclen: c_ushort,
    d_type: c_uchar,
    d_name: [c_schar, ..256u],
}
pub type Enum_Unnamed27 = c_uint;
pub static DT_UNKNOWN: c_uint = 0;
pub static DT_FIFO: c_uint = 1;
pub static DT_CHR: c_uint = 2;
pub static DT_DIR: c_uint = 4;
pub static DT_BLK: c_uint = 6;
pub static DT_REG: c_uint = 8;
pub static DT_LNK: c_uint = 10;
pub static DT_SOCK: c_uint = 12;
pub static DT_WHT: c_uint = 14;
pub type Struct___dirstream = c_void;
pub type DIR = Struct___dirstream;
pub type Struct__GDir = c_void;
pub type GDir = Struct__GDir;
pub type GFileError = c_uint;
pub static G_FILE_ERROR_EXIST: c_uint = 0;
pub static G_FILE_ERROR_ISDIR: c_uint = 1;
pub static G_FILE_ERROR_ACCES: c_uint = 2;
pub static G_FILE_ERROR_NAMETOOLONG: c_uint = 3;
pub static G_FILE_ERROR_NOENT: c_uint = 4;
pub static G_FILE_ERROR_NOTDIR: c_uint = 5;
pub static G_FILE_ERROR_NXIO: c_uint = 6;
pub static G_FILE_ERROR_NODEV: c_uint = 7;
pub static G_FILE_ERROR_ROFS: c_uint = 8;
pub static G_FILE_ERROR_TXTBSY: c_uint = 9;
pub static G_FILE_ERROR_FAULT: c_uint = 10;
pub static G_FILE_ERROR_LOOP: c_uint = 11;
pub static G_FILE_ERROR_NOSPC: c_uint = 12;
pub static G_FILE_ERROR_NOMEM: c_uint = 13;
pub static G_FILE_ERROR_MFILE: c_uint = 14;
pub static G_FILE_ERROR_NFILE: c_uint = 15;
pub static G_FILE_ERROR_BADF: c_uint = 16;
pub static G_FILE_ERROR_INVAL: c_uint = 17;
pub static G_FILE_ERROR_PIPE: c_uint = 18;
pub static G_FILE_ERROR_AGAIN: c_uint = 19;
pub static G_FILE_ERROR_INTR: c_uint = 20;
pub static G_FILE_ERROR_IO: c_uint = 21;
pub static G_FILE_ERROR_PERM: c_uint = 22;
pub static G_FILE_ERROR_NOSYS: c_uint = 23;
pub static G_FILE_ERROR_FAILED: c_uint = 24;
pub type GFileTest = c_uint;
pub static G_FILE_TEST_IS_REGULAR: c_uint = 1;
pub static G_FILE_TEST_IS_SYMLINK: c_uint = 2;
pub static G_FILE_TEST_IS_DIR: c_uint = 4;
pub static G_FILE_TEST_IS_EXECUTABLE: c_uint = 8;
pub static G_FILE_TEST_EXISTS: c_uint = 16;
pub type GMemVTable = Struct__GMemVTable;
pub struct Struct__GMemVTable {
    malloc: extern "C" fn(arg1: gsize) -> gpointer,
    realloc: extern "C" fn(arg1: gpointer, arg2: gsize) -> gpointer,
    free: extern "C" fn(arg1: gpointer),
    calloc: extern "C" fn(arg1: gsize, arg2: gsize) -> gpointer,
    try_malloc: extern "C" fn(arg1: gsize) -> gpointer,
    try_realloc: extern "C" fn(arg1: gpointer, arg2: gsize) -> gpointer,
}
pub type GNode = Struct__GNode;
pub type GTraverseFlags = c_uint;
pub static G_TRAVERSE_LEAVES: c_uint = 1;
pub static G_TRAVERSE_NON_LEAVES: c_uint = 2;
pub static G_TRAVERSE_ALL: c_uint = 3;
pub static G_TRAVERSE_MASK: c_uint = 3;
pub static G_TRAVERSE_LEAFS: c_uint = 1;
pub static G_TRAVERSE_NON_LEAFS: c_uint = 2;
pub type GTraverseType = c_uint;
pub static G_IN_ORDER: c_uint = 0;
pub static G_PRE_ORDER: c_uint = 1;
pub static G_POST_ORDER: c_uint = 2;
pub static G_LEVEL_ORDER: c_uint = 3;
pub type GNodeTraverseFunc =
    extern "C" fn(arg1: *mut GNode, arg2: gpointer) -> gboolean;
pub type GNodeForeachFunc = extern "C" fn(arg1: *mut GNode, arg2: gpointer);
pub type GCopyFunc =
    extern "C" fn(arg1: gconstpointer, arg2: gpointer) -> gpointer;
pub struct Struct__GNode {
    data: gpointer,
    next: *mut GNode,
    prev: *mut GNode,
    parent: *mut GNode,
    children: *mut GNode,
}
pub type GList = Struct__GList;
pub struct Struct__GList {
    data: gpointer,
    next: *mut GList,
    prev: *mut GList,
}
pub type Struct__GHashTable = c_void;
pub type GHashTable = Struct__GHashTable;
pub type GHRFunc =
    extern "C" fn(arg1: gpointer, arg2: gpointer, arg3: gpointer) -> gboolean;
pub type GHashTableIter = Struct__GHashTableIter;
pub struct Struct__GHashTableIter {
    dummy1: gpointer,
    dummy2: gpointer,
    dummy3: gpointer,
    dummy4: c_int,
    dummy5: gboolean,
    dummy6: gpointer,
}
pub type Struct__GHmac = c_void;
pub type GHmac = Struct__GHmac;
pub type GHook = Struct__GHook;
pub type GHookList = Struct__GHookList;
pub type GHookCompareFunc =
    extern "C" fn(arg1: *mut GHook, arg2: *mut GHook) -> gint;
pub type GHookFindFunc =
    extern "C" fn(arg1: *mut GHook, arg2: gpointer) -> gboolean;
pub type GHookMarshaller = extern "C" fn(arg1: *mut GHook, arg2: gpointer);
pub type GHookCheckMarshaller =
    extern "C" fn(arg1: *mut GHook, arg2: gpointer) -> gboolean;
pub type GHookFunc = extern "C" fn(arg1: gpointer);
pub type GHookCheckFunc = extern "C" fn(arg1: gpointer) -> gboolean;
pub type GHookFinalizeFunc =
    extern "C" fn(arg1: *mut GHookList, arg2: *mut GHook);
pub type GHookFlagMask = c_uint;
pub static G_HOOK_FLAG_ACTIVE: c_uint = 1;
pub static G_HOOK_FLAG_IN_CALL: c_uint = 2;
pub static G_HOOK_FLAG_MASK: c_uint = 15;
pub struct Struct__GHookList {
    seq_id: gulong,
    hook_size: guint,
    is_setup: guint,
    hooks: *mut GHook,
    dummy3: gpointer,
    finalize_hook: GHookFinalizeFunc,
    dummy: [gpointer, ..2u],
}
pub struct Struct__GHook {
    data: gpointer,
    next: *mut GHook,
    prev: *mut GHook,
    ref_count: guint,
    hook_id: gulong,
    flags: guint,
    func: gpointer,
    destroy: GDestroyNotify,
}
pub type GPollFD = Struct__GPollFD;
pub type GPollFunc =
    extern "C" fn(arg1: *mut GPollFD, arg2: guint, arg3: gint) -> gint;
pub struct Struct__GPollFD {
    fd: gint,
    events: gushort,
    revents: gushort,
}
pub type GSList = Struct__GSList;
pub struct Struct__GSList {
    data: gpointer,
    next: *mut GSList,
}
pub type GIOCondition = c_uint;
pub static G_IO_IN: c_uint = 1;
pub static G_IO_OUT: c_uint = 4;
pub static G_IO_PRI: c_uint = 2;
pub static G_IO_ERR: c_uint = 8;
pub static G_IO_HUP: c_uint = 16;
pub static G_IO_NVAL: c_uint = 32;
pub type Struct__GMainContext = c_void;
pub type GMainContext = Struct__GMainContext;
pub type Struct__GMainLoop = c_void;
pub type GMainLoop = Struct__GMainLoop;
pub type GSource = Struct__GSource;
pub type Struct__GSourcePrivate = c_void;
pub type GSourcePrivate = Struct__GSourcePrivate;
pub type GSourceCallbackFuncs = Struct__GSourceCallbackFuncs;
pub type GSourceFuncs = Struct__GSourceFuncs;
pub type GSourceFunc = extern "C" fn(arg1: gpointer) -> gboolean;
pub type GChildWatchFunc =
    extern "C" fn(arg1: GPid, arg2: gint, arg3: gpointer);
pub struct Struct__GSource {
    callback_data: gpointer,
    callback_funcs: *mut GSourceCallbackFuncs,
    source_funcs: *GSourceFuncs,
    ref_count: guint,
    context: *mut GMainContext,
    priority: gint,
    flags: guint,
    source_id: guint,
    poll_fds: *mut GSList,
    prev: *mut GSource,
    next: *mut GSource,
    name: *mut c_schar,
    _priv: *mut GSourcePrivate,
}
pub struct Struct__GSourceCallbackFuncs {
    _ref: extern "C" fn(arg1: gpointer),
    unref: extern "C" fn(arg1: gpointer),
    get: extern "C" fn
             (arg1: gpointer, arg2: *mut GSource, arg3: *mut GSourceFunc,
              arg4: *mut gpointer),
}
pub type GSourceDummyMarshal = extern "C" fn();
pub struct Struct__GSourceFuncs {
    prepare: extern "C" fn(arg1: *mut GSource, arg2: *mut gint) -> gboolean,
    check: extern "C" fn(arg1: *mut GSource) -> gboolean,
    dispatch: extern "C" fn
                  (arg1: *mut GSource, arg2: GSourceFunc, arg3: gpointer)
                  -> gboolean,
    finalize: extern "C" fn(arg1: *mut GSource),
    closure_callback: GSourceFunc,
    closure_marshal: GSourceDummyMarshal,
}
pub type gunichar = guint32;
pub type gunichar2 = guint16;
pub type GUnicodeType = c_uint;
pub static G_UNICODE_CONTROL: c_uint = 0;
pub static G_UNICODE_FORMAT: c_uint = 1;
pub static G_UNICODE_UNASSIGNED: c_uint = 2;
pub static G_UNICODE_PRIVATE_USE: c_uint = 3;
pub static G_UNICODE_SURROGATE: c_uint = 4;
pub static G_UNICODE_LOWERCASE_LETTER: c_uint = 5;
pub static G_UNICODE_MODIFIER_LETTER: c_uint = 6;
pub static G_UNICODE_OTHER_LETTER: c_uint = 7;
pub static G_UNICODE_TITLECASE_LETTER: c_uint = 8;
pub static G_UNICODE_UPPERCASE_LETTER: c_uint = 9;
pub static G_UNICODE_SPACING_MARK: c_uint = 10;
pub static G_UNICODE_ENCLOSING_MARK: c_uint = 11;
pub static G_UNICODE_NON_SPACING_MARK: c_uint = 12;
pub static G_UNICODE_DECIMAL_NUMBER: c_uint = 13;
pub static G_UNICODE_LETTER_NUMBER: c_uint = 14;
pub static G_UNICODE_OTHER_NUMBER: c_uint = 15;
pub static G_UNICODE_CONNECT_PUNCTUATION: c_uint = 16;
pub static G_UNICODE_DASH_PUNCTUATION: c_uint = 17;
pub static G_UNICODE_CLOSE_PUNCTUATION: c_uint = 18;
pub static G_UNICODE_FINAL_PUNCTUATION: c_uint = 19;
pub static G_UNICODE_INITIAL_PUNCTUATION: c_uint = 20;
pub static G_UNICODE_OTHER_PUNCTUATION: c_uint = 21;
pub static G_UNICODE_OPEN_PUNCTUATION: c_uint = 22;
pub static G_UNICODE_CURRENCY_SYMBOL: c_uint = 23;
pub static G_UNICODE_MODIFIER_SYMBOL: c_uint = 24;
pub static G_UNICODE_MATH_SYMBOL: c_uint = 25;
pub static G_UNICODE_OTHER_SYMBOL: c_uint = 26;
pub static G_UNICODE_LINE_SEPARATOR: c_uint = 27;
pub static G_UNICODE_PARAGRAPH_SEPARATOR: c_uint = 28;
pub static G_UNICODE_SPACE_SEPARATOR: c_uint = 29;
pub type GUnicodeBreakType = c_uint;
pub static G_UNICODE_BREAK_MANDATORY: c_uint = 0;
pub static G_UNICODE_BREAK_CARRIAGE_RETURN: c_uint = 1;
pub static G_UNICODE_BREAK_LINE_FEED: c_uint = 2;
pub static G_UNICODE_BREAK_COMBINING_MARK: c_uint = 3;
pub static G_UNICODE_BREAK_SURROGATE: c_uint = 4;
pub static G_UNICODE_BREAK_ZERO_WIDTH_SPACE: c_uint = 5;
pub static G_UNICODE_BREAK_INSEPARABLE: c_uint = 6;
pub static G_UNICODE_BREAK_NON_BREAKING_GLUE: c_uint = 7;
pub static G_UNICODE_BREAK_CONTINGENT: c_uint = 8;
pub static G_UNICODE_BREAK_SPACE: c_uint = 9;
pub static G_UNICODE_BREAK_AFTER: c_uint = 10;
pub static G_UNICODE_BREAK_BEFORE: c_uint = 11;
pub static G_UNICODE_BREAK_BEFORE_AND_AFTER: c_uint = 12;
pub static G_UNICODE_BREAK_HYPHEN: c_uint = 13;
pub static G_UNICODE_BREAK_NON_STARTER: c_uint = 14;
pub static G_UNICODE_BREAK_OPEN_PUNCTUATION: c_uint = 15;
pub static G_UNICODE_BREAK_CLOSE_PUNCTUATION: c_uint = 16;
pub static G_UNICODE_BREAK_QUOTATION: c_uint = 17;
pub static G_UNICODE_BREAK_EXCLAMATION: c_uint = 18;
pub static G_UNICODE_BREAK_IDEOGRAPHIC: c_uint = 19;
pub static G_UNICODE_BREAK_NUMERIC: c_uint = 20;
pub static G_UNICODE_BREAK_INFIX_SEPARATOR: c_uint = 21;
pub static G_UNICODE_BREAK_SYMBOL: c_uint = 22;
pub static G_UNICODE_BREAK_ALPHABETIC: c_uint = 23;
pub static G_UNICODE_BREAK_PREFIX: c_uint = 24;
pub static G_UNICODE_BREAK_POSTFIX: c_uint = 25;
pub static G_UNICODE_BREAK_COMPLEX_CONTEXT: c_uint = 26;
pub static G_UNICODE_BREAK_AMBIGUOUS: c_uint = 27;
pub static G_UNICODE_BREAK_UNKNOWN: c_uint = 28;
pub static G_UNICODE_BREAK_NEXT_LINE: c_uint = 29;
pub static G_UNICODE_BREAK_WORD_JOINER: c_uint = 30;
pub static G_UNICODE_BREAK_HANGUL_L_JAMO: c_uint = 31;
pub static G_UNICODE_BREAK_HANGUL_V_JAMO: c_uint = 32;
pub static G_UNICODE_BREAK_HANGUL_T_JAMO: c_uint = 33;
pub static G_UNICODE_BREAK_HANGUL_LV_SYLLABLE: c_uint = 34;
pub static G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE: c_uint = 35;
pub static G_UNICODE_BREAK_CLOSE_PARANTHESIS: c_uint = 36;
pub static G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER: c_uint = 37;
pub static G_UNICODE_BREAK_HEBREW_LETTER: c_uint = 38;
pub static G_UNICODE_BREAK_REGIONAL_INDICATOR: c_uint = 39;
pub type GUnicodeScript = c_int;
pub static G_UNICODE_SCRIPT_INVALID_CODE: c_int = -1;
pub static G_UNICODE_SCRIPT_COMMON: c_int = 0;
pub static G_UNICODE_SCRIPT_INHERITED: c_int = 1;
pub static G_UNICODE_SCRIPT_ARABIC: c_int = 2;
pub static G_UNICODE_SCRIPT_ARMENIAN: c_int = 3;
pub static G_UNICODE_SCRIPT_BENGALI: c_int = 4;
pub static G_UNICODE_SCRIPT_BOPOMOFO: c_int = 5;
pub static G_UNICODE_SCRIPT_CHEROKEE: c_int = 6;
pub static G_UNICODE_SCRIPT_COPTIC: c_int = 7;
pub static G_UNICODE_SCRIPT_CYRILLIC: c_int = 8;
pub static G_UNICODE_SCRIPT_DESERET: c_int = 9;
pub static G_UNICODE_SCRIPT_DEVANAGARI: c_int = 10;
pub static G_UNICODE_SCRIPT_ETHIOPIC: c_int = 11;
pub static G_UNICODE_SCRIPT_GEORGIAN: c_int = 12;
pub static G_UNICODE_SCRIPT_GOTHIC: c_int = 13;
pub static G_UNICODE_SCRIPT_GREEK: c_int = 14;
pub static G_UNICODE_SCRIPT_GUJARATI: c_int = 15;
pub static G_UNICODE_SCRIPT_GURMUKHI: c_int = 16;
pub static G_UNICODE_SCRIPT_HAN: c_int = 17;
pub static G_UNICODE_SCRIPT_HANGUL: c_int = 18;
pub static G_UNICODE_SCRIPT_HEBREW: c_int = 19;
pub static G_UNICODE_SCRIPT_HIRAGANA: c_int = 20;
pub static G_UNICODE_SCRIPT_KANNADA: c_int = 21;
pub static G_UNICODE_SCRIPT_KATAKANA: c_int = 22;
pub static G_UNICODE_SCRIPT_KHMER: c_int = 23;
pub static G_UNICODE_SCRIPT_LAO: c_int = 24;
pub static G_UNICODE_SCRIPT_LATIN: c_int = 25;
pub static G_UNICODE_SCRIPT_MALAYALAM: c_int = 26;
pub static G_UNICODE_SCRIPT_MONGOLIAN: c_int = 27;
pub static G_UNICODE_SCRIPT_MYANMAR: c_int = 28;
pub static G_UNICODE_SCRIPT_OGHAM: c_int = 29;
pub static G_UNICODE_SCRIPT_OLD_ITALIC: c_int = 30;
pub static G_UNICODE_SCRIPT_ORIYA: c_int = 31;
pub static G_UNICODE_SCRIPT_RUNIC: c_int = 32;
pub static G_UNICODE_SCRIPT_SINHALA: c_int = 33;
pub static G_UNICODE_SCRIPT_SYRIAC: c_int = 34;
pub static G_UNICODE_SCRIPT_TAMIL: c_int = 35;
pub static G_UNICODE_SCRIPT_TELUGU: c_int = 36;
pub static G_UNICODE_SCRIPT_THAANA: c_int = 37;
pub static G_UNICODE_SCRIPT_THAI: c_int = 38;
pub static G_UNICODE_SCRIPT_TIBETAN: c_int = 39;
pub static G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL: c_int = 40;
pub static G_UNICODE_SCRIPT_YI: c_int = 41;
pub static G_UNICODE_SCRIPT_TAGALOG: c_int = 42;
pub static G_UNICODE_SCRIPT_HANUNOO: c_int = 43;
pub static G_UNICODE_SCRIPT_BUHID: c_int = 44;
pub static G_UNICODE_SCRIPT_TAGBANWA: c_int = 45;
pub static G_UNICODE_SCRIPT_BRAILLE: c_int = 46;
pub static G_UNICODE_SCRIPT_CYPRIOT: c_int = 47;
pub static G_UNICODE_SCRIPT_LIMBU: c_int = 48;
pub static G_UNICODE_SCRIPT_OSMANYA: c_int = 49;
pub static G_UNICODE_SCRIPT_SHAVIAN: c_int = 50;
pub static G_UNICODE_SCRIPT_LINEAR_B: c_int = 51;
pub static G_UNICODE_SCRIPT_TAI_LE: c_int = 52;
pub static G_UNICODE_SCRIPT_UGARITIC: c_int = 53;
pub static G_UNICODE_SCRIPT_NEW_TAI_LUE: c_int = 54;
pub static G_UNICODE_SCRIPT_BUGINESE: c_int = 55;
pub static G_UNICODE_SCRIPT_GLAGOLITIC: c_int = 56;
pub static G_UNICODE_SCRIPT_TIFINAGH: c_int = 57;
pub static G_UNICODE_SCRIPT_SYLOTI_NAGRI: c_int = 58;
pub static G_UNICODE_SCRIPT_OLD_PERSIAN: c_int = 59;
pub static G_UNICODE_SCRIPT_KHAROSHTHI: c_int = 60;
pub static G_UNICODE_SCRIPT_UNKNOWN: c_int = 61;
pub static G_UNICODE_SCRIPT_BALINESE: c_int = 62;
pub static G_UNICODE_SCRIPT_CUNEIFORM: c_int = 63;
pub static G_UNICODE_SCRIPT_PHOENICIAN: c_int = 64;
pub static G_UNICODE_SCRIPT_PHAGS_PA: c_int = 65;
pub static G_UNICODE_SCRIPT_NKO: c_int = 66;
pub static G_UNICODE_SCRIPT_KAYAH_LI: c_int = 67;
pub static G_UNICODE_SCRIPT_LEPCHA: c_int = 68;
pub static G_UNICODE_SCRIPT_REJANG: c_int = 69;
pub static G_UNICODE_SCRIPT_SUNDANESE: c_int = 70;
pub static G_UNICODE_SCRIPT_SAURASHTRA: c_int = 71;
pub static G_UNICODE_SCRIPT_CHAM: c_int = 72;
pub static G_UNICODE_SCRIPT_OL_CHIKI: c_int = 73;
pub static G_UNICODE_SCRIPT_VAI: c_int = 74;
pub static G_UNICODE_SCRIPT_CARIAN: c_int = 75;
pub static G_UNICODE_SCRIPT_LYCIAN: c_int = 76;
pub static G_UNICODE_SCRIPT_LYDIAN: c_int = 77;
pub static G_UNICODE_SCRIPT_AVESTAN: c_int = 78;
pub static G_UNICODE_SCRIPT_BAMUM: c_int = 79;
pub static G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS: c_int = 80;
pub static G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC: c_int = 81;
pub static G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI: c_int = 82;
pub static G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN: c_int = 83;
pub static G_UNICODE_SCRIPT_JAVANESE: c_int = 84;
pub static G_UNICODE_SCRIPT_KAITHI: c_int = 85;
pub static G_UNICODE_SCRIPT_LISU: c_int = 86;
pub static G_UNICODE_SCRIPT_MEETEI_MAYEK: c_int = 87;
pub static G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN: c_int = 88;
pub static G_UNICODE_SCRIPT_OLD_TURKIC: c_int = 89;
pub static G_UNICODE_SCRIPT_SAMARITAN: c_int = 90;
pub static G_UNICODE_SCRIPT_TAI_THAM: c_int = 91;
pub static G_UNICODE_SCRIPT_TAI_VIET: c_int = 92;
pub static G_UNICODE_SCRIPT_BATAK: c_int = 93;
pub static G_UNICODE_SCRIPT_BRAHMI: c_int = 94;
pub static G_UNICODE_SCRIPT_MANDAIC: c_int = 95;
pub static G_UNICODE_SCRIPT_CHAKMA: c_int = 96;
pub static G_UNICODE_SCRIPT_MEROITIC_CURSIVE: c_int = 97;
pub static G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS: c_int = 98;
pub static G_UNICODE_SCRIPT_MIAO: c_int = 99;
pub static G_UNICODE_SCRIPT_SHARADA: c_int = 100;
pub static G_UNICODE_SCRIPT_SORA_SOMPENG: c_int = 101;
pub static G_UNICODE_SCRIPT_TAKRI: c_int = 102;
pub type GNormalizeMode = c_uint;
pub static G_NORMALIZE_DEFAULT: c_uint = 0;
pub static G_NORMALIZE_NFD: c_uint = 0;
pub static G_NORMALIZE_DEFAULT_COMPOSE: c_uint = 1;
pub static G_NORMALIZE_NFC: c_uint = 1;
pub static G_NORMALIZE_ALL: c_uint = 2;
pub static G_NORMALIZE_NFKD: c_uint = 2;
pub static G_NORMALIZE_ALL_COMPOSE: c_uint = 3;
pub static G_NORMALIZE_NFKC: c_uint = 3;
pub type GUserDirectory = c_uint;
pub static G_USER_DIRECTORY_DESKTOP: c_uint = 0;
pub static G_USER_DIRECTORY_DOCUMENTS: c_uint = 1;
pub static G_USER_DIRECTORY_DOWNLOAD: c_uint = 2;
pub static G_USER_DIRECTORY_MUSIC: c_uint = 3;
pub static G_USER_DIRECTORY_PICTURES: c_uint = 4;
pub static G_USER_DIRECTORY_PUBLIC_SHARE: c_uint = 5;
pub static G_USER_DIRECTORY_TEMPLATES: c_uint = 6;
pub static G_USER_DIRECTORY_VIDEOS: c_uint = 7;
pub static G_USER_N_DIRECTORIES: c_uint = 8;
pub type GDebugKey = Struct__GDebugKey;
pub struct Struct__GDebugKey {
    key: *gchar,
    value: guint,
}
pub type GFormatSizeFlags = c_uint;
pub static G_FORMAT_SIZE_DEFAULT: c_uint = 0;
pub static G_FORMAT_SIZE_LONG_FORMAT: c_uint = 1;
pub static G_FORMAT_SIZE_IEC_UNITS: c_uint = 2;
pub type GVoidFunc = extern "C" fn();
pub type GString = Struct__GString;
pub struct Struct__GString {
    _str: *mut gchar,
    len: gsize,
    allocated_len: gsize,
}
pub type GIOChannel = Struct__GIOChannel;
pub type GIOFuncs = Struct__GIOFuncs;
pub type GIOError = c_uint;
pub static G_IO_ERROR_NONE: c_uint = 0;
pub static G_IO_ERROR_AGAIN: c_uint = 1;
pub static G_IO_ERROR_INVAL: c_uint = 2;
pub static G_IO_ERROR_UNKNOWN: c_uint = 3;
pub type GIOChannelError = c_uint;
pub static G_IO_CHANNEL_ERROR_FBIG: c_uint = 0;
pub static G_IO_CHANNEL_ERROR_INVAL: c_uint = 1;
pub static G_IO_CHANNEL_ERROR_IO: c_uint = 2;
pub static G_IO_CHANNEL_ERROR_ISDIR: c_uint = 3;
pub static G_IO_CHANNEL_ERROR_NOSPC: c_uint = 4;
pub static G_IO_CHANNEL_ERROR_NXIO: c_uint = 5;
pub static G_IO_CHANNEL_ERROR_OVERFLOW: c_uint = 6;
pub static G_IO_CHANNEL_ERROR_PIPE: c_uint = 7;
pub static G_IO_CHANNEL_ERROR_FAILED: c_uint = 8;
pub type GIOStatus = c_uint;
pub static G_IO_STATUS_ERROR: c_uint = 0;
pub static G_IO_STATUS_NORMAL: c_uint = 1;
pub static G_IO_STATUS_EOF: c_uint = 2;
pub static G_IO_STATUS_AGAIN: c_uint = 3;
pub type GSeekType = c_uint;
pub static G_SEEK_CUR: c_uint = 0;
pub static G_SEEK_SET: c_uint = 1;
pub static G_SEEK_END: c_uint = 2;
pub type GIOFlags = c_uint;
pub static G_IO_FLAG_APPEND: c_uint = 1;
pub static G_IO_FLAG_NONBLOCK: c_uint = 2;
pub static G_IO_FLAG_IS_READABLE: c_uint = 4;
pub static G_IO_FLAG_IS_WRITABLE: c_uint = 8;
pub static G_IO_FLAG_IS_WRITEABLE: c_uint = 8;
pub static G_IO_FLAG_IS_SEEKABLE: c_uint = 16;
pub static G_IO_FLAG_MASK: c_uint = 31;
pub static G_IO_FLAG_GET_MASK: c_uint = 31;
pub static G_IO_FLAG_SET_MASK: c_uint = 3;
pub struct Struct__GIOChannel {
    ref_count: gint,
    funcs: *mut GIOFuncs,
    encoding: *mut gchar,
    read_cd: GIConv,
    write_cd: GIConv,
    line_term: *mut gchar,
    line_term_len: guint,
    buf_size: gsize,
    read_buf: *mut GString,
    encoded_read_buf: *mut GString,
    write_buf: *mut GString,
    partial_write_buf: [gchar, ..6u],
    use_buffer: guint,
    do_encode: guint,
    close_on_unref: guint,
    is_readable: guint,
    is_writeable: guint,
    is_seekable: guint,
    reserved1: gpointer,
    reserved2: gpointer,
}
pub type GIOFunc =
    extern "C" fn(arg1: *mut GIOChannel, arg2: GIOCondition, arg3: gpointer)
        -> gboolean;
pub struct Struct__GIOFuncs {
    io_read: extern "C" fn
                 (arg1: *mut GIOChannel, arg2: *mut gchar, arg3: gsize,
                  arg4: *mut gsize, arg5: *mut *mut GError) -> GIOStatus,
    io_write: extern "C" fn
                  (arg1: *mut GIOChannel, arg2: *gchar, arg3: gsize,
                   arg4: *mut gsize, arg5: *mut *mut GError) -> GIOStatus,
    io_seek: extern "C" fn
                 (arg1: *mut GIOChannel, arg2: gint64, arg3: GSeekType,
                  arg4: *mut *mut GError) -> GIOStatus,
    io_close: extern "C" fn(arg1: *mut GIOChannel, arg2: *mut *mut GError)
                  -> GIOStatus,
    io_create_watch: extern "C" fn(arg1: *mut GIOChannel, arg2: GIOCondition)
                         -> *mut GSource,
    io_free: extern "C" fn(arg1: *mut GIOChannel),
    io_set_flags: extern "C" fn
                      (arg1: *mut GIOChannel, arg2: GIOFlags,
                       arg3: *mut *mut GError) -> GIOStatus,
    io_get_flags: extern "C" fn(arg1: *mut GIOChannel) -> GIOFlags,
}
pub type GKeyFileError = c_uint;
pub static G_KEY_FILE_ERROR_UNKNOWN_ENCODING: c_uint = 0;
pub static G_KEY_FILE_ERROR_PARSE: c_uint = 1;
pub static G_KEY_FILE_ERROR_NOT_FOUND: c_uint = 2;
pub static G_KEY_FILE_ERROR_KEY_NOT_FOUND: c_uint = 3;
pub static G_KEY_FILE_ERROR_GROUP_NOT_FOUND: c_uint = 4;
pub static G_KEY_FILE_ERROR_INVALID_VALUE: c_uint = 5;
pub type Struct__GKeyFile = c_void;
pub type GKeyFile = Struct__GKeyFile;
pub type GKeyFileFlags = c_uint;
pub static G_KEY_FILE_NONE: c_uint = 0;
pub static G_KEY_FILE_KEEP_COMMENTS: c_uint = 1;
pub static G_KEY_FILE_KEEP_TRANSLATIONS: c_uint = 2;
pub type Struct__GMappedFile = c_void;
pub type GMappedFile = Struct__GMappedFile;
pub type GMarkupError = c_uint;
pub static G_MARKUP_ERROR_BAD_UTF8: c_uint = 0;
pub static G_MARKUP_ERROR_EMPTY: c_uint = 1;
pub static G_MARKUP_ERROR_PARSE: c_uint = 2;
pub static G_MARKUP_ERROR_UNKNOWN_ELEMENT: c_uint = 3;
pub static G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE: c_uint = 4;
pub static G_MARKUP_ERROR_INVALID_CONTENT: c_uint = 5;
pub static G_MARKUP_ERROR_MISSING_ATTRIBUTE: c_uint = 6;
pub type GMarkupParseFlags = c_uint;
pub static G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG: c_uint = 1;
pub static G_MARKUP_TREAT_CDATA_AS_TEXT: c_uint = 2;
pub static G_MARKUP_PREFIX_ERROR_POSITION: c_uint = 4;
pub type Struct__GMarkupParseContext = c_void;
pub type GMarkupParseContext = Struct__GMarkupParseContext;
pub type GMarkupParser = Struct__GMarkupParser;
pub struct Struct__GMarkupParser {
    start_element: extern "C" fn
                       (arg1: *mut GMarkupParseContext, arg2: *gchar,
                        arg3: *mut *gchar, arg4: *mut *gchar, arg5: gpointer,
                        arg6: *mut *mut GError),
    end_element: extern "C" fn
                     (arg1: *mut GMarkupParseContext, arg2: *gchar,
                      arg3: gpointer, arg4: *mut *mut GError),
    text: extern "C" fn
              (arg1: *mut GMarkupParseContext, arg2: *gchar, arg3: gsize,
               arg4: gpointer, arg5: *mut *mut GError),
    passthrough: extern "C" fn
                     (arg1: *mut GMarkupParseContext, arg2: *gchar,
                      arg3: gsize, arg4: gpointer, arg5: *mut *mut GError),
    error: extern "C" fn
               (arg1: *mut GMarkupParseContext, arg2: *mut GError,
                arg3: gpointer),
}
pub type GMarkupCollectType = c_uint;
pub static G_MARKUP_COLLECT_INVALID: c_uint = 0;
pub static G_MARKUP_COLLECT_STRING: c_uint = 1;
pub static G_MARKUP_COLLECT_STRDUP: c_uint = 2;
pub static G_MARKUP_COLLECT_BOOLEAN: c_uint = 3;
pub static G_MARKUP_COLLECT_TRISTATE: c_uint = 4;
pub static G_MARKUP_COLLECT_OPTIONAL: c_uint = 65536;
pub type GLogLevelFlags = c_int;
pub static G_LOG_FLAG_RECURSION: c_int = 1;
pub static G_LOG_FLAG_FATAL: c_int = 2;
pub static G_LOG_LEVEL_ERROR: c_int = 4;
pub static G_LOG_LEVEL_CRITICAL: c_int = 8;
pub static G_LOG_LEVEL_WARNING: c_int = 16;
pub static G_LOG_LEVEL_MESSAGE: c_int = 32;
pub static G_LOG_LEVEL_INFO: c_int = 64;
pub static G_LOG_LEVEL_DEBUG: c_int = 128;
pub static G_LOG_LEVEL_MASK: c_int = -4;
pub type GLogFunc =
    extern "C" fn
        (arg1: *gchar, arg2: GLogLevelFlags, arg3: *gchar, arg4: gpointer);
pub type GPrintFunc = extern "C" fn(arg1: *gchar);
pub type Struct__GOptionContext = c_void;
pub type GOptionContext = Struct__GOptionContext;
pub type Struct__GOptionGroup = c_void;
pub type GOptionGroup = Struct__GOptionGroup;
pub type GOptionEntry = Struct__GOptionEntry;
pub type GOptionFlags = c_uint;
pub static G_OPTION_FLAG_HIDDEN: c_uint = 1;
pub static G_OPTION_FLAG_IN_MAIN: c_uint = 2;
pub static G_OPTION_FLAG_REVERSE: c_uint = 4;
pub static G_OPTION_FLAG_NO_ARG: c_uint = 8;
pub static G_OPTION_FLAG_FILENAME: c_uint = 16;
pub static G_OPTION_FLAG_OPTIONAL_ARG: c_uint = 32;
pub static G_OPTION_FLAG_NOALIAS: c_uint = 64;
pub type GOptionArg = c_uint;
pub static G_OPTION_ARG_NONE: c_uint = 0;
pub static G_OPTION_ARG_STRING: c_uint = 1;
pub static G_OPTION_ARG_INT: c_uint = 2;
pub static G_OPTION_ARG_CALLBACK: c_uint = 3;
pub static G_OPTION_ARG_FILENAME: c_uint = 4;
pub static G_OPTION_ARG_STRING_ARRAY: c_uint = 5;
pub static G_OPTION_ARG_FILENAME_ARRAY: c_uint = 6;
pub static G_OPTION_ARG_DOUBLE: c_uint = 7;
pub static G_OPTION_ARG_INT64: c_uint = 8;
pub type GOptionArgFunc =
    extern "C" fn
        (arg1: *gchar, arg2: *gchar, arg3: gpointer, arg4: *mut *mut GError)
        -> gboolean;
pub type GOptionParseFunc =
    extern "C" fn
        (arg1: *mut GOptionContext, arg2: *mut GOptionGroup, arg3: gpointer,
         arg4: *mut *mut GError) -> gboolean;
pub type GOptionErrorFunc =
    extern "C" fn
        (arg1: *mut GOptionContext, arg2: *mut GOptionGroup, arg3: gpointer,
         arg4: *mut *mut GError);
pub type GOptionError = c_uint;
pub static G_OPTION_ERROR_UNKNOWN_OPTION: c_uint = 0;
pub static G_OPTION_ERROR_BAD_VALUE: c_uint = 1;
pub static G_OPTION_ERROR_FAILED: c_uint = 2;
pub struct Struct__GOptionEntry {
    long_name: *gchar,
    short_name: gchar,
    flags: gint,
    arg: GOptionArg,
    arg_data: gpointer,
    description: *gchar,
    arg_description: *gchar,
}
pub type Struct__GPatternSpec = c_void;
pub type GPatternSpec = Struct__GPatternSpec;
pub type GQueue = Struct__GQueue;
pub struct Struct__GQueue {
    head: *mut GList,
    tail: *mut GList,
    length: guint,
}
pub type Struct__GRand = c_void;
pub type GRand = Struct__GRand;
pub type GRegexError = c_uint;
pub static G_REGEX_ERROR_COMPILE: c_uint = 0;
pub static G_REGEX_ERROR_OPTIMIZE: c_uint = 1;
pub static G_REGEX_ERROR_REPLACE: c_uint = 2;
pub static G_REGEX_ERROR_MATCH: c_uint = 3;
pub static G_REGEX_ERROR_INTERNAL: c_uint = 4;
pub static G_REGEX_ERROR_STRAY_BACKSLASH: c_uint = 101;
pub static G_REGEX_ERROR_MISSING_CONTROL_CHAR: c_uint = 102;
pub static G_REGEX_ERROR_UNRECOGNIZED_ESCAPE: c_uint = 103;
pub static G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER: c_uint = 104;
pub static G_REGEX_ERROR_QUANTIFIER_TOO_BIG: c_uint = 105;
pub static G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS: c_uint = 106;
pub static G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS: c_uint = 107;
pub static G_REGEX_ERROR_RANGE_OUT_OF_ORDER: c_uint = 108;
pub static G_REGEX_ERROR_NOTHING_TO_REPEAT: c_uint = 109;
pub static G_REGEX_ERROR_UNRECOGNIZED_CHARACTER: c_uint = 112;
pub static G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS: c_uint = 113;
pub static G_REGEX_ERROR_UNMATCHED_PARENTHESIS: c_uint = 114;
pub static G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE: c_uint = 115;
pub static G_REGEX_ERROR_UNTERMINATED_COMMENT: c_uint = 118;
pub static G_REGEX_ERROR_EXPRESSION_TOO_LARGE: c_uint = 120;
pub static G_REGEX_ERROR_MEMORY_ERROR: c_uint = 121;
pub static G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND: c_uint = 125;
pub static G_REGEX_ERROR_MALFORMED_CONDITION: c_uint = 126;
pub static G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES: c_uint = 127;
pub static G_REGEX_ERROR_ASSERTION_EXPECTED: c_uint = 128;
pub static G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME: c_uint = 130;
pub static G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED: c_uint = 131;
pub static G_REGEX_ERROR_HEX_CODE_TOO_LARGE: c_uint = 134;
pub static G_REGEX_ERROR_INVALID_CONDITION: c_uint = 135;
pub static G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND: c_uint = 136;
pub static G_REGEX_ERROR_INFINITE_LOOP: c_uint = 140;
pub static G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR: c_uint = 142;
pub static G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME: c_uint = 143;
pub static G_REGEX_ERROR_MALFORMED_PROPERTY: c_uint = 146;
pub static G_REGEX_ERROR_UNKNOWN_PROPERTY: c_uint = 147;
pub static G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG: c_uint = 148;
pub static G_REGEX_ERROR_TOO_MANY_SUBPATTERNS: c_uint = 149;
pub static G_REGEX_ERROR_INVALID_OCTAL_VALUE: c_uint = 151;
pub static G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE: c_uint = 154;
pub static G_REGEX_ERROR_DEFINE_REPETION: c_uint = 155;
pub static G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS: c_uint = 156;
pub static G_REGEX_ERROR_MISSING_BACK_REFERENCE: c_uint = 157;
pub static G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE: c_uint = 158;
pub static G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN: c_uint
           =
    159;
pub static G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB: c_uint = 160;
pub static G_REGEX_ERROR_NUMBER_TOO_BIG: c_uint = 161;
pub static G_REGEX_ERROR_MISSING_SUBPATTERN_NAME: c_uint = 162;
pub static G_REGEX_ERROR_MISSING_DIGIT: c_uint = 163;
pub static G_REGEX_ERROR_INVALID_DATA_CHARACTER: c_uint = 164;
pub static G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME: c_uint = 165;
pub static G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED: c_uint =
    166;
pub static G_REGEX_ERROR_INVALID_CONTROL_CHAR: c_uint = 168;
pub static G_REGEX_ERROR_MISSING_NAME: c_uint = 169;
pub static G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS: c_uint = 171;
pub static G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES: c_uint = 172;
pub static G_REGEX_ERROR_NAME_TOO_LONG: c_uint = 175;
pub static G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE: c_uint = 176;
pub type GRegexCompileFlags = c_uint;
pub static G_REGEX_CASELESS: c_uint = 1;
pub static G_REGEX_MULTILINE: c_uint = 2;
pub static G_REGEX_DOTALL: c_uint = 4;
pub static G_REGEX_EXTENDED: c_uint = 8;
pub static G_REGEX_ANCHORED: c_uint = 16;
pub static G_REGEX_DOLLAR_ENDONLY: c_uint = 32;
pub static G_REGEX_UNGREEDY: c_uint = 512;
pub static G_REGEX_RAW: c_uint = 2048;
pub static G_REGEX_NO_AUTO_CAPTURE: c_uint = 4096;
pub static G_REGEX_OPTIMIZE: c_uint = 8192;
pub static G_REGEX_FIRSTLINE: c_uint = 262144;
pub static G_REGEX_DUPNAMES: c_uint = 524288;
pub static G_REGEX_NEWLINE_CR: c_uint = 1048576;
pub static G_REGEX_NEWLINE_LF: c_uint = 2097152;
pub static G_REGEX_NEWLINE_CRLF: c_uint = 3145728;
pub static G_REGEX_NEWLINE_ANYCRLF: c_uint = 5242880;
pub static G_REGEX_BSR_ANYCRLF: c_uint = 8388608;
pub static G_REGEX_JAVASCRIPT_COMPAT: c_uint = 33554432;
pub type GRegexMatchFlags = c_uint;
pub static G_REGEX_MATCH_ANCHORED: c_uint = 16;
pub static G_REGEX_MATCH_NOTBOL: c_uint = 128;
pub static G_REGEX_MATCH_NOTEOL: c_uint = 256;
pub static G_REGEX_MATCH_NOTEMPTY: c_uint = 1024;
pub static G_REGEX_MATCH_PARTIAL: c_uint = 32768;
pub static G_REGEX_MATCH_NEWLINE_CR: c_uint = 1048576;
pub static G_REGEX_MATCH_NEWLINE_LF: c_uint = 2097152;
pub static G_REGEX_MATCH_NEWLINE_CRLF: c_uint = 3145728;
pub static G_REGEX_MATCH_NEWLINE_ANY: c_uint = 4194304;
pub static G_REGEX_MATCH_NEWLINE_ANYCRLF: c_uint = 5242880;
pub static G_REGEX_MATCH_BSR_ANYCRLF: c_uint = 8388608;
pub static G_REGEX_MATCH_BSR_ANY: c_uint = 16777216;
pub static G_REGEX_MATCH_PARTIAL_SOFT: c_uint = 32768;
pub static G_REGEX_MATCH_PARTIAL_HARD: c_uint = 134217728;
pub static G_REGEX_MATCH_NOTEMPTY_ATSTART: c_uint = 268435456;
pub type Struct__GRegex = c_void;
pub type GRegex = Struct__GRegex;
pub type Struct__GMatchInfo = c_void;
pub type GMatchInfo = Struct__GMatchInfo;
pub type GRegexEvalCallback =
    extern "C" fn(arg1: *GMatchInfo, arg2: *mut GString, arg3: gpointer)
        -> gboolean;
pub type GScanner = Struct__GScanner;
pub type GScannerConfig = Struct__GScannerConfig;
pub type GTokenValue = Union__GTokenValue;
pub type GScannerMsgFunc =
    extern "C" fn(arg1: *mut GScanner, arg2: *mut gchar, arg3: gboolean);
pub type GErrorType = c_uint;
pub static G_ERR_UNKNOWN: c_uint = 0;
pub static G_ERR_UNEXP_EOF: c_uint = 1;
pub static G_ERR_UNEXP_EOF_IN_STRING: c_uint = 2;
pub static G_ERR_UNEXP_EOF_IN_COMMENT: c_uint = 3;
pub static G_ERR_NON_DIGIT_IN_CONST: c_uint = 4;
pub static G_ERR_DIGIT_RADIX: c_uint = 5;
pub static G_ERR_FLOAT_RADIX: c_uint = 6;
pub static G_ERR_FLOAT_MALFORMED: c_uint = 7;
pub type GTokenType = c_uint;
pub static G_TOKEN_EOF: c_uint = 0;
pub static G_TOKEN_LEFT_PAREN: c_uint = 40;
pub static G_TOKEN_RIGHT_PAREN: c_uint = 41;
pub static G_TOKEN_LEFT_CURLY: c_uint = 123;
pub static G_TOKEN_RIGHT_CURLY: c_uint = 125;
pub static G_TOKEN_LEFT_BRACE: c_uint = 91;
pub static G_TOKEN_RIGHT_BRACE: c_uint = 93;
pub static G_TOKEN_EQUAL_SIGN: c_uint = 61;
pub static G_TOKEN_COMMA: c_uint = 44;
pub static G_TOKEN_NONE: c_uint = 256;
pub static G_TOKEN_ERROR: c_uint = 257;
pub static G_TOKEN_CHAR: c_uint = 258;
pub static G_TOKEN_BINARY: c_uint = 259;
pub static G_TOKEN_OCTAL: c_uint = 260;
pub static G_TOKEN_INT: c_uint = 261;
pub static G_TOKEN_HEX: c_uint = 262;
pub static G_TOKEN_FLOAT: c_uint = 263;
pub static G_TOKEN_STRING: c_uint = 264;
pub static G_TOKEN_SYMBOL: c_uint = 265;
pub static G_TOKEN_IDENTIFIER: c_uint = 266;
pub static G_TOKEN_IDENTIFIER_NULL: c_uint = 267;
pub static G_TOKEN_COMMENT_SINGLE: c_uint = 268;
pub static G_TOKEN_COMMENT_MULTI: c_uint = 269;
pub static G_TOKEN_LAST: c_uint = 270;
pub struct Union__GTokenValue {
    data: [u64, ..1u],
}
impl Union__GTokenValue {
    pub fn v_symbol(&mut self) -> *mut gpointer {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn v_identifier(&mut self) -> *mut *mut gchar {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn v_binary(&mut self) -> *mut gulong {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn v_octal(&mut self) -> *mut gulong {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn v_int(&mut self) -> *mut gulong {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn v_int64(&mut self) -> *mut guint64 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn v_float(&mut self) -> *mut gdouble {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn v_hex(&mut self) -> *mut gulong {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn v_string(&mut self) -> *mut *mut gchar {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn v_comment(&mut self) -> *mut *mut gchar {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn v_char(&mut self) -> *mut guchar {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn v_error(&mut self) -> *mut guint {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct__GScannerConfig {
    cset_skip_characters: *mut gchar,
    cset_identifier_first: *mut gchar,
    cset_identifier_nth: *mut gchar,
    cpair_comment_single: *mut gchar,
    case_sensitive: guint,
    skip_comment_multi: guint,
    skip_comment_single: guint,
    scan_comment_multi: guint,
    scan_identifier: guint,
    scan_identifier_1char: guint,
    scan_identifier_NULL: guint,
    scan_symbols: guint,
    scan_binary: guint,
    scan_octal: guint,
    scan_float: guint,
    scan_hex: guint,
    scan_hex_dollar: guint,
    scan_string_sq: guint,
    scan_string_dq: guint,
    numbers_2_int: guint,
    int_2_float: guint,
    identifier_2_string: guint,
    char_2_token: guint,
    symbol_2_token: guint,
    scope_0_fallback: guint,
    store_int64: guint,
    padding_dummy: guint,
}
pub struct Struct__GScanner {
    user_data: gpointer,
    max_parse_errors: guint,
    parse_errors: guint,
    input_name: *gchar,
    qdata: *mut GData,
    config: *mut GScannerConfig,
    token: GTokenType,
    value: GTokenValue,
    line: guint,
    position: guint,
    next_token: GTokenType,
    next_value: GTokenValue,
    next_line: guint,
    next_position: guint,
    symbol_table: *mut GHashTable,
    input_fd: gint,
    text: *gchar,
    text_end: *gchar,
    buffer: *mut gchar,
    scope_id: guint,
    msg_handler: GScannerMsgFunc,
}
pub type Struct__GSequence = c_void;
pub type GSequence = Struct__GSequence;
pub type Struct__GSequenceNode = c_void;
pub type GSequenceIter = Struct__GSequenceNode;
pub type GSequenceIterCompareFunc =
    extern "C" fn
        (arg1: *mut GSequenceIter, arg2: *mut GSequenceIter, arg3: gpointer)
        -> gint;
pub type GShellError = c_uint;
pub static G_SHELL_ERROR_BAD_QUOTING: c_uint = 0;
pub static G_SHELL_ERROR_EMPTY_STRING: c_uint = 1;
pub static G_SHELL_ERROR_FAILED: c_uint = 2;
pub type GSliceConfig = c_uint;
pub static G_SLICE_CONFIG_ALWAYS_MALLOC: c_uint = 1;
pub static G_SLICE_CONFIG_BYPASS_MAGAZINES: c_uint = 2;
pub static G_SLICE_CONFIG_WORKING_SET_MSECS: c_uint = 3;
pub static G_SLICE_CONFIG_COLOR_INCREMENT: c_uint = 4;
pub static G_SLICE_CONFIG_CHUNK_SIZES: c_uint = 5;
pub static G_SLICE_CONFIG_CONTENTION_COUNTER: c_uint = 6;
pub type GSpawnError = c_uint;
pub static G_SPAWN_ERROR_FORK: c_uint = 0;
pub static G_SPAWN_ERROR_READ: c_uint = 1;
pub static G_SPAWN_ERROR_CHDIR: c_uint = 2;
pub static G_SPAWN_ERROR_ACCES: c_uint = 3;
pub static G_SPAWN_ERROR_PERM: c_uint = 4;
pub static G_SPAWN_ERROR_TOO_BIG: c_uint = 5;
pub static G_SPAWN_ERROR_2BIG: c_uint = 5;
pub static G_SPAWN_ERROR_NOEXEC: c_uint = 6;
pub static G_SPAWN_ERROR_NAMETOOLONG: c_uint = 7;
pub static G_SPAWN_ERROR_NOENT: c_uint = 8;
pub static G_SPAWN_ERROR_NOMEM: c_uint = 9;
pub static G_SPAWN_ERROR_NOTDIR: c_uint = 10;
pub static G_SPAWN_ERROR_LOOP: c_uint = 11;
pub static G_SPAWN_ERROR_TXTBUSY: c_uint = 12;
pub static G_SPAWN_ERROR_IO: c_uint = 13;
pub static G_SPAWN_ERROR_NFILE: c_uint = 14;
pub static G_SPAWN_ERROR_MFILE: c_uint = 15;
pub static G_SPAWN_ERROR_INVAL: c_uint = 16;
pub static G_SPAWN_ERROR_ISDIR: c_uint = 17;
pub static G_SPAWN_ERROR_LIBBAD: c_uint = 18;
pub static G_SPAWN_ERROR_FAILED: c_uint = 19;
pub type GSpawnChildSetupFunc = extern "C" fn(arg1: gpointer);
pub type GSpawnFlags = c_uint;
pub static G_SPAWN_DEFAULT: c_uint = 0;
pub static G_SPAWN_LEAVE_DESCRIPTORS_OPEN: c_uint = 1;
pub static G_SPAWN_DO_NOT_REAP_CHILD: c_uint = 2;
pub static G_SPAWN_SEARCH_PATH: c_uint = 4;
pub static G_SPAWN_STDOUT_TO_DEV_NULL: c_uint = 8;
pub static G_SPAWN_STDERR_TO_DEV_NULL: c_uint = 16;
pub static G_SPAWN_CHILD_INHERITS_STDIN: c_uint = 32;
pub static G_SPAWN_FILE_AND_ARGV_ZERO: c_uint = 64;
pub static G_SPAWN_SEARCH_PATH_FROM_ENVP: c_uint = 128;
pub type GAsciiType = c_uint;
pub static G_ASCII_ALNUM: c_uint = 1;
pub static G_ASCII_ALPHA: c_uint = 2;
pub static G_ASCII_CNTRL: c_uint = 4;
pub static G_ASCII_DIGIT: c_uint = 8;
pub static G_ASCII_GRAPH: c_uint = 16;
pub static G_ASCII_LOWER: c_uint = 32;
pub static G_ASCII_PRINT: c_uint = 64;
pub static G_ASCII_PUNCT: c_uint = 128;
pub static G_ASCII_SPACE: c_uint = 256;
pub static G_ASCII_UPPER: c_uint = 512;
pub static G_ASCII_XDIGIT: c_uint = 1024;
pub type Struct__GStringChunk = c_void;
pub type GStringChunk = Struct__GStringChunk;
pub type Struct_GTestCase = c_void;
pub type GTestCase = Struct_GTestCase;
pub type Struct_GTestSuite = c_void;
pub type GTestSuite = Struct_GTestSuite;
pub type GTestFunc = extern "C" fn();
pub type GTestDataFunc = extern "C" fn(arg1: gconstpointer);
pub type GTestFixtureFunc =
    extern "C" fn(arg1: gpointer, arg2: gconstpointer);
pub type GTestTrapFlags = c_uint;
pub static G_TEST_TRAP_SILENCE_STDOUT: c_uint = 128;
pub static G_TEST_TRAP_SILENCE_STDERR: c_uint = 256;
pub static G_TEST_TRAP_INHERIT_STDIN: c_uint = 512;
pub type GTestSubprocessFlags = c_uint;
pub static G_TEST_SUBPROCESS_INHERIT_STDIN: c_uint = 1;
pub static G_TEST_SUBPROCESS_INHERIT_STDOUT: c_uint = 2;
pub static G_TEST_SUBPROCESS_INHERIT_STDERR: c_uint = 4;
pub struct GTestConfig {
    test_initialized: gboolean,
    test_quick: gboolean,
    test_perf: gboolean,
    test_verbose: gboolean,
    test_quiet: gboolean,
    test_undefined: gboolean,
}
pub type GTestLogType = c_uint;
pub static G_TEST_LOG_NONE: c_uint = 0;
pub static G_TEST_LOG_ERROR: c_uint = 1;
pub static G_TEST_LOG_START_BINARY: c_uint = 2;
pub static G_TEST_LOG_LIST_CASE: c_uint = 3;
pub static G_TEST_LOG_SKIP_CASE: c_uint = 4;
pub static G_TEST_LOG_START_CASE: c_uint = 5;
pub static G_TEST_LOG_STOP_CASE: c_uint = 6;
pub static G_TEST_LOG_MIN_RESULT: c_uint = 7;
pub static G_TEST_LOG_MAX_RESULT: c_uint = 8;
pub static G_TEST_LOG_MESSAGE: c_uint = 9;
pub static G_TEST_LOG_START_SUITE: c_uint = 10;
pub static G_TEST_LOG_STOP_SUITE: c_uint = 11;
pub struct GTestLogMsg {
    log_type: GTestLogType,
    n_strings: guint,
    strings: *mut *mut gchar,
    n_nums: guint,
    nums: *mut c_double,
}
pub struct GTestLogBuffer {
    data: *mut GString,
    msgs: *mut GSList,
}
pub type GTestLogFatalFunc =
    extern "C" fn
        (arg1: *gchar, arg2: GLogLevelFlags, arg3: *gchar, arg4: gpointer)
        -> gboolean;
pub type GTestFileType = c_uint;
pub static G_TEST_DIST: c_uint = 0;
pub static G_TEST_BUILT: c_uint = 1;
pub type GThreadPool = Struct__GThreadPool;
pub struct Struct__GThreadPool {
    func: GFunc,
    user_data: gpointer,
    exclusive: gboolean,
}
pub type Struct__GTimer = c_void;
pub type GTimer = Struct__GTimer;
pub type GTrashStack = Struct__GTrashStack;
pub struct Struct__GTrashStack {
    next: *mut GTrashStack,
}
pub type Struct__GTree = c_void;
pub type GTree = Struct__GTree;
pub type GTraverseFunc =
    extern "C" fn(arg1: gpointer, arg2: gpointer, arg3: gpointer) -> gboolean;
pub type Struct__GVariantType = c_void;
pub type GVariantType = Struct__GVariantType;
pub type Struct__GVariant = c_void;
pub type GVariant = Struct__GVariant;
pub type GVariantClass = c_uint;
pub static G_VARIANT_CLASS_BOOLEAN: c_uint = 98;
pub static G_VARIANT_CLASS_BYTE: c_uint = 121;
pub static G_VARIANT_CLASS_INT16: c_uint = 110;
pub static G_VARIANT_CLASS_UINT16: c_uint = 113;
pub static G_VARIANT_CLASS_INT32: c_uint = 105;
pub static G_VARIANT_CLASS_UINT32: c_uint = 117;
pub static G_VARIANT_CLASS_INT64: c_uint = 120;
pub static G_VARIANT_CLASS_UINT64: c_uint = 116;
pub static G_VARIANT_CLASS_HANDLE: c_uint = 104;
pub static G_VARIANT_CLASS_DOUBLE: c_uint = 100;
pub static G_VARIANT_CLASS_STRING: c_uint = 115;
pub static G_VARIANT_CLASS_OBJECT_PATH: c_uint = 111;
pub static G_VARIANT_CLASS_SIGNATURE: c_uint = 103;
pub static G_VARIANT_CLASS_VARIANT: c_uint = 118;
pub static G_VARIANT_CLASS_MAYBE: c_uint = 109;
pub static G_VARIANT_CLASS_ARRAY: c_uint = 97;
pub static G_VARIANT_CLASS_TUPLE: c_uint = 40;
pub static G_VARIANT_CLASS_DICT_ENTRY: c_uint = 123;
pub type GVariantIter = Struct__GVariantIter;
pub struct Struct__GVariantIter {
    x: [gsize, ..16u],
}
pub type GVariantBuilder = Struct__GVariantBuilder;
pub struct Struct__GVariantBuilder {
    x: [gsize, ..16u],
}
pub type GVariantParseError = c_uint;
pub static G_VARIANT_PARSE_ERROR_FAILED: c_uint = 0;
pub static G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED: c_uint = 1;
pub static G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE: c_uint = 2;
pub static G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED: c_uint = 3;
pub static G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END: c_uint = 4;
pub static G_VARIANT_PARSE_ERROR_INVALID_CHARACTER: c_uint = 5;
pub static G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING: c_uint = 6;
pub static G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH: c_uint = 7;
pub static G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE: c_uint = 8;
pub static G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING: c_uint = 9;
pub static G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE: c_uint = 10;
pub static G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE: c_uint = 11;
pub static G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG: c_uint = 12;
pub static G_VARIANT_PARSE_ERROR_TYPE_ERROR: c_uint = 13;
pub static G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN: c_uint = 14;
pub static G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD: c_uint = 15;
pub static G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT: c_uint = 16;
pub static G_VARIANT_PARSE_ERROR_VALUE_EXPECTED: c_uint = 17;
pub type Struct__GAllocator = c_void;
pub type GAllocator = Struct__GAllocator;
pub type Struct__GMemChunk = c_void;
pub type GMemChunk = Struct__GMemChunk;
pub type Struct__GCache = c_void;
pub type GCache = Struct__GCache;
pub type GCacheNewFunc = extern "C" fn(arg1: gpointer) -> gpointer;
pub type GCacheDupFunc = extern "C" fn(arg1: gpointer) -> gpointer;
pub type GCacheDestroyFunc = extern "C" fn(arg1: gpointer);
pub type GCompletion = Struct__GCompletion;
pub type GCompletionFunc = extern "C" fn(arg1: gpointer) -> *mut gchar;
pub type GCompletionStrncmpFunc =
    extern "C" fn(arg1: *gchar, arg2: *gchar, arg3: gsize) -> gint;
pub struct Struct__GCompletion {
    items: *mut GList,
    func: GCompletionFunc,
    prefix: *mut gchar,
    cache: *mut GList,
    strncmp_func: GCompletionStrncmpFunc,
}
pub type Struct__GRelation = c_void;
pub type GRelation = Struct__GRelation;
pub type GTuples = Struct__GTuples;
pub struct Struct__GTuples {
    len: guint,
}
pub type GThreadPriority = c_uint;
pub static G_THREAD_PRIORITY_LOW: c_uint = 0;
pub static G_THREAD_PRIORITY_NORMAL: c_uint = 1;
pub static G_THREAD_PRIORITY_HIGH: c_uint = 2;
pub static G_THREAD_PRIORITY_URGENT: c_uint = 3;
pub struct Struct__GThread {
    func: GThreadFunc,
    data: gpointer,
    joinable: gboolean,
    priority: GThreadPriority,
}
pub type GThreadFunctions = Struct__GThreadFunctions;
pub struct Struct__GThreadFunctions {
    mutex_new: extern "C" fn() -> *mut GMutex,
    mutex_lock: extern "C" fn(arg1: *mut GMutex),
    mutex_trylock: extern "C" fn(arg1: *mut GMutex) -> gboolean,
    mutex_unlock: extern "C" fn(arg1: *mut GMutex),
    mutex_free: extern "C" fn(arg1: *mut GMutex),
    cond_new: extern "C" fn() -> *mut GCond,
    cond_signal: extern "C" fn(arg1: *mut GCond),
    cond_broadcast: extern "C" fn(arg1: *mut GCond),
    cond_wait: extern "C" fn(arg1: *mut GCond, arg2: *mut GMutex),
    cond_timed_wait: extern "C" fn
                         (arg1: *mut GCond, arg2: *mut GMutex,
                          arg3: *mut GTimeVal) -> gboolean,
    cond_free: extern "C" fn(arg1: *mut GCond),
    private_new: extern "C" fn(arg1: GDestroyNotify) -> *mut GPrivate,
    private_get: extern "C" fn(arg1: *mut GPrivate) -> gpointer,
    private_set: extern "C" fn(arg1: *mut GPrivate, arg2: gpointer),
    thread_create: extern "C" fn
                       (arg1: GThreadFunc, arg2: gpointer, arg3: gulong,
                        arg4: gboolean, arg5: gboolean, arg6: GThreadPriority,
                        arg7: gpointer, arg8: *mut *mut GError),
    thread_yield: extern "C" fn(),
    thread_join: extern "C" fn(arg1: gpointer),
    thread_exit: extern "C" fn(),
    thread_set_priority: extern "C" fn(arg1: gpointer, arg2: GThreadPriority),
    thread_self: extern "C" fn(arg1: gpointer),
    thread_equal: extern "C" fn(arg1: gpointer, arg2: gpointer) -> gboolean,
}
pub struct Struct_sched_param {
    __sched_priority: c_int,
}
pub struct Struct___sched_param {
    __sched_priority: c_int,
}
pub type __cpu_mask = c_ulong;
pub struct cpu_set_t {
    __bits: [__cpu_mask, ..16u],
}
pub type __jmp_buf = [c_long, ..8u];
pub type Enum_Unnamed28 = c_uint;
pub static PTHREAD_CREATE_JOINABLE: c_uint = 0;
pub static PTHREAD_CREATE_DETACHED: c_uint = 1;
pub type Enum_Unnamed29 = c_uint;
pub static PTHREAD_MUTEX_TIMED_NP: c_uint = 0;
pub static PTHREAD_MUTEX_RECURSIVE_NP: c_uint = 1;
pub static PTHREAD_MUTEX_ERRORCHECK_NP: c_uint = 2;
pub static PTHREAD_MUTEX_ADAPTIVE_NP: c_uint = 3;
pub static PTHREAD_MUTEX_NORMAL: c_uint = 0;
pub static PTHREAD_MUTEX_RECURSIVE: c_uint = 1;
pub static PTHREAD_MUTEX_ERRORCHECK: c_uint = 2;
pub static PTHREAD_MUTEX_DEFAULT: c_uint = 0;
pub type Enum_Unnamed30 = c_uint;
pub static PTHREAD_MUTEX_STALLED: c_uint = 0;
pub static PTHREAD_MUTEX_STALLED_NP: c_uint = 0;
pub static PTHREAD_MUTEX_ROBUST: c_uint = 1;
pub static PTHREAD_MUTEX_ROBUST_NP: c_uint = 1;
pub type Enum_Unnamed31 = c_uint;
pub static PTHREAD_PRIO_NONE: c_uint = 0;
pub static PTHREAD_PRIO_INHERIT: c_uint = 1;
pub static PTHREAD_PRIO_PROTECT: c_uint = 2;
pub type Enum_Unnamed32 = c_uint;
pub static PTHREAD_RWLOCK_PREFER_READER_NP: c_uint = 0;
pub static PTHREAD_RWLOCK_PREFER_WRITER_NP: c_uint = 1;
pub static PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: c_uint = 2;
pub static PTHREAD_RWLOCK_DEFAULT_NP: c_uint = 0;
pub type Enum_Unnamed33 = c_uint;
pub static PTHREAD_INHERIT_SCHED: c_uint = 0;
pub static PTHREAD_EXPLICIT_SCHED: c_uint = 1;
pub type Enum_Unnamed34 = c_uint;
pub static PTHREAD_SCOPE_SYSTEM: c_uint = 0;
pub static PTHREAD_SCOPE_PROCESS: c_uint = 1;
pub type Enum_Unnamed35 = c_uint;
pub static PTHREAD_PROCESS_PRIVATE: c_uint = 0;
pub static PTHREAD_PROCESS_SHARED: c_uint = 1;
pub struct Struct__pthread_cleanup_buffer {
    __routine: extern "C" fn(arg1: *mut c_void),
    __arg: *mut c_void,
    __canceltype: c_int,
    __prev: *mut Struct__pthread_cleanup_buffer,
}
pub type Enum_Unnamed36 = c_uint;
pub static PTHREAD_CANCEL_ENABLE: c_uint = 0;
pub static PTHREAD_CANCEL_DISABLE: c_uint = 1;
pub type Enum_Unnamed37 = c_uint;
pub static PTHREAD_CANCEL_DEFERRED: c_uint = 0;
pub static PTHREAD_CANCEL_ASYNCHRONOUS: c_uint = 1;
pub struct Struct_Unnamed38 {
    __cancel_jmp_buf: __jmp_buf,
    __mask_was_saved: c_int,
}
pub struct __pthread_unwind_buf_t {
    __cancel_jmp_buf: [Struct_Unnamed38, ..1u],
    __pad: [*mut c_void, ..4u],
}
pub struct Struct___pthread_cleanup_frame {
    __cancel_routine: extern "C" fn(arg1: *mut c_void),
    __cancel_arg: *mut c_void,
    __do_it: c_int,
    __cancel_type: c_int,
}
pub type Struct___jmp_buf_tag = c_void;
pub struct GStaticMutex {
    mutex: *mut GMutex,
    unused: pthread_mutex_t,
}
pub type GStaticRecMutex = Struct__GStaticRecMutex;
pub struct Struct__GStaticRecMutex {
    mutex: GStaticMutex,
    depth: guint,
    unused: Union_Unnamed39,
}
pub struct Union_Unnamed39 {
    data: [u64, ..1u],
}
impl Union_Unnamed39 {
    pub fn owner(&mut self) -> *mut pthread_t {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn dummy(&mut self) -> *mut gdouble {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub type GStaticRWLock = Struct__GStaticRWLock;
pub struct Struct__GStaticRWLock {
    mutex: GStaticMutex,
    read_cond: *mut GCond,
    write_cond: *mut GCond,
    read_counter: guint,
    have_writer: gboolean,
    want_to_read: guint,
    want_to_write: guint,
}
pub type GStaticPrivate = Struct__GStaticPrivate;
pub struct Struct__GStaticPrivate {
    index: guint,
}
pub type GType = gsize;
pub type GValue = Struct__GValue;
pub type Union__GTypeCValue = c_void;
pub type GTypeCValue = Union__GTypeCValue;
pub type Struct__GTypePlugin = c_void;
pub type GTypePlugin = Struct__GTypePlugin;
pub type GTypeClass = Struct__GTypeClass;
pub type GTypeInterface = Struct__GTypeInterface;
pub type GTypeInstance = Struct__GTypeInstance;
pub type GTypeInfo = Struct__GTypeInfo;
pub type GTypeFundamentalInfo = Struct__GTypeFundamentalInfo;
pub type GInterfaceInfo = Struct__GInterfaceInfo;
pub type GTypeValueTable = Struct__GTypeValueTable;
pub type GTypeQuery = Struct__GTypeQuery;
pub struct Struct__GTypeClass {
    g_type: GType,
}
pub struct Struct__GTypeInstance {
    g_class: *mut GTypeClass,
}
pub struct Struct__GTypeInterface {
    g_type: GType,
    g_instance_type: GType,
}
pub struct Struct__GTypeQuery {
    _type: GType,
    type_name: *gchar,
    class_size: guint,
    instance_size: guint,
}
pub type GTypeDebugFlags = c_uint;
pub static G_TYPE_DEBUG_NONE: c_uint = 0;
pub static G_TYPE_DEBUG_OBJECTS: c_uint = 1;
pub static G_TYPE_DEBUG_SIGNALS: c_uint = 2;
pub static G_TYPE_DEBUG_MASK: c_uint = 3;
pub type GBaseInitFunc = extern "C" fn(arg1: gpointer);
pub type GBaseFinalizeFunc = extern "C" fn(arg1: gpointer);
pub type GClassInitFunc = extern "C" fn(arg1: gpointer, arg2: gpointer);
pub type GClassFinalizeFunc = extern "C" fn(arg1: gpointer, arg2: gpointer);
pub type GInstanceInitFunc =
    extern "C" fn(arg1: *mut GTypeInstance, arg2: gpointer);
pub type GInterfaceInitFunc = extern "C" fn(arg1: gpointer, arg2: gpointer);
pub type GInterfaceFinalizeFunc =
    extern "C" fn(arg1: gpointer, arg2: gpointer);
pub type GTypeClassCacheFunc =
    extern "C" fn(arg1: gpointer, arg2: *mut GTypeClass) -> gboolean;
pub type GTypeInterfaceCheckFunc =
    extern "C" fn(arg1: gpointer, arg2: gpointer);
pub type GTypeFundamentalFlags = c_uint;
pub static G_TYPE_FLAG_CLASSED: c_uint = 1;
pub static G_TYPE_FLAG_INSTANTIATABLE: c_uint = 2;
pub static G_TYPE_FLAG_DERIVABLE: c_uint = 4;
pub static G_TYPE_FLAG_DEEP_DERIVABLE: c_uint = 8;
pub type GTypeFlags = c_uint;
pub static G_TYPE_FLAG_ABSTRACT: c_uint = 16;
pub static G_TYPE_FLAG_VALUE_ABSTRACT: c_uint = 32;
pub struct Struct__GTypeInfo {
    class_size: guint16,
    base_init: GBaseInitFunc,
    base_finalize: GBaseFinalizeFunc,
    class_init: GClassInitFunc,
    class_finalize: GClassFinalizeFunc,
    class_data: gconstpointer,
    instance_size: guint16,
    n_preallocs: guint16,
    instance_init: GInstanceInitFunc,
    value_table: *GTypeValueTable,
}
pub struct Struct__GTypeFundamentalInfo {
    type_flags: GTypeFundamentalFlags,
}
pub struct Struct__GInterfaceInfo {
    interface_init: GInterfaceInitFunc,
    interface_finalize: GInterfaceFinalizeFunc,
    interface_data: gpointer,
}
pub struct Struct__GTypeValueTable {
    value_init: extern "C" fn(arg1: *mut GValue),
    value_free: extern "C" fn(arg1: *mut GValue),
    value_copy: extern "C" fn(arg1: *GValue, arg2: *mut GValue),
    value_peek_pointer: extern "C" fn(arg1: *GValue) -> gpointer,
    collect_format: *gchar,
    collect_value: extern "C" fn
                       (arg1: *mut GValue, arg2: guint,
                        arg3: *mut GTypeCValue, arg4: guint) -> *mut gchar,
    lcopy_format: *gchar,
    lcopy_value: extern "C" fn
                     (arg1: *GValue, arg2: guint, arg3: *mut GTypeCValue,
                      arg4: guint) -> *mut gchar,
}
pub type GValueTransform = extern "C" fn(arg1: *GValue, arg2: *mut GValue);
pub struct Struct__GValue {
    g_type: GType,
    data: [Union_Unnamed40, ..2u],
}
pub struct Union_Unnamed40 {
    data: [u64, ..1u],
}
impl Union_Unnamed40 {
    pub fn v_int(&mut self) -> *mut gint {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn v_uint(&mut self) -> *mut guint {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn v_long(&mut self) -> *mut glong {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn v_ulong(&mut self) -> *mut gulong {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn v_int64(&mut self) -> *mut gint64 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn v_uint64(&mut self) -> *mut guint64 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn v_float(&mut self) -> *mut gfloat {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn v_double(&mut self) -> *mut gdouble {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn v_pointer(&mut self) -> *mut gpointer {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub type GParamFlags = c_int;
pub static G_PARAM_READABLE: c_int = 1;
pub static G_PARAM_WRITABLE: c_int = 2;
pub static G_PARAM_CONSTRUCT: c_int = 4;
pub static G_PARAM_CONSTRUCT_ONLY: c_int = 8;
pub static G_PARAM_LAX_VALIDATION: c_int = 16;
pub static G_PARAM_STATIC_NAME: c_int = 32;
pub static G_PARAM_PRIVATE: c_int = 32;
pub static G_PARAM_STATIC_NICK: c_int = 64;
pub static G_PARAM_STATIC_BLURB: c_int = 128;
pub static G_PARAM_DEPRECATED: c_int = -2147483648;
pub type GParamSpec = Struct__GParamSpec;
pub type GParamSpecClass = Struct__GParamSpecClass;
pub type GParameter = Struct__GParameter;
pub type Struct__GParamSpecPool = c_void;
pub type GParamSpecPool = Struct__GParamSpecPool;
pub struct Struct__GParamSpec {
    g_type_instance: GTypeInstance,
    name: *gchar,
    flags: GParamFlags,
    value_type: GType,
    owner_type: GType,
    _nick: *mut gchar,
    _blurb: *mut gchar,
    qdata: *mut GData,
    ref_count: guint,
    param_id: guint,
}
pub struct Struct__GParamSpecClass {
    g_type_class: GTypeClass,
    value_type: GType,
    finalize: extern "C" fn(arg1: *mut GParamSpec),
    value_set_default: extern "C" fn
                           (arg1: *mut GParamSpec, arg2: *mut GValue),
    value_validate: extern "C" fn(arg1: *mut GParamSpec, arg2: *mut GValue)
                        -> gboolean,
    values_cmp: extern "C" fn
                    (arg1: *mut GParamSpec, arg2: *GValue, arg3: *GValue)
                    -> gint,
    dummy: [gpointer, ..4u],
}
pub struct Struct__GParameter {
    name: *gchar,
    value: GValue,
}
pub type GParamSpecTypeInfo = Struct__GParamSpecTypeInfo;
pub struct Struct__GParamSpecTypeInfo {
    instance_size: guint16,
    n_preallocs: guint16,
    instance_init: extern "C" fn(arg1: *mut GParamSpec),
    value_type: GType,
    finalize: extern "C" fn(arg1: *mut GParamSpec),
    value_set_default: extern "C" fn
                           (arg1: *mut GParamSpec, arg2: *mut GValue),
    value_validate: extern "C" fn(arg1: *mut GParamSpec, arg2: *mut GValue)
                        -> gboolean,
    values_cmp: extern "C" fn
                    (arg1: *mut GParamSpec, arg2: *GValue, arg3: *GValue)
                    -> gint,
}
pub type GClosure = Struct__GClosure;
pub type GClosureNotifyData = Struct__GClosureNotifyData;
pub type GCallback = extern "C" fn();
pub type GClosureNotify = extern "C" fn(arg1: gpointer, arg2: *mut GClosure);
pub type GClosureMarshal =
    extern "C" fn
        (arg1: *mut GClosure, arg2: *mut GValue, arg3: guint, arg4: *GValue,
         arg5: gpointer, arg6: gpointer);
pub type GVaClosureMarshal =
    extern "C" fn
        (arg1: *mut GClosure, arg2: *mut GValue, arg3: gpointer,
         arg4: *mut __va_list_tag, arg5: gpointer, arg6: c_int,
         arg7: *mut GType);
pub type GCClosure = Struct__GCClosure;
pub struct Struct__GClosureNotifyData {
    data: gpointer,
    notify: GClosureNotify,
}
pub struct Struct__GClosure {
    ref_count: guint,
    meta_marshal_nouse: guint,
    n_guards: guint,
    n_fnotifiers: guint,
    n_inotifiers: guint,
    in_inotify: guint,
    floating: guint,
    derivative_flag: guint,
    in_marshal: guint,
    is_invalid: guint,
    marshal: extern "C" fn
                 (arg1: *mut GClosure, arg2: *mut GValue, arg3: guint,
                  arg4: *GValue, arg5: gpointer, arg6: gpointer),
    data: gpointer,
    notifiers: *mut GClosureNotifyData,
}
pub struct Struct__GCClosure {
    closure: GClosure,
    callback: gpointer,
}
pub type GSignalQuery = Struct__GSignalQuery;
pub type GSignalInvocationHint = Struct__GSignalInvocationHint;
pub type GSignalCMarshaller = GClosureMarshal;
pub type GSignalCVaMarshaller = GVaClosureMarshal;
pub type GSignalEmissionHook =
    extern "C" fn
        (arg1: *mut GSignalInvocationHint, arg2: guint, arg3: *GValue,
         arg4: gpointer) -> gboolean;
pub type GSignalAccumulator =
    extern "C" fn
        (arg1: *mut GSignalInvocationHint, arg2: *mut GValue, arg3: *GValue,
         arg4: gpointer) -> gboolean;
pub type GSignalFlags = c_uint;
pub static G_SIGNAL_RUN_FIRST: c_uint = 1;
pub static G_SIGNAL_RUN_LAST: c_uint = 2;
pub static G_SIGNAL_RUN_CLEANUP: c_uint = 4;
pub static G_SIGNAL_NO_RECURSE: c_uint = 8;
pub static G_SIGNAL_DETAILED: c_uint = 16;
pub static G_SIGNAL_ACTION: c_uint = 32;
pub static G_SIGNAL_NO_HOOKS: c_uint = 64;
pub static G_SIGNAL_MUST_COLLECT: c_uint = 128;
pub static G_SIGNAL_DEPRECATED: c_uint = 256;
pub type GConnectFlags = c_uint;
pub static G_CONNECT_AFTER: c_uint = 1;
pub static G_CONNECT_SWAPPED: c_uint = 2;
pub type GSignalMatchType = c_uint;
pub static G_SIGNAL_MATCH_ID: c_uint = 1;
pub static G_SIGNAL_MATCH_DETAIL: c_uint = 2;
pub static G_SIGNAL_MATCH_CLOSURE: c_uint = 4;
pub static G_SIGNAL_MATCH_FUNC: c_uint = 8;
pub static G_SIGNAL_MATCH_DATA: c_uint = 16;
pub static G_SIGNAL_MATCH_UNBLOCKED: c_uint = 32;
pub struct Struct__GSignalInvocationHint {
    signal_id: guint,
    detail: GQuark,
    run_type: GSignalFlags,
}
pub struct Struct__GSignalQuery {
    signal_id: guint,
    signal_name: *gchar,
    itype: GType,
    signal_flags: GSignalFlags,
    return_type: GType,
    n_params: guint,
    param_types: *GType,
}
pub type GStrv = *mut *mut gchar;
pub type GBoxedCopyFunc = extern "C" fn(arg1: gpointer) -> gpointer;
pub type GBoxedFreeFunc = extern "C" fn(arg1: gpointer);
pub type GObject = Struct__GObject;
pub type GObjectClass = Struct__GObjectClass;
pub type GInitiallyUnowned = Struct__GObject;
pub type GInitiallyUnownedClass = Struct__GObjectClass;
pub type GObjectConstructParam = Struct__GObjectConstructParam;
pub type GObjectGetPropertyFunc =
    extern "C" fn
        (arg1: *mut GObject, arg2: guint, arg3: *mut GValue,
         arg4: *mut GParamSpec);
pub type GObjectSetPropertyFunc =
    extern "C" fn
        (arg1: *mut GObject, arg2: guint, arg3: *GValue,
         arg4: *mut GParamSpec);
pub type GObjectFinalizeFunc = extern "C" fn(arg1: *mut GObject);
pub type GWeakNotify = extern "C" fn(arg1: gpointer, arg2: *mut GObject);
pub struct Struct__GObject {
    g_type_instance: GTypeInstance,
    ref_count: guint,
    qdata: *mut GData,
}
pub struct Struct__GObjectClass {
    g_type_class: GTypeClass,
    construct_properties: *mut GSList,
    constructor: extern "C" fn
                     (arg1: GType, arg2: guint,
                      arg3: *mut GObjectConstructParam) -> *mut GObject,
    set_property: extern "C" fn
                      (arg1: *mut GObject, arg2: guint, arg3: *GValue,
                       arg4: *mut GParamSpec),
    get_property: extern "C" fn
                      (arg1: *mut GObject, arg2: guint, arg3: *mut GValue,
                       arg4: *mut GParamSpec),
    dispose: extern "C" fn(arg1: *mut GObject),
    finalize: extern "C" fn(arg1: *mut GObject),
    dispatch_properties_changed: extern "C" fn
                                     (arg1: *mut GObject, arg2: guint,
                                      arg3: *mut *mut GParamSpec),
    notify: extern "C" fn(arg1: *mut GObject, arg2: *mut GParamSpec),
    constructed: extern "C" fn(arg1: *mut GObject),
    flags: gsize,
    pdummy: [gpointer, ..6u],
}
pub struct Struct__GObjectConstructParam {
    pspec: *mut GParamSpec,
    value: *mut GValue,
}
pub type GToggleNotify =
    extern "C" fn(arg1: gpointer, arg2: *mut GObject, arg3: gboolean);
pub struct Union_Unnamed41 {
    data: [u64, ..1u],
}
impl Union_Unnamed41 {
    pub fn p(&mut self) -> *mut gpointer {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct GWeakRef {
    _priv: Union_Unnamed41,
}
pub type Struct__GBinding = c_void;
pub type GBinding = Struct__GBinding;
pub type GBindingTransformFunc =
    extern "C" fn
        (arg1: *mut GBinding, arg2: *GValue, arg3: *mut GValue,
         arg4: gpointer) -> gboolean;
pub type GBindingFlags = c_uint;
pub static G_BINDING_DEFAULT: c_uint = 0;
pub static G_BINDING_BIDIRECTIONAL: c_uint = 1;
pub static G_BINDING_SYNC_CREATE: c_uint = 2;
pub static G_BINDING_INVERT_BOOLEAN: c_uint = 4;
pub type GEnumClass = Struct__GEnumClass;
pub type GFlagsClass = Struct__GFlagsClass;
pub type GEnumValue = Struct__GEnumValue;
pub type GFlagsValue = Struct__GFlagsValue;
pub struct Struct__GEnumClass {
    g_type_class: GTypeClass,
    minimum: gint,
    maximum: gint,
    n_values: guint,
    values: *mut GEnumValue,
}
pub struct Struct__GFlagsClass {
    g_type_class: GTypeClass,
    mask: guint,
    n_values: guint,
    values: *mut GFlagsValue,
}
pub struct Struct__GEnumValue {
    value: gint,
    value_name: *gchar,
    value_nick: *gchar,
}
pub struct Struct__GFlagsValue {
    value: guint,
    value_name: *gchar,
    value_nick: *gchar,
}
pub type GParamSpecChar = Struct__GParamSpecChar;
pub type GParamSpecUChar = Struct__GParamSpecUChar;
pub type GParamSpecBoolean = Struct__GParamSpecBoolean;
pub type GParamSpecInt = Struct__GParamSpecInt;
pub type GParamSpecUInt = Struct__GParamSpecUInt;
pub type GParamSpecLong = Struct__GParamSpecLong;
pub type GParamSpecULong = Struct__GParamSpecULong;
pub type GParamSpecInt64 = Struct__GParamSpecInt64;
pub type GParamSpecUInt64 = Struct__GParamSpecUInt64;
pub type GParamSpecUnichar = Struct__GParamSpecUnichar;
pub type GParamSpecEnum = Struct__GParamSpecEnum;
pub type GParamSpecFlags = Struct__GParamSpecFlags;
pub type GParamSpecFloat = Struct__GParamSpecFloat;
pub type GParamSpecDouble = Struct__GParamSpecDouble;
pub type GParamSpecString = Struct__GParamSpecString;
pub type GParamSpecParam = Struct__GParamSpecParam;
pub type GParamSpecBoxed = Struct__GParamSpecBoxed;
pub type GParamSpecPointer = Struct__GParamSpecPointer;
pub type GParamSpecValueArray = Struct__GParamSpecValueArray;
pub type GParamSpecObject = Struct__GParamSpecObject;
pub type GParamSpecOverride = Struct__GParamSpecOverride;
pub type GParamSpecGType = Struct__GParamSpecGType;
pub type GParamSpecVariant = Struct__GParamSpecVariant;
pub struct Struct__GParamSpecChar {
    parent_instance: GParamSpec,
    minimum: gint8,
    maximum: gint8,
    default_value: gint8,
}
pub struct Struct__GParamSpecUChar {
    parent_instance: GParamSpec,
    minimum: guint8,
    maximum: guint8,
    default_value: guint8,
}
pub struct Struct__GParamSpecBoolean {
    parent_instance: GParamSpec,
    default_value: gboolean,
}
pub struct Struct__GParamSpecInt {
    parent_instance: GParamSpec,
    minimum: gint,
    maximum: gint,
    default_value: gint,
}
pub struct Struct__GParamSpecUInt {
    parent_instance: GParamSpec,
    minimum: guint,
    maximum: guint,
    default_value: guint,
}
pub struct Struct__GParamSpecLong {
    parent_instance: GParamSpec,
    minimum: glong,
    maximum: glong,
    default_value: glong,
}
pub struct Struct__GParamSpecULong {
    parent_instance: GParamSpec,
    minimum: gulong,
    maximum: gulong,
    default_value: gulong,
}
pub struct Struct__GParamSpecInt64 {
    parent_instance: GParamSpec,
    minimum: gint64,
    maximum: gint64,
    default_value: gint64,
}
pub struct Struct__GParamSpecUInt64 {
    parent_instance: GParamSpec,
    minimum: guint64,
    maximum: guint64,
    default_value: guint64,
}
pub struct Struct__GParamSpecUnichar {
    parent_instance: GParamSpec,
    default_value: gunichar,
}
pub struct Struct__GParamSpecEnum {
    parent_instance: GParamSpec,
    enum_class: *mut GEnumClass,
    default_value: gint,
}
pub struct Struct__GParamSpecFlags {
    parent_instance: GParamSpec,
    flags_class: *mut GFlagsClass,
    default_value: guint,
}
pub struct Struct__GParamSpecFloat {
    parent_instance: GParamSpec,
    minimum: gfloat,
    maximum: gfloat,
    default_value: gfloat,
    epsilon: gfloat,
}
pub struct Struct__GParamSpecDouble {
    parent_instance: GParamSpec,
    minimum: gdouble,
    maximum: gdouble,
    default_value: gdouble,
    epsilon: gdouble,
}
pub struct Struct__GParamSpecString {
    parent_instance: GParamSpec,
    default_value: *mut gchar,
    cset_first: *mut gchar,
    cset_nth: *mut gchar,
    substitutor: gchar,
    null_fold_if_empty: guint,
    ensure_non_null: guint,
}
pub struct Struct__GParamSpecParam {
    parent_instance: GParamSpec,
}
pub struct Struct__GParamSpecBoxed {
    parent_instance: GParamSpec,
}
pub struct Struct__GParamSpecPointer {
    parent_instance: GParamSpec,
}
pub struct Struct__GParamSpecValueArray {
    parent_instance: GParamSpec,
    element_spec: *mut GParamSpec,
    fixed_n_elements: guint,
}
pub struct Struct__GParamSpecObject {
    parent_instance: GParamSpec,
}
pub struct Struct__GParamSpecOverride {
    parent_instance: GParamSpec,
    overridden: *mut GParamSpec,
}
pub struct Struct__GParamSpecGType {
    parent_instance: GParamSpec,
    is_a_type: GType,
}
pub struct Struct__GParamSpecVariant {
    parent_instance: GParamSpec,
    _type: *mut GVariantType,
    default_value: *mut GVariant,
    padding: [gpointer, ..4u],
}
pub type GTypeModule = Struct__GTypeModule;
pub type GTypeModuleClass = Struct__GTypeModuleClass;
pub struct Struct__GTypeModule {
    parent_instance: GObject,
    use_count: guint,
    type_infos: *mut GSList,
    interface_infos: *mut GSList,
    name: *mut gchar,
}
pub struct Struct__GTypeModuleClass {
    parent_class: GObjectClass,
    load: extern "C" fn(arg1: *mut GTypeModule) -> gboolean,
    unload: extern "C" fn(arg1: *mut GTypeModule),
    reserved1: extern "C" fn(),
    reserved2: extern "C" fn(),
    reserved3: extern "C" fn(),
    reserved4: extern "C" fn(),
}
pub type GTypePluginClass = Struct__GTypePluginClass;
pub type GTypePluginUse = extern "C" fn(arg1: *mut GTypePlugin);
pub type GTypePluginUnuse = extern "C" fn(arg1: *mut GTypePlugin);
pub type GTypePluginCompleteTypeInfo =
    extern "C" fn
        (arg1: *mut GTypePlugin, arg2: GType, arg3: *mut GTypeInfo,
         arg4: *mut GTypeValueTable);
pub type GTypePluginCompleteInterfaceInfo =
    extern "C" fn
        (arg1: *mut GTypePlugin, arg2: GType, arg3: GType,
         arg4: *mut GInterfaceInfo);
pub struct Struct__GTypePluginClass {
    base_iface: GTypeInterface,
    use_plugin: GTypePluginUse,
    unuse_plugin: GTypePluginUnuse,
    complete_type_info: GTypePluginCompleteTypeInfo,
    complete_interface_info: GTypePluginCompleteInterfaceInfo,
}
pub type GValueArray = Struct__GValueArray;
pub struct Struct__GValueArray {
    n_values: guint,
    values: *mut GValue,
    n_prealloced: guint,
}
pub type gchararray = *mut gchar;
pub type GAppInfoCreateFlags = c_uint;
pub static G_APP_INFO_CREATE_NONE: c_uint = 0;
pub static G_APP_INFO_CREATE_NEEDS_TERMINAL: c_uint = 1;
pub static G_APP_INFO_CREATE_SUPPORTS_URIS: c_uint = 2;
pub static G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION: c_uint = 4;
pub type GConverterFlags = c_uint;
pub static G_CONVERTER_NO_FLAGS: c_uint = 0;
pub static G_CONVERTER_INPUT_AT_END: c_uint = 1;
pub static G_CONVERTER_FLUSH: c_uint = 2;
pub type GConverterResult = c_uint;
pub static G_CONVERTER_ERROR: c_uint = 0;
pub static G_CONVERTER_CONVERTED: c_uint = 1;
pub static G_CONVERTER_FINISHED: c_uint = 2;
pub static G_CONVERTER_FLUSHED: c_uint = 3;
pub type GDataStreamByteOrder = c_uint;
pub static G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN: c_uint = 0;
pub static G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN: c_uint = 1;
pub static G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN: c_uint = 2;
pub type GDataStreamNewlineType = c_uint;
pub static G_DATA_STREAM_NEWLINE_TYPE_LF: c_uint = 0;
pub static G_DATA_STREAM_NEWLINE_TYPE_CR: c_uint = 1;
pub static G_DATA_STREAM_NEWLINE_TYPE_CR_LF: c_uint = 2;
pub static G_DATA_STREAM_NEWLINE_TYPE_ANY: c_uint = 3;
pub type GFileAttributeType = c_uint;
pub static G_FILE_ATTRIBUTE_TYPE_INVALID: c_uint = 0;
pub static G_FILE_ATTRIBUTE_TYPE_STRING: c_uint = 1;
pub static G_FILE_ATTRIBUTE_TYPE_BYTE_STRING: c_uint = 2;
pub static G_FILE_ATTRIBUTE_TYPE_BOOLEAN: c_uint = 3;
pub static G_FILE_ATTRIBUTE_TYPE_UINT32: c_uint = 4;
pub static G_FILE_ATTRIBUTE_TYPE_INT32: c_uint = 5;
pub static G_FILE_ATTRIBUTE_TYPE_UINT64: c_uint = 6;
pub static G_FILE_ATTRIBUTE_TYPE_INT64: c_uint = 7;
pub static G_FILE_ATTRIBUTE_TYPE_OBJECT: c_uint = 8;
pub static G_FILE_ATTRIBUTE_TYPE_STRINGV: c_uint = 9;
pub type GFileAttributeInfoFlags = c_uint;
pub static G_FILE_ATTRIBUTE_INFO_NONE: c_uint = 0;
pub static G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE: c_uint = 1;
pub static G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED: c_uint = 2;
pub type GFileAttributeStatus = c_uint;
pub static G_FILE_ATTRIBUTE_STATUS_UNSET: c_uint = 0;
pub static G_FILE_ATTRIBUTE_STATUS_SET: c_uint = 1;
pub static G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING: c_uint = 2;
pub type GFileQueryInfoFlags = c_uint;
pub static G_FILE_QUERY_INFO_NONE: c_uint = 0;
pub static G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS: c_uint = 1;
pub type GFileCreateFlags = c_uint;
pub static G_FILE_CREATE_NONE: c_uint = 0;
pub static G_FILE_CREATE_PRIVATE: c_uint = 1;
pub static G_FILE_CREATE_REPLACE_DESTINATION: c_uint = 2;
pub type GFileMeasureFlags = c_uint;
pub static G_FILE_MEASURE_NONE: c_uint = 0;
pub static G_FILE_MEASURE_REPORT_ANY_ERROR: c_uint = 2;
pub static G_FILE_MEASURE_APPARENT_SIZE: c_uint = 4;
pub static G_FILE_MEASURE_NO_XDEV: c_uint = 8;
pub type GMountMountFlags = c_uint;
pub static G_MOUNT_MOUNT_NONE: c_uint = 0;
pub type GMountUnmountFlags = c_uint;
pub static G_MOUNT_UNMOUNT_NONE: c_uint = 0;
pub static G_MOUNT_UNMOUNT_FORCE: c_uint = 1;
pub type GDriveStartFlags = c_uint;
pub static G_DRIVE_START_NONE: c_uint = 0;
pub type GDriveStartStopType = c_uint;
pub static G_DRIVE_START_STOP_TYPE_UNKNOWN: c_uint = 0;
pub static G_DRIVE_START_STOP_TYPE_SHUTDOWN: c_uint = 1;
pub static G_DRIVE_START_STOP_TYPE_NETWORK: c_uint = 2;
pub static G_DRIVE_START_STOP_TYPE_MULTIDISK: c_uint = 3;
pub static G_DRIVE_START_STOP_TYPE_PASSWORD: c_uint = 4;
pub type GFileCopyFlags = c_uint;
pub static G_FILE_COPY_NONE: c_uint = 0;
pub static G_FILE_COPY_OVERWRITE: c_uint = 1;
pub static G_FILE_COPY_BACKUP: c_uint = 2;
pub static G_FILE_COPY_NOFOLLOW_SYMLINKS: c_uint = 4;
pub static G_FILE_COPY_ALL_METADATA: c_uint = 8;
pub static G_FILE_COPY_NO_FALLBACK_FOR_MOVE: c_uint = 16;
pub static G_FILE_COPY_TARGET_DEFAULT_PERMS: c_uint = 32;
pub type GFileMonitorFlags = c_uint;
pub static G_FILE_MONITOR_NONE: c_uint = 0;
pub static G_FILE_MONITOR_WATCH_MOUNTS: c_uint = 1;
pub static G_FILE_MONITOR_SEND_MOVED: c_uint = 2;
pub static G_FILE_MONITOR_WATCH_HARD_LINKS: c_uint = 4;
pub type GFileType = c_uint;
pub static G_FILE_TYPE_UNKNOWN: c_uint = 0;
pub static G_FILE_TYPE_REGULAR: c_uint = 1;
pub static G_FILE_TYPE_DIRECTORY: c_uint = 2;
pub static G_FILE_TYPE_SYMBOLIC_LINK: c_uint = 3;
pub static G_FILE_TYPE_SPECIAL: c_uint = 4;
pub static G_FILE_TYPE_SHORTCUT: c_uint = 5;
pub static G_FILE_TYPE_MOUNTABLE: c_uint = 6;
pub type GFilesystemPreviewType = c_uint;
pub static G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS: c_uint = 0;
pub static G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL: c_uint = 1;
pub static G_FILESYSTEM_PREVIEW_TYPE_NEVER: c_uint = 2;
pub type GFileMonitorEvent = c_uint;
pub static G_FILE_MONITOR_EVENT_CHANGED: c_uint = 0;
pub static G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT: c_uint = 1;
pub static G_FILE_MONITOR_EVENT_DELETED: c_uint = 2;
pub static G_FILE_MONITOR_EVENT_CREATED: c_uint = 3;
pub static G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED: c_uint = 4;
pub static G_FILE_MONITOR_EVENT_PRE_UNMOUNT: c_uint = 5;
pub static G_FILE_MONITOR_EVENT_UNMOUNTED: c_uint = 6;
pub static G_FILE_MONITOR_EVENT_MOVED: c_uint = 7;
pub type GIOErrorEnum = c_uint;
pub static G_IO_ERROR_FAILED: c_uint = 0;
pub static G_IO_ERROR_NOT_FOUND: c_uint = 1;
pub static G_IO_ERROR_EXISTS: c_uint = 2;
pub static G_IO_ERROR_IS_DIRECTORY: c_uint = 3;
pub static G_IO_ERROR_NOT_DIRECTORY: c_uint = 4;
pub static G_IO_ERROR_NOT_EMPTY: c_uint = 5;
pub static G_IO_ERROR_NOT_REGULAR_FILE: c_uint = 6;
pub static G_IO_ERROR_NOT_SYMBOLIC_LINK: c_uint = 7;
pub static G_IO_ERROR_NOT_MOUNTABLE_FILE: c_uint = 8;
pub static G_IO_ERROR_FILENAME_TOO_LONG: c_uint = 9;
pub static G_IO_ERROR_INVALID_FILENAME: c_uint = 10;
pub static G_IO_ERROR_TOO_MANY_LINKS: c_uint = 11;
pub static G_IO_ERROR_NO_SPACE: c_uint = 12;
pub static G_IO_ERROR_INVALID_ARGUMENT: c_uint = 13;
pub static G_IO_ERROR_PERMISSION_DENIED: c_uint = 14;
pub static G_IO_ERROR_NOT_SUPPORTED: c_uint = 15;
pub static G_IO_ERROR_NOT_MOUNTED: c_uint = 16;
pub static G_IO_ERROR_ALREADY_MOUNTED: c_uint = 17;
pub static G_IO_ERROR_CLOSED: c_uint = 18;
pub static G_IO_ERROR_CANCELLED: c_uint = 19;
pub static G_IO_ERROR_PENDING: c_uint = 20;
pub static G_IO_ERROR_READ_ONLY: c_uint = 21;
pub static G_IO_ERROR_CANT_CREATE_BACKUP: c_uint = 22;
pub static G_IO_ERROR_WRONG_ETAG: c_uint = 23;
pub static G_IO_ERROR_TIMED_OUT: c_uint = 24;
pub static G_IO_ERROR_WOULD_RECURSE: c_uint = 25;
pub static G_IO_ERROR_BUSY: c_uint = 26;
pub static G_IO_ERROR_WOULD_BLOCK: c_uint = 27;
pub static G_IO_ERROR_HOST_NOT_FOUND: c_uint = 28;
pub static G_IO_ERROR_WOULD_MERGE: c_uint = 29;
pub static G_IO_ERROR_FAILED_HANDLED: c_uint = 30;
pub static G_IO_ERROR_TOO_MANY_OPEN_FILES: c_uint = 31;
pub static G_IO_ERROR_NOT_INITIALIZED: c_uint = 32;
pub static G_IO_ERROR_ADDRESS_IN_USE: c_uint = 33;
pub static G_IO_ERROR_PARTIAL_INPUT: c_uint = 34;
pub static G_IO_ERROR_INVALID_DATA: c_uint = 35;
pub static G_IO_ERROR_DBUS_ERROR: c_uint = 36;
pub static G_IO_ERROR_HOST_UNREACHABLE: c_uint = 37;
pub static G_IO_ERROR_NETWORK_UNREACHABLE: c_uint = 38;
pub static G_IO_ERROR_CONNECTION_REFUSED: c_uint = 39;
pub static G_IO_ERROR_PROXY_FAILED: c_uint = 40;
pub static G_IO_ERROR_PROXY_AUTH_FAILED: c_uint = 41;
pub static G_IO_ERROR_PROXY_NEED_AUTH: c_uint = 42;
pub static G_IO_ERROR_PROXY_NOT_ALLOWED: c_uint = 43;
pub static G_IO_ERROR_BROKEN_PIPE: c_uint = 44;
pub type GAskPasswordFlags = c_uint;
pub static G_ASK_PASSWORD_NEED_PASSWORD: c_uint = 1;
pub static G_ASK_PASSWORD_NEED_USERNAME: c_uint = 2;
pub static G_ASK_PASSWORD_NEED_DOMAIN: c_uint = 4;
pub static G_ASK_PASSWORD_SAVING_SUPPORTED: c_uint = 8;
pub static G_ASK_PASSWORD_ANONYMOUS_SUPPORTED: c_uint = 16;
pub type GPasswordSave = c_uint;
pub static G_PASSWORD_SAVE_NEVER: c_uint = 0;
pub static G_PASSWORD_SAVE_FOR_SESSION: c_uint = 1;
pub static G_PASSWORD_SAVE_PERMANENTLY: c_uint = 2;
pub type GMountOperationResult = c_uint;
pub static G_MOUNT_OPERATION_HANDLED: c_uint = 0;
pub static G_MOUNT_OPERATION_ABORTED: c_uint = 1;
pub static G_MOUNT_OPERATION_UNHANDLED: c_uint = 2;
pub type GOutputStreamSpliceFlags = c_uint;
pub static G_OUTPUT_STREAM_SPLICE_NONE: c_uint = 0;
pub static G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE: c_uint = 1;
pub static G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET: c_uint = 2;
pub type GIOStreamSpliceFlags = c_uint;
pub static G_IO_STREAM_SPLICE_NONE: c_uint = 0;
pub static G_IO_STREAM_SPLICE_CLOSE_STREAM1: c_uint = 1;
pub static G_IO_STREAM_SPLICE_CLOSE_STREAM2: c_uint = 2;
pub static G_IO_STREAM_SPLICE_WAIT_FOR_BOTH: c_uint = 4;
pub type GEmblemOrigin = c_uint;
pub static G_EMBLEM_ORIGIN_UNKNOWN: c_uint = 0;
pub static G_EMBLEM_ORIGIN_DEVICE: c_uint = 1;
pub static G_EMBLEM_ORIGIN_LIVEMETADATA: c_uint = 2;
pub static G_EMBLEM_ORIGIN_TAG: c_uint = 3;
pub type GResolverError = c_uint;
pub static G_RESOLVER_ERROR_NOT_FOUND: c_uint = 0;
pub static G_RESOLVER_ERROR_TEMPORARY_FAILURE: c_uint = 1;
pub static G_RESOLVER_ERROR_INTERNAL: c_uint = 2;
pub type GResolverRecordType = c_uint;
pub static G_RESOLVER_RECORD_SRV: c_uint = 1;
pub static G_RESOLVER_RECORD_MX: c_uint = 2;
pub static G_RESOLVER_RECORD_TXT: c_uint = 3;
pub static G_RESOLVER_RECORD_SOA: c_uint = 4;
pub static G_RESOLVER_RECORD_NS: c_uint = 5;
pub type GResourceError = c_uint;
pub static G_RESOURCE_ERROR_NOT_FOUND: c_uint = 0;
pub static G_RESOURCE_ERROR_INTERNAL: c_uint = 1;
pub type GResourceFlags = c_uint;
pub static G_RESOURCE_FLAGS_NONE: c_uint = 0;
pub static G_RESOURCE_FLAGS_COMPRESSED: c_uint = 1;
pub type GResourceLookupFlags = c_uint;
pub static G_RESOURCE_LOOKUP_FLAGS_NONE: c_uint = 0;
pub type GSocketFamily = c_uint;
pub static G_SOCKET_FAMILY_INVALID: c_uint = 0;
pub static G_SOCKET_FAMILY_UNIX: c_uint = 1;
pub static G_SOCKET_FAMILY_IPV4: c_uint = 2;
pub static G_SOCKET_FAMILY_IPV6: c_uint = 10;
pub type GSocketType = c_uint;
pub static G_SOCKET_TYPE_INVALID: c_uint = 0;
pub static G_SOCKET_TYPE_STREAM: c_uint = 1;
pub static G_SOCKET_TYPE_DATAGRAM: c_uint = 2;
pub static G_SOCKET_TYPE_SEQPACKET: c_uint = 3;
pub type GSocketMsgFlags = c_uint;
pub static G_SOCKET_MSG_NONE: c_uint = 0;
pub static G_SOCKET_MSG_OOB: c_uint = 1;
pub static G_SOCKET_MSG_PEEK: c_uint = 2;
pub static G_SOCKET_MSG_DONTROUTE: c_uint = 4;
pub type GSocketProtocol = c_int;
pub static G_SOCKET_PROTOCOL_UNKNOWN: c_int = -1;
pub static G_SOCKET_PROTOCOL_DEFAULT: c_int = 0;
pub static G_SOCKET_PROTOCOL_TCP: c_int = 6;
pub static G_SOCKET_PROTOCOL_UDP: c_int = 17;
pub static G_SOCKET_PROTOCOL_SCTP: c_int = 132;
pub type GZlibCompressorFormat = c_uint;
pub static G_ZLIB_COMPRESSOR_FORMAT_ZLIB: c_uint = 0;
pub static G_ZLIB_COMPRESSOR_FORMAT_GZIP: c_uint = 1;
pub static G_ZLIB_COMPRESSOR_FORMAT_RAW: c_uint = 2;
pub type GUnixSocketAddressType = c_uint;
pub static G_UNIX_SOCKET_ADDRESS_INVALID: c_uint = 0;
pub static G_UNIX_SOCKET_ADDRESS_ANONYMOUS: c_uint = 1;
pub static G_UNIX_SOCKET_ADDRESS_PATH: c_uint = 2;
pub static G_UNIX_SOCKET_ADDRESS_ABSTRACT: c_uint = 3;
pub static G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED: c_uint = 4;
pub type GBusType = c_int;
pub static G_BUS_TYPE_STARTER: c_int = -1;
pub static G_BUS_TYPE_NONE: c_int = 0;
pub static G_BUS_TYPE_SYSTEM: c_int = 1;
pub static G_BUS_TYPE_SESSION: c_int = 2;
pub type GBusNameOwnerFlags = c_uint;
pub static G_BUS_NAME_OWNER_FLAGS_NONE: c_uint = 0;
pub static G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT: c_uint = 1;
pub static G_BUS_NAME_OWNER_FLAGS_REPLACE: c_uint = 2;
pub type GBusNameWatcherFlags = c_uint;
pub static G_BUS_NAME_WATCHER_FLAGS_NONE: c_uint = 0;
pub static G_BUS_NAME_WATCHER_FLAGS_AUTO_START: c_uint = 1;
pub type GDBusProxyFlags = c_uint;
pub static G_DBUS_PROXY_FLAGS_NONE: c_uint = 0;
pub static G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES: c_uint = 1;
pub static G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS: c_uint = 2;
pub static G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START: c_uint = 4;
pub static G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES: c_uint = 8;
pub type GDBusError = c_uint;
pub static G_DBUS_ERROR_FAILED: c_uint = 0;
pub static G_DBUS_ERROR_NO_MEMORY: c_uint = 1;
pub static G_DBUS_ERROR_SERVICE_UNKNOWN: c_uint = 2;
pub static G_DBUS_ERROR_NAME_HAS_NO_OWNER: c_uint = 3;
pub static G_DBUS_ERROR_NO_REPLY: c_uint = 4;
pub static G_DBUS_ERROR_IO_ERROR: c_uint = 5;
pub static G_DBUS_ERROR_BAD_ADDRESS: c_uint = 6;
pub static G_DBUS_ERROR_NOT_SUPPORTED: c_uint = 7;
pub static G_DBUS_ERROR_LIMITS_EXCEEDED: c_uint = 8;
pub static G_DBUS_ERROR_ACCESS_DENIED: c_uint = 9;
pub static G_DBUS_ERROR_AUTH_FAILED: c_uint = 10;
pub static G_DBUS_ERROR_NO_SERVER: c_uint = 11;
pub static G_DBUS_ERROR_TIMEOUT: c_uint = 12;
pub static G_DBUS_ERROR_NO_NETWORK: c_uint = 13;
pub static G_DBUS_ERROR_ADDRESS_IN_USE: c_uint = 14;
pub static G_DBUS_ERROR_DISCONNECTED: c_uint = 15;
pub static G_DBUS_ERROR_INVALID_ARGS: c_uint = 16;
pub static G_DBUS_ERROR_FILE_NOT_FOUND: c_uint = 17;
pub static G_DBUS_ERROR_FILE_EXISTS: c_uint = 18;
pub static G_DBUS_ERROR_UNKNOWN_METHOD: c_uint = 19;
pub static G_DBUS_ERROR_TIMED_OUT: c_uint = 20;
pub static G_DBUS_ERROR_MATCH_RULE_NOT_FOUND: c_uint = 21;
pub static G_DBUS_ERROR_MATCH_RULE_INVALID: c_uint = 22;
pub static G_DBUS_ERROR_SPAWN_EXEC_FAILED: c_uint = 23;
pub static G_DBUS_ERROR_SPAWN_FORK_FAILED: c_uint = 24;
pub static G_DBUS_ERROR_SPAWN_CHILD_EXITED: c_uint = 25;
pub static G_DBUS_ERROR_SPAWN_CHILD_SIGNALED: c_uint = 26;
pub static G_DBUS_ERROR_SPAWN_FAILED: c_uint = 27;
pub static G_DBUS_ERROR_SPAWN_SETUP_FAILED: c_uint = 28;
pub static G_DBUS_ERROR_SPAWN_CONFIG_INVALID: c_uint = 29;
pub static G_DBUS_ERROR_SPAWN_SERVICE_INVALID: c_uint = 30;
pub static G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND: c_uint = 31;
pub static G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID: c_uint = 32;
pub static G_DBUS_ERROR_SPAWN_FILE_INVALID: c_uint = 33;
pub static G_DBUS_ERROR_SPAWN_NO_MEMORY: c_uint = 34;
pub static G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN: c_uint = 35;
pub static G_DBUS_ERROR_INVALID_SIGNATURE: c_uint = 36;
pub static G_DBUS_ERROR_INVALID_FILE_CONTENT: c_uint = 37;
pub static G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN: c_uint = 38;
pub static G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN: c_uint = 39;
pub static G_DBUS_ERROR_OBJECT_PATH_IN_USE: c_uint = 40;
pub type GDBusConnectionFlags = c_uint;
pub static G_DBUS_CONNECTION_FLAGS_NONE: c_uint = 0;
pub static G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT: c_uint = 1;
pub static G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER: c_uint = 2;
pub static G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS: c_uint = 4;
pub static G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION: c_uint = 8;
pub static G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING: c_uint = 16;
pub type GDBusCapabilityFlags = c_uint;
pub static G_DBUS_CAPABILITY_FLAGS_NONE: c_uint = 0;
pub static G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING: c_uint = 1;
pub type GDBusCallFlags = c_uint;
pub static G_DBUS_CALL_FLAGS_NONE: c_uint = 0;
pub static G_DBUS_CALL_FLAGS_NO_AUTO_START: c_uint = 1;
pub type GDBusMessageType = c_uint;
pub static G_DBUS_MESSAGE_TYPE_INVALID: c_uint = 0;
pub static G_DBUS_MESSAGE_TYPE_METHOD_CALL: c_uint = 1;
pub static G_DBUS_MESSAGE_TYPE_METHOD_RETURN: c_uint = 2;
pub static G_DBUS_MESSAGE_TYPE_ERROR: c_uint = 3;
pub static G_DBUS_MESSAGE_TYPE_SIGNAL: c_uint = 4;
pub type GDBusMessageFlags = c_uint;
pub static G_DBUS_MESSAGE_FLAGS_NONE: c_uint = 0;
pub static G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED: c_uint = 1;
pub static G_DBUS_MESSAGE_FLAGS_NO_AUTO_START: c_uint = 2;
pub type GDBusMessageHeaderField = c_uint;
pub static G_DBUS_MESSAGE_HEADER_FIELD_INVALID: c_uint = 0;
pub static G_DBUS_MESSAGE_HEADER_FIELD_PATH: c_uint = 1;
pub static G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE: c_uint = 2;
pub static G_DBUS_MESSAGE_HEADER_FIELD_MEMBER: c_uint = 3;
pub static G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME: c_uint = 4;
pub static G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL: c_uint = 5;
pub static G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION: c_uint = 6;
pub static G_DBUS_MESSAGE_HEADER_FIELD_SENDER: c_uint = 7;
pub static G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE: c_uint = 8;
pub static G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS: c_uint = 9;
pub type GDBusPropertyInfoFlags = c_uint;
pub static G_DBUS_PROPERTY_INFO_FLAGS_NONE: c_uint = 0;
pub static G_DBUS_PROPERTY_INFO_FLAGS_READABLE: c_uint = 1;
pub static G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE: c_uint = 2;
pub type GDBusSubtreeFlags = c_uint;
pub static G_DBUS_SUBTREE_FLAGS_NONE: c_uint = 0;
pub static G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES: c_uint = 1;
pub type GDBusServerFlags = c_uint;
pub static G_DBUS_SERVER_FLAGS_NONE: c_uint = 0;
pub static G_DBUS_SERVER_FLAGS_RUN_IN_THREAD: c_uint = 1;
pub static G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS: c_uint = 2;
pub type GDBusSignalFlags = c_uint;
pub static G_DBUS_SIGNAL_FLAGS_NONE: c_uint = 0;
pub static G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE: c_uint = 1;
pub static G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE: c_uint = 2;
pub static G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH: c_uint = 4;
pub type GDBusSendMessageFlags = c_uint;
pub static G_DBUS_SEND_MESSAGE_FLAGS_NONE: c_uint = 0;
pub static G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL: c_uint = 1;
pub type GCredentialsType = c_uint;
pub static G_CREDENTIALS_TYPE_INVALID: c_uint = 0;
pub static G_CREDENTIALS_TYPE_LINUX_UCRED: c_uint = 1;
pub static G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED: c_uint = 2;
pub static G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED: c_uint = 3;
pub type GDBusMessageByteOrder = c_uint;
pub static G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN: c_uint = 66;
pub static G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN: c_uint = 108;
pub type GApplicationFlags = c_uint;
pub static G_APPLICATION_FLAGS_NONE: c_uint = 0;
pub static G_APPLICATION_IS_SERVICE: c_uint = 1;
pub static G_APPLICATION_IS_LAUNCHER: c_uint = 2;
pub static G_APPLICATION_HANDLES_OPEN: c_uint = 4;
pub static G_APPLICATION_HANDLES_COMMAND_LINE: c_uint = 8;
pub static G_APPLICATION_SEND_ENVIRONMENT: c_uint = 16;
pub static G_APPLICATION_NON_UNIQUE: c_uint = 32;
pub type GTlsError = c_uint;
pub static G_TLS_ERROR_UNAVAILABLE: c_uint = 0;
pub static G_TLS_ERROR_MISC: c_uint = 1;
pub static G_TLS_ERROR_BAD_CERTIFICATE: c_uint = 2;
pub static G_TLS_ERROR_NOT_TLS: c_uint = 3;
pub static G_TLS_ERROR_HANDSHAKE: c_uint = 4;
pub static G_TLS_ERROR_CERTIFICATE_REQUIRED: c_uint = 5;
pub static G_TLS_ERROR_EOF: c_uint = 6;
pub type GTlsCertificateFlags = c_uint;
pub static G_TLS_CERTIFICATE_UNKNOWN_CA: c_uint = 1;
pub static G_TLS_CERTIFICATE_BAD_IDENTITY: c_uint = 2;
pub static G_TLS_CERTIFICATE_NOT_ACTIVATED: c_uint = 4;
pub static G_TLS_CERTIFICATE_EXPIRED: c_uint = 8;
pub static G_TLS_CERTIFICATE_REVOKED: c_uint = 16;
pub static G_TLS_CERTIFICATE_INSECURE: c_uint = 32;
pub static G_TLS_CERTIFICATE_GENERIC_ERROR: c_uint = 64;
pub static G_TLS_CERTIFICATE_VALIDATE_ALL: c_uint = 127;
pub type GTlsAuthenticationMode = c_uint;
pub static G_TLS_AUTHENTICATION_NONE: c_uint = 0;
pub static G_TLS_AUTHENTICATION_REQUESTED: c_uint = 1;
pub static G_TLS_AUTHENTICATION_REQUIRED: c_uint = 2;
pub type GTlsRehandshakeMode = c_uint;
pub static G_TLS_REHANDSHAKE_NEVER: c_uint = 0;
pub static G_TLS_REHANDSHAKE_SAFELY: c_uint = 1;
pub static G_TLS_REHANDSHAKE_UNSAFELY: c_uint = 2;
pub type Enum__GTlsPasswordFlags = c_uint;
pub static G_TLS_PASSWORD_NONE: c_uint = 0;
pub static G_TLS_PASSWORD_RETRY: c_uint = 2;
pub static G_TLS_PASSWORD_MANY_TRIES: c_uint = 4;
pub static G_TLS_PASSWORD_FINAL_TRY: c_uint = 8;
pub type GTlsPasswordFlags = Enum__GTlsPasswordFlags;
pub type GTlsInteractionResult = c_uint;
pub static G_TLS_INTERACTION_UNHANDLED: c_uint = 0;
pub static G_TLS_INTERACTION_HANDLED: c_uint = 1;
pub static G_TLS_INTERACTION_FAILED: c_uint = 2;
pub type GDBusInterfaceSkeletonFlags = c_uint;
pub static G_DBUS_INTERFACE_SKELETON_FLAGS_NONE: c_uint = 0;
pub static G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD:
           c_uint =
    1;
pub type GDBusObjectManagerClientFlags = c_uint;
pub static G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE: c_uint = 0;
pub static G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START: c_uint = 1;
pub type GTlsDatabaseVerifyFlags = c_uint;
pub static G_TLS_DATABASE_VERIFY_NONE: c_uint = 0;
pub type GTlsDatabaseLookupFlags = c_uint;
pub static G_TLS_DATABASE_LOOKUP_NONE: c_uint = 0;
pub static G_TLS_DATABASE_LOOKUP_KEYPAIR: c_uint = 1;
pub type GIOModuleScopeFlags = c_uint;
pub static G_IO_MODULE_SCOPE_NONE: c_uint = 0;
pub static G_IO_MODULE_SCOPE_BLOCK_DUPLICATES: c_uint = 1;
pub type GSocketClientEvent = c_uint;
pub static G_SOCKET_CLIENT_RESOLVING: c_uint = 0;
pub static G_SOCKET_CLIENT_RESOLVED: c_uint = 1;
pub static G_SOCKET_CLIENT_CONNECTING: c_uint = 2;
pub static G_SOCKET_CLIENT_CONNECTED: c_uint = 3;
pub static G_SOCKET_CLIENT_PROXY_NEGOTIATING: c_uint = 4;
pub static G_SOCKET_CLIENT_PROXY_NEGOTIATED: c_uint = 5;
pub static G_SOCKET_CLIENT_TLS_HANDSHAKING: c_uint = 6;
pub static G_SOCKET_CLIENT_TLS_HANDSHAKED: c_uint = 7;
pub static G_SOCKET_CLIENT_COMPLETE: c_uint = 8;
pub type GTestDBusFlags = c_uint;
pub static G_TEST_DBUS_NONE: c_uint = 0;
pub type GAppLaunchContext = Struct__GAppLaunchContext;
pub type Struct__GAppInfo = c_void;
pub type GAppInfo = Struct__GAppInfo;
pub type Struct__GAsyncResult = c_void;
pub type GAsyncResult = Struct__GAsyncResult;
pub type Struct__GAsyncInitable = c_void;
pub type GAsyncInitable = Struct__GAsyncInitable;
pub type GBufferedInputStream = Struct__GBufferedInputStream;
pub type GBufferedOutputStream = Struct__GBufferedOutputStream;
pub type GCancellable = Struct__GCancellable;
pub type Struct__GCharsetConverter = c_void;
pub type GCharsetConverter = Struct__GCharsetConverter;
pub type Struct__GConverter = c_void;
pub type GConverter = Struct__GConverter;
pub type GConverterInputStream = Struct__GConverterInputStream;
pub type GConverterOutputStream = Struct__GConverterOutputStream;
pub type GDataInputStream = Struct__GDataInputStream;
pub type Struct__GSimplePermission = c_void;
pub type GSimplePermission = Struct__GSimplePermission;
pub type Struct__GZlibCompressor = c_void;
pub type GZlibCompressor = Struct__GZlibCompressor;
pub type Struct__GZlibDecompressor = c_void;
pub type GZlibDecompressor = Struct__GZlibDecompressor;
pub type GSimpleActionGroup = Struct__GSimpleActionGroup;
pub type Struct__GRemoteActionGroup = c_void;
pub type GRemoteActionGroup = Struct__GRemoteActionGroup;
pub type Struct__GDBusActionGroup = c_void;
pub type GDBusActionGroup = Struct__GDBusActionGroup;
pub type Struct__GActionMap = c_void;
pub type GActionMap = Struct__GActionMap;
pub type Struct__GActionGroup = c_void;
pub type GActionGroup = Struct__GActionGroup;
pub type Struct__GPropertyAction = c_void;
pub type GPropertyAction = Struct__GPropertyAction;
pub type Struct__GSimpleAction = c_void;
pub type GSimpleAction = Struct__GSimpleAction;
pub type Struct__GAction = c_void;
pub type GAction = Struct__GAction;
pub type GApplication = Struct__GApplication;
pub type GApplicationCommandLine = Struct__GApplicationCommandLine;
pub type Struct__GSettingsBackend = c_void;
pub type GSettingsBackend = Struct__GSettingsBackend;
pub type GSettings = Struct__GSettings;
pub type GPermission = Struct__GPermission;
pub type GMenuModel = Struct__GMenuModel;
pub type Struct__GDrive = c_void;
pub type GDrive = Struct__GDrive;
pub type GFileEnumerator = Struct__GFileEnumerator;
pub type GFileMonitor = Struct__GFileMonitor;
pub type GFilterInputStream = Struct__GFilterInputStream;
pub type GFilterOutputStream = Struct__GFilterOutputStream;
pub type Struct__GFile = c_void;
pub type GFile = Struct__GFile;
pub type Struct__GFileInfo = c_void;
pub type GFileInfo = Struct__GFileInfo;
pub type Struct__GFileAttributeMatcher = c_void;
pub type GFileAttributeMatcher = Struct__GFileAttributeMatcher;
pub type GFileAttributeInfo = Struct__GFileAttributeInfo;
pub type GFileAttributeInfoList = Struct__GFileAttributeInfoList;
pub type Struct__GFileDescriptorBased = c_void;
pub type GFileDescriptorBased = Struct__GFileDescriptorBased;
pub type GFileInputStream = Struct__GFileInputStream;
pub type GFileOutputStream = Struct__GFileOutputStream;
pub type GFileIOStream = Struct__GFileIOStream;
pub type Struct__GFileIcon = c_void;
pub type GFileIcon = Struct__GFileIcon;
pub type Struct__GFilenameCompleter = c_void;
pub type GFilenameCompleter = Struct__GFilenameCompleter;
pub type Struct__GIcon = c_void;
pub type GIcon = Struct__GIcon;
pub type GInetAddress = Struct__GInetAddress;
pub type GInetAddressMask = Struct__GInetAddressMask;
pub type GInetSocketAddress = Struct__GInetSocketAddress;
pub type GInputStream = Struct__GInputStream;
pub type Struct__GInitable = c_void;
pub type GInitable = Struct__GInitable;
pub type Struct__GIOModule = c_void;
pub type GIOModule = Struct__GIOModule;
pub type Struct__GIOExtensionPoint = c_void;
pub type GIOExtensionPoint = Struct__GIOExtensionPoint;
pub type Struct__GIOExtension = c_void;
pub type GIOExtension = Struct__GIOExtension;
pub type Struct__GIOSchedulerJob = c_void;
pub type GIOSchedulerJob = Struct__GIOSchedulerJob;
pub type Struct__GIOStreamAdapter = c_void;
pub type GIOStreamAdapter = Struct__GIOStreamAdapter;
pub type Struct__GLoadableIcon = c_void;
pub type GLoadableIcon = Struct__GLoadableIcon;
pub type Struct__GBytesIcon = c_void;
pub type GBytesIcon = Struct__GBytesIcon;
pub type GMemoryInputStream = Struct__GMemoryInputStream;
pub type GMemoryOutputStream = Struct__GMemoryOutputStream;
pub type Struct__GMount = c_void;
pub type GMount = Struct__GMount;
pub type GMountOperation = Struct__GMountOperation;
pub type GNetworkAddress = Struct__GNetworkAddress;
pub type Struct__GNetworkMonitor = c_void;
pub type GNetworkMonitor = Struct__GNetworkMonitor;
pub type GNetworkService = Struct__GNetworkService;
pub type GOutputStream = Struct__GOutputStream;
pub type GIOStream = Struct__GIOStream;
pub type Struct__GPollableInputStream = c_void;
pub type GPollableInputStream = Struct__GPollableInputStream;
pub type Struct__GPollableOutputStream = c_void;
pub type GPollableOutputStream = Struct__GPollableOutputStream;
pub type GResolver = Struct__GResolver;
pub type Struct__GResource = c_void;
pub type GResource = Struct__GResource;
pub type Struct__GSeekable = c_void;
pub type GSeekable = Struct__GSeekable;
pub type Struct__GSimpleAsyncResult = c_void;
pub type GSimpleAsyncResult = Struct__GSimpleAsyncResult;
pub type GSocket = Struct__GSocket;
pub type GSocketControlMessage = Struct__GSocketControlMessage;
pub type GSocketClient = Struct__GSocketClient;
pub type GSocketConnection = Struct__GSocketConnection;
pub type GSocketListener = Struct__GSocketListener;
pub type GSocketService = Struct__GSocketService;
pub type GSocketAddress = Struct__GSocketAddress;
pub type GSocketAddressEnumerator = Struct__GSocketAddressEnumerator;
pub type Struct__GSocketConnectable = c_void;
pub type GSocketConnectable = Struct__GSocketConnectable;
pub type Struct__GSrvTarget = c_void;
pub type GSrvTarget = Struct__GSrvTarget;
pub type Struct__GTask = c_void;
pub type GTask = Struct__GTask;
pub type GTcpConnection = Struct__GTcpConnection;
pub type GTcpWrapperConnection = Struct__GTcpWrapperConnection;
pub type GThreadedSocketService = Struct__GThreadedSocketService;
pub type Struct__GThemedIcon = c_void;
pub type GThemedIcon = Struct__GThemedIcon;
pub type GTlsCertificate = Struct__GTlsCertificate;
pub type Struct__GTlsClientConnection = c_void;
pub type GTlsClientConnection = Struct__GTlsClientConnection;
pub type GTlsConnection = Struct__GTlsConnection;
pub type GTlsDatabase = Struct__GTlsDatabase;
pub type Struct__GTlsFileDatabase = c_void;
pub type GTlsFileDatabase = Struct__GTlsFileDatabase;
pub type GTlsInteraction = Struct__GTlsInteraction;
pub type GTlsPassword = Struct__GTlsPassword;
pub type Struct__GTlsServerConnection = c_void;
pub type GTlsServerConnection = Struct__GTlsServerConnection;
pub type GVfs = Struct__GVfs;
pub type Struct__GProxyResolver = c_void;
pub type GProxyResolver = Struct__GProxyResolver;
pub type Struct__GProxy = c_void;
pub type GProxy = Struct__GProxy;
pub type GProxyAddress = Struct__GProxyAddress;
pub type GProxyAddressEnumerator = Struct__GProxyAddressEnumerator;
pub type Struct__GVolume = c_void;
pub type GVolume = Struct__GVolume;
pub type GVolumeMonitor = Struct__GVolumeMonitor;
pub type GAsyncReadyCallback =
    extern "C" fn
        (arg1: *mut GObject, arg2: *mut GAsyncResult, arg3: gpointer);
pub type GFileProgressCallback =
    extern "C" fn(arg1: goffset, arg2: goffset, arg3: gpointer);
pub type GFileReadMoreCallback =
    extern "C" fn(arg1: *c_schar, arg2: goffset, arg3: gpointer) -> gboolean;
pub type GFileMeasureProgressCallback =
    extern "C" fn
        (arg1: gboolean, arg2: guint64, arg3: guint64, arg4: guint64,
         arg5: gpointer);
pub type GIOSchedulerJobFunc =
    extern "C" fn
        (arg1: *mut GIOSchedulerJob, arg2: *mut GCancellable, arg3: gpointer)
        -> gboolean;
pub type GSimpleAsyncThreadFunc =
    extern "C" fn
        (arg1: *mut GSimpleAsyncResult, arg2: *mut GObject,
         arg3: *mut GCancellable);
pub type GSocketSourceFunc =
    extern "C" fn(arg1: *mut GSocket, arg2: GIOCondition, arg3: gpointer)
        -> gboolean;
pub type GInputVector = Struct__GInputVector;
pub struct Struct__GInputVector {
    buffer: gpointer,
    size: gsize,
}
pub type GOutputVector = Struct__GOutputVector;
pub struct Struct__GOutputVector {
    buffer: gconstpointer,
    size: gsize,
}
pub type Struct__GCredentials = c_void;
pub type GCredentials = Struct__GCredentials;
pub type Struct__GUnixCredentialsMessage = c_void;
pub type GUnixCredentialsMessage = Struct__GUnixCredentialsMessage;
pub type Struct__GUnixFDList = c_void;
pub type GUnixFDList = Struct__GUnixFDList;
pub type Struct__GDBusMessage = c_void;
pub type GDBusMessage = Struct__GDBusMessage;
pub type Struct__GDBusConnection = c_void;
pub type GDBusConnection = Struct__GDBusConnection;
pub type GDBusProxy = Struct__GDBusProxy;
pub type Struct__GDBusMethodInvocation = c_void;
pub type GDBusMethodInvocation = Struct__GDBusMethodInvocation;
pub type Struct__GDBusServer = c_void;
pub type GDBusServer = Struct__GDBusServer;
pub type Struct__GDBusAuthObserver = c_void;
pub type GDBusAuthObserver = Struct__GDBusAuthObserver;
pub type GDBusErrorEntry = Struct__GDBusErrorEntry;
pub type GDBusInterfaceVTable = Struct__GDBusInterfaceVTable;
pub type GDBusSubtreeVTable = Struct__GDBusSubtreeVTable;
pub type GDBusAnnotationInfo = Struct__GDBusAnnotationInfo;
pub type GDBusArgInfo = Struct__GDBusArgInfo;
pub type GDBusMethodInfo = Struct__GDBusMethodInfo;
pub type GDBusSignalInfo = Struct__GDBusSignalInfo;
pub type GDBusPropertyInfo = Struct__GDBusPropertyInfo;
pub type GDBusInterfaceInfo = Struct__GDBusInterfaceInfo;
pub type GDBusNodeInfo = Struct__GDBusNodeInfo;
pub type GCancellableSourceFunc =
    extern "C" fn(arg1: *mut GCancellable, arg2: gpointer) -> gboolean;
pub type GPollableSourceFunc =
    extern "C" fn(arg1: *mut GObject, arg2: gpointer) -> gboolean;
pub type Struct__GDBusInterface = c_void;
pub type GDBusInterface = Struct__GDBusInterface;
pub type GDBusInterfaceSkeleton = Struct__GDBusInterfaceSkeleton;
pub type Struct__GDBusObject = c_void;
pub type GDBusObject = Struct__GDBusObject;
pub type GDBusObjectSkeleton = Struct__GDBusObjectSkeleton;
pub type GDBusObjectProxy = Struct__GDBusObjectProxy;
pub type Struct__GDBusObjectManager = c_void;
pub type GDBusObjectManager = Struct__GDBusObjectManager;
pub type GDBusObjectManagerClient = Struct__GDBusObjectManagerClient;
pub type GDBusObjectManagerServer = Struct__GDBusObjectManagerServer;
pub type GDBusProxyTypeFunc =
    extern "C" fn
        (arg1: *mut GDBusObjectManagerClient, arg2: *gchar, arg3: *gchar,
         arg4: gpointer) -> GType;
pub type Struct__GTestDBus = c_void;
pub type GTestDBus = Struct__GTestDBus;
pub type GActionInterface = Struct__GActionInterface;
pub struct Struct__GActionInterface {
    g_iface: GTypeInterface,
    get_name: extern "C" fn(arg1: *mut GAction) -> *gchar,
    get_parameter_type: extern "C" fn(arg1: *mut GAction) -> *GVariantType,
    get_state_type: extern "C" fn(arg1: *mut GAction) -> *GVariantType,
    get_state_hint: extern "C" fn(arg1: *mut GAction) -> *mut GVariant,
    get_enabled: extern "C" fn(arg1: *mut GAction) -> gboolean,
    get_state: extern "C" fn(arg1: *mut GAction) -> *mut GVariant,
    change_state: extern "C" fn(arg1: *mut GAction, arg2: *mut GVariant),
    activate: extern "C" fn(arg1: *mut GAction, arg2: *mut GVariant),
}
pub type GActionGroupInterface = Struct__GActionGroupInterface;
pub struct Struct__GActionGroupInterface {
    g_iface: GTypeInterface,
    has_action: extern "C" fn(arg1: *mut GActionGroup, arg2: *gchar)
                    -> gboolean,
    list_actions: extern "C" fn(arg1: *mut GActionGroup) -> *mut *mut gchar,
    get_action_enabled: extern "C" fn(arg1: *mut GActionGroup, arg2: *gchar)
                            -> gboolean,
    get_action_parameter_type: extern "C" fn
                                   (arg1: *mut GActionGroup, arg2: *gchar)
                                   -> *GVariantType,
    get_action_state_type: extern "C" fn
                               (arg1: *mut GActionGroup, arg2: *gchar)
                               -> *GVariantType,
    get_action_state_hint: extern "C" fn
                               (arg1: *mut GActionGroup, arg2: *gchar)
                               -> *mut GVariant,
    get_action_state: extern "C" fn(arg1: *mut GActionGroup, arg2: *gchar)
                          -> *mut GVariant,
    change_action_state: extern "C" fn
                             (arg1: *mut GActionGroup, arg2: *gchar,
                              arg3: *mut GVariant),
    activate_action: extern "C" fn
                         (arg1: *mut GActionGroup, arg2: *gchar,
                          arg3: *mut GVariant),
    action_added: extern "C" fn(arg1: *mut GActionGroup, arg2: *gchar),
    action_removed: extern "C" fn(arg1: *mut GActionGroup, arg2: *gchar),
    action_enabled_changed: extern "C" fn
                                (arg1: *mut GActionGroup, arg2: *gchar,
                                 arg3: gboolean),
    action_state_changed: extern "C" fn
                              (arg1: *mut GActionGroup, arg2: *gchar,
                               arg3: *mut GVariant),
    query_action: extern "C" fn
                      (arg1: *mut GActionGroup, arg2: *gchar,
                       arg3: *mut gboolean, arg4: *mut *GVariantType,
                       arg5: *mut *GVariantType, arg6: *mut *mut GVariant,
                       arg7: *mut *mut GVariant) -> gboolean,
}
pub type GActionMapInterface = Struct__GActionMapInterface;
pub type GActionEntry = Struct__GActionEntry;
pub struct Struct__GActionMapInterface {
    g_iface: GTypeInterface,
    lookup_action: extern "C" fn(arg1: *mut GActionMap, arg2: *gchar)
                       -> *mut GAction,
    add_action: extern "C" fn(arg1: *mut GActionMap, arg2: *mut GAction),
    remove_action: extern "C" fn(arg1: *mut GActionMap, arg2: *gchar),
}
pub struct Struct__GActionEntry {
    name: *gchar,
    activate: extern "C" fn
                  (arg1: *mut GSimpleAction, arg2: *mut GVariant,
                   arg3: gpointer),
    parameter_type: *gchar,
    state: *gchar,
    change_state: extern "C" fn
                      (arg1: *mut GSimpleAction, arg2: *mut GVariant,
                       arg3: gpointer),
    padding: [gsize, ..3u],
}
pub type GAppLaunchContextClass = Struct__GAppLaunchContextClass;
pub type Struct__GAppLaunchContextPrivate = c_void;
pub type GAppLaunchContextPrivate = Struct__GAppLaunchContextPrivate;
pub type GAppInfoIface = Struct__GAppInfoIface;
pub struct Struct__GAppInfoIface {
    g_iface: GTypeInterface,
    dup: extern "C" fn(arg1: *mut GAppInfo) -> *mut GAppInfo,
    equal: extern "C" fn(arg1: *mut GAppInfo, arg2: *mut GAppInfo)
               -> gboolean,
    get_id: extern "C" fn(arg1: *mut GAppInfo) -> *c_schar,
    get_name: extern "C" fn(arg1: *mut GAppInfo) -> *c_schar,
    get_description: extern "C" fn(arg1: *mut GAppInfo) -> *c_schar,
    get_executable: extern "C" fn(arg1: *mut GAppInfo) -> *c_schar,
    get_icon: extern "C" fn(arg1: *mut GAppInfo) -> *mut GIcon,
    launch: extern "C" fn
                (arg1: *mut GAppInfo, arg2: *mut GList,
                 arg3: *mut GAppLaunchContext, arg4: *mut *mut GError)
                -> gboolean,
    supports_uris: extern "C" fn(arg1: *mut GAppInfo) -> gboolean,
    supports_files: extern "C" fn(arg1: *mut GAppInfo) -> gboolean,
    launch_uris: extern "C" fn
                     (arg1: *mut GAppInfo, arg2: *mut GList,
                      arg3: *mut GAppLaunchContext, arg4: *mut *mut GError)
                     -> gboolean,
    should_show: extern "C" fn(arg1: *mut GAppInfo) -> gboolean,
    set_as_default_for_type: extern "C" fn
                                 (arg1: *mut GAppInfo, arg2: *c_schar,
                                  arg3: *mut *mut GError) -> gboolean,
    set_as_default_for_extension: extern "C" fn
                                      (arg1: *mut GAppInfo, arg2: *c_schar,
                                       arg3: *mut *mut GError) -> gboolean,
    add_supports_type: extern "C" fn
                           (arg1: *mut GAppInfo, arg2: *c_schar,
                            arg3: *mut *mut GError) -> gboolean,
    can_remove_supports_type: extern "C" fn(arg1: *mut GAppInfo) -> gboolean,
    remove_supports_type: extern "C" fn
                              (arg1: *mut GAppInfo, arg2: *c_schar,
                               arg3: *mut *mut GError) -> gboolean,
    can_delete: extern "C" fn(arg1: *mut GAppInfo) -> gboolean,
    do_delete: extern "C" fn(arg1: *mut GAppInfo) -> gboolean,
    get_commandline: extern "C" fn(arg1: *mut GAppInfo) -> *c_schar,
    get_display_name: extern "C" fn(arg1: *mut GAppInfo) -> *c_schar,
    set_as_last_used_for_type: extern "C" fn
                                   (arg1: *mut GAppInfo, arg2: *c_schar,
                                    arg3: *mut *mut GError) -> gboolean,
    get_supported_types: extern "C" fn(arg1: *mut GAppInfo) -> *mut *c_schar,
}
pub struct Struct__GAppLaunchContext {
    parent_instance: GObject,
    _priv: *mut GAppLaunchContextPrivate,
}
pub struct Struct__GAppLaunchContextClass {
    parent_class: GObjectClass,
    get_display: extern "C" fn
                     (arg1: *mut GAppLaunchContext, arg2: *mut GAppInfo,
                      arg3: *mut GList) -> *mut c_schar,
    get_startup_notify_id: extern "C" fn
                               (arg1: *mut GAppLaunchContext,
                                arg2: *mut GAppInfo, arg3: *mut GList)
                               -> *mut c_schar,
    launch_failed: extern "C" fn
                       (arg1: *mut GAppLaunchContext, arg2: *c_schar),
    launched: extern "C" fn
                  (arg1: *mut GAppLaunchContext, arg2: *mut GAppInfo,
                   arg3: *mut GVariant),
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
}
pub type Struct__GApplicationPrivate = c_void;
pub type GApplicationPrivate = Struct__GApplicationPrivate;
pub type GApplicationClass = Struct__GApplicationClass;
pub struct Struct__GApplication {
    parent_instance: GObject,
    _priv: *mut GApplicationPrivate,
}
pub struct Struct__GApplicationClass {
    parent_class: GObjectClass,
    startup: extern "C" fn(arg1: *mut GApplication),
    activate: extern "C" fn(arg1: *mut GApplication),
    open: extern "C" fn
              (arg1: *mut GApplication, arg2: *mut *mut GFile, arg3: gint,
               arg4: *gchar),
    command_line: extern "C" fn
                      (arg1: *mut GApplication,
                       arg2: *mut GApplicationCommandLine) -> c_int,
    local_command_line: extern "C" fn
                            (arg1: *mut GApplication,
                             arg2: *mut *mut *mut gchar, arg3: *mut c_int)
                            -> gboolean,
    before_emit: extern "C" fn(arg1: *mut GApplication, arg2: *mut GVariant),
    after_emit: extern "C" fn(arg1: *mut GApplication, arg2: *mut GVariant),
    add_platform_data: extern "C" fn
                           (arg1: *mut GApplication,
                            arg2: *mut GVariantBuilder),
    quit_mainloop: extern "C" fn(arg1: *mut GApplication),
    run_mainloop: extern "C" fn(arg1: *mut GApplication),
    shutdown: extern "C" fn(arg1: *mut GApplication),
    dbus_register: extern "C" fn
                       (arg1: *mut GApplication, arg2: *mut GDBusConnection,
                        arg3: *gchar, arg4: *mut *mut GError) -> gboolean,
    dbus_unregister: extern "C" fn
                         (arg1: *mut GApplication, arg2: *mut GDBusConnection,
                          arg3: *gchar),
    padding: [gpointer, ..9u],
}
pub type Struct__GApplicationCommandLinePrivate = c_void;
pub type GApplicationCommandLinePrivate =
    Struct__GApplicationCommandLinePrivate;
pub type GApplicationCommandLineClass = Struct__GApplicationCommandLineClass;
pub struct Struct__GApplicationCommandLine {
    parent_instance: GObject,
    _priv: *mut GApplicationCommandLinePrivate,
}
pub struct Struct__GApplicationCommandLineClass {
    parent_class: GObjectClass,
    print_literal: extern "C" fn
                       (arg1: *mut GApplicationCommandLine, arg2: *gchar),
    printerr_literal: extern "C" fn
                          (arg1: *mut GApplicationCommandLine, arg2: *gchar),
    get_stdin: extern "C" fn(arg1: *mut GApplicationCommandLine)
                   -> *mut GInputStream,
    padding: [gpointer, ..11u],
}
pub type GInitableIface = Struct__GInitableIface;
pub struct Struct__GInitableIface {
    g_iface: GTypeInterface,
    init: extern "C" fn
              (arg1: *mut GInitable, arg2: *mut GCancellable,
               arg3: *mut *mut GError) -> gboolean,
}
pub type GAsyncInitableIface = Struct__GAsyncInitableIface;
pub struct Struct__GAsyncInitableIface {
    g_iface: GTypeInterface,
    init_async: extern "C" fn
                    (arg1: *mut GAsyncInitable, arg2: c_int,
                     arg3: *mut GCancellable, arg4: GAsyncReadyCallback,
                     arg5: gpointer),
    init_finish: extern "C" fn
                     (arg1: *mut GAsyncInitable, arg2: *mut GAsyncResult,
                      arg3: *mut *mut GError) -> gboolean,
}
pub type GAsyncResultIface = Struct__GAsyncResultIface;
pub struct Struct__GAsyncResultIface {
    g_iface: GTypeInterface,
    get_user_data: extern "C" fn(arg1: *mut GAsyncResult) -> gpointer,
    get_source_object: extern "C" fn(arg1: *mut GAsyncResult) -> *mut GObject,
    is_tagged: extern "C" fn(arg1: *mut GAsyncResult, arg2: gpointer)
                   -> gboolean,
}
pub type GInputStreamClass = Struct__GInputStreamClass;
pub type Struct__GInputStreamPrivate = c_void;
pub type GInputStreamPrivate = Struct__GInputStreamPrivate;
pub struct Struct__GInputStream {
    parent_instance: GObject,
    _priv: *mut GInputStreamPrivate,
}
pub struct Struct__GInputStreamClass {
    parent_class: GObjectClass,
    read_fn: extern "C" fn
                 (arg1: *mut GInputStream, arg2: *mut c_void, arg3: gsize,
                  arg4: *mut GCancellable, arg5: *mut *mut GError) -> gssize,
    skip: extern "C" fn
              (arg1: *mut GInputStream, arg2: gsize, arg3: *mut GCancellable,
               arg4: *mut *mut GError) -> gssize,
    close_fn: extern "C" fn
                  (arg1: *mut GInputStream, arg2: *mut GCancellable,
                   arg3: *mut *mut GError) -> gboolean,
    read_async: extern "C" fn
                    (arg1: *mut GInputStream, arg2: *mut c_void, arg3: gsize,
                     arg4: c_int, arg5: *mut GCancellable,
                     arg6: GAsyncReadyCallback, arg7: gpointer),
    read_finish: extern "C" fn
                     (arg1: *mut GInputStream, arg2: *mut GAsyncResult,
                      arg3: *mut *mut GError) -> gssize,
    skip_async: extern "C" fn
                    (arg1: *mut GInputStream, arg2: gsize, arg3: c_int,
                     arg4: *mut GCancellable, arg5: GAsyncReadyCallback,
                     arg6: gpointer),
    skip_finish: extern "C" fn
                     (arg1: *mut GInputStream, arg2: *mut GAsyncResult,
                      arg3: *mut *mut GError) -> gssize,
    close_async: extern "C" fn
                     (arg1: *mut GInputStream, arg2: c_int,
                      arg3: *mut GCancellable, arg4: GAsyncReadyCallback,
                      arg5: gpointer),
    close_finish: extern "C" fn
                      (arg1: *mut GInputStream, arg2: *mut GAsyncResult,
                       arg3: *mut *mut GError) -> gboolean,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
}
pub type GFilterInputStreamClass = Struct__GFilterInputStreamClass;
pub struct Struct__GFilterInputStream {
    parent_instance: GInputStream,
    base_stream: *mut GInputStream,
}
pub struct Struct__GFilterInputStreamClass {
    parent_class: GInputStreamClass,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
}
pub type GBufferedInputStreamClass = Struct__GBufferedInputStreamClass;
pub type Struct__GBufferedInputStreamPrivate = c_void;
pub type GBufferedInputStreamPrivate = Struct__GBufferedInputStreamPrivate;
pub struct Struct__GBufferedInputStream {
    parent_instance: GFilterInputStream,
    _priv: *mut GBufferedInputStreamPrivate,
}
pub struct Struct__GBufferedInputStreamClass {
    parent_class: GFilterInputStreamClass,
    fill: extern "C" fn
              (arg1: *mut GBufferedInputStream, arg2: gssize,
               arg3: *mut GCancellable, arg4: *mut *mut GError) -> gssize,
    fill_async: extern "C" fn
                    (arg1: *mut GBufferedInputStream, arg2: gssize,
                     arg3: c_int, arg4: *mut GCancellable,
                     arg5: GAsyncReadyCallback, arg6: gpointer),
    fill_finish: extern "C" fn
                     (arg1: *mut GBufferedInputStream,
                      arg2: *mut GAsyncResult, arg3: *mut *mut GError)
                     -> gssize,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
}
pub type GOutputStreamClass = Struct__GOutputStreamClass;
pub type Struct__GOutputStreamPrivate = c_void;
pub type GOutputStreamPrivate = Struct__GOutputStreamPrivate;
pub struct Struct__GOutputStream {
    parent_instance: GObject,
    _priv: *mut GOutputStreamPrivate,
}
pub struct Struct__GOutputStreamClass {
    parent_class: GObjectClass,
    write_fn: extern "C" fn
                  (arg1: *mut GOutputStream, arg2: *c_void, arg3: gsize,
                   arg4: *mut GCancellable, arg5: *mut *mut GError) -> gssize,
    splice: extern "C" fn
                (arg1: *mut GOutputStream, arg2: *mut GInputStream,
                 arg3: GOutputStreamSpliceFlags, arg4: *mut GCancellable,
                 arg5: *mut *mut GError) -> gssize,
    flush: extern "C" fn
               (arg1: *mut GOutputStream, arg2: *mut GCancellable,
                arg3: *mut *mut GError) -> gboolean,
    close_fn: extern "C" fn
                  (arg1: *mut GOutputStream, arg2: *mut GCancellable,
                   arg3: *mut *mut GError) -> gboolean,
    write_async: extern "C" fn
                     (arg1: *mut GOutputStream, arg2: *c_void, arg3: gsize,
                      arg4: c_int, arg5: *mut GCancellable,
                      arg6: GAsyncReadyCallback, arg7: gpointer),
    write_finish: extern "C" fn
                      (arg1: *mut GOutputStream, arg2: *mut GAsyncResult,
                       arg3: *mut *mut GError) -> gssize,
    splice_async: extern "C" fn
                      (arg1: *mut GOutputStream, arg2: *mut GInputStream,
                       arg3: GOutputStreamSpliceFlags, arg4: c_int,
                       arg5: *mut GCancellable, arg6: GAsyncReadyCallback,
                       arg7: gpointer),
    splice_finish: extern "C" fn
                       (arg1: *mut GOutputStream, arg2: *mut GAsyncResult,
                        arg3: *mut *mut GError) -> gssize,
    flush_async: extern "C" fn
                     (arg1: *mut GOutputStream, arg2: c_int,
                      arg3: *mut GCancellable, arg4: GAsyncReadyCallback,
                      arg5: gpointer),
    flush_finish: extern "C" fn
                      (arg1: *mut GOutputStream, arg2: *mut GAsyncResult,
                       arg3: *mut *mut GError) -> gboolean,
    close_async: extern "C" fn
                     (arg1: *mut GOutputStream, arg2: c_int,
                      arg3: *mut GCancellable, arg4: GAsyncReadyCallback,
                      arg5: gpointer),
    close_finish: extern "C" fn
                      (arg1: *mut GOutputStream, arg2: *mut GAsyncResult,
                       arg3: *mut *mut GError) -> gboolean,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
    _g_reserved6: extern "C" fn(),
    _g_reserved7: extern "C" fn(),
    _g_reserved8: extern "C" fn(),
}
pub type GFilterOutputStreamClass = Struct__GFilterOutputStreamClass;
pub struct Struct__GFilterOutputStream {
    parent_instance: GOutputStream,
    base_stream: *mut GOutputStream,
}
pub struct Struct__GFilterOutputStreamClass {
    parent_class: GOutputStreamClass,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
}
pub type GBufferedOutputStreamClass = Struct__GBufferedOutputStreamClass;
pub type Struct__GBufferedOutputStreamPrivate = c_void;
pub type GBufferedOutputStreamPrivate = Struct__GBufferedOutputStreamPrivate;
pub struct Struct__GBufferedOutputStream {
    parent_instance: GFilterOutputStream,
    _priv: *mut GBufferedOutputStreamPrivate,
}
pub struct Struct__GBufferedOutputStreamClass {
    parent_class: GFilterOutputStreamClass,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
}
pub type GCancellableClass = Struct__GCancellableClass;
pub type Struct__GCancellablePrivate = c_void;
pub type GCancellablePrivate = Struct__GCancellablePrivate;
pub struct Struct__GCancellable {
    parent_instance: GObject,
    _priv: *mut GCancellablePrivate,
}
pub struct Struct__GCancellableClass {
    parent_class: GObjectClass,
    cancelled: extern "C" fn(arg1: *mut GCancellable),
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
}
pub type GConverterIface = Struct__GConverterIface;
pub struct Struct__GConverterIface {
    g_iface: GTypeInterface,
    convert: extern "C" fn
                 (arg1: *mut GConverter, arg2: *c_void, arg3: gsize,
                  arg4: *mut c_void, arg5: gsize, arg6: GConverterFlags,
                  arg7: *mut gsize, arg8: *mut gsize, arg9: *mut *mut GError)
                 -> GConverterResult,
    reset: extern "C" fn(arg1: *mut GConverter),
}
pub type GCharsetConverterClass = Struct__GCharsetConverterClass;
pub struct Struct__GCharsetConverterClass {
    parent_class: GObjectClass,
}
pub type GConverterInputStreamClass = Struct__GConverterInputStreamClass;
pub type Struct__GConverterInputStreamPrivate = c_void;
pub type GConverterInputStreamPrivate = Struct__GConverterInputStreamPrivate;
pub struct Struct__GConverterInputStream {
    parent_instance: GFilterInputStream,
    _priv: *mut GConverterInputStreamPrivate,
}
pub struct Struct__GConverterInputStreamClass {
    parent_class: GFilterInputStreamClass,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
}
pub type GConverterOutputStreamClass = Struct__GConverterOutputStreamClass;
pub type Struct__GConverterOutputStreamPrivate = c_void;
pub type GConverterOutputStreamPrivate =
    Struct__GConverterOutputStreamPrivate;
pub struct Struct__GConverterOutputStream {
    parent_instance: GFilterOutputStream,
    _priv: *mut GConverterOutputStreamPrivate,
}
pub struct Struct__GConverterOutputStreamClass {
    parent_class: GFilterOutputStreamClass,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
}
pub type ssize_t = __ssize_t;
pub type gid_t = __gid_t;
pub type off_t = __off_t;
pub type useconds_t = __useconds_t;
pub type intptr_t = __intptr_t;
pub type socklen_t = __socklen_t;
pub type Enum_Unnamed42 = c_uint;
pub static _PC_LINK_MAX: c_uint = 0;
pub static _PC_MAX_CANON: c_uint = 1;
pub static _PC_MAX_INPUT: c_uint = 2;
pub static _PC_NAME_MAX: c_uint = 3;
pub static _PC_PATH_MAX: c_uint = 4;
pub static _PC_PIPE_BUF: c_uint = 5;
pub static _PC_CHOWN_RESTRICTED: c_uint = 6;
pub static _PC_NO_TRUNC: c_uint = 7;
pub static _PC_VDISABLE: c_uint = 8;
pub static _PC_SYNC_IO: c_uint = 9;
pub static _PC_ASYNC_IO: c_uint = 10;
pub static _PC_PRIO_IO: c_uint = 11;
pub static _PC_SOCK_MAXBUF: c_uint = 12;
pub static _PC_FILESIZEBITS: c_uint = 13;
pub static _PC_REC_INCR_XFER_SIZE: c_uint = 14;
pub static _PC_REC_MAX_XFER_SIZE: c_uint = 15;
pub static _PC_REC_MIN_XFER_SIZE: c_uint = 16;
pub static _PC_REC_XFER_ALIGN: c_uint = 17;
pub static _PC_ALLOC_SIZE_MIN: c_uint = 18;
pub static _PC_SYMLINK_MAX: c_uint = 19;
pub static _PC_2_SYMLINKS: c_uint = 20;
pub type Enum_Unnamed43 = c_uint;
pub static _SC_ARG_MAX: c_uint = 0;
pub static _SC_CHILD_MAX: c_uint = 1;
pub static _SC_CLK_TCK: c_uint = 2;
pub static _SC_NGROUPS_MAX: c_uint = 3;
pub static _SC_OPEN_MAX: c_uint = 4;
pub static _SC_STREAM_MAX: c_uint = 5;
pub static _SC_TZNAME_MAX: c_uint = 6;
pub static _SC_JOB_CONTROL: c_uint = 7;
pub static _SC_SAVED_IDS: c_uint = 8;
pub static _SC_REALTIME_SIGNALS: c_uint = 9;
pub static _SC_PRIORITY_SCHEDULING: c_uint = 10;
pub static _SC_TIMERS: c_uint = 11;
pub static _SC_ASYNCHRONOUS_IO: c_uint = 12;
pub static _SC_PRIORITIZED_IO: c_uint = 13;
pub static _SC_SYNCHRONIZED_IO: c_uint = 14;
pub static _SC_FSYNC: c_uint = 15;
pub static _SC_MAPPED_FILES: c_uint = 16;
pub static _SC_MEMLOCK: c_uint = 17;
pub static _SC_MEMLOCK_RANGE: c_uint = 18;
pub static _SC_MEMORY_PROTECTION: c_uint = 19;
pub static _SC_MESSAGE_PASSING: c_uint = 20;
pub static _SC_SEMAPHORES: c_uint = 21;
pub static _SC_SHARED_MEMORY_OBJECTS: c_uint = 22;
pub static _SC_AIO_LISTIO_MAX: c_uint = 23;
pub static _SC_AIO_MAX: c_uint = 24;
pub static _SC_AIO_PRIO_DELTA_MAX: c_uint = 25;
pub static _SC_DELAYTIMER_MAX: c_uint = 26;
pub static _SC_MQ_OPEN_MAX: c_uint = 27;
pub static _SC_MQ_PRIO_MAX: c_uint = 28;
pub static _SC_VERSION: c_uint = 29;
pub static _SC_PAGESIZE: c_uint = 30;
pub static _SC_RTSIG_MAX: c_uint = 31;
pub static _SC_SEM_NSEMS_MAX: c_uint = 32;
pub static _SC_SEM_VALUE_MAX: c_uint = 33;
pub static _SC_SIGQUEUE_MAX: c_uint = 34;
pub static _SC_TIMER_MAX: c_uint = 35;
pub static _SC_BC_BASE_MAX: c_uint = 36;
pub static _SC_BC_DIM_MAX: c_uint = 37;
pub static _SC_BC_SCALE_MAX: c_uint = 38;
pub static _SC_BC_STRING_MAX: c_uint = 39;
pub static _SC_COLL_WEIGHTS_MAX: c_uint = 40;
pub static _SC_EQUIV_CLASS_MAX: c_uint = 41;
pub static _SC_EXPR_NEST_MAX: c_uint = 42;
pub static _SC_LINE_MAX: c_uint = 43;
pub static _SC_RE_DUP_MAX: c_uint = 44;
pub static _SC_CHARCLASS_NAME_MAX: c_uint = 45;
pub static _SC_2_VERSION: c_uint = 46;
pub static _SC_2_C_BIND: c_uint = 47;
pub static _SC_2_C_DEV: c_uint = 48;
pub static _SC_2_FORT_DEV: c_uint = 49;
pub static _SC_2_FORT_RUN: c_uint = 50;
pub static _SC_2_SW_DEV: c_uint = 51;
pub static _SC_2_LOCALEDEF: c_uint = 52;
pub static _SC_PII: c_uint = 53;
pub static _SC_PII_XTI: c_uint = 54;
pub static _SC_PII_SOCKET: c_uint = 55;
pub static _SC_PII_INTERNET: c_uint = 56;
pub static _SC_PII_OSI: c_uint = 57;
pub static _SC_POLL: c_uint = 58;
pub static _SC_SELECT: c_uint = 59;
pub static _SC_UIO_MAXIOV: c_uint = 60;
pub static _SC_IOV_MAX: c_uint = 60;
pub static _SC_PII_INTERNET_STREAM: c_uint = 61;
pub static _SC_PII_INTERNET_DGRAM: c_uint = 62;
pub static _SC_PII_OSI_COTS: c_uint = 63;
pub static _SC_PII_OSI_CLTS: c_uint = 64;
pub static _SC_PII_OSI_M: c_uint = 65;
pub static _SC_T_IOV_MAX: c_uint = 66;
pub static _SC_THREADS: c_uint = 67;
pub static _SC_THREAD_SAFE_FUNCTIONS: c_uint = 68;
pub static _SC_GETGR_R_SIZE_MAX: c_uint = 69;
pub static _SC_GETPW_R_SIZE_MAX: c_uint = 70;
pub static _SC_LOGIN_NAME_MAX: c_uint = 71;
pub static _SC_TTY_NAME_MAX: c_uint = 72;
pub static _SC_THREAD_DESTRUCTOR_ITERATIONS: c_uint = 73;
pub static _SC_THREAD_KEYS_MAX: c_uint = 74;
pub static _SC_THREAD_STACK_MIN: c_uint = 75;
pub static _SC_THREAD_THREADS_MAX: c_uint = 76;
pub static _SC_THREAD_ATTR_STACKADDR: c_uint = 77;
pub static _SC_THREAD_ATTR_STACKSIZE: c_uint = 78;
pub static _SC_THREAD_PRIORITY_SCHEDULING: c_uint = 79;
pub static _SC_THREAD_PRIO_INHERIT: c_uint = 80;
pub static _SC_THREAD_PRIO_PROTECT: c_uint = 81;
pub static _SC_THREAD_PROCESS_SHARED: c_uint = 82;
pub static _SC_NPROCESSORS_CONF: c_uint = 83;
pub static _SC_NPROCESSORS_ONLN: c_uint = 84;
pub static _SC_PHYS_PAGES: c_uint = 85;
pub static _SC_AVPHYS_PAGES: c_uint = 86;
pub static _SC_ATEXIT_MAX: c_uint = 87;
pub static _SC_PASS_MAX: c_uint = 88;
pub static _SC_XOPEN_VERSION: c_uint = 89;
pub static _SC_XOPEN_XCU_VERSION: c_uint = 90;
pub static _SC_XOPEN_UNIX: c_uint = 91;
pub static _SC_XOPEN_CRYPT: c_uint = 92;
pub static _SC_XOPEN_ENH_I18N: c_uint = 93;
pub static _SC_XOPEN_SHM: c_uint = 94;
pub static _SC_2_CHAR_TERM: c_uint = 95;
pub static _SC_2_C_VERSION: c_uint = 96;
pub static _SC_2_UPE: c_uint = 97;
pub static _SC_XOPEN_XPG2: c_uint = 98;
pub static _SC_XOPEN_XPG3: c_uint = 99;
pub static _SC_XOPEN_XPG4: c_uint = 100;
pub static _SC_CHAR_BIT: c_uint = 101;
pub static _SC_CHAR_MAX: c_uint = 102;
pub static _SC_CHAR_MIN: c_uint = 103;
pub static _SC_INT_MAX: c_uint = 104;
pub static _SC_INT_MIN: c_uint = 105;
pub static _SC_LONG_BIT: c_uint = 106;
pub static _SC_WORD_BIT: c_uint = 107;
pub static _SC_MB_LEN_MAX: c_uint = 108;
pub static _SC_NZERO: c_uint = 109;
pub static _SC_SSIZE_MAX: c_uint = 110;
pub static _SC_SCHAR_MAX: c_uint = 111;
pub static _SC_SCHAR_MIN: c_uint = 112;
pub static _SC_SHRT_MAX: c_uint = 113;
pub static _SC_SHRT_MIN: c_uint = 114;
pub static _SC_UCHAR_MAX: c_uint = 115;
pub static _SC_UINT_MAX: c_uint = 116;
pub static _SC_ULONG_MAX: c_uint = 117;
pub static _SC_USHRT_MAX: c_uint = 118;
pub static _SC_NL_ARGMAX: c_uint = 119;
pub static _SC_NL_LANGMAX: c_uint = 120;
pub static _SC_NL_MSGMAX: c_uint = 121;
pub static _SC_NL_NMAX: c_uint = 122;
pub static _SC_NL_SETMAX: c_uint = 123;
pub static _SC_NL_TEXTMAX: c_uint = 124;
pub static _SC_XBS5_ILP32_OFF32: c_uint = 125;
pub static _SC_XBS5_ILP32_OFFBIG: c_uint = 126;
pub static _SC_XBS5_LP64_OFF64: c_uint = 127;
pub static _SC_XBS5_LPBIG_OFFBIG: c_uint = 128;
pub static _SC_XOPEN_LEGACY: c_uint = 129;
pub static _SC_XOPEN_REALTIME: c_uint = 130;
pub static _SC_XOPEN_REALTIME_THREADS: c_uint = 131;
pub static _SC_ADVISORY_INFO: c_uint = 132;
pub static _SC_BARRIERS: c_uint = 133;
pub static _SC_BASE: c_uint = 134;
pub static _SC_C_LANG_SUPPORT: c_uint = 135;
pub static _SC_C_LANG_SUPPORT_R: c_uint = 136;
pub static _SC_CLOCK_SELECTION: c_uint = 137;
pub static _SC_CPUTIME: c_uint = 138;
pub static _SC_THREAD_CPUTIME: c_uint = 139;
pub static _SC_DEVICE_IO: c_uint = 140;
pub static _SC_DEVICE_SPECIFIC: c_uint = 141;
pub static _SC_DEVICE_SPECIFIC_R: c_uint = 142;
pub static _SC_FD_MGMT: c_uint = 143;
pub static _SC_FIFO: c_uint = 144;
pub static _SC_PIPE: c_uint = 145;
pub static _SC_FILE_ATTRIBUTES: c_uint = 146;
pub static _SC_FILE_LOCKING: c_uint = 147;
pub static _SC_FILE_SYSTEM: c_uint = 148;
pub static _SC_MONOTONIC_CLOCK: c_uint = 149;
pub static _SC_MULTI_PROCESS: c_uint = 150;
pub static _SC_SINGLE_PROCESS: c_uint = 151;
pub static _SC_NETWORKING: c_uint = 152;
pub static _SC_READER_WRITER_LOCKS: c_uint = 153;
pub static _SC_SPIN_LOCKS: c_uint = 154;
pub static _SC_REGEXP: c_uint = 155;
pub static _SC_REGEX_VERSION: c_uint = 156;
pub static _SC_SHELL: c_uint = 157;
pub static _SC_SIGNALS: c_uint = 158;
pub static _SC_SPAWN: c_uint = 159;
pub static _SC_SPORADIC_SERVER: c_uint = 160;
pub static _SC_THREAD_SPORADIC_SERVER: c_uint = 161;
pub static _SC_SYSTEM_DATABASE: c_uint = 162;
pub static _SC_SYSTEM_DATABASE_R: c_uint = 163;
pub static _SC_TIMEOUTS: c_uint = 164;
pub static _SC_TYPED_MEMORY_OBJECTS: c_uint = 165;
pub static _SC_USER_GROUPS: c_uint = 166;
pub static _SC_USER_GROUPS_R: c_uint = 167;
pub static _SC_2_PBS: c_uint = 168;
pub static _SC_2_PBS_ACCOUNTING: c_uint = 169;
pub static _SC_2_PBS_LOCATE: c_uint = 170;
pub static _SC_2_PBS_MESSAGE: c_uint = 171;
pub static _SC_2_PBS_TRACK: c_uint = 172;
pub static _SC_SYMLOOP_MAX: c_uint = 173;
pub static _SC_STREAMS: c_uint = 174;
pub static _SC_2_PBS_CHECKPOINT: c_uint = 175;
pub static _SC_V6_ILP32_OFF32: c_uint = 176;
pub static _SC_V6_ILP32_OFFBIG: c_uint = 177;
pub static _SC_V6_LP64_OFF64: c_uint = 178;
pub static _SC_V6_LPBIG_OFFBIG: c_uint = 179;
pub static _SC_HOST_NAME_MAX: c_uint = 180;
pub static _SC_TRACE: c_uint = 181;
pub static _SC_TRACE_EVENT_FILTER: c_uint = 182;
pub static _SC_TRACE_INHERIT: c_uint = 183;
pub static _SC_TRACE_LOG: c_uint = 184;
pub static _SC_LEVEL1_ICACHE_SIZE: c_uint = 185;
pub static _SC_LEVEL1_ICACHE_ASSOC: c_uint = 186;
pub static _SC_LEVEL1_ICACHE_LINESIZE: c_uint = 187;
pub static _SC_LEVEL1_DCACHE_SIZE: c_uint = 188;
pub static _SC_LEVEL1_DCACHE_ASSOC: c_uint = 189;
pub static _SC_LEVEL1_DCACHE_LINESIZE: c_uint = 190;
pub static _SC_LEVEL2_CACHE_SIZE: c_uint = 191;
pub static _SC_LEVEL2_CACHE_ASSOC: c_uint = 192;
pub static _SC_LEVEL2_CACHE_LINESIZE: c_uint = 193;
pub static _SC_LEVEL3_CACHE_SIZE: c_uint = 194;
pub static _SC_LEVEL3_CACHE_ASSOC: c_uint = 195;
pub static _SC_LEVEL3_CACHE_LINESIZE: c_uint = 196;
pub static _SC_LEVEL4_CACHE_SIZE: c_uint = 197;
pub static _SC_LEVEL4_CACHE_ASSOC: c_uint = 198;
pub static _SC_LEVEL4_CACHE_LINESIZE: c_uint = 199;
pub static _SC_IPV6: c_uint = 235;
pub static _SC_RAW_SOCKETS: c_uint = 236;
pub static _SC_V7_ILP32_OFF32: c_uint = 237;
pub static _SC_V7_ILP32_OFFBIG: c_uint = 238;
pub static _SC_V7_LP64_OFF64: c_uint = 239;
pub static _SC_V7_LPBIG_OFFBIG: c_uint = 240;
pub static _SC_SS_REPL_MAX: c_uint = 241;
pub static _SC_TRACE_EVENT_NAME_MAX: c_uint = 242;
pub static _SC_TRACE_NAME_MAX: c_uint = 243;
pub static _SC_TRACE_SYS_MAX: c_uint = 244;
pub static _SC_TRACE_USER_EVENT_MAX: c_uint = 245;
pub static _SC_XOPEN_STREAMS: c_uint = 246;
pub static _SC_THREAD_ROBUST_PRIO_INHERIT: c_uint = 247;
pub static _SC_THREAD_ROBUST_PRIO_PROTECT: c_uint = 248;
pub type Enum_Unnamed44 = c_uint;
pub static _CS_PATH: c_uint = 0;
pub static _CS_V6_WIDTH_RESTRICTED_ENVS: c_uint = 1;
pub static _CS_GNU_LIBC_VERSION: c_uint = 2;
pub static _CS_GNU_LIBPTHREAD_VERSION: c_uint = 3;
pub static _CS_V5_WIDTH_RESTRICTED_ENVS: c_uint = 4;
pub static _CS_V7_WIDTH_RESTRICTED_ENVS: c_uint = 5;
pub static _CS_LFS_CFLAGS: c_uint = 1000;
pub static _CS_LFS_LDFLAGS: c_uint = 1001;
pub static _CS_LFS_LIBS: c_uint = 1002;
pub static _CS_LFS_LINTFLAGS: c_uint = 1003;
pub static _CS_LFS64_CFLAGS: c_uint = 1004;
pub static _CS_LFS64_LDFLAGS: c_uint = 1005;
pub static _CS_LFS64_LIBS: c_uint = 1006;
pub static _CS_LFS64_LINTFLAGS: c_uint = 1007;
pub static _CS_XBS5_ILP32_OFF32_CFLAGS: c_uint = 1100;
pub static _CS_XBS5_ILP32_OFF32_LDFLAGS: c_uint = 1101;
pub static _CS_XBS5_ILP32_OFF32_LIBS: c_uint = 1102;
pub static _CS_XBS5_ILP32_OFF32_LINTFLAGS: c_uint = 1103;
pub static _CS_XBS5_ILP32_OFFBIG_CFLAGS: c_uint = 1104;
pub static _CS_XBS5_ILP32_OFFBIG_LDFLAGS: c_uint = 1105;
pub static _CS_XBS5_ILP32_OFFBIG_LIBS: c_uint = 1106;
pub static _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: c_uint = 1107;
pub static _CS_XBS5_LP64_OFF64_CFLAGS: c_uint = 1108;
pub static _CS_XBS5_LP64_OFF64_LDFLAGS: c_uint = 1109;
pub static _CS_XBS5_LP64_OFF64_LIBS: c_uint = 1110;
pub static _CS_XBS5_LP64_OFF64_LINTFLAGS: c_uint = 1111;
pub static _CS_XBS5_LPBIG_OFFBIG_CFLAGS: c_uint = 1112;
pub static _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: c_uint = 1113;
pub static _CS_XBS5_LPBIG_OFFBIG_LIBS: c_uint = 1114;
pub static _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: c_uint = 1115;
pub static _CS_POSIX_V6_ILP32_OFF32_CFLAGS: c_uint = 1116;
pub static _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: c_uint = 1117;
pub static _CS_POSIX_V6_ILP32_OFF32_LIBS: c_uint = 1118;
pub static _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: c_uint = 1119;
pub static _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: c_uint = 1120;
pub static _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: c_uint = 1121;
pub static _CS_POSIX_V6_ILP32_OFFBIG_LIBS: c_uint = 1122;
pub static _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: c_uint = 1123;
pub static _CS_POSIX_V6_LP64_OFF64_CFLAGS: c_uint = 1124;
pub static _CS_POSIX_V6_LP64_OFF64_LDFLAGS: c_uint = 1125;
pub static _CS_POSIX_V6_LP64_OFF64_LIBS: c_uint = 1126;
pub static _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: c_uint = 1127;
pub static _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: c_uint = 1128;
pub static _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: c_uint = 1129;
pub static _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: c_uint = 1130;
pub static _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: c_uint = 1131;
pub static _CS_POSIX_V7_ILP32_OFF32_CFLAGS: c_uint = 1132;
pub static _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: c_uint = 1133;
pub static _CS_POSIX_V7_ILP32_OFF32_LIBS: c_uint = 1134;
pub static _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: c_uint = 1135;
pub static _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: c_uint = 1136;
pub static _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: c_uint = 1137;
pub static _CS_POSIX_V7_ILP32_OFFBIG_LIBS: c_uint = 1138;
pub static _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: c_uint = 1139;
pub static _CS_POSIX_V7_LP64_OFF64_CFLAGS: c_uint = 1140;
pub static _CS_POSIX_V7_LP64_OFF64_LDFLAGS: c_uint = 1141;
pub static _CS_POSIX_V7_LP64_OFF64_LIBS: c_uint = 1142;
pub static _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: c_uint = 1143;
pub static _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: c_uint = 1144;
pub static _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: c_uint = 1145;
pub static _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: c_uint = 1146;
pub static _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: c_uint = 1147;
pub static _CS_V6_ENV: c_uint = 1148;
pub static _CS_V7_ENV: c_uint = 1149;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type ulong = c_ulong;
pub type ushort = c_ushort;
pub type _uint = c_uint;
pub type int8_t = c_schar;
pub type int16_t = c_short;
pub type int32_t = c_int;
pub type int64_t = c_long;
pub type u_int8_t = c_uchar;
pub type u_int16_t = c_ushort;
pub type u_int32_t = c_uint;
pub type u_int64_t = c_ulong;
pub type register_t = c_long;
pub struct Struct_timeval {
    tv_sec: __time_t,
    tv_usec: __suseconds_t,
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = c_long;
pub struct fd_set {
    __fds_bits: [__fd_mask, ..16u],
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type Struct__GCredentialsClass = c_void;
pub type GCredentialsClass = Struct__GCredentialsClass;
pub type GDataInputStreamClass = Struct__GDataInputStreamClass;
pub type Struct__GDataInputStreamPrivate = c_void;
pub type GDataInputStreamPrivate = Struct__GDataInputStreamPrivate;
pub struct Struct__GDataInputStream {
    parent_instance: GBufferedInputStream,
    _priv: *mut GDataInputStreamPrivate,
}
pub struct Struct__GDataInputStreamClass {
    parent_class: GBufferedInputStreamClass,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
}
pub type GDataOutputStream = Struct__GDataOutputStream;
pub type GDataOutputStreamClass = Struct__GDataOutputStreamClass;
pub type Struct__GDataOutputStreamPrivate = c_void;
pub type GDataOutputStreamPrivate = Struct__GDataOutputStreamPrivate;
pub struct Struct__GDataOutputStream {
    parent_instance: GFilterOutputStream,
    _priv: *mut GDataOutputStreamPrivate,
}
pub struct Struct__GDataOutputStreamClass {
    parent_class: GFilterOutputStreamClass,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
}
pub type GDBusInterfaceMethodCallFunc =
    extern "C" fn
        (arg1: *mut GDBusConnection, arg2: *gchar, arg3: *gchar, arg4: *gchar,
         arg5: *gchar, arg6: *mut GVariant, arg7: *mut GDBusMethodInvocation,
         arg8: gpointer);
pub type GDBusInterfaceGetPropertyFunc =
    extern "C" fn
        (arg1: *mut GDBusConnection, arg2: *gchar, arg3: *gchar, arg4: *gchar,
         arg5: *gchar, arg6: *mut *mut GError, arg7: gpointer)
        -> *mut GVariant;
pub type GDBusInterfaceSetPropertyFunc =
    extern "C" fn
        (arg1: *mut GDBusConnection, arg2: *gchar, arg3: *gchar, arg4: *gchar,
         arg5: *gchar, arg6: *mut GVariant, arg7: *mut *mut GError,
         arg8: gpointer) -> gboolean;
pub struct Struct__GDBusInterfaceVTable {
    method_call: GDBusInterfaceMethodCallFunc,
    get_property: GDBusInterfaceGetPropertyFunc,
    set_property: GDBusInterfaceSetPropertyFunc,
    padding: [gpointer, ..8u],
}
pub type GDBusSubtreeEnumerateFunc =
    extern "C" fn
        (arg1: *mut GDBusConnection, arg2: *gchar, arg3: *gchar,
         arg4: gpointer) -> *mut *mut gchar;
pub type GDBusSubtreeIntrospectFunc =
    extern "C" fn
        (arg1: *mut GDBusConnection, arg2: *gchar, arg3: *gchar, arg4: *gchar,
         arg5: gpointer) -> *mut *mut GDBusInterfaceInfo;
pub type GDBusSubtreeDispatchFunc =
    extern "C" fn
        (arg1: *mut GDBusConnection, arg2: *gchar, arg3: *gchar, arg4: *gchar,
         arg5: *gchar, arg6: *mut gpointer, arg7: gpointer)
        -> *GDBusInterfaceVTable;
pub struct Struct__GDBusSubtreeVTable {
    enumerate: GDBusSubtreeEnumerateFunc,
    introspect: GDBusSubtreeIntrospectFunc,
    dispatch: GDBusSubtreeDispatchFunc,
    padding: [gpointer, ..8u],
}
pub type GDBusSignalCallback =
    extern "C" fn
        (arg1: *mut GDBusConnection, arg2: *gchar, arg3: *gchar, arg4: *gchar,
         arg5: *gchar, arg6: *mut GVariant, arg7: gpointer);
pub type GDBusMessageFilterFunction =
    extern "C" fn
        (arg1: *mut GDBusConnection, arg2: *mut GDBusMessage, arg3: gboolean,
         arg4: gpointer) -> *mut GDBusMessage;
pub struct Struct__GDBusErrorEntry {
    error_code: gint,
    dbus_error_name: *gchar,
}
pub struct Struct__GDBusAnnotationInfo {
    ref_count: gint,
    key: *mut gchar,
    value: *mut gchar,
    annotations: *mut *mut GDBusAnnotationInfo,
}
pub struct Struct__GDBusArgInfo {
    ref_count: gint,
    name: *mut gchar,
    signature: *mut gchar,
    annotations: *mut *mut GDBusAnnotationInfo,
}
pub struct Struct__GDBusMethodInfo {
    ref_count: gint,
    name: *mut gchar,
    in_args: *mut *mut GDBusArgInfo,
    out_args: *mut *mut GDBusArgInfo,
    annotations: *mut *mut GDBusAnnotationInfo,
}
pub struct Struct__GDBusSignalInfo {
    ref_count: gint,
    name: *mut gchar,
    args: *mut *mut GDBusArgInfo,
    annotations: *mut *mut GDBusAnnotationInfo,
}
pub struct Struct__GDBusPropertyInfo {
    ref_count: gint,
    name: *mut gchar,
    signature: *mut gchar,
    flags: GDBusPropertyInfoFlags,
    annotations: *mut *mut GDBusAnnotationInfo,
}
pub struct Struct__GDBusInterfaceInfo {
    ref_count: gint,
    name: *mut gchar,
    methods: *mut *mut GDBusMethodInfo,
    signals: *mut *mut GDBusSignalInfo,
    properties: *mut *mut GDBusPropertyInfo,
    annotations: *mut *mut GDBusAnnotationInfo,
}
pub struct Struct__GDBusNodeInfo {
    ref_count: gint,
    path: *mut gchar,
    interfaces: *mut *mut GDBusInterfaceInfo,
    nodes: *mut *mut GDBusNodeInfo,
    annotations: *mut *mut GDBusAnnotationInfo,
}
pub type GBusAcquiredCallback =
    extern "C" fn(arg1: *mut GDBusConnection, arg2: *gchar, arg3: gpointer);
pub type GBusNameAcquiredCallback =
    extern "C" fn(arg1: *mut GDBusConnection, arg2: *gchar, arg3: gpointer);
pub type GBusNameLostCallback =
    extern "C" fn(arg1: *mut GDBusConnection, arg2: *gchar, arg3: gpointer);
pub type GBusNameAppearedCallback =
    extern "C" fn
        (arg1: *mut GDBusConnection, arg2: *gchar, arg3: *gchar,
         arg4: gpointer);
pub type GBusNameVanishedCallback =
    extern "C" fn(arg1: *mut GDBusConnection, arg2: *gchar, arg3: gpointer);
pub type GDBusProxyClass = Struct__GDBusProxyClass;
pub type Struct__GDBusProxyPrivate = c_void;
pub type GDBusProxyPrivate = Struct__GDBusProxyPrivate;
pub struct Struct__GDBusProxy {
    parent_instance: GObject,
    _priv: *mut GDBusProxyPrivate,
}
pub struct Struct__GDBusProxyClass {
    parent_class: GObjectClass,
    g_properties_changed: extern "C" fn
                              (arg1: *mut GDBusProxy, arg2: *mut GVariant,
                               arg3: **gchar),
    g_signal: extern "C" fn
                  (arg1: *mut GDBusProxy, arg2: *gchar, arg3: *gchar,
                   arg4: *mut GVariant),
    padding: [gpointer, ..32u],
}
pub type GDriveIface = Struct__GDriveIface;
pub struct Struct__GDriveIface {
    g_iface: GTypeInterface,
    changed: extern "C" fn(arg1: *mut GDrive),
    disconnected: extern "C" fn(arg1: *mut GDrive),
    eject_button: extern "C" fn(arg1: *mut GDrive),
    get_name: extern "C" fn(arg1: *mut GDrive) -> *mut c_schar,
    get_icon: extern "C" fn(arg1: *mut GDrive) -> *mut GIcon,
    has_volumes: extern "C" fn(arg1: *mut GDrive) -> gboolean,
    get_volumes: extern "C" fn(arg1: *mut GDrive) -> *mut GList,
    is_media_removable: extern "C" fn(arg1: *mut GDrive) -> gboolean,
    has_media: extern "C" fn(arg1: *mut GDrive) -> gboolean,
    is_media_check_automatic: extern "C" fn(arg1: *mut GDrive) -> gboolean,
    can_eject: extern "C" fn(arg1: *mut GDrive) -> gboolean,
    can_poll_for_media: extern "C" fn(arg1: *mut GDrive) -> gboolean,
    eject: extern "C" fn
               (arg1: *mut GDrive, arg2: GMountUnmountFlags,
                arg3: *mut GCancellable, arg4: GAsyncReadyCallback,
                arg5: gpointer),
    eject_finish: extern "C" fn
                      (arg1: *mut GDrive, arg2: *mut GAsyncResult,
                       arg3: *mut *mut GError) -> gboolean,
    poll_for_media: extern "C" fn
                        (arg1: *mut GDrive, arg2: *mut GCancellable,
                         arg3: GAsyncReadyCallback, arg4: gpointer),
    poll_for_media_finish: extern "C" fn
                               (arg1: *mut GDrive, arg2: *mut GAsyncResult,
                                arg3: *mut *mut GError) -> gboolean,
    get_identifier: extern "C" fn(arg1: *mut GDrive, arg2: *c_schar)
                        -> *mut c_schar,
    enumerate_identifiers: extern "C" fn(arg1: *mut GDrive)
                               -> *mut *mut c_schar,
    get_start_stop_type: extern "C" fn(arg1: *mut GDrive)
                             -> GDriveStartStopType,
    can_start: extern "C" fn(arg1: *mut GDrive) -> gboolean,
    can_start_degraded: extern "C" fn(arg1: *mut GDrive) -> gboolean,
    start: extern "C" fn
               (arg1: *mut GDrive, arg2: GDriveStartFlags,
                arg3: *mut GMountOperation, arg4: *mut GCancellable,
                arg5: GAsyncReadyCallback, arg6: gpointer),
    start_finish: extern "C" fn
                      (arg1: *mut GDrive, arg2: *mut GAsyncResult,
                       arg3: *mut *mut GError) -> gboolean,
    can_stop: extern "C" fn(arg1: *mut GDrive) -> gboolean,
    stop: extern "C" fn
              (arg1: *mut GDrive, arg2: GMountUnmountFlags,
               arg3: *mut GMountOperation, arg4: *mut GCancellable,
               arg5: GAsyncReadyCallback, arg6: gpointer),
    stop_finish: extern "C" fn
                     (arg1: *mut GDrive, arg2: *mut GAsyncResult,
                      arg3: *mut *mut GError) -> gboolean,
    stop_button: extern "C" fn(arg1: *mut GDrive),
    eject_with_operation: extern "C" fn
                              (arg1: *mut GDrive, arg2: GMountUnmountFlags,
                               arg3: *mut GMountOperation,
                               arg4: *mut GCancellable,
                               arg5: GAsyncReadyCallback, arg6: gpointer),
    eject_with_operation_finish: extern "C" fn
                                     (arg1: *mut GDrive,
                                      arg2: *mut GAsyncResult,
                                      arg3: *mut *mut GError) -> gboolean,
    get_sort_key: extern "C" fn(arg1: *mut GDrive) -> *gchar,
    get_symbolic_icon: extern "C" fn(arg1: *mut GDrive) -> *mut GIcon,
}
pub type GIconIface = Struct__GIconIface;
pub struct Struct__GIconIface {
    g_iface: GTypeInterface,
    hash: extern "C" fn(arg1: *mut GIcon) -> guint,
    equal: extern "C" fn(arg1: *mut GIcon, arg2: *mut GIcon) -> gboolean,
    to_tokens: extern "C" fn
                   (arg1: *mut GIcon, arg2: *mut GPtrArray, arg3: *mut gint)
                   -> gboolean,
    from_tokens: extern "C" fn
                     (arg1: *mut *mut gchar, arg2: gint, arg3: gint,
                      arg4: *mut *mut GError) -> *mut GIcon,
    serialize: extern "C" fn(arg1: *mut GIcon) -> *mut GVariant,
}
pub type Struct__GEmblem = c_void;
pub type GEmblem = Struct__GEmblem;
pub type Struct__GEmblemClass = c_void;
pub type GEmblemClass = Struct__GEmblemClass;
pub type GEmblemedIcon = Struct__GEmblemedIcon;
pub type GEmblemedIconClass = Struct__GEmblemedIconClass;
pub type Struct__GEmblemedIconPrivate = c_void;
pub type GEmblemedIconPrivate = Struct__GEmblemedIconPrivate;
pub struct Struct__GEmblemedIcon {
    parent_instance: GObject,
    _priv: *mut GEmblemedIconPrivate,
}
pub struct Struct__GEmblemedIconClass {
    parent_class: GObjectClass,
}
pub struct Struct__GFileAttributeInfo {
    name: *mut c_schar,
    _type: GFileAttributeType,
    flags: GFileAttributeInfoFlags,
}
pub struct Struct__GFileAttributeInfoList {
    infos: *mut GFileAttributeInfo,
    n_infos: c_int,
}
pub type GFileEnumeratorClass = Struct__GFileEnumeratorClass;
pub type Struct__GFileEnumeratorPrivate = c_void;
pub type GFileEnumeratorPrivate = Struct__GFileEnumeratorPrivate;
pub struct Struct__GFileEnumerator {
    parent_instance: GObject,
    _priv: *mut GFileEnumeratorPrivate,
}
pub struct Struct__GFileEnumeratorClass {
    parent_class: GObjectClass,
    next_file: extern "C" fn
                   (arg1: *mut GFileEnumerator, arg2: *mut GCancellable,
                    arg3: *mut *mut GError) -> *mut GFileInfo,
    close_fn: extern "C" fn
                  (arg1: *mut GFileEnumerator, arg2: *mut GCancellable,
                   arg3: *mut *mut GError) -> gboolean,
    next_files_async: extern "C" fn
                          (arg1: *mut GFileEnumerator, arg2: c_int,
                           arg3: c_int, arg4: *mut GCancellable,
                           arg5: GAsyncReadyCallback, arg6: gpointer),
    next_files_finish: extern "C" fn
                           (arg1: *mut GFileEnumerator,
                            arg2: *mut GAsyncResult, arg3: *mut *mut GError)
                           -> *mut GList,
    close_async: extern "C" fn
                     (arg1: *mut GFileEnumerator, arg2: c_int,
                      arg3: *mut GCancellable, arg4: GAsyncReadyCallback,
                      arg5: gpointer),
    close_finish: extern "C" fn
                      (arg1: *mut GFileEnumerator, arg2: *mut GAsyncResult,
                       arg3: *mut *mut GError) -> gboolean,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
    _g_reserved6: extern "C" fn(),
    _g_reserved7: extern "C" fn(),
}
pub type GFileIface = Struct__GFileIface;
pub struct Struct__GFileIface {
    g_iface: GTypeInterface,
    dup: extern "C" fn(arg1: *mut GFile) -> *mut GFile,
    hash: extern "C" fn(arg1: *mut GFile) -> guint,
    equal: extern "C" fn(arg1: *mut GFile, arg2: *mut GFile) -> gboolean,
    is_native: extern "C" fn(arg1: *mut GFile) -> gboolean,
    has_uri_scheme: extern "C" fn(arg1: *mut GFile, arg2: *c_schar)
                        -> gboolean,
    get_uri_scheme: extern "C" fn(arg1: *mut GFile) -> *mut c_schar,
    get_basename: extern "C" fn(arg1: *mut GFile) -> *mut c_schar,
    get_path: extern "C" fn(arg1: *mut GFile) -> *mut c_schar,
    get_uri: extern "C" fn(arg1: *mut GFile) -> *mut c_schar,
    get_parse_name: extern "C" fn(arg1: *mut GFile) -> *mut c_schar,
    get_parent: extern "C" fn(arg1: *mut GFile) -> *mut GFile,
    prefix_matches: extern "C" fn(arg1: *mut GFile, arg2: *mut GFile)
                        -> gboolean,
    get_relative_path: extern "C" fn(arg1: *mut GFile, arg2: *mut GFile)
                           -> *mut c_schar,
    resolve_relative_path: extern "C" fn(arg1: *mut GFile, arg2: *c_schar)
                               -> *mut GFile,
    get_child_for_display_name: extern "C" fn
                                    (arg1: *mut GFile, arg2: *c_schar,
                                     arg3: *mut *mut GError) -> *mut GFile,
    enumerate_children: extern "C" fn
                            (arg1: *mut GFile, arg2: *c_schar,
                             arg3: GFileQueryInfoFlags,
                             arg4: *mut GCancellable, arg5: *mut *mut GError)
                            -> *mut GFileEnumerator,
    enumerate_children_async: extern "C" fn
                                  (arg1: *mut GFile, arg2: *c_schar,
                                   arg3: GFileQueryInfoFlags, arg4: c_int,
                                   arg5: *mut GCancellable,
                                   arg6: GAsyncReadyCallback, arg7: gpointer),
    enumerate_children_finish: extern "C" fn
                                   (arg1: *mut GFile, arg2: *mut GAsyncResult,
                                    arg3: *mut *mut GError)
                                   -> *mut GFileEnumerator,
    query_info: extern "C" fn
                    (arg1: *mut GFile, arg2: *c_schar,
                     arg3: GFileQueryInfoFlags, arg4: *mut GCancellable,
                     arg5: *mut *mut GError) -> *mut GFileInfo,
    query_info_async: extern "C" fn
                          (arg1: *mut GFile, arg2: *c_schar,
                           arg3: GFileQueryInfoFlags, arg4: c_int,
                           arg5: *mut GCancellable, arg6: GAsyncReadyCallback,
                           arg7: gpointer),
    query_info_finish: extern "C" fn
                           (arg1: *mut GFile, arg2: *mut GAsyncResult,
                            arg3: *mut *mut GError) -> *mut GFileInfo,
    query_filesystem_info: extern "C" fn
                               (arg1: *mut GFile, arg2: *c_schar,
                                arg3: *mut GCancellable,
                                arg4: *mut *mut GError) -> *mut GFileInfo,
    query_filesystem_info_async: extern "C" fn
                                     (arg1: *mut GFile, arg2: *c_schar,
                                      arg3: c_int, arg4: *mut GCancellable,
                                      arg5: GAsyncReadyCallback,
                                      arg6: gpointer),
    query_filesystem_info_finish: extern "C" fn
                                      (arg1: *mut GFile,
                                       arg2: *mut GAsyncResult,
                                       arg3: *mut *mut GError)
                                      -> *mut GFileInfo,
    find_enclosing_mount: extern "C" fn
                              (arg1: *mut GFile, arg2: *mut GCancellable,
                               arg3: *mut *mut GError) -> *mut GMount,
    find_enclosing_mount_async: extern "C" fn
                                    (arg1: *mut GFile, arg2: c_int,
                                     arg3: *mut GCancellable,
                                     arg4: GAsyncReadyCallback,
                                     arg5: gpointer),
    find_enclosing_mount_finish: extern "C" fn
                                     (arg1: *mut GFile,
                                      arg2: *mut GAsyncResult,
                                      arg3: *mut *mut GError) -> *mut GMount,
    set_display_name: extern "C" fn
                          (arg1: *mut GFile, arg2: *c_schar,
                           arg3: *mut GCancellable, arg4: *mut *mut GError)
                          -> *mut GFile,
    set_display_name_async: extern "C" fn
                                (arg1: *mut GFile, arg2: *c_schar,
                                 arg3: c_int, arg4: *mut GCancellable,
                                 arg5: GAsyncReadyCallback, arg6: gpointer),
    set_display_name_finish: extern "C" fn
                                 (arg1: *mut GFile, arg2: *mut GAsyncResult,
                                  arg3: *mut *mut GError) -> *mut GFile,
    query_settable_attributes: extern "C" fn
                                   (arg1: *mut GFile, arg2: *mut GCancellable,
                                    arg3: *mut *mut GError)
                                   -> *mut GFileAttributeInfoList,
    _query_settable_attributes_async: extern "C" fn(),
    _query_settable_attributes_finish: extern "C" fn(),
    query_writable_namespaces: extern "C" fn
                                   (arg1: *mut GFile, arg2: *mut GCancellable,
                                    arg3: *mut *mut GError)
                                   -> *mut GFileAttributeInfoList,
    _query_writable_namespaces_async: extern "C" fn(),
    _query_writable_namespaces_finish: extern "C" fn(),
    set_attribute: extern "C" fn
                       (arg1: *mut GFile, arg2: *c_schar,
                        arg3: GFileAttributeType, arg4: gpointer,
                        arg5: GFileQueryInfoFlags, arg6: *mut GCancellable,
                        arg7: *mut *mut GError) -> gboolean,
    set_attributes_from_info: extern "C" fn
                                  (arg1: *mut GFile, arg2: *mut GFileInfo,
                                   arg3: GFileQueryInfoFlags,
                                   arg4: *mut GCancellable,
                                   arg5: *mut *mut GError) -> gboolean,
    set_attributes_async: extern "C" fn
                              (arg1: *mut GFile, arg2: *mut GFileInfo,
                               arg3: GFileQueryInfoFlags, arg4: c_int,
                               arg5: *mut GCancellable,
                               arg6: GAsyncReadyCallback, arg7: gpointer),
    set_attributes_finish: extern "C" fn
                               (arg1: *mut GFile, arg2: *mut GAsyncResult,
                                arg3: *mut *mut GFileInfo,
                                arg4: *mut *mut GError) -> gboolean,
    read_fn: extern "C" fn
                 (arg1: *mut GFile, arg2: *mut GCancellable,
                  arg3: *mut *mut GError) -> *mut GFileInputStream,
    read_async: extern "C" fn
                    (arg1: *mut GFile, arg2: c_int, arg3: *mut GCancellable,
                     arg4: GAsyncReadyCallback, arg5: gpointer),
    read_finish: extern "C" fn
                     (arg1: *mut GFile, arg2: *mut GAsyncResult,
                      arg3: *mut *mut GError) -> *mut GFileInputStream,
    append_to: extern "C" fn
                   (arg1: *mut GFile, arg2: GFileCreateFlags,
                    arg3: *mut GCancellable, arg4: *mut *mut GError)
                   -> *mut GFileOutputStream,
    append_to_async: extern "C" fn
                         (arg1: *mut GFile, arg2: GFileCreateFlags,
                          arg3: c_int, arg4: *mut GCancellable,
                          arg5: GAsyncReadyCallback, arg6: gpointer),
    append_to_finish: extern "C" fn
                          (arg1: *mut GFile, arg2: *mut GAsyncResult,
                           arg3: *mut *mut GError) -> *mut GFileOutputStream,
    create: extern "C" fn
                (arg1: *mut GFile, arg2: GFileCreateFlags,
                 arg3: *mut GCancellable, arg4: *mut *mut GError)
                -> *mut GFileOutputStream,
    create_async: extern "C" fn
                      (arg1: *mut GFile, arg2: GFileCreateFlags, arg3: c_int,
                       arg4: *mut GCancellable, arg5: GAsyncReadyCallback,
                       arg6: gpointer),
    create_finish: extern "C" fn
                       (arg1: *mut GFile, arg2: *mut GAsyncResult,
                        arg3: *mut *mut GError) -> *mut GFileOutputStream,
    replace: extern "C" fn
                 (arg1: *mut GFile, arg2: *c_schar, arg3: gboolean,
                  arg4: GFileCreateFlags, arg5: *mut GCancellable,
                  arg6: *mut *mut GError) -> *mut GFileOutputStream,
    replace_async: extern "C" fn
                       (arg1: *mut GFile, arg2: *c_schar, arg3: gboolean,
                        arg4: GFileCreateFlags, arg5: c_int,
                        arg6: *mut GCancellable, arg7: GAsyncReadyCallback,
                        arg8: gpointer),
    replace_finish: extern "C" fn
                        (arg1: *mut GFile, arg2: *mut GAsyncResult,
                         arg3: *mut *mut GError) -> *mut GFileOutputStream,
    delete_file: extern "C" fn
                     (arg1: *mut GFile, arg2: *mut GCancellable,
                      arg3: *mut *mut GError) -> gboolean,
    delete_file_async: extern "C" fn
                           (arg1: *mut GFile, arg2: c_int,
                            arg3: *mut GCancellable,
                            arg4: GAsyncReadyCallback, arg5: gpointer),
    delete_file_finish: extern "C" fn
                            (arg1: *mut GFile, arg2: *mut GAsyncResult,
                             arg3: *mut *mut GError) -> gboolean,
    trash: extern "C" fn
               (arg1: *mut GFile, arg2: *mut GCancellable,
                arg3: *mut *mut GError) -> gboolean,
    trash_async: extern "C" fn
                     (arg1: *mut GFile, arg2: c_int, arg3: *mut GCancellable,
                      arg4: GAsyncReadyCallback, arg5: gpointer),
    trash_finish: extern "C" fn
                      (arg1: *mut GFile, arg2: *mut GAsyncResult,
                       arg3: *mut *mut GError) -> gboolean,
    make_directory: extern "C" fn
                        (arg1: *mut GFile, arg2: *mut GCancellable,
                         arg3: *mut *mut GError) -> gboolean,
    make_directory_async: extern "C" fn
                              (arg1: *mut GFile, arg2: c_int,
                               arg3: *mut GCancellable,
                               arg4: GAsyncReadyCallback, arg5: gpointer),
    make_directory_finish: extern "C" fn
                               (arg1: *mut GFile, arg2: *mut GAsyncResult,
                                arg3: *mut *mut GError) -> gboolean,
    make_symbolic_link: extern "C" fn
                            (arg1: *mut GFile, arg2: *c_schar,
                             arg3: *mut GCancellable, arg4: *mut *mut GError)
                            -> gboolean,
    _make_symbolic_link_async: extern "C" fn(),
    _make_symbolic_link_finish: extern "C" fn(),
    copy: extern "C" fn
              (arg1: *mut GFile, arg2: *mut GFile, arg3: GFileCopyFlags,
               arg4: *mut GCancellable, arg5: GFileProgressCallback,
               arg6: gpointer, arg7: *mut *mut GError) -> gboolean,
    copy_async: extern "C" fn
                    (arg1: *mut GFile, arg2: *mut GFile, arg3: GFileCopyFlags,
                     arg4: c_int, arg5: *mut GCancellable,
                     arg6: GFileProgressCallback, arg7: gpointer,
                     arg8: GAsyncReadyCallback, arg9: gpointer),
    copy_finish: extern "C" fn
                     (arg1: *mut GFile, arg2: *mut GAsyncResult,
                      arg3: *mut *mut GError) -> gboolean,
    move: extern "C" fn
              (arg1: *mut GFile, arg2: *mut GFile, arg3: GFileCopyFlags,
               arg4: *mut GCancellable, arg5: GFileProgressCallback,
               arg6: gpointer, arg7: *mut *mut GError) -> gboolean,
    _move_async: extern "C" fn(),
    _move_finish: extern "C" fn(),
    mount_mountable: extern "C" fn
                         (arg1: *mut GFile, arg2: GMountMountFlags,
                          arg3: *mut GMountOperation, arg4: *mut GCancellable,
                          arg5: GAsyncReadyCallback, arg6: gpointer),
    mount_mountable_finish: extern "C" fn
                                (arg1: *mut GFile, arg2: *mut GAsyncResult,
                                 arg3: *mut *mut GError) -> *mut GFile,
    unmount_mountable: extern "C" fn
                           (arg1: *mut GFile, arg2: GMountUnmountFlags,
                            arg3: *mut GCancellable,
                            arg4: GAsyncReadyCallback, arg5: gpointer),
    unmount_mountable_finish: extern "C" fn
                                  (arg1: *mut GFile, arg2: *mut GAsyncResult,
                                   arg3: *mut *mut GError) -> gboolean,
    eject_mountable: extern "C" fn
                         (arg1: *mut GFile, arg2: GMountUnmountFlags,
                          arg3: *mut GCancellable, arg4: GAsyncReadyCallback,
                          arg5: gpointer),
    eject_mountable_finish: extern "C" fn
                                (arg1: *mut GFile, arg2: *mut GAsyncResult,
                                 arg3: *mut *mut GError) -> gboolean,
    mount_enclosing_volume: extern "C" fn
                                (arg1: *mut GFile, arg2: GMountMountFlags,
                                 arg3: *mut GMountOperation,
                                 arg4: *mut GCancellable,
                                 arg5: GAsyncReadyCallback, arg6: gpointer),
    mount_enclosing_volume_finish: extern "C" fn
                                       (arg1: *mut GFile,
                                        arg2: *mut GAsyncResult,
                                        arg3: *mut *mut GError) -> gboolean,
    monitor_dir: extern "C" fn
                     (arg1: *mut GFile, arg2: GFileMonitorFlags,
                      arg3: *mut GCancellable, arg4: *mut *mut GError)
                     -> *mut GFileMonitor,
    monitor_file: extern "C" fn
                      (arg1: *mut GFile, arg2: GFileMonitorFlags,
                       arg3: *mut GCancellable, arg4: *mut *mut GError)
                      -> *mut GFileMonitor,
    open_readwrite: extern "C" fn
                        (arg1: *mut GFile, arg2: *mut GCancellable,
                         arg3: *mut *mut GError) -> *mut GFileIOStream,
    open_readwrite_async: extern "C" fn
                              (arg1: *mut GFile, arg2: c_int,
                               arg3: *mut GCancellable,
                               arg4: GAsyncReadyCallback, arg5: gpointer),
    open_readwrite_finish: extern "C" fn
                               (arg1: *mut GFile, arg2: *mut GAsyncResult,
                                arg3: *mut *mut GError) -> *mut GFileIOStream,
    create_readwrite: extern "C" fn
                          (arg1: *mut GFile, arg2: GFileCreateFlags,
                           arg3: *mut GCancellable, arg4: *mut *mut GError)
                          -> *mut GFileIOStream,
    create_readwrite_async: extern "C" fn
                                (arg1: *mut GFile, arg2: GFileCreateFlags,
                                 arg3: c_int, arg4: *mut GCancellable,
                                 arg5: GAsyncReadyCallback, arg6: gpointer),
    create_readwrite_finish: extern "C" fn
                                 (arg1: *mut GFile, arg2: *mut GAsyncResult,
                                  arg3: *mut *mut GError)
                                 -> *mut GFileIOStream,
    replace_readwrite: extern "C" fn
                           (arg1: *mut GFile, arg2: *c_schar, arg3: gboolean,
                            arg4: GFileCreateFlags, arg5: *mut GCancellable,
                            arg6: *mut *mut GError) -> *mut GFileIOStream,
    replace_readwrite_async: extern "C" fn
                                 (arg1: *mut GFile, arg2: *c_schar,
                                  arg3: gboolean, arg4: GFileCreateFlags,
                                  arg5: c_int, arg6: *mut GCancellable,
                                  arg7: GAsyncReadyCallback, arg8: gpointer),
    replace_readwrite_finish: extern "C" fn
                                  (arg1: *mut GFile, arg2: *mut GAsyncResult,
                                   arg3: *mut *mut GError)
                                  -> *mut GFileIOStream,
    start_mountable: extern "C" fn
                         (arg1: *mut GFile, arg2: GDriveStartFlags,
                          arg3: *mut GMountOperation, arg4: *mut GCancellable,
                          arg5: GAsyncReadyCallback, arg6: gpointer),
    start_mountable_finish: extern "C" fn
                                (arg1: *mut GFile, arg2: *mut GAsyncResult,
                                 arg3: *mut *mut GError) -> gboolean,
    stop_mountable: extern "C" fn
                        (arg1: *mut GFile, arg2: GMountUnmountFlags,
                         arg3: *mut GMountOperation, arg4: *mut GCancellable,
                         arg5: GAsyncReadyCallback, arg6: gpointer),
    stop_mountable_finish: extern "C" fn
                               (arg1: *mut GFile, arg2: *mut GAsyncResult,
                                arg3: *mut *mut GError) -> gboolean,
    supports_thread_contexts: gboolean,
    unmount_mountable_with_operation: extern "C" fn
                                          (arg1: *mut GFile,
                                           arg2: GMountUnmountFlags,
                                           arg3: *mut GMountOperation,
                                           arg4: *mut GCancellable,
                                           arg5: GAsyncReadyCallback,
                                           arg6: gpointer),
    unmount_mountable_with_operation_finish: extern "C" fn
                                                 (arg1: *mut GFile,
                                                  arg2: *mut GAsyncResult,
                                                  arg3: *mut *mut GError)
                                                 -> gboolean,
    eject_mountable_with_operation: extern "C" fn
                                        (arg1: *mut GFile,
                                         arg2: GMountUnmountFlags,
                                         arg3: *mut GMountOperation,
                                         arg4: *mut GCancellable,
                                         arg5: GAsyncReadyCallback,
                                         arg6: gpointer),
    eject_mountable_with_operation_finish: extern "C" fn
                                               (arg1: *mut GFile,
                                                arg2: *mut GAsyncResult,
                                                arg3: *mut *mut GError)
                                               -> gboolean,
    poll_mountable: extern "C" fn
                        (arg1: *mut GFile, arg2: *mut GCancellable,
                         arg3: GAsyncReadyCallback, arg4: gpointer),
    poll_mountable_finish: extern "C" fn
                               (arg1: *mut GFile, arg2: *mut GAsyncResult,
                                arg3: *mut *mut GError) -> gboolean,
    measure_disk_usage: extern "C" fn
                            (arg1: *mut GFile, arg2: GFileMeasureFlags,
                             arg3: *mut GCancellable,
                             arg4: GFileMeasureProgressCallback,
                             arg5: gpointer, arg6: *mut guint64,
                             arg7: *mut guint64, arg8: *mut guint64,
                             arg9: *mut *mut GError) -> gboolean,
    measure_disk_usage_async: extern "C" fn
                                  (arg1: *mut GFile, arg2: GFileMeasureFlags,
                                   arg3: gint, arg4: *mut GCancellable,
                                   arg5: GFileMeasureProgressCallback,
                                   arg6: gpointer, arg7: GAsyncReadyCallback,
                                   arg8: gpointer),
    measure_disk_usage_finish: extern "C" fn
                                   (arg1: *mut GFile, arg2: *mut GAsyncResult,
                                    arg3: *mut guint64, arg4: *mut guint64,
                                    arg5: *mut guint64,
                                    arg6: *mut *mut GError) -> gboolean,
}
pub type Struct__GFileIconClass = c_void;
pub type GFileIconClass = Struct__GFileIconClass;
pub type Struct__GFileInfoClass = c_void;
pub type GFileInfoClass = Struct__GFileInfoClass;
pub type GFileInputStreamClass = Struct__GFileInputStreamClass;
pub type Struct__GFileInputStreamPrivate = c_void;
pub type GFileInputStreamPrivate = Struct__GFileInputStreamPrivate;
pub struct Struct__GFileInputStream {
    parent_instance: GInputStream,
    _priv: *mut GFileInputStreamPrivate,
}
pub struct Struct__GFileInputStreamClass {
    parent_class: GInputStreamClass,
    tell: extern "C" fn(arg1: *mut GFileInputStream) -> goffset,
    can_seek: extern "C" fn(arg1: *mut GFileInputStream) -> gboolean,
    seek: extern "C" fn
              (arg1: *mut GFileInputStream, arg2: goffset, arg3: GSeekType,
               arg4: *mut GCancellable, arg5: *mut *mut GError) -> gboolean,
    query_info: extern "C" fn
                    (arg1: *mut GFileInputStream, arg2: *c_schar,
                     arg3: *mut GCancellable, arg4: *mut *mut GError)
                    -> *mut GFileInfo,
    query_info_async: extern "C" fn
                          (arg1: *mut GFileInputStream, arg2: *c_schar,
                           arg3: c_int, arg4: *mut GCancellable,
                           arg5: GAsyncReadyCallback, arg6: gpointer),
    query_info_finish: extern "C" fn
                           (arg1: *mut GFileInputStream,
                            arg2: *mut GAsyncResult, arg3: *mut *mut GError)
                           -> *mut GFileInfo,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
}
pub type Struct__GIOStreamPrivate = c_void;
pub type GIOStreamPrivate = Struct__GIOStreamPrivate;
pub type GIOStreamClass = Struct__GIOStreamClass;
pub struct Struct__GIOStream {
    parent_instance: GObject,
    _priv: *mut GIOStreamPrivate,
}
pub struct Struct__GIOStreamClass {
    parent_class: GObjectClass,
    get_input_stream: extern "C" fn(arg1: *mut GIOStream)
                          -> *mut GInputStream,
    get_output_stream: extern "C" fn(arg1: *mut GIOStream)
                           -> *mut GOutputStream,
    close_fn: extern "C" fn
                  (arg1: *mut GIOStream, arg2: *mut GCancellable,
                   arg3: *mut *mut GError) -> gboolean,
    close_async: extern "C" fn
                     (arg1: *mut GIOStream, arg2: c_int,
                      arg3: *mut GCancellable, arg4: GAsyncReadyCallback,
                      arg5: gpointer),
    close_finish: extern "C" fn
                      (arg1: *mut GIOStream, arg2: *mut GAsyncResult,
                       arg3: *mut *mut GError) -> gboolean,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
    _g_reserved6: extern "C" fn(),
    _g_reserved7: extern "C" fn(),
    _g_reserved8: extern "C" fn(),
    _g_reserved9: extern "C" fn(),
    _g_reserved10: extern "C" fn(),
}
pub type GFileIOStreamClass = Struct__GFileIOStreamClass;
pub type Struct__GFileIOStreamPrivate = c_void;
pub type GFileIOStreamPrivate = Struct__GFileIOStreamPrivate;
pub struct Struct__GFileIOStream {
    parent_instance: GIOStream,
    _priv: *mut GFileIOStreamPrivate,
}
pub struct Struct__GFileIOStreamClass {
    parent_class: GIOStreamClass,
    tell: extern "C" fn(arg1: *mut GFileIOStream) -> goffset,
    can_seek: extern "C" fn(arg1: *mut GFileIOStream) -> gboolean,
    seek: extern "C" fn
              (arg1: *mut GFileIOStream, arg2: goffset, arg3: GSeekType,
               arg4: *mut GCancellable, arg5: *mut *mut GError) -> gboolean,
    can_truncate: extern "C" fn(arg1: *mut GFileIOStream) -> gboolean,
    truncate_fn: extern "C" fn
                     (arg1: *mut GFileIOStream, arg2: goffset,
                      arg3: *mut GCancellable, arg4: *mut *mut GError)
                     -> gboolean,
    query_info: extern "C" fn
                    (arg1: *mut GFileIOStream, arg2: *c_schar,
                     arg3: *mut GCancellable, arg4: *mut *mut GError)
                    -> *mut GFileInfo,
    query_info_async: extern "C" fn
                          (arg1: *mut GFileIOStream, arg2: *c_schar,
                           arg3: c_int, arg4: *mut GCancellable,
                           arg5: GAsyncReadyCallback, arg6: gpointer),
    query_info_finish: extern "C" fn
                           (arg1: *mut GFileIOStream, arg2: *mut GAsyncResult,
                            arg3: *mut *mut GError) -> *mut GFileInfo,
    get_etag: extern "C" fn(arg1: *mut GFileIOStream) -> *mut c_schar,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
}
pub type GFileMonitorClass = Struct__GFileMonitorClass;
pub type Struct__GFileMonitorPrivate = c_void;
pub type GFileMonitorPrivate = Struct__GFileMonitorPrivate;
pub struct Struct__GFileMonitor {
    parent_instance: GObject,
    _priv: *mut GFileMonitorPrivate,
}
pub struct Struct__GFileMonitorClass {
    parent_class: GObjectClass,
    changed: extern "C" fn
                 (arg1: *mut GFileMonitor, arg2: *mut GFile, arg3: *mut GFile,
                  arg4: GFileMonitorEvent),
    cancel: extern "C" fn(arg1: *mut GFileMonitor) -> gboolean,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
}
pub type GFilenameCompleterClass = Struct__GFilenameCompleterClass;
pub struct Struct__GFilenameCompleterClass {
    parent_class: GObjectClass,
    got_completion_data: extern "C" fn(arg1: *mut GFilenameCompleter),
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
}
pub type GFileOutputStreamClass = Struct__GFileOutputStreamClass;
pub type Struct__GFileOutputStreamPrivate = c_void;
pub type GFileOutputStreamPrivate = Struct__GFileOutputStreamPrivate;
pub struct Struct__GFileOutputStream {
    parent_instance: GOutputStream,
    _priv: *mut GFileOutputStreamPrivate,
}
pub struct Struct__GFileOutputStreamClass {
    parent_class: GOutputStreamClass,
    tell: extern "C" fn(arg1: *mut GFileOutputStream) -> goffset,
    can_seek: extern "C" fn(arg1: *mut GFileOutputStream) -> gboolean,
    seek: extern "C" fn
              (arg1: *mut GFileOutputStream, arg2: goffset, arg3: GSeekType,
               arg4: *mut GCancellable, arg5: *mut *mut GError) -> gboolean,
    can_truncate: extern "C" fn(arg1: *mut GFileOutputStream) -> gboolean,
    truncate_fn: extern "C" fn
                     (arg1: *mut GFileOutputStream, arg2: goffset,
                      arg3: *mut GCancellable, arg4: *mut *mut GError)
                     -> gboolean,
    query_info: extern "C" fn
                    (arg1: *mut GFileOutputStream, arg2: *c_schar,
                     arg3: *mut GCancellable, arg4: *mut *mut GError)
                    -> *mut GFileInfo,
    query_info_async: extern "C" fn
                          (arg1: *mut GFileOutputStream, arg2: *c_schar,
                           arg3: c_int, arg4: *mut GCancellable,
                           arg5: GAsyncReadyCallback, arg6: gpointer),
    query_info_finish: extern "C" fn
                           (arg1: *mut GFileOutputStream,
                            arg2: *mut GAsyncResult, arg3: *mut *mut GError)
                           -> *mut GFileInfo,
    get_etag: extern "C" fn(arg1: *mut GFileOutputStream) -> *mut c_schar,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
}
pub type GInetAddressClass = Struct__GInetAddressClass;
pub type Struct__GInetAddressPrivate = c_void;
pub type GInetAddressPrivate = Struct__GInetAddressPrivate;
pub struct Struct__GInetAddress {
    parent_instance: GObject,
    _priv: *mut GInetAddressPrivate,
}
pub struct Struct__GInetAddressClass {
    parent_class: GObjectClass,
    to_string: extern "C" fn(arg1: *mut GInetAddress) -> *mut gchar,
    to_bytes: extern "C" fn(arg1: *mut GInetAddress) -> *guint8,
}
pub type GInetAddressMaskClass = Struct__GInetAddressMaskClass;
pub type Struct__GInetAddressMaskPrivate = c_void;
pub type GInetAddressMaskPrivate = Struct__GInetAddressMaskPrivate;
pub struct Struct__GInetAddressMask {
    parent_instance: GObject,
    _priv: *mut GInetAddressMaskPrivate,
}
pub struct Struct__GInetAddressMaskClass {
    parent_class: GObjectClass,
}
pub type GSocketAddressClass = Struct__GSocketAddressClass;
pub struct Struct__GSocketAddress {
    parent_instance: GObject,
}
pub struct Struct__GSocketAddressClass {
    parent_class: GObjectClass,
    get_family: extern "C" fn(arg1: *mut GSocketAddress) -> GSocketFamily,
    get_native_size: extern "C" fn(arg1: *mut GSocketAddress) -> gssize,
    to_native: extern "C" fn
                   (arg1: *mut GSocketAddress, arg2: gpointer, arg3: gsize,
                    arg4: *mut *mut GError) -> gboolean,
}
pub type GInetSocketAddressClass = Struct__GInetSocketAddressClass;
pub type Struct__GInetSocketAddressPrivate = c_void;
pub type GInetSocketAddressPrivate = Struct__GInetSocketAddressPrivate;
pub struct Struct__GInetSocketAddress {
    parent_instance: GSocketAddress,
    _priv: *mut GInetSocketAddressPrivate,
}
pub struct Struct__GInetSocketAddressClass {
    parent_class: GSocketAddressClass,
}
pub type GModuleFlags = c_uint;
pub static G_MODULE_BIND_LAZY: c_uint = 1;
pub static G_MODULE_BIND_LOCAL: c_uint = 2;
pub static G_MODULE_BIND_MASK: c_uint = 3;
pub type Struct__GModule = c_void;
pub type GModule = Struct__GModule;
pub type GModuleCheckInit = extern "C" fn(arg1: *mut GModule) -> *gchar;
pub type GModuleUnload = extern "C" fn(arg1: *mut GModule);
pub type Struct__GIOModuleScope = c_void;
pub type GIOModuleScope = Struct__GIOModuleScope;
pub type Struct__GIOModuleClass = c_void;
pub type GIOModuleClass = Struct__GIOModuleClass;
pub type GLoadableIconIface = Struct__GLoadableIconIface;
pub struct Struct__GLoadableIconIface {
    g_iface: GTypeInterface,
    load: extern "C" fn
              (arg1: *mut GLoadableIcon, arg2: c_int, arg3: *mut *mut c_schar,
               arg4: *mut GCancellable, arg5: *mut *mut GError)
              -> *mut GInputStream,
    load_async: extern "C" fn
                    (arg1: *mut GLoadableIcon, arg2: c_int,
                     arg3: *mut GCancellable, arg4: GAsyncReadyCallback,
                     arg5: gpointer),
    load_finish: extern "C" fn
                     (arg1: *mut GLoadableIcon, arg2: *mut GAsyncResult,
                      arg3: *mut *mut c_schar, arg4: *mut *mut GError)
                     -> *mut GInputStream,
}
pub type GMemoryInputStreamClass = Struct__GMemoryInputStreamClass;
pub type Struct__GMemoryInputStreamPrivate = c_void;
pub type GMemoryInputStreamPrivate = Struct__GMemoryInputStreamPrivate;
pub struct Struct__GMemoryInputStream {
    parent_instance: GInputStream,
    _priv: *mut GMemoryInputStreamPrivate,
}
pub struct Struct__GMemoryInputStreamClass {
    parent_class: GInputStreamClass,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
}
pub type GMemoryOutputStreamClass = Struct__GMemoryOutputStreamClass;
pub type Struct__GMemoryOutputStreamPrivate = c_void;
pub type GMemoryOutputStreamPrivate = Struct__GMemoryOutputStreamPrivate;
pub struct Struct__GMemoryOutputStream {
    parent_instance: GOutputStream,
    _priv: *mut GMemoryOutputStreamPrivate,
}
pub struct Struct__GMemoryOutputStreamClass {
    parent_class: GOutputStreamClass,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
}
pub type GReallocFunc =
    extern "C" fn(arg1: gpointer, arg2: gsize) -> gpointer;
pub type GMountIface = Struct__GMountIface;
pub struct Struct__GMountIface {
    g_iface: GTypeInterface,
    changed: extern "C" fn(arg1: *mut GMount),
    unmounted: extern "C" fn(arg1: *mut GMount),
    get_root: extern "C" fn(arg1: *mut GMount) -> *mut GFile,
    get_name: extern "C" fn(arg1: *mut GMount) -> *mut c_schar,
    get_icon: extern "C" fn(arg1: *mut GMount) -> *mut GIcon,
    get_uuid: extern "C" fn(arg1: *mut GMount) -> *mut c_schar,
    get_volume: extern "C" fn(arg1: *mut GMount) -> *mut GVolume,
    get_drive: extern "C" fn(arg1: *mut GMount) -> *mut GDrive,
    can_unmount: extern "C" fn(arg1: *mut GMount) -> gboolean,
    can_eject: extern "C" fn(arg1: *mut GMount) -> gboolean,
    unmount: extern "C" fn
                 (arg1: *mut GMount, arg2: GMountUnmountFlags,
                  arg3: *mut GCancellable, arg4: GAsyncReadyCallback,
                  arg5: gpointer),
    unmount_finish: extern "C" fn
                        (arg1: *mut GMount, arg2: *mut GAsyncResult,
                         arg3: *mut *mut GError) -> gboolean,
    eject: extern "C" fn
               (arg1: *mut GMount, arg2: GMountUnmountFlags,
                arg3: *mut GCancellable, arg4: GAsyncReadyCallback,
                arg5: gpointer),
    eject_finish: extern "C" fn
                      (arg1: *mut GMount, arg2: *mut GAsyncResult,
                       arg3: *mut *mut GError) -> gboolean,
    remount: extern "C" fn
                 (arg1: *mut GMount, arg2: GMountMountFlags,
                  arg3: *mut GMountOperation, arg4: *mut GCancellable,
                  arg5: GAsyncReadyCallback, arg6: gpointer),
    remount_finish: extern "C" fn
                        (arg1: *mut GMount, arg2: *mut GAsyncResult,
                         arg3: *mut *mut GError) -> gboolean,
    guess_content_type: extern "C" fn
                            (arg1: *mut GMount, arg2: gboolean,
                             arg3: *mut GCancellable,
                             arg4: GAsyncReadyCallback, arg5: gpointer),
    guess_content_type_finish: extern "C" fn
                                   (arg1: *mut GMount,
                                    arg2: *mut GAsyncResult,
                                    arg3: *mut *mut GError)
                                   -> *mut *mut gchar,
    guess_content_type_sync: extern "C" fn
                                 (arg1: *mut GMount, arg2: gboolean,
                                  arg3: *mut GCancellable,
                                  arg4: *mut *mut GError) -> *mut *mut gchar,
    pre_unmount: extern "C" fn(arg1: *mut GMount),
    unmount_with_operation: extern "C" fn
                                (arg1: *mut GMount, arg2: GMountUnmountFlags,
                                 arg3: *mut GMountOperation,
                                 arg4: *mut GCancellable,
                                 arg5: GAsyncReadyCallback, arg6: gpointer),
    unmount_with_operation_finish: extern "C" fn
                                       (arg1: *mut GMount,
                                        arg2: *mut GAsyncResult,
                                        arg3: *mut *mut GError) -> gboolean,
    eject_with_operation: extern "C" fn
                              (arg1: *mut GMount, arg2: GMountUnmountFlags,
                               arg3: *mut GMountOperation,
                               arg4: *mut GCancellable,
                               arg5: GAsyncReadyCallback, arg6: gpointer),
    eject_with_operation_finish: extern "C" fn
                                     (arg1: *mut GMount,
                                      arg2: *mut GAsyncResult,
                                      arg3: *mut *mut GError) -> gboolean,
    get_default_location: extern "C" fn(arg1: *mut GMount) -> *mut GFile,
    get_sort_key: extern "C" fn(arg1: *mut GMount) -> *gchar,
    get_symbolic_icon: extern "C" fn(arg1: *mut GMount) -> *mut GIcon,
}
pub type GMountOperationClass = Struct__GMountOperationClass;
pub type Struct__GMountOperationPrivate = c_void;
pub type GMountOperationPrivate = Struct__GMountOperationPrivate;
pub struct Struct__GMountOperation {
    parent_instance: GObject,
    _priv: *mut GMountOperationPrivate,
}
pub struct Struct__GMountOperationClass {
    parent_class: GObjectClass,
    ask_password: extern "C" fn
                      (arg1: *mut GMountOperation, arg2: *c_schar,
                       arg3: *c_schar, arg4: *c_schar,
                       arg5: GAskPasswordFlags),
    ask_question: extern "C" fn
                      (arg1: *mut GMountOperation, arg2: *c_schar,
                       arg3: *mut *c_schar),
    reply: extern "C" fn
               (arg1: *mut GMountOperation, arg2: GMountOperationResult),
    aborted: extern "C" fn(arg1: *mut GMountOperation),
    show_processes: extern "C" fn
                        (arg1: *mut GMountOperation, arg2: *gchar,
                         arg3: *mut GArray, arg4: *mut *gchar),
    show_unmount_progress: extern "C" fn
                               (arg1: *mut GMountOperation, arg2: *gchar,
                                arg3: gint64, arg4: gint64),
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
    _g_reserved6: extern "C" fn(),
    _g_reserved7: extern "C" fn(),
    _g_reserved8: extern "C" fn(),
    _g_reserved9: extern "C" fn(),
}
pub type GVolumeMonitorClass = Struct__GVolumeMonitorClass;
pub struct Struct__GVolumeMonitor {
    parent_instance: GObject,
    _priv: gpointer,
}
pub struct Struct__GVolumeMonitorClass {
    parent_class: GObjectClass,
    volume_added: extern "C" fn
                      (arg1: *mut GVolumeMonitor, arg2: *mut GVolume),
    volume_removed: extern "C" fn
                        (arg1: *mut GVolumeMonitor, arg2: *mut GVolume),
    volume_changed: extern "C" fn
                        (arg1: *mut GVolumeMonitor, arg2: *mut GVolume),
    mount_added: extern "C" fn(arg1: *mut GVolumeMonitor, arg2: *mut GMount),
    mount_removed: extern "C" fn
                       (arg1: *mut GVolumeMonitor, arg2: *mut GMount),
    mount_pre_unmount: extern "C" fn
                           (arg1: *mut GVolumeMonitor, arg2: *mut GMount),
    mount_changed: extern "C" fn
                       (arg1: *mut GVolumeMonitor, arg2: *mut GMount),
    drive_connected: extern "C" fn
                         (arg1: *mut GVolumeMonitor, arg2: *mut GDrive),
    drive_disconnected: extern "C" fn
                            (arg1: *mut GVolumeMonitor, arg2: *mut GDrive),
    drive_changed: extern "C" fn
                       (arg1: *mut GVolumeMonitor, arg2: *mut GDrive),
    is_supported: extern "C" fn() -> gboolean,
    get_connected_drives: extern "C" fn(arg1: *mut GVolumeMonitor)
                              -> *mut GList,
    get_volumes: extern "C" fn(arg1: *mut GVolumeMonitor) -> *mut GList,
    get_mounts: extern "C" fn(arg1: *mut GVolumeMonitor) -> *mut GList,
    get_volume_for_uuid: extern "C" fn
                             (arg1: *mut GVolumeMonitor, arg2: *c_schar)
                             -> *mut GVolume,
    get_mount_for_uuid: extern "C" fn
                            (arg1: *mut GVolumeMonitor, arg2: *c_schar)
                            -> *mut GMount,
    adopt_orphan_mount: extern "C" fn
                            (arg1: *mut GMount, arg2: *mut GVolumeMonitor)
                            -> *mut GVolume,
    drive_eject_button: extern "C" fn
                            (arg1: *mut GVolumeMonitor, arg2: *mut GDrive),
    drive_stop_button: extern "C" fn
                           (arg1: *mut GVolumeMonitor, arg2: *mut GDrive),
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
    _g_reserved6: extern "C" fn(),
}
pub type GNativeVolumeMonitor = Struct__GNativeVolumeMonitor;
pub type GNativeVolumeMonitorClass = Struct__GNativeVolumeMonitorClass;
pub struct Struct__GNativeVolumeMonitor {
    parent_instance: GVolumeMonitor,
}
pub struct Struct__GNativeVolumeMonitorClass {
    parent_class: GVolumeMonitorClass,
    get_mount_for_mount_path: extern "C" fn
                                  (arg1: *c_schar, arg2: *mut GCancellable)
                                  -> *mut GMount,
}
pub type GNetworkAddressClass = Struct__GNetworkAddressClass;
pub type Struct__GNetworkAddressPrivate = c_void;
pub type GNetworkAddressPrivate = Struct__GNetworkAddressPrivate;
pub struct Struct__GNetworkAddress {
    parent_instance: GObject,
    _priv: *mut GNetworkAddressPrivate,
}
pub struct Struct__GNetworkAddressClass {
    parent_class: GObjectClass,
}
pub type GNetworkMonitorInterface = Struct__GNetworkMonitorInterface;
pub struct Struct__GNetworkMonitorInterface {
    g_iface: GTypeInterface,
    network_changed: extern "C" fn
                         (arg1: *mut GNetworkMonitor, arg2: gboolean),
    can_reach: extern "C" fn
                   (arg1: *mut GNetworkMonitor, arg2: *mut GSocketConnectable,
                    arg3: *mut GCancellable, arg4: *mut *mut GError)
                   -> gboolean,
    can_reach_async: extern "C" fn
                         (arg1: *mut GNetworkMonitor,
                          arg2: *mut GSocketConnectable,
                          arg3: *mut GCancellable, arg4: GAsyncReadyCallback,
                          arg5: gpointer),
    can_reach_finish: extern "C" fn
                          (arg1: *mut GNetworkMonitor,
                           arg2: *mut GAsyncResult, arg3: *mut *mut GError)
                          -> gboolean,
}
pub type GNetworkServiceClass = Struct__GNetworkServiceClass;
pub type Struct__GNetworkServicePrivate = c_void;
pub type GNetworkServicePrivate = Struct__GNetworkServicePrivate;
pub struct Struct__GNetworkService {
    parent_instance: GObject,
    _priv: *mut GNetworkServicePrivate,
}
pub struct Struct__GNetworkServiceClass {
    parent_class: GObjectClass,
}
pub type Struct__GPermissionPrivate = c_void;
pub type GPermissionPrivate = Struct__GPermissionPrivate;
pub type GPermissionClass = Struct__GPermissionClass;
pub struct Struct__GPermission {
    parent_instance: GObject,
    _priv: *mut GPermissionPrivate,
}
pub struct Struct__GPermissionClass {
    parent_class: GObjectClass,
    acquire: extern "C" fn
                 (arg1: *mut GPermission, arg2: *mut GCancellable,
                  arg3: *mut *mut GError) -> gboolean,
    acquire_async: extern "C" fn
                       (arg1: *mut GPermission, arg2: *mut GCancellable,
                        arg3: GAsyncReadyCallback, arg4: gpointer),
    acquire_finish: extern "C" fn
                        (arg1: *mut GPermission, arg2: *mut GAsyncResult,
                         arg3: *mut *mut GError) -> gboolean,
    release: extern "C" fn
                 (arg1: *mut GPermission, arg2: *mut GCancellable,
                  arg3: *mut *mut GError) -> gboolean,
    release_async: extern "C" fn
                       (arg1: *mut GPermission, arg2: *mut GCancellable,
                        arg3: GAsyncReadyCallback, arg4: gpointer),
    release_finish: extern "C" fn
                        (arg1: *mut GPermission, arg2: *mut GAsyncResult,
                         arg3: *mut *mut GError) -> gboolean,
    reserved: [gpointer, ..16u],
}
pub type GPollableInputStreamInterface =
    Struct__GPollableInputStreamInterface;
pub struct Struct__GPollableInputStreamInterface {
    g_iface: GTypeInterface,
    can_poll: extern "C" fn(arg1: *mut GPollableInputStream) -> gboolean,
    is_readable: extern "C" fn(arg1: *mut GPollableInputStream) -> gboolean,
    create_source: extern "C" fn
                       (arg1: *mut GPollableInputStream,
                        arg2: *mut GCancellable) -> *mut GSource,
    read_nonblocking: extern "C" fn
                          (arg1: *mut GPollableInputStream, arg2: *mut c_void,
                           arg3: gsize, arg4: *mut *mut GError) -> gssize,
}
pub type GPollableOutputStreamInterface =
    Struct__GPollableOutputStreamInterface;
pub struct Struct__GPollableOutputStreamInterface {
    g_iface: GTypeInterface,
    can_poll: extern "C" fn(arg1: *mut GPollableOutputStream) -> gboolean,
    is_writable: extern "C" fn(arg1: *mut GPollableOutputStream) -> gboolean,
    create_source: extern "C" fn
                       (arg1: *mut GPollableOutputStream,
                        arg2: *mut GCancellable) -> *mut GSource,
    write_nonblocking: extern "C" fn
                           (arg1: *mut GPollableOutputStream, arg2: *c_void,
                            arg3: gsize, arg4: *mut *mut GError) -> gssize,
}
pub type GProxyInterface = Struct__GProxyInterface;
pub struct Struct__GProxyInterface {
    g_iface: GTypeInterface,
    connect: extern "C" fn
                 (arg1: *mut GProxy, arg2: *mut GIOStream,
                  arg3: *mut GProxyAddress, arg4: *mut GCancellable,
                  arg5: *mut *mut GError) -> *mut GIOStream,
    connect_async: extern "C" fn
                       (arg1: *mut GProxy, arg2: *mut GIOStream,
                        arg3: *mut GProxyAddress, arg4: *mut GCancellable,
                        arg5: GAsyncReadyCallback, arg6: gpointer),
    connect_finish: extern "C" fn
                        (arg1: *mut GProxy, arg2: *mut GAsyncResult,
                         arg3: *mut *mut GError) -> *mut GIOStream,
    supports_hostname: extern "C" fn(arg1: *mut GProxy) -> gboolean,
}
pub type GProxyAddressClass = Struct__GProxyAddressClass;
pub type Struct__GProxyAddressPrivate = c_void;
pub type GProxyAddressPrivate = Struct__GProxyAddressPrivate;
pub struct Struct__GProxyAddress {
    parent_instance: GInetSocketAddress,
    _priv: *mut GProxyAddressPrivate,
}
pub struct Struct__GProxyAddressClass {
    parent_class: GInetSocketAddressClass,
}
pub type GSocketAddressEnumeratorClass =
    Struct__GSocketAddressEnumeratorClass;
pub struct Struct__GSocketAddressEnumerator {
    parent_instance: GObject,
}
pub struct Struct__GSocketAddressEnumeratorClass {
    parent_class: GObjectClass,
    next: extern "C" fn
              (arg1: *mut GSocketAddressEnumerator, arg2: *mut GCancellable,
               arg3: *mut *mut GError) -> *mut GSocketAddress,
    next_async: extern "C" fn
                    (arg1: *mut GSocketAddressEnumerator,
                     arg2: *mut GCancellable, arg3: GAsyncReadyCallback,
                     arg4: gpointer),
    next_finish: extern "C" fn
                     (arg1: *mut GSocketAddressEnumerator,
                      arg2: *mut GAsyncResult, arg3: *mut *mut GError)
                     -> *mut GSocketAddress,
}
pub type GProxyAddressEnumeratorClass = Struct__GProxyAddressEnumeratorClass;
pub type Struct__GProxyAddressEnumeratorPrivate = c_void;
pub type GProxyAddressEnumeratorPrivate =
    Struct__GProxyAddressEnumeratorPrivate;
pub struct Struct__GProxyAddressEnumerator {
    parent_instance: GSocketAddressEnumerator,
    _priv: *mut GProxyAddressEnumeratorPrivate,
}
pub struct Struct__GProxyAddressEnumeratorClass {
    parent_class: GSocketAddressEnumeratorClass,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
    _g_reserved6: extern "C" fn(),
    _g_reserved7: extern "C" fn(),
}
pub type GProxyResolverInterface = Struct__GProxyResolverInterface;
pub struct Struct__GProxyResolverInterface {
    g_iface: GTypeInterface,
    is_supported: extern "C" fn(arg1: *mut GProxyResolver) -> gboolean,
    lookup: extern "C" fn
                (arg1: *mut GProxyResolver, arg2: *gchar,
                 arg3: *mut GCancellable, arg4: *mut *mut GError)
                -> *mut *mut gchar,
    lookup_async: extern "C" fn
                      (arg1: *mut GProxyResolver, arg2: *gchar,
                       arg3: *mut GCancellable, arg4: GAsyncReadyCallback,
                       arg5: gpointer),
    lookup_finish: extern "C" fn
                       (arg1: *mut GProxyResolver, arg2: *mut GAsyncResult,
                        arg3: *mut *mut GError) -> *mut *mut gchar,
}
pub type Struct__GResolverPrivate = c_void;
pub type GResolverPrivate = Struct__GResolverPrivate;
pub type GResolverClass = Struct__GResolverClass;
pub struct Struct__GResolver {
    parent_instance: GObject,
    _priv: *mut GResolverPrivate,
}
pub struct Struct__GResolverClass {
    parent_class: GObjectClass,
    reload: extern "C" fn(arg1: *mut GResolver),
    lookup_by_name: extern "C" fn
                        (arg1: *mut GResolver, arg2: *gchar,
                         arg3: *mut GCancellable, arg4: *mut *mut GError)
                        -> *mut GList,
    lookup_by_name_async: extern "C" fn
                              (arg1: *mut GResolver, arg2: *gchar,
                               arg3: *mut GCancellable,
                               arg4: GAsyncReadyCallback, arg5: gpointer),
    lookup_by_name_finish: extern "C" fn
                               (arg1: *mut GResolver, arg2: *mut GAsyncResult,
                                arg3: *mut *mut GError) -> *mut GList,
    lookup_by_address: extern "C" fn
                           (arg1: *mut GResolver, arg2: *mut GInetAddress,
                            arg3: *mut GCancellable, arg4: *mut *mut GError)
                           -> *mut gchar,
    lookup_by_address_async: extern "C" fn
                                 (arg1: *mut GResolver,
                                  arg2: *mut GInetAddress,
                                  arg3: *mut GCancellable,
                                  arg4: GAsyncReadyCallback, arg5: gpointer),
    lookup_by_address_finish: extern "C" fn
                                  (arg1: *mut GResolver,
                                   arg2: *mut GAsyncResult,
                                   arg3: *mut *mut GError) -> *mut gchar,
    lookup_service: extern "C" fn
                        (arg1: *mut GResolver, arg2: *gchar,
                         arg3: *mut GCancellable, arg4: *mut *mut GError)
                        -> *mut GList,
    lookup_service_async: extern "C" fn
                              (arg1: *mut GResolver, arg2: *gchar,
                               arg3: *mut GCancellable,
                               arg4: GAsyncReadyCallback, arg5: gpointer),
    lookup_service_finish: extern "C" fn
                               (arg1: *mut GResolver, arg2: *mut GAsyncResult,
                                arg3: *mut *mut GError) -> *mut GList,
    lookup_records: extern "C" fn
                        (arg1: *mut GResolver, arg2: *gchar,
                         arg3: GResolverRecordType, arg4: *mut GCancellable,
                         arg5: *mut *mut GError) -> *mut GList,
    lookup_records_async: extern "C" fn
                              (arg1: *mut GResolver, arg2: *gchar,
                               arg3: GResolverRecordType,
                               arg4: *mut GCancellable,
                               arg5: GAsyncReadyCallback, arg6: gpointer),
    lookup_records_finish: extern "C" fn
                               (arg1: *mut GResolver, arg2: *mut GAsyncResult,
                                arg3: *mut *mut GError) -> *mut GList,
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
    _g_reserved6: extern "C" fn(),
}
pub type GStaticResource = Struct__GStaticResource;
pub struct Struct__GStaticResource {
    data: *guint8,
    data_len: gsize,
    resource: *mut GResource,
    next: *mut GStaticResource,
    padding: gpointer,
}
pub type GSeekableIface = Struct__GSeekableIface;
pub struct Struct__GSeekableIface {
    g_iface: GTypeInterface,
    tell: extern "C" fn(arg1: *mut GSeekable) -> goffset,
    can_seek: extern "C" fn(arg1: *mut GSeekable) -> gboolean,
    seek: extern "C" fn
              (arg1: *mut GSeekable, arg2: goffset, arg3: GSeekType,
               arg4: *mut GCancellable, arg5: *mut *mut GError) -> gboolean,
    can_truncate: extern "C" fn(arg1: *mut GSeekable) -> gboolean,
    truncate_fn: extern "C" fn
                     (arg1: *mut GSeekable, arg2: goffset,
                      arg3: *mut GCancellable, arg4: *mut *mut GError)
                     -> gboolean,
}
pub type Struct__GSettingsSchemaSource = c_void;
pub type GSettingsSchemaSource = Struct__GSettingsSchemaSource;
pub type Struct__GSettingsSchema = c_void;
pub type GSettingsSchema = Struct__GSettingsSchema;
pub type Struct__GSettingsPrivate = c_void;
pub type GSettingsPrivate = Struct__GSettingsPrivate;
pub type GSettingsClass = Struct__GSettingsClass;
pub struct Struct__GSettingsClass {
    parent_class: GObjectClass,
    writable_changed: extern "C" fn(arg1: *mut GSettings, arg2: *gchar),
    changed: extern "C" fn(arg1: *mut GSettings, arg2: *gchar),
    writable_change_event: extern "C" fn(arg1: *mut GSettings, arg2: GQuark)
                               -> gboolean,
    change_event: extern "C" fn
                      (arg1: *mut GSettings, arg2: *GQuark, arg3: gint)
                      -> gboolean,
    padding: [gpointer, ..20u],
}
pub struct Struct__GSettings {
    parent_instance: GObject,
    _priv: *mut GSettingsPrivate,
}
pub type GSettingsBindSetMapping =
    extern "C" fn(arg1: *GValue, arg2: *GVariantType, arg3: gpointer)
        -> *mut GVariant;
pub type GSettingsBindGetMapping =
    extern "C" fn(arg1: *mut GValue, arg2: *mut GVariant, arg3: gpointer)
        -> gboolean;
pub type GSettingsGetMapping =
    extern "C" fn(arg1: *mut GVariant, arg2: *mut gpointer, arg3: gpointer)
        -> gboolean;
pub type GSettingsBindFlags = c_uint;
pub static G_SETTINGS_BIND_DEFAULT: c_uint = 0;
pub static G_SETTINGS_BIND_GET: c_uint = 1;
pub static G_SETTINGS_BIND_SET: c_uint = 2;
pub static G_SETTINGS_BIND_NO_SENSITIVITY: c_uint = 4;
pub static G_SETTINGS_BIND_GET_NO_CHANGES: c_uint = 8;
pub static G_SETTINGS_BIND_INVERT_BOOLEAN: c_uint = 16;
pub type Struct__GSimpleActionGroupPrivate = c_void;
pub type GSimpleActionGroupPrivate = Struct__GSimpleActionGroupPrivate;
pub type GSimpleActionGroupClass = Struct__GSimpleActionGroupClass;
pub struct Struct__GSimpleActionGroup {
    parent_instance: GObject,
    _priv: *mut GSimpleActionGroupPrivate,
}
pub struct Struct__GSimpleActionGroupClass {
    parent_class: GObjectClass,
    padding: [gpointer, ..12u],
}
pub type Struct__GSimpleAsyncResultClass = c_void;
pub type GSimpleAsyncResultClass = Struct__GSimpleAsyncResultClass;
pub type Struct__GSocketClientPrivate = c_void;
pub type GSocketClientPrivate = Struct__GSocketClientPrivate;
pub type GSocketClientClass = Struct__GSocketClientClass;
pub struct Struct__GSocketClientClass {
    parent_class: GObjectClass,
    event: extern "C" fn
               (arg1: *mut GSocketClient, arg2: GSocketClientEvent,
                arg3: *mut GSocketConnectable, arg4: *mut GIOStream),
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
}
pub struct Struct__GSocketClient {
    parent_instance: GObject,
    _priv: *mut GSocketClientPrivate,
}
pub type GSocketConnectableIface = Struct__GSocketConnectableIface;
pub struct Struct__GSocketConnectableIface {
    g_iface: GTypeInterface,
    enumerate: extern "C" fn(arg1: *mut GSocketConnectable)
                   -> *mut GSocketAddressEnumerator,
    proxy_enumerate: extern "C" fn(arg1: *mut GSocketConnectable)
                         -> *mut GSocketAddressEnumerator,
}
pub type Struct__GSocketPrivate = c_void;
pub type GSocketPrivate = Struct__GSocketPrivate;
pub type GSocketClass = Struct__GSocketClass;
pub struct Struct__GSocketClass {
    parent_class: GObjectClass,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
    _g_reserved6: extern "C" fn(),
    _g_reserved7: extern "C" fn(),
    _g_reserved8: extern "C" fn(),
    _g_reserved9: extern "C" fn(),
    _g_reserved10: extern "C" fn(),
}
pub struct Struct__GSocket {
    parent_instance: GObject,
    _priv: *mut GSocketPrivate,
}
pub type Struct__GSocketConnectionPrivate = c_void;
pub type GSocketConnectionPrivate = Struct__GSocketConnectionPrivate;
pub type GSocketConnectionClass = Struct__GSocketConnectionClass;
pub struct Struct__GSocketConnectionClass {
    parent_class: GIOStreamClass,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
    _g_reserved6: extern "C" fn(),
}
pub struct Struct__GSocketConnection {
    parent_instance: GIOStream,
    _priv: *mut GSocketConnectionPrivate,
}
pub type Struct__GSocketControlMessagePrivate = c_void;
pub type GSocketControlMessagePrivate = Struct__GSocketControlMessagePrivate;
pub type GSocketControlMessageClass = Struct__GSocketControlMessageClass;
pub struct Struct__GSocketControlMessageClass {
    parent_class: GObjectClass,
    get_size: extern "C" fn(arg1: *mut GSocketControlMessage) -> gsize,
    get_level: extern "C" fn(arg1: *mut GSocketControlMessage) -> c_int,
    get_type: extern "C" fn(arg1: *mut GSocketControlMessage) -> c_int,
    serialize: extern "C" fn
                   (arg1: *mut GSocketControlMessage, arg2: gpointer),
    deserialize: extern "C" fn
                     (arg1: c_int, arg2: c_int, arg3: gsize, arg4: gpointer)
                     -> *mut GSocketControlMessage,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
}
pub struct Struct__GSocketControlMessage {
    parent_instance: GObject,
    _priv: *mut GSocketControlMessagePrivate,
}
pub type Struct__GSocketListenerPrivate = c_void;
pub type GSocketListenerPrivate = Struct__GSocketListenerPrivate;
pub type GSocketListenerClass = Struct__GSocketListenerClass;
pub struct Struct__GSocketListenerClass {
    parent_class: GObjectClass,
    changed: extern "C" fn(arg1: *mut GSocketListener),
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
    _g_reserved6: extern "C" fn(),
}
pub struct Struct__GSocketListener {
    parent_instance: GObject,
    _priv: *mut GSocketListenerPrivate,
}
pub type Struct__GSocketServicePrivate = c_void;
pub type GSocketServicePrivate = Struct__GSocketServicePrivate;
pub type GSocketServiceClass = Struct__GSocketServiceClass;
pub struct Struct__GSocketServiceClass {
    parent_class: GSocketListenerClass,
    incoming: extern "C" fn
                  (arg1: *mut GSocketService, arg2: *mut GSocketConnection,
                   arg3: *mut GObject) -> gboolean,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
    _g_reserved6: extern "C" fn(),
}
pub struct Struct__GSocketService {
    parent_instance: GSocketListener,
    _priv: *mut GSocketServicePrivate,
}
pub type GSimpleProxyResolver = Struct__GSimpleProxyResolver;
pub type Struct__GSimpleProxyResolverPrivate = c_void;
pub type GSimpleProxyResolverPrivate = Struct__GSimpleProxyResolverPrivate;
pub type GSimpleProxyResolverClass = Struct__GSimpleProxyResolverClass;
pub struct Struct__GSimpleProxyResolver {
    parent_instance: GObject,
    _priv: *mut GSimpleProxyResolverPrivate,
}
pub struct Struct__GSimpleProxyResolverClass {
    parent_class: GObjectClass,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
}
pub type Struct__GTaskClass = c_void;
pub type GTaskClass = Struct__GTaskClass;
pub type GTaskThreadFunc =
    extern "C" fn
        (arg1: *mut GTask, arg2: gpointer, arg3: gpointer,
         arg4: *mut GCancellable);
pub type Struct__GTcpConnectionPrivate = c_void;
pub type GTcpConnectionPrivate = Struct__GTcpConnectionPrivate;
pub type GTcpConnectionClass = Struct__GTcpConnectionClass;
pub struct Struct__GTcpConnectionClass {
    parent_class: GSocketConnectionClass,
}
pub struct Struct__GTcpConnection {
    parent_instance: GSocketConnection,
    _priv: *mut GTcpConnectionPrivate,
}
pub type Struct__GTcpWrapperConnectionPrivate = c_void;
pub type GTcpWrapperConnectionPrivate = Struct__GTcpWrapperConnectionPrivate;
pub type GTcpWrapperConnectionClass = Struct__GTcpWrapperConnectionClass;
pub struct Struct__GTcpWrapperConnectionClass {
    parent_class: GTcpConnectionClass,
}
pub struct Struct__GTcpWrapperConnection {
    parent_instance: GTcpConnection,
    _priv: *mut GTcpWrapperConnectionPrivate,
}
pub type Struct__GThemedIconClass = c_void;
pub type GThemedIconClass = Struct__GThemedIconClass;
pub type Struct__GThreadedSocketServicePrivate = c_void;
pub type GThreadedSocketServicePrivate =
    Struct__GThreadedSocketServicePrivate;
pub type GThreadedSocketServiceClass = Struct__GThreadedSocketServiceClass;
pub struct Struct__GThreadedSocketServiceClass {
    parent_class: GSocketServiceClass,
    run: extern "C" fn
             (arg1: *mut GThreadedSocketService, arg2: *mut GSocketConnection,
              arg3: *mut GObject) -> gboolean,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
}
pub struct Struct__GThreadedSocketService {
    parent_instance: GSocketService,
    _priv: *mut GThreadedSocketServicePrivate,
}
pub type Struct__GTlsBackend = c_void;
pub type GTlsBackend = Struct__GTlsBackend;
pub type GTlsBackendInterface = Struct__GTlsBackendInterface;
pub struct Struct__GTlsBackendInterface {
    g_iface: GTypeInterface,
    supports_tls: extern "C" fn(arg1: *mut GTlsBackend) -> gboolean,
    get_certificate_type: extern "C" fn() -> GType,
    get_client_connection_type: extern "C" fn() -> GType,
    get_server_connection_type: extern "C" fn() -> GType,
    get_file_database_type: extern "C" fn() -> GType,
    get_default_database: extern "C" fn(arg1: *mut GTlsBackend)
                              -> *mut GTlsDatabase,
}
pub type GTlsCertificateClass = Struct__GTlsCertificateClass;
pub type Struct__GTlsCertificatePrivate = c_void;
pub type GTlsCertificatePrivate = Struct__GTlsCertificatePrivate;
pub struct Struct__GTlsCertificate {
    parent_instance: GObject,
    _priv: *mut GTlsCertificatePrivate,
}
pub struct Struct__GTlsCertificateClass {
    parent_class: GObjectClass,
    verify: extern "C" fn
                (arg1: *mut GTlsCertificate, arg2: *mut GSocketConnectable,
                 arg3: *mut GTlsCertificate) -> GTlsCertificateFlags,
    padding: [gpointer, ..8u],
}
pub type GTlsConnectionClass = Struct__GTlsConnectionClass;
pub type Struct__GTlsConnectionPrivate = c_void;
pub type GTlsConnectionPrivate = Struct__GTlsConnectionPrivate;
pub struct Struct__GTlsConnection {
    parent_instance: GIOStream,
    _priv: *mut GTlsConnectionPrivate,
}
pub struct Struct__GTlsConnectionClass {
    parent_class: GIOStreamClass,
    accept_certificate: extern "C" fn
                            (arg1: *mut GTlsConnection,
                             arg2: *mut GTlsCertificate,
                             arg3: GTlsCertificateFlags) -> gboolean,
    handshake: extern "C" fn
                   (arg1: *mut GTlsConnection, arg2: *mut GCancellable,
                    arg3: *mut *mut GError) -> gboolean,
    handshake_async: extern "C" fn
                         (arg1: *mut GTlsConnection, arg2: c_int,
                          arg3: *mut GCancellable, arg4: GAsyncReadyCallback,
                          arg5: gpointer),
    handshake_finish: extern "C" fn
                          (arg1: *mut GTlsConnection, arg2: *mut GAsyncResult,
                           arg3: *mut *mut GError) -> gboolean,
    padding: [gpointer, ..8u],
}
pub type GTlsClientConnectionInterface =
    Struct__GTlsClientConnectionInterface;
pub struct Struct__GTlsClientConnectionInterface {
    g_iface: GTypeInterface,
}
pub type GTlsDatabaseClass = Struct__GTlsDatabaseClass;
pub type Struct__GTlsDatabasePrivate = c_void;
pub type GTlsDatabasePrivate = Struct__GTlsDatabasePrivate;
pub struct Struct__GTlsDatabase {
    parent_instance: GObject,
    _priv: *mut GTlsDatabasePrivate,
}
pub struct Struct__GTlsDatabaseClass {
    parent_class: GObjectClass,
    verify_chain: extern "C" fn
                      (arg1: *mut GTlsDatabase, arg2: *mut GTlsCertificate,
                       arg3: *gchar, arg4: *mut GSocketConnectable,
                       arg5: *mut GTlsInteraction,
                       arg6: GTlsDatabaseVerifyFlags, arg7: *mut GCancellable,
                       arg8: *mut *mut GError) -> GTlsCertificateFlags,
    verify_chain_async: extern "C" fn
                            (arg1: *mut GTlsDatabase,
                             arg2: *mut GTlsCertificate, arg3: *gchar,
                             arg4: *mut GSocketConnectable,
                             arg5: *mut GTlsInteraction,
                             arg6: GTlsDatabaseVerifyFlags,
                             arg7: *mut GCancellable,
                             arg8: GAsyncReadyCallback, arg9: gpointer),
    verify_chain_finish: extern "C" fn
                             (arg1: *mut GTlsDatabase,
                              arg2: *mut GAsyncResult, arg3: *mut *mut GError)
                             -> GTlsCertificateFlags,
    create_certificate_handle: extern "C" fn
                                   (arg1: *mut GTlsDatabase,
                                    arg2: *mut GTlsCertificate) -> *mut gchar,
    lookup_certificate_for_handle: extern "C" fn
                                       (arg1: *mut GTlsDatabase, arg2: *gchar,
                                        arg3: *mut GTlsInteraction,
                                        arg4: GTlsDatabaseLookupFlags,
                                        arg5: *mut GCancellable,
                                        arg6: *mut *mut GError)
                                       -> *mut GTlsCertificate,
    lookup_certificate_for_handle_async: extern "C" fn
                                             (arg1: *mut GTlsDatabase,
                                              arg2: *gchar,
                                              arg3: *mut GTlsInteraction,
                                              arg4: GTlsDatabaseLookupFlags,
                                              arg5: *mut GCancellable,
                                              arg6: GAsyncReadyCallback,
                                              arg7: gpointer),
    lookup_certificate_for_handle_finish: extern "C" fn
                                              (arg1: *mut GTlsDatabase,
                                               arg2: *mut GAsyncResult,
                                               arg3: *mut *mut GError)
                                              -> *mut GTlsCertificate,
    lookup_certificate_issuer: extern "C" fn
                                   (arg1: *mut GTlsDatabase,
                                    arg2: *mut GTlsCertificate,
                                    arg3: *mut GTlsInteraction,
                                    arg4: GTlsDatabaseLookupFlags,
                                    arg5: *mut GCancellable,
                                    arg6: *mut *mut GError)
                                   -> *mut GTlsCertificate,
    lookup_certificate_issuer_async: extern "C" fn
                                         (arg1: *mut GTlsDatabase,
                                          arg2: *mut GTlsCertificate,
                                          arg3: *mut GTlsInteraction,
                                          arg4: GTlsDatabaseLookupFlags,
                                          arg5: *mut GCancellable,
                                          arg6: GAsyncReadyCallback,
                                          arg7: gpointer),
    lookup_certificate_issuer_finish: extern "C" fn
                                          (arg1: *mut GTlsDatabase,
                                           arg2: *mut GAsyncResult,
                                           arg3: *mut *mut GError)
                                          -> *mut GTlsCertificate,
    lookup_certificates_issued_by: extern "C" fn
                                       (arg1: *mut GTlsDatabase,
                                        arg2: *mut GByteArray,
                                        arg3: *mut GTlsInteraction,
                                        arg4: GTlsDatabaseLookupFlags,
                                        arg5: *mut GCancellable,
                                        arg6: *mut *mut GError) -> *mut GList,
    lookup_certificates_issued_by_async: extern "C" fn
                                             (arg1: *mut GTlsDatabase,
                                              arg2: *mut GByteArray,
                                              arg3: *mut GTlsInteraction,
                                              arg4: GTlsDatabaseLookupFlags,
                                              arg5: *mut GCancellable,
                                              arg6: GAsyncReadyCallback,
                                              arg7: gpointer),
    lookup_certificates_issued_by_finish: extern "C" fn
                                              (arg1: *mut GTlsDatabase,
                                               arg2: *mut GAsyncResult,
                                               arg3: *mut *mut GError)
                                              -> *mut GList,
    padding: [gpointer, ..16u],
}
pub type GTlsFileDatabaseInterface = Struct__GTlsFileDatabaseInterface;
pub struct Struct__GTlsFileDatabaseInterface {
    g_iface: GTypeInterface,
    padding: [gpointer, ..8u],
}
pub type GTlsInteractionClass = Struct__GTlsInteractionClass;
pub type Struct__GTlsInteractionPrivate = c_void;
pub type GTlsInteractionPrivate = Struct__GTlsInteractionPrivate;
pub struct Struct__GTlsInteraction {
    parent_instance: GObject,
    _priv: *mut GTlsInteractionPrivate,
}
pub struct Struct__GTlsInteractionClass {
    parent_class: GObjectClass,
    ask_password: extern "C" fn
                      (arg1: *mut GTlsInteraction, arg2: *mut GTlsPassword,
                       arg3: *mut GCancellable, arg4: *mut *mut GError)
                      -> GTlsInteractionResult,
    ask_password_async: extern "C" fn
                            (arg1: *mut GTlsInteraction,
                             arg2: *mut GTlsPassword, arg3: *mut GCancellable,
                             arg4: GAsyncReadyCallback, arg5: gpointer),
    ask_password_finish: extern "C" fn
                             (arg1: *mut GTlsInteraction,
                              arg2: *mut GAsyncResult, arg3: *mut *mut GError)
                             -> GTlsInteractionResult,
    padding: [gpointer, ..24u],
}
pub type GTlsServerConnectionInterface =
    Struct__GTlsServerConnectionInterface;
pub struct Struct__GTlsServerConnectionInterface {
    g_iface: GTypeInterface,
}
pub type GTlsPasswordClass = Struct__GTlsPasswordClass;
pub type Struct__GTlsPasswordPrivate = c_void;
pub type GTlsPasswordPrivate = Struct__GTlsPasswordPrivate;
pub struct Struct__GTlsPassword {
    parent_instance: GObject,
    _priv: *mut GTlsPasswordPrivate,
}
pub struct Struct__GTlsPasswordClass {
    parent_class: GObjectClass,
    get_value: extern "C" fn(arg1: *mut GTlsPassword, arg2: *mut gsize)
                   -> *guchar,
    set_value: extern "C" fn
                   (arg1: *mut GTlsPassword, arg2: *mut guchar, arg3: gssize,
                    arg4: GDestroyNotify),
    get_default_warning: extern "C" fn(arg1: *mut GTlsPassword) -> *gchar,
    padding: [gpointer, ..4u],
}
pub type GVfsClass = Struct__GVfsClass;
pub struct Struct__GVfs {
    parent_instance: GObject,
}
pub struct Struct__GVfsClass {
    parent_class: GObjectClass,
    is_active: extern "C" fn(arg1: *mut GVfs) -> gboolean,
    get_file_for_path: extern "C" fn(arg1: *mut GVfs, arg2: *c_schar)
                           -> *mut GFile,
    get_file_for_uri: extern "C" fn(arg1: *mut GVfs, arg2: *c_schar)
                          -> *mut GFile,
    get_supported_uri_schemes: extern "C" fn(arg1: *mut GVfs) -> **gchar,
    parse_name: extern "C" fn(arg1: *mut GVfs, arg2: *c_schar) -> *mut GFile,
    local_file_add_info: extern "C" fn
                             (arg1: *mut GVfs, arg2: *c_schar, arg3: guint64,
                              arg4: *mut GFileAttributeMatcher,
                              arg5: *mut GFileInfo, arg6: *mut GCancellable,
                              arg7: *mut gpointer, arg8: *mut GDestroyNotify),
    add_writable_namespaces: extern "C" fn
                                 (arg1: *mut GVfs,
                                  arg2: *mut GFileAttributeInfoList),
    local_file_set_attributes: extern "C" fn
                                   (arg1: *mut GVfs, arg2: *c_schar,
                                    arg3: *mut GFileInfo,
                                    arg4: GFileQueryInfoFlags,
                                    arg5: *mut GCancellable,
                                    arg6: *mut *mut GError) -> gboolean,
    local_file_removed: extern "C" fn(arg1: *mut GVfs, arg2: *c_schar),
    local_file_moved: extern "C" fn
                          (arg1: *mut GVfs, arg2: *c_schar, arg3: *c_schar),
    deserialize_icon: extern "C" fn(arg1: *mut GVfs, arg2: *mut GVariant)
                          -> *mut GIcon,
    _g_reserved1: extern "C" fn(),
    _g_reserved2: extern "C" fn(),
    _g_reserved3: extern "C" fn(),
    _g_reserved4: extern "C" fn(),
    _g_reserved5: extern "C" fn(),
    _g_reserved6: extern "C" fn(),
}
pub type GVolumeIface = Struct__GVolumeIface;
pub struct Struct__GVolumeIface {
    g_iface: GTypeInterface,
    changed: extern "C" fn(arg1: *mut GVolume),
    removed: extern "C" fn(arg1: *mut GVolume),
    get_name: extern "C" fn(arg1: *mut GVolume) -> *mut c_schar,
    get_icon: extern "C" fn(arg1: *mut GVolume) -> *mut GIcon,
    get_uuid: extern "C" fn(arg1: *mut GVolume) -> *mut c_schar,
    get_drive: extern "C" fn(arg1: *mut GVolume) -> *mut GDrive,
    get_mount: extern "C" fn(arg1: *mut GVolume) -> *mut GMount,
    can_mount: extern "C" fn(arg1: *mut GVolume) -> gboolean,
    can_eject: extern "C" fn(arg1: *mut GVolume) -> gboolean,
    mount_fn: extern "C" fn
                  (arg1: *mut GVolume, arg2: GMountMountFlags,
                   arg3: *mut GMountOperation, arg4: *mut GCancellable,
                   arg5: GAsyncReadyCallback, arg6: gpointer),
    mount_finish: extern "C" fn
                      (arg1: *mut GVolume, arg2: *mut GAsyncResult,
                       arg3: *mut *mut GError) -> gboolean,
    eject: extern "C" fn
               (arg1: *mut GVolume, arg2: GMountUnmountFlags,
                arg3: *mut GCancellable, arg4: GAsyncReadyCallback,
                arg5: gpointer),
    eject_finish: extern "C" fn
                      (arg1: *mut GVolume, arg2: *mut GAsyncResult,
                       arg3: *mut *mut GError) -> gboolean,
    get_identifier: extern "C" fn(arg1: *mut GVolume, arg2: *c_schar)
                        -> *mut c_schar,
    enumerate_identifiers: extern "C" fn(arg1: *mut GVolume)
                               -> *mut *mut c_schar,
    should_automount: extern "C" fn(arg1: *mut GVolume) -> gboolean,
    get_activation_root: extern "C" fn(arg1: *mut GVolume) -> *mut GFile,
    eject_with_operation: extern "C" fn
                              (arg1: *mut GVolume, arg2: GMountUnmountFlags,
                               arg3: *mut GMountOperation,
                               arg4: *mut GCancellable,
                               arg5: GAsyncReadyCallback, arg6: gpointer),
    eject_with_operation_finish: extern "C" fn
                                     (arg1: *mut GVolume,
                                      arg2: *mut GAsyncResult,
                                      arg3: *mut *mut GError) -> gboolean,
    get_sort_key: extern "C" fn(arg1: *mut GVolume) -> *gchar,
    get_symbolic_icon: extern "C" fn(arg1: *mut GVolume) -> *mut GIcon,
}
pub type GZlibCompressorClass = Struct__GZlibCompressorClass;
pub struct Struct__GZlibCompressorClass {
    parent_class: GObjectClass,
}
pub type GZlibDecompressorClass = Struct__GZlibDecompressorClass;
pub struct Struct__GZlibDecompressorClass {
    parent_class: GObjectClass,
}
pub type GDBusInterfaceIface = Struct__GDBusInterfaceIface;
pub struct Struct__GDBusInterfaceIface {
    parent_iface: GTypeInterface,
    get_info: extern "C" fn(arg1: *mut GDBusInterface)
                  -> *mut GDBusInterfaceInfo,
    get_object: extern "C" fn(arg1: *mut GDBusInterface) -> *mut GDBusObject,
    set_object: extern "C" fn
                    (arg1: *mut GDBusInterface, arg2: *mut GDBusObject),
    dup_object: extern "C" fn(arg1: *mut GDBusInterface) -> *mut GDBusObject,
}
pub type GDBusInterfaceSkeletonClass = Struct__GDBusInterfaceSkeletonClass;
pub type Struct__GDBusInterfaceSkeletonPrivate = c_void;
pub type GDBusInterfaceSkeletonPrivate =
    Struct__GDBusInterfaceSkeletonPrivate;
pub struct Struct__GDBusInterfaceSkeleton {
    parent_instance: GObject,
    _priv: *mut GDBusInterfaceSkeletonPrivate,
}
pub struct Struct__GDBusInterfaceSkeletonClass {
    parent_class: GObjectClass,
    get_info: extern "C" fn(arg1: *mut GDBusInterfaceSkeleton)
                  -> *mut GDBusInterfaceInfo,
    get_vtable: extern "C" fn(arg1: *mut GDBusInterfaceSkeleton)
                    -> *mut GDBusInterfaceVTable,
    get_properties: extern "C" fn(arg1: *mut GDBusInterfaceSkeleton)
                        -> *mut GVariant,
    flush: extern "C" fn(arg1: *mut GDBusInterfaceSkeleton),
    vfunc_padding: [gpointer, ..8u],
    g_authorize_method: extern "C" fn
                            (arg1: *mut GDBusInterfaceSkeleton,
                             arg2: *mut GDBusMethodInvocation) -> gboolean,
    signal_padding: [gpointer, ..8u],
}
pub type GDBusObjectIface = Struct__GDBusObjectIface;
pub struct Struct__GDBusObjectIface {
    parent_iface: GTypeInterface,
    get_object_path: extern "C" fn(arg1: *mut GDBusObject) -> *gchar,
    get_interfaces: extern "C" fn(arg1: *mut GDBusObject) -> *mut GList,
    get_interface: extern "C" fn(arg1: *mut GDBusObject, arg2: *gchar)
                       -> *mut GDBusInterface,
    interface_added: extern "C" fn
                         (arg1: *mut GDBusObject, arg2: *mut GDBusInterface),
    interface_removed: extern "C" fn
                           (arg1: *mut GDBusObject,
                            arg2: *mut GDBusInterface),
}
pub type GDBusObjectSkeletonClass = Struct__GDBusObjectSkeletonClass;
pub type Struct__GDBusObjectSkeletonPrivate = c_void;
pub type GDBusObjectSkeletonPrivate = Struct__GDBusObjectSkeletonPrivate;
pub struct Struct__GDBusObjectSkeleton {
    parent_instance: GObject,
    _priv: *mut GDBusObjectSkeletonPrivate,
}
pub struct Struct__GDBusObjectSkeletonClass {
    parent_class: GObjectClass,
    authorize_method: extern "C" fn
                          (arg1: *mut GDBusObjectSkeleton,
                           arg2: *mut GDBusInterfaceSkeleton,
                           arg3: *mut GDBusMethodInvocation) -> gboolean,
    padding: [gpointer, ..8u],
}
pub type GDBusObjectProxyClass = Struct__GDBusObjectProxyClass;
pub type Struct__GDBusObjectProxyPrivate = c_void;
pub type GDBusObjectProxyPrivate = Struct__GDBusObjectProxyPrivate;
pub struct Struct__GDBusObjectProxy {
    parent_instance: GObject,
    _priv: *mut GDBusObjectProxyPrivate,
}
pub struct Struct__GDBusObjectProxyClass {
    parent_class: GObjectClass,
    padding: [gpointer, ..8u],
}
pub type GDBusObjectManagerIface = Struct__GDBusObjectManagerIface;
pub struct Struct__GDBusObjectManagerIface {
    parent_iface: GTypeInterface,
    get_object_path: extern "C" fn(arg1: *mut GDBusObjectManager) -> *gchar,
    get_objects: extern "C" fn(arg1: *mut GDBusObjectManager) -> *mut GList,
    get_object: extern "C" fn(arg1: *mut GDBusObjectManager, arg2: *gchar)
                    -> *mut GDBusObject,
    get_interface: extern "C" fn
                       (arg1: *mut GDBusObjectManager, arg2: *gchar,
                        arg3: *gchar) -> *mut GDBusInterface,
    object_added: extern "C" fn
                      (arg1: *mut GDBusObjectManager, arg2: *mut GDBusObject),
    object_removed: extern "C" fn
                        (arg1: *mut GDBusObjectManager,
                         arg2: *mut GDBusObject),
    interface_added: extern "C" fn
                         (arg1: *mut GDBusObjectManager,
                          arg2: *mut GDBusObject, arg3: *mut GDBusInterface),
    interface_removed: extern "C" fn
                           (arg1: *mut GDBusObjectManager,
                            arg2: *mut GDBusObject,
                            arg3: *mut GDBusInterface),
}
pub type GDBusObjectManagerClientClass =
    Struct__GDBusObjectManagerClientClass;
pub type Struct__GDBusObjectManagerClientPrivate = c_void;
pub type GDBusObjectManagerClientPrivate =
    Struct__GDBusObjectManagerClientPrivate;
pub struct Struct__GDBusObjectManagerClient {
    parent_instance: GObject,
    _priv: *mut GDBusObjectManagerClientPrivate,
}
pub struct Struct__GDBusObjectManagerClientClass {
    parent_class: GObjectClass,
    interface_proxy_signal: extern "C" fn
                                (arg1: *mut GDBusObjectManagerClient,
                                 arg2: *mut GDBusObjectProxy,
                                 arg3: *mut GDBusProxy, arg4: *gchar,
                                 arg5: *gchar, arg6: *mut GVariant),
    interface_proxy_properties_changed: extern "C" fn
                                            (arg1:
                                                 *mut GDBusObjectManagerClient,
                                             arg2: *mut GDBusObjectProxy,
                                             arg3: *mut GDBusProxy,
                                             arg4: *mut GVariant,
                                             arg5: **gchar),
    padding: [gpointer, ..8u],
}
pub type GDBusObjectManagerServerClass =
    Struct__GDBusObjectManagerServerClass;
pub type Struct__GDBusObjectManagerServerPrivate = c_void;
pub type GDBusObjectManagerServerPrivate =
    Struct__GDBusObjectManagerServerPrivate;
pub struct Struct__GDBusObjectManagerServer {
    parent_instance: GObject,
    _priv: *mut GDBusObjectManagerServerPrivate,
}
pub struct Struct__GDBusObjectManagerServerClass {
    parent_class: GObjectClass,
    padding: [gpointer, ..8u],
}
pub type GRemoteActionGroupInterface = Struct__GRemoteActionGroupInterface;
pub struct Struct__GRemoteActionGroupInterface {
    g_iface: GTypeInterface,
    activate_action_full: extern "C" fn
                              (arg1: *mut GRemoteActionGroup, arg2: *gchar,
                               arg3: *mut GVariant, arg4: *mut GVariant),
    change_action_state_full: extern "C" fn
                                  (arg1: *mut GRemoteActionGroup,
                                   arg2: *gchar, arg3: *mut GVariant,
                                   arg4: *mut GVariant),
}
pub type Struct__GMenuModelPrivate = c_void;
pub type GMenuModelPrivate = Struct__GMenuModelPrivate;
pub type GMenuModelClass = Struct__GMenuModelClass;
pub type Struct__GMenuAttributeIterPrivate = c_void;
pub type GMenuAttributeIterPrivate = Struct__GMenuAttributeIterPrivate;
pub type GMenuAttributeIterClass = Struct__GMenuAttributeIterClass;
pub type GMenuAttributeIter = Struct__GMenuAttributeIter;
pub type Struct__GMenuLinkIterPrivate = c_void;
pub type GMenuLinkIterPrivate = Struct__GMenuLinkIterPrivate;
pub type GMenuLinkIterClass = Struct__GMenuLinkIterClass;
pub type GMenuLinkIter = Struct__GMenuLinkIter;
pub struct Struct__GMenuModel {
    parent_instance: GObject,
    _priv: *mut GMenuModelPrivate,
}
pub struct Struct__GMenuModelClass {
    parent_class: GObjectClass,
    is_mutable: extern "C" fn(arg1: *mut GMenuModel) -> gboolean,
    get_n_items: extern "C" fn(arg1: *mut GMenuModel) -> gint,
    get_item_attributes: extern "C" fn
                             (arg1: *mut GMenuModel, arg2: gint,
                              arg3: *mut *mut GHashTable),
    iterate_item_attributes: extern "C" fn(arg1: *mut GMenuModel, arg2: gint)
                                 -> *mut GMenuAttributeIter,
    get_item_attribute_value: extern "C" fn
                                  (arg1: *mut GMenuModel, arg2: gint,
                                   arg3: *gchar, arg4: *GVariantType)
                                  -> *mut GVariant,
    get_item_links: extern "C" fn
                        (arg1: *mut GMenuModel, arg2: gint,
                         arg3: *mut *mut GHashTable),
    iterate_item_links: extern "C" fn(arg1: *mut GMenuModel, arg2: gint)
                            -> *mut GMenuLinkIter,
    get_item_link: extern "C" fn
                       (arg1: *mut GMenuModel, arg2: gint, arg3: *gchar)
                       -> *mut GMenuModel,
}
pub struct Struct__GMenuAttributeIter {
    parent_instance: GObject,
    _priv: *mut GMenuAttributeIterPrivate,
}
pub struct Struct__GMenuAttributeIterClass {
    parent_class: GObjectClass,
    get_next: extern "C" fn
                  (arg1: *mut GMenuAttributeIter, arg2: *mut *gchar,
                   arg3: *mut *mut GVariant) -> gboolean,
}
pub struct Struct__GMenuLinkIter {
    parent_instance: GObject,
    _priv: *mut GMenuLinkIterPrivate,
}
pub struct Struct__GMenuLinkIterClass {
    parent_class: GObjectClass,
    get_next: extern "C" fn
                  (arg1: *mut GMenuLinkIter, arg2: *mut *gchar,
                   arg3: *mut *mut GMenuModel) -> gboolean,
}
pub type Struct__GMenuItem = c_void;
pub type GMenuItem = Struct__GMenuItem;
pub type Struct__GMenu = c_void;
pub type GMenu = Struct__GMenu;
pub type Struct__GDBusMenuModel = c_void;
pub type GDBusMenuModel = Struct__GDBusMenuModel;
pub type Struct__PangoCoverage = c_void;
pub type PangoCoverage = Struct__PangoCoverage;
pub type PangoCoverageLevel = c_uint;
pub static PANGO_COVERAGE_NONE: c_uint = 0;
pub static PANGO_COVERAGE_FALLBACK: c_uint = 1;
pub static PANGO_COVERAGE_APPROXIMATE: c_uint = 2;
pub static PANGO_COVERAGE_EXACT: c_uint = 3;
pub type PangoLogAttr = Struct__PangoLogAttr;
pub type Struct__PangoEngineLang = c_void;
pub type PangoEngineLang = Struct__PangoEngineLang;
pub type Struct__PangoEngineShape = c_void;
pub type PangoEngineShape = Struct__PangoEngineShape;
pub type Struct__PangoFont = c_void;
pub type PangoFont = Struct__PangoFont;
pub type Struct__PangoFontMap = c_void;
pub type PangoFontMap = Struct__PangoFontMap;
pub type PangoRectangle = Struct__PangoRectangle;
pub type PangoGlyph = guint32;
pub struct Struct__PangoRectangle {
    x: c_int,
    y: c_int,
    width: c_int,
    height: c_int,
}
pub type PangoGravity = c_uint;
pub static PANGO_GRAVITY_SOUTH: c_uint = 0;
pub static PANGO_GRAVITY_EAST: c_uint = 1;
pub static PANGO_GRAVITY_NORTH: c_uint = 2;
pub static PANGO_GRAVITY_WEST: c_uint = 3;
pub static PANGO_GRAVITY_AUTO: c_uint = 4;
pub type PangoGravityHint = c_uint;
pub static PANGO_GRAVITY_HINT_NATURAL: c_uint = 0;
pub static PANGO_GRAVITY_HINT_STRONG: c_uint = 1;
pub static PANGO_GRAVITY_HINT_LINE: c_uint = 2;
pub type PangoMatrix = Struct__PangoMatrix;
pub struct Struct__PangoMatrix {
    xx: c_double,
    xy: c_double,
    yx: c_double,
    yy: c_double,
    x0: c_double,
    y0: c_double,
}
pub type Struct__PangoScriptIter = c_void;
pub type PangoScriptIter = Struct__PangoScriptIter;
pub type PangoScript = c_int;
pub static PANGO_SCRIPT_INVALID_CODE: c_int = -1;
pub static PANGO_SCRIPT_COMMON: c_int = 0;
pub static PANGO_SCRIPT_INHERITED: c_int = 1;
pub static PANGO_SCRIPT_ARABIC: c_int = 2;
pub static PANGO_SCRIPT_ARMENIAN: c_int = 3;
pub static PANGO_SCRIPT_BENGALI: c_int = 4;
pub static PANGO_SCRIPT_BOPOMOFO: c_int = 5;
pub static PANGO_SCRIPT_CHEROKEE: c_int = 6;
pub static PANGO_SCRIPT_COPTIC: c_int = 7;
pub static PANGO_SCRIPT_CYRILLIC: c_int = 8;
pub static PANGO_SCRIPT_DESERET: c_int = 9;
pub static PANGO_SCRIPT_DEVANAGARI: c_int = 10;
pub static PANGO_SCRIPT_ETHIOPIC: c_int = 11;
pub static PANGO_SCRIPT_GEORGIAN: c_int = 12;
pub static PANGO_SCRIPT_GOTHIC: c_int = 13;
pub static PANGO_SCRIPT_GREEK: c_int = 14;
pub static PANGO_SCRIPT_GUJARATI: c_int = 15;
pub static PANGO_SCRIPT_GURMUKHI: c_int = 16;
pub static PANGO_SCRIPT_HAN: c_int = 17;
pub static PANGO_SCRIPT_HANGUL: c_int = 18;
pub static PANGO_SCRIPT_HEBREW: c_int = 19;
pub static PANGO_SCRIPT_HIRAGANA: c_int = 20;
pub static PANGO_SCRIPT_KANNADA: c_int = 21;
pub static PANGO_SCRIPT_KATAKANA: c_int = 22;
pub static PANGO_SCRIPT_KHMER: c_int = 23;
pub static PANGO_SCRIPT_LAO: c_int = 24;
pub static PANGO_SCRIPT_LATIN: c_int = 25;
pub static PANGO_SCRIPT_MALAYALAM: c_int = 26;
pub static PANGO_SCRIPT_MONGOLIAN: c_int = 27;
pub static PANGO_SCRIPT_MYANMAR: c_int = 28;
pub static PANGO_SCRIPT_OGHAM: c_int = 29;
pub static PANGO_SCRIPT_OLD_ITALIC: c_int = 30;
pub static PANGO_SCRIPT_ORIYA: c_int = 31;
pub static PANGO_SCRIPT_RUNIC: c_int = 32;
pub static PANGO_SCRIPT_SINHALA: c_int = 33;
pub static PANGO_SCRIPT_SYRIAC: c_int = 34;
pub static PANGO_SCRIPT_TAMIL: c_int = 35;
pub static PANGO_SCRIPT_TELUGU: c_int = 36;
pub static PANGO_SCRIPT_THAANA: c_int = 37;
pub static PANGO_SCRIPT_THAI: c_int = 38;
pub static PANGO_SCRIPT_TIBETAN: c_int = 39;
pub static PANGO_SCRIPT_CANADIAN_ABORIGINAL: c_int = 40;
pub static PANGO_SCRIPT_YI: c_int = 41;
pub static PANGO_SCRIPT_TAGALOG: c_int = 42;
pub static PANGO_SCRIPT_HANUNOO: c_int = 43;
pub static PANGO_SCRIPT_BUHID: c_int = 44;
pub static PANGO_SCRIPT_TAGBANWA: c_int = 45;
pub static PANGO_SCRIPT_BRAILLE: c_int = 46;
pub static PANGO_SCRIPT_CYPRIOT: c_int = 47;
pub static PANGO_SCRIPT_LIMBU: c_int = 48;
pub static PANGO_SCRIPT_OSMANYA: c_int = 49;
pub static PANGO_SCRIPT_SHAVIAN: c_int = 50;
pub static PANGO_SCRIPT_LINEAR_B: c_int = 51;
pub static PANGO_SCRIPT_TAI_LE: c_int = 52;
pub static PANGO_SCRIPT_UGARITIC: c_int = 53;
pub static PANGO_SCRIPT_NEW_TAI_LUE: c_int = 54;
pub static PANGO_SCRIPT_BUGINESE: c_int = 55;
pub static PANGO_SCRIPT_GLAGOLITIC: c_int = 56;
pub static PANGO_SCRIPT_TIFINAGH: c_int = 57;
pub static PANGO_SCRIPT_SYLOTI_NAGRI: c_int = 58;
pub static PANGO_SCRIPT_OLD_PERSIAN: c_int = 59;
pub static PANGO_SCRIPT_KHAROSHTHI: c_int = 60;
pub static PANGO_SCRIPT_UNKNOWN: c_int = 61;
pub static PANGO_SCRIPT_BALINESE: c_int = 62;
pub static PANGO_SCRIPT_CUNEIFORM: c_int = 63;
pub static PANGO_SCRIPT_PHOENICIAN: c_int = 64;
pub static PANGO_SCRIPT_PHAGS_PA: c_int = 65;
pub static PANGO_SCRIPT_NKO: c_int = 66;
pub static PANGO_SCRIPT_KAYAH_LI: c_int = 67;
pub static PANGO_SCRIPT_LEPCHA: c_int = 68;
pub static PANGO_SCRIPT_REJANG: c_int = 69;
pub static PANGO_SCRIPT_SUNDANESE: c_int = 70;
pub static PANGO_SCRIPT_SAURASHTRA: c_int = 71;
pub static PANGO_SCRIPT_CHAM: c_int = 72;
pub static PANGO_SCRIPT_OL_CHIKI: c_int = 73;
pub static PANGO_SCRIPT_VAI: c_int = 74;
pub static PANGO_SCRIPT_CARIAN: c_int = 75;
pub static PANGO_SCRIPT_LYCIAN: c_int = 76;
pub static PANGO_SCRIPT_LYDIAN: c_int = 77;
pub static PANGO_SCRIPT_BATAK: c_int = 78;
pub static PANGO_SCRIPT_BRAHMI: c_int = 79;
pub static PANGO_SCRIPT_MANDAIC: c_int = 80;
pub static PANGO_SCRIPT_CHAKMA: c_int = 81;
pub static PANGO_SCRIPT_MEROITIC_CURSIVE: c_int = 82;
pub static PANGO_SCRIPT_MEROITIC_HIEROGLYPHS: c_int = 83;
pub static PANGO_SCRIPT_MIAO: c_int = 84;
pub static PANGO_SCRIPT_SHARADA: c_int = 85;
pub static PANGO_SCRIPT_SORA_SOMPENG: c_int = 86;
pub static PANGO_SCRIPT_TAKRI: c_int = 87;
pub type Struct__PangoLanguage = c_void;
pub type PangoLanguage = Struct__PangoLanguage;
pub type PangoBidiType = c_uint;
pub static PANGO_BIDI_TYPE_L: c_uint = 0;
pub static PANGO_BIDI_TYPE_LRE: c_uint = 1;
pub static PANGO_BIDI_TYPE_LRO: c_uint = 2;
pub static PANGO_BIDI_TYPE_R: c_uint = 3;
pub static PANGO_BIDI_TYPE_AL: c_uint = 4;
pub static PANGO_BIDI_TYPE_RLE: c_uint = 5;
pub static PANGO_BIDI_TYPE_RLO: c_uint = 6;
pub static PANGO_BIDI_TYPE_PDF: c_uint = 7;
pub static PANGO_BIDI_TYPE_EN: c_uint = 8;
pub static PANGO_BIDI_TYPE_ES: c_uint = 9;
pub static PANGO_BIDI_TYPE_ET: c_uint = 10;
pub static PANGO_BIDI_TYPE_AN: c_uint = 11;
pub static PANGO_BIDI_TYPE_CS: c_uint = 12;
pub static PANGO_BIDI_TYPE_NSM: c_uint = 13;
pub static PANGO_BIDI_TYPE_BN: c_uint = 14;
pub static PANGO_BIDI_TYPE_B: c_uint = 15;
pub static PANGO_BIDI_TYPE_S: c_uint = 16;
pub static PANGO_BIDI_TYPE_WS: c_uint = 17;
pub static PANGO_BIDI_TYPE_ON: c_uint = 18;
pub type PangoDirection = c_uint;
pub static PANGO_DIRECTION_LTR: c_uint = 0;
pub static PANGO_DIRECTION_RTL: c_uint = 1;
pub static PANGO_DIRECTION_TTB_LTR: c_uint = 2;
pub static PANGO_DIRECTION_TTB_RTL: c_uint = 3;
pub static PANGO_DIRECTION_WEAK_LTR: c_uint = 4;
pub static PANGO_DIRECTION_WEAK_RTL: c_uint = 5;
pub static PANGO_DIRECTION_NEUTRAL: c_uint = 6;
pub type Struct__PangoFontDescription = c_void;
pub type PangoFontDescription = Struct__PangoFontDescription;
pub type Struct__PangoFontMetrics = c_void;
pub type PangoFontMetrics = Struct__PangoFontMetrics;
pub type PangoStyle = c_uint;
pub static PANGO_STYLE_NORMAL: c_uint = 0;
pub static PANGO_STYLE_OBLIQUE: c_uint = 1;
pub static PANGO_STYLE_ITALIC: c_uint = 2;
pub type PangoVariant = c_uint;
pub static PANGO_VARIANT_NORMAL: c_uint = 0;
pub static PANGO_VARIANT_SMALL_CAPS: c_uint = 1;
pub type PangoWeight = c_uint;
pub static PANGO_WEIGHT_THIN: c_uint = 100;
pub static PANGO_WEIGHT_ULTRALIGHT: c_uint = 200;
pub static PANGO_WEIGHT_LIGHT: c_uint = 300;
pub static PANGO_WEIGHT_BOOK: c_uint = 380;
pub static PANGO_WEIGHT_NORMAL: c_uint = 400;
pub static PANGO_WEIGHT_MEDIUM: c_uint = 500;
pub static PANGO_WEIGHT_SEMIBOLD: c_uint = 600;
pub static PANGO_WEIGHT_BOLD: c_uint = 700;
pub static PANGO_WEIGHT_ULTRABOLD: c_uint = 800;
pub static PANGO_WEIGHT_HEAVY: c_uint = 900;
pub static PANGO_WEIGHT_ULTRAHEAVY: c_uint = 1000;
pub type PangoStretch = c_uint;
pub static PANGO_STRETCH_ULTRA_CONDENSED: c_uint = 0;
pub static PANGO_STRETCH_EXTRA_CONDENSED: c_uint = 1;
pub static PANGO_STRETCH_CONDENSED: c_uint = 2;
pub static PANGO_STRETCH_SEMI_CONDENSED: c_uint = 3;
pub static PANGO_STRETCH_NORMAL: c_uint = 4;
pub static PANGO_STRETCH_SEMI_EXPANDED: c_uint = 5;
pub static PANGO_STRETCH_EXPANDED: c_uint = 6;
pub static PANGO_STRETCH_EXTRA_EXPANDED: c_uint = 7;
pub static PANGO_STRETCH_ULTRA_EXPANDED: c_uint = 8;
pub type PangoFontMask = c_uint;
pub static PANGO_FONT_MASK_FAMILY: c_uint = 1;
pub static PANGO_FONT_MASK_STYLE: c_uint = 2;
pub static PANGO_FONT_MASK_VARIANT: c_uint = 4;
pub static PANGO_FONT_MASK_WEIGHT: c_uint = 8;
pub static PANGO_FONT_MASK_STRETCH: c_uint = 16;
pub static PANGO_FONT_MASK_SIZE: c_uint = 32;
pub static PANGO_FONT_MASK_GRAVITY: c_uint = 64;
pub type Struct__PangoFontFamily = c_void;
pub type PangoFontFamily = Struct__PangoFontFamily;
pub type Struct__PangoFontFace = c_void;
pub type PangoFontFace = Struct__PangoFontFace;
pub type PangoColor = Struct__PangoColor;
pub struct Struct__PangoColor {
    red: guint16,
    green: guint16,
    blue: guint16,
}
pub type PangoAttribute = Struct__PangoAttribute;
pub type PangoAttrClass = Struct__PangoAttrClass;
pub type PangoAttrString = Struct__PangoAttrString;
pub type PangoAttrLanguage = Struct__PangoAttrLanguage;
pub type PangoAttrInt = Struct__PangoAttrInt;
pub type PangoAttrSize = Struct__PangoAttrSize;
pub type PangoAttrFloat = Struct__PangoAttrFloat;
pub type PangoAttrColor = Struct__PangoAttrColor;
pub type PangoAttrFontDesc = Struct__PangoAttrFontDesc;
pub type PangoAttrShape = Struct__PangoAttrShape;
pub type Struct__PangoAttrList = c_void;
pub type PangoAttrList = Struct__PangoAttrList;
pub type Struct__PangoAttrIterator = c_void;
pub type PangoAttrIterator = Struct__PangoAttrIterator;
pub type PangoAttrType = c_uint;
pub static PANGO_ATTR_INVALID: c_uint = 0;
pub static PANGO_ATTR_LANGUAGE: c_uint = 1;
pub static PANGO_ATTR_FAMILY: c_uint = 2;
pub static PANGO_ATTR_STYLE: c_uint = 3;
pub static PANGO_ATTR_WEIGHT: c_uint = 4;
pub static PANGO_ATTR_VARIANT: c_uint = 5;
pub static PANGO_ATTR_STRETCH: c_uint = 6;
pub static PANGO_ATTR_SIZE: c_uint = 7;
pub static PANGO_ATTR_FONT_DESC: c_uint = 8;
pub static PANGO_ATTR_FOREGROUND: c_uint = 9;
pub static PANGO_ATTR_BACKGROUND: c_uint = 10;
pub static PANGO_ATTR_UNDERLINE: c_uint = 11;
pub static PANGO_ATTR_STRIKETHROUGH: c_uint = 12;
pub static PANGO_ATTR_RISE: c_uint = 13;
pub static PANGO_ATTR_SHAPE: c_uint = 14;
pub static PANGO_ATTR_SCALE: c_uint = 15;
pub static PANGO_ATTR_FALLBACK: c_uint = 16;
pub static PANGO_ATTR_LETTER_SPACING: c_uint = 17;
pub static PANGO_ATTR_UNDERLINE_COLOR: c_uint = 18;
pub static PANGO_ATTR_STRIKETHROUGH_COLOR: c_uint = 19;
pub static PANGO_ATTR_ABSOLUTE_SIZE: c_uint = 20;
pub static PANGO_ATTR_GRAVITY: c_uint = 21;
pub static PANGO_ATTR_GRAVITY_HINT: c_uint = 22;
pub type PangoUnderline = c_uint;
pub static PANGO_UNDERLINE_NONE: c_uint = 0;
pub static PANGO_UNDERLINE_SINGLE: c_uint = 1;
pub static PANGO_UNDERLINE_DOUBLE: c_uint = 2;
pub static PANGO_UNDERLINE_LOW: c_uint = 3;
pub static PANGO_UNDERLINE_ERROR: c_uint = 4;
pub struct Struct__PangoAttribute {
    klass: *PangoAttrClass,
    start_index: guint,
    end_index: guint,
}
pub type PangoAttrFilterFunc =
    extern "C" fn(arg1: *mut PangoAttribute, arg2: gpointer) -> gboolean;
pub type PangoAttrDataCopyFunc =
    extern "C" fn(arg1: gconstpointer) -> gpointer;
pub struct Struct__PangoAttrClass {
    _type: PangoAttrType,
    copy: extern "C" fn(arg1: *PangoAttribute) -> *mut PangoAttribute,
    destroy: extern "C" fn(arg1: *mut PangoAttribute),
    equal: extern "C" fn(arg1: *PangoAttribute, arg2: *PangoAttribute)
               -> gboolean,
}
pub struct Struct__PangoAttrString {
    attr: PangoAttribute,
    value: *mut c_schar,
}
pub struct Struct__PangoAttrLanguage {
    attr: PangoAttribute,
    value: *mut PangoLanguage,
}
pub struct Struct__PangoAttrInt {
    attr: PangoAttribute,
    value: c_int,
}
pub struct Struct__PangoAttrFloat {
    attr: PangoAttribute,
    value: c_double,
}
pub struct Struct__PangoAttrColor {
    attr: PangoAttribute,
    color: PangoColor,
}
pub struct Struct__PangoAttrSize {
    attr: PangoAttribute,
    size: c_int,
    absolute: guint,
}
pub struct Struct__PangoAttrShape {
    attr: PangoAttribute,
    ink_rect: PangoRectangle,
    logical_rect: PangoRectangle,
    data: gpointer,
    copy_func: PangoAttrDataCopyFunc,
    destroy_func: GDestroyNotify,
}
pub struct Struct__PangoAttrFontDesc {
    attr: PangoAttribute,
    desc: *mut PangoFontDescription,
}
pub type PangoAnalysis = Struct__PangoAnalysis;
pub type PangoItem = Struct__PangoItem;
pub struct Struct__PangoAnalysis {
    shape_engine: *mut PangoEngineShape,
    lang_engine: *mut PangoEngineLang,
    font: *mut PangoFont,
    level: guint8,
    gravity: guint8,
    flags: guint8,
    script: guint8,
    language: *mut PangoLanguage,
    extra_attrs: *mut GSList,
}
pub struct Struct__PangoItem {
    offset: gint,
    length: gint,
    num_chars: gint,
    analysis: PangoAnalysis,
}
pub struct Struct__PangoLogAttr {
    is_line_break: guint,
    is_mandatory_break: guint,
    is_char_break: guint,
    is_white: guint,
    is_cursor_position: guint,
    is_word_start: guint,
    is_word_end: guint,
    is_sentence_boundary: guint,
    is_sentence_start: guint,
    is_sentence_end: guint,
    backspace_deletes_character: guint,
    is_expandable_space: guint,
    is_word_boundary: guint,
}
pub type Struct__PangoFontset = c_void;
pub type PangoFontset = Struct__PangoFontset;
pub type PangoFontsetForeachFunc =
    extern "C" fn
        (arg1: *mut PangoFontset, arg2: *mut PangoFont, arg3: gpointer)
        -> gboolean;
pub type Struct__PangoContext = c_void;
pub type PangoContext = Struct__PangoContext;
pub type Struct__PangoContextClass = c_void;
pub type PangoContextClass = Struct__PangoContextClass;
pub type PangoGlyphGeometry = Struct__PangoGlyphGeometry;
pub type PangoGlyphVisAttr = Struct__PangoGlyphVisAttr;
pub type PangoGlyphInfo = Struct__PangoGlyphInfo;
pub type PangoGlyphString = Struct__PangoGlyphString;
pub type PangoGlyphUnit = gint32;
pub struct Struct__PangoGlyphGeometry {
    width: PangoGlyphUnit,
    x_offset: PangoGlyphUnit,
    y_offset: PangoGlyphUnit,
}
pub struct Struct__PangoGlyphVisAttr {
    is_cluster_start: guint,
}
pub struct Struct__PangoGlyphInfo {
    glyph: PangoGlyph,
    geometry: PangoGlyphGeometry,
    attr: PangoGlyphVisAttr,
}
pub struct Struct__PangoGlyphString {
    num_glyphs: gint,
    glyphs: *mut PangoGlyphInfo,
    log_clusters: *mut gint,
    space: gint,
}
pub type PangoGlyphItem = Struct__PangoGlyphItem;
pub struct Struct__PangoGlyphItem {
    item: *mut PangoItem,
    glyphs: *mut PangoGlyphString,
}
pub type PangoGlyphItemIter = Struct__PangoGlyphItemIter;
pub struct Struct__PangoGlyphItemIter {
    glyph_item: *mut PangoGlyphItem,
    text: *gchar,
    start_glyph: c_int,
    start_index: c_int,
    start_char: c_int,
    end_glyph: c_int,
    end_index: c_int,
    end_char: c_int,
}
pub type Struct__PangoTabArray = c_void;
pub type PangoTabArray = Struct__PangoTabArray;
pub type PangoTabAlign = c_uint;
pub static PANGO_TAB_LEFT: c_uint = 0;
pub type Struct__PangoLayout = c_void;
pub type PangoLayout = Struct__PangoLayout;
pub type Struct__PangoLayoutClass = c_void;
pub type PangoLayoutClass = Struct__PangoLayoutClass;
pub type PangoLayoutLine = Struct__PangoLayoutLine;
pub type PangoLayoutRun = PangoGlyphItem;
pub type PangoAlignment = c_uint;
pub static PANGO_ALIGN_LEFT: c_uint = 0;
pub static PANGO_ALIGN_CENTER: c_uint = 1;
pub static PANGO_ALIGN_RIGHT: c_uint = 2;
pub type PangoWrapMode = c_uint;
pub static PANGO_WRAP_WORD: c_uint = 0;
pub static PANGO_WRAP_CHAR: c_uint = 1;
pub static PANGO_WRAP_WORD_CHAR: c_uint = 2;
pub type PangoEllipsizeMode = c_uint;
pub static PANGO_ELLIPSIZE_NONE: c_uint = 0;
pub static PANGO_ELLIPSIZE_START: c_uint = 1;
pub static PANGO_ELLIPSIZE_MIDDLE: c_uint = 2;
pub static PANGO_ELLIPSIZE_END: c_uint = 3;
pub struct Struct__PangoLayoutLine {
    layout: *mut PangoLayout,
    start_index: gint,
    length: gint,
    runs: *mut GSList,
    is_paragraph_start: guint,
    resolved_dir: guint,
}
pub type Struct__PangoLayoutIter = c_void;
pub type PangoLayoutIter = Struct__PangoLayoutIter;
pub type PangoRenderer = Struct__PangoRenderer;
pub type PangoRendererClass = Struct__PangoRendererClass;
pub type Struct__PangoRendererPrivate = c_void;
pub type PangoRendererPrivate = Struct__PangoRendererPrivate;
pub type PangoRenderPart = c_uint;
pub static PANGO_RENDER_PART_FOREGROUND: c_uint = 0;
pub static PANGO_RENDER_PART_BACKGROUND: c_uint = 1;
pub static PANGO_RENDER_PART_UNDERLINE: c_uint = 2;
pub static PANGO_RENDER_PART_STRIKETHROUGH: c_uint = 3;
pub struct Struct__PangoRenderer {
    parent_instance: GObject,
    underline: PangoUnderline,
    strikethrough: gboolean,
    active_count: c_int,
    matrix: *mut PangoMatrix,
    _priv: *mut PangoRendererPrivate,
}
pub struct Struct__PangoRendererClass {
    parent_class: GObjectClass,
    draw_glyphs: extern "C" fn
                     (arg1: *mut PangoRenderer, arg2: *mut PangoFont,
                      arg3: *mut PangoGlyphString, arg4: c_int, arg5: c_int),
    draw_rectangle: extern "C" fn
                        (arg1: *mut PangoRenderer, arg2: PangoRenderPart,
                         arg3: c_int, arg4: c_int, arg5: c_int, arg6: c_int),
    draw_error_underline: extern "C" fn
                              (arg1: *mut PangoRenderer, arg2: c_int,
                               arg3: c_int, arg4: c_int, arg5: c_int),
    draw_shape: extern "C" fn
                    (arg1: *mut PangoRenderer, arg2: *mut PangoAttrShape,
                     arg3: c_int, arg4: c_int),
    draw_trapezoid: extern "C" fn
                        (arg1: *mut PangoRenderer, arg2: PangoRenderPart,
                         arg3: c_double, arg4: c_double, arg5: c_double,
                         arg6: c_double, arg7: c_double, arg8: c_double),
    draw_glyph: extern "C" fn
                    (arg1: *mut PangoRenderer, arg2: *mut PangoFont,
                     arg3: PangoGlyph, arg4: c_double, arg5: c_double),
    part_changed: extern "C" fn
                      (arg1: *mut PangoRenderer, arg2: PangoRenderPart),
    begin: extern "C" fn(arg1: *mut PangoRenderer),
    end: extern "C" fn(arg1: *mut PangoRenderer),
    prepare_run: extern "C" fn
                     (arg1: *mut PangoRenderer, arg2: *mut PangoLayoutRun),
    draw_glyph_item: extern "C" fn
                         (arg1: *mut PangoRenderer, arg2: *c_schar,
                          arg3: *mut PangoGlyphItem, arg4: c_int,
                          arg5: c_int),
    _pango_reserved2: extern "C" fn(),
    _pango_reserved3: extern "C" fn(),
    _pango_reserved4: extern "C" fn(),
}
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
pub struct Union_Unnamed45 {
    data: [u32, ..1u],
}
impl Union_Unnamed45 {
    pub fn __wch(&mut self) -> *mut c_uint {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __wchb(&mut self) -> *mut [c_schar, ..4u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct __mbstate_t {
    __count: c_int,
    __value: Union_Unnamed45,
}
pub struct _G_fpos_t {
    __pos: __off_t,
    __state: __mbstate_t,
}
pub struct _G_fpos64_t {
    __pos: __off64_t,
    __state: __mbstate_t,
}
pub type Struct__IO_jump_t = c_void;
pub type _IO_lock_t = c_void;
pub struct Struct__IO_marker {
    _next: *mut Struct__IO_marker,
    _sbuf: *mut Struct__IO_FILE,
    _pos: c_int,
}
pub type Enum___codecvt_result = c_uint;
pub static __codecvt_ok: c_uint = 0;
pub static __codecvt_partial: c_uint = 1;
pub static __codecvt_error: c_uint = 2;
pub static __codecvt_noconv: c_uint = 3;
pub struct Struct__IO_FILE {
    _flags: c_int,
    _IO_read_ptr: *mut c_schar,
    _IO_read_end: *mut c_schar,
    _IO_read_base: *mut c_schar,
    _IO_write_base: *mut c_schar,
    _IO_write_ptr: *mut c_schar,
    _IO_write_end: *mut c_schar,
    _IO_buf_base: *mut c_schar,
    _IO_buf_end: *mut c_schar,
    _IO_save_base: *mut c_schar,
    _IO_backup_base: *mut c_schar,
    _IO_save_end: *mut c_schar,
    _markers: *mut Struct__IO_marker,
    _chain: *mut Struct__IO_FILE,
    _fileno: c_int,
    _flags2: c_int,
    _old_offset: __off_t,
    _cur_column: c_ushort,
    _vtable_offset: c_schar,
    _shortbuf: [c_schar, ..1u],
    _lock: *mut _IO_lock_t,
    _offset: __off64_t,
    __pad1: *mut c_void,
    __pad2: *mut c_void,
    __pad3: *mut c_void,
    __pad4: *mut c_void,
    __pad5: size_t,
    _mode: c_int,
    _unused2: [c_schar, ..20u],
}
pub type _IO_FILE = Struct__IO_FILE;
pub type Struct__IO_FILE_plus = c_void;
pub type __io_read_fn = c_void;
pub type __io_write_fn = c_void;
pub type __io_seek_fn = c_void;
pub type __io_close_fn = c_void;
pub type fpos_t = _G_fpos_t;
pub type cairo_bool_t = c_int;
pub type Struct__cairo = c_void;
pub type cairo_t = Struct__cairo;
pub type Struct__cairo_surface = c_void;
pub type cairo_surface_t = Struct__cairo_surface;
pub type Struct__cairo_device = c_void;
pub type cairo_device_t = Struct__cairo_device;
pub struct Struct__cairo_matrix {
    xx: c_double,
    yx: c_double,
    xy: c_double,
    yy: c_double,
    x0: c_double,
    y0: c_double,
}
pub type cairo_matrix_t = Struct__cairo_matrix;
pub type Struct__cairo_pattern = c_void;
pub type cairo_pattern_t = Struct__cairo_pattern;
pub type cairo_destroy_func_t = extern "C" fn(arg1: *mut c_void);
pub struct Struct__cairo_user_data_key {
    unused: c_int,
}
pub type cairo_user_data_key_t = Struct__cairo_user_data_key;
pub type Enum__cairo_status = c_uint;
pub static CAIRO_STATUS_SUCCESS: c_uint = 0;
pub static CAIRO_STATUS_NO_MEMORY: c_uint = 1;
pub static CAIRO_STATUS_INVALID_RESTORE: c_uint = 2;
pub static CAIRO_STATUS_INVALID_POP_GROUP: c_uint = 3;
pub static CAIRO_STATUS_NO_CURRENT_POINT: c_uint = 4;
pub static CAIRO_STATUS_INVALID_MATRIX: c_uint = 5;
pub static CAIRO_STATUS_INVALID_STATUS: c_uint = 6;
pub static CAIRO_STATUS_NULL_POINTER: c_uint = 7;
pub static CAIRO_STATUS_INVALID_STRING: c_uint = 8;
pub static CAIRO_STATUS_INVALID_PATH_DATA: c_uint = 9;
pub static CAIRO_STATUS_READ_ERROR: c_uint = 10;
pub static CAIRO_STATUS_WRITE_ERROR: c_uint = 11;
pub static CAIRO_STATUS_SURFACE_FINISHED: c_uint = 12;
pub static CAIRO_STATUS_SURFACE_TYPE_MISMATCH: c_uint = 13;
pub static CAIRO_STATUS_PATTERN_TYPE_MISMATCH: c_uint = 14;
pub static CAIRO_STATUS_INVALID_CONTENT: c_uint = 15;
pub static CAIRO_STATUS_INVALID_FORMAT: c_uint = 16;
pub static CAIRO_STATUS_INVALID_VISUAL: c_uint = 17;
pub static CAIRO_STATUS_FILE_NOT_FOUND: c_uint = 18;
pub static CAIRO_STATUS_INVALID_DASH: c_uint = 19;
pub static CAIRO_STATUS_INVALID_DSC_COMMENT: c_uint = 20;
pub static CAIRO_STATUS_INVALID_INDEX: c_uint = 21;
pub static CAIRO_STATUS_CLIP_NOT_REPRESENTABLE: c_uint = 22;
pub static CAIRO_STATUS_TEMP_FILE_ERROR: c_uint = 23;
pub static CAIRO_STATUS_INVALID_STRIDE: c_uint = 24;
pub static CAIRO_STATUS_FONT_TYPE_MISMATCH: c_uint = 25;
pub static CAIRO_STATUS_USER_FONT_IMMUTABLE: c_uint = 26;
pub static CAIRO_STATUS_USER_FONT_ERROR: c_uint = 27;
pub static CAIRO_STATUS_NEGATIVE_COUNT: c_uint = 28;
pub static CAIRO_STATUS_INVALID_CLUSTERS: c_uint = 29;
pub static CAIRO_STATUS_INVALID_SLANT: c_uint = 30;
pub static CAIRO_STATUS_INVALID_WEIGHT: c_uint = 31;
pub static CAIRO_STATUS_INVALID_SIZE: c_uint = 32;
pub static CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED: c_uint = 33;
pub static CAIRO_STATUS_DEVICE_TYPE_MISMATCH: c_uint = 34;
pub static CAIRO_STATUS_DEVICE_ERROR: c_uint = 35;
pub static CAIRO_STATUS_INVALID_MESH_CONSTRUCTION: c_uint = 36;
pub static CAIRO_STATUS_DEVICE_FINISHED: c_uint = 37;
pub static CAIRO_STATUS_LAST_STATUS: c_uint = 38;
pub type cairo_status_t = Enum__cairo_status;
pub type Enum__cairo_content = c_uint;
pub static CAIRO_CONTENT_COLOR: c_uint = 4096;
pub static CAIRO_CONTENT_ALPHA: c_uint = 8192;
pub static CAIRO_CONTENT_COLOR_ALPHA: c_uint = 12288;
pub type cairo_content_t = Enum__cairo_content;
pub type Enum__cairo_format = c_int;
pub static CAIRO_FORMAT_INVALID: c_int = -1;
pub static CAIRO_FORMAT_ARGB32: c_int = 0;
pub static CAIRO_FORMAT_RGB24: c_int = 1;
pub static CAIRO_FORMAT_A8: c_int = 2;
pub static CAIRO_FORMAT_A1: c_int = 3;
pub static CAIRO_FORMAT_RGB16_565: c_int = 4;
pub static CAIRO_FORMAT_RGB30: c_int = 5;
pub type cairo_format_t = Enum__cairo_format;
pub type cairo_write_func_t =
    extern "C" fn(arg1: *mut c_void, arg2: *c_uchar, arg3: c_uint)
        -> cairo_status_t;
pub type cairo_read_func_t =
    extern "C" fn(arg1: *mut c_void, arg2: *mut c_uchar, arg3: c_uint)
        -> cairo_status_t;
pub struct Struct__cairo_rectangle_int {
    x: c_int,
    y: c_int,
    width: c_int,
    height: c_int,
}
pub type cairo_rectangle_int_t = Struct__cairo_rectangle_int;
pub type Enum__cairo_operator = c_uint;
pub static CAIRO_OPERATOR_CLEAR: c_uint = 0;
pub static CAIRO_OPERATOR_SOURCE: c_uint = 1;
pub static CAIRO_OPERATOR_OVER: c_uint = 2;
pub static CAIRO_OPERATOR_IN: c_uint = 3;
pub static CAIRO_OPERATOR_OUT: c_uint = 4;
pub static CAIRO_OPERATOR_ATOP: c_uint = 5;
pub static CAIRO_OPERATOR_DEST: c_uint = 6;
pub static CAIRO_OPERATOR_DEST_OVER: c_uint = 7;
pub static CAIRO_OPERATOR_DEST_IN: c_uint = 8;
pub static CAIRO_OPERATOR_DEST_OUT: c_uint = 9;
pub static CAIRO_OPERATOR_DEST_ATOP: c_uint = 10;
pub static CAIRO_OPERATOR_XOR: c_uint = 11;
pub static CAIRO_OPERATOR_ADD: c_uint = 12;
pub static CAIRO_OPERATOR_SATURATE: c_uint = 13;
pub static CAIRO_OPERATOR_MULTIPLY: c_uint = 14;
pub static CAIRO_OPERATOR_SCREEN: c_uint = 15;
pub static CAIRO_OPERATOR_OVERLAY: c_uint = 16;
pub static CAIRO_OPERATOR_DARKEN: c_uint = 17;
pub static CAIRO_OPERATOR_LIGHTEN: c_uint = 18;
pub static CAIRO_OPERATOR_COLOR_DODGE: c_uint = 19;
pub static CAIRO_OPERATOR_COLOR_BURN: c_uint = 20;
pub static CAIRO_OPERATOR_HARD_LIGHT: c_uint = 21;
pub static CAIRO_OPERATOR_SOFT_LIGHT: c_uint = 22;
pub static CAIRO_OPERATOR_DIFFERENCE: c_uint = 23;
pub static CAIRO_OPERATOR_EXCLUSION: c_uint = 24;
pub static CAIRO_OPERATOR_HSL_HUE: c_uint = 25;
pub static CAIRO_OPERATOR_HSL_SATURATION: c_uint = 26;
pub static CAIRO_OPERATOR_HSL_COLOR: c_uint = 27;
pub static CAIRO_OPERATOR_HSL_LUMINOSITY: c_uint = 28;
pub type cairo_operator_t = Enum__cairo_operator;
pub type Enum__cairo_antialias = c_uint;
pub static CAIRO_ANTIALIAS_DEFAULT: c_uint = 0;
pub static CAIRO_ANTIALIAS_NONE: c_uint = 1;
pub static CAIRO_ANTIALIAS_GRAY: c_uint = 2;
pub static CAIRO_ANTIALIAS_SUBPIXEL: c_uint = 3;
pub static CAIRO_ANTIALIAS_FAST: c_uint = 4;
pub static CAIRO_ANTIALIAS_GOOD: c_uint = 5;
pub static CAIRO_ANTIALIAS_BEST: c_uint = 6;
pub type cairo_antialias_t = Enum__cairo_antialias;
pub type Enum__cairo_fill_rule = c_uint;
pub static CAIRO_FILL_RULE_WINDING: c_uint = 0;
pub static CAIRO_FILL_RULE_EVEN_ODD: c_uint = 1;
pub type cairo_fill_rule_t = Enum__cairo_fill_rule;
pub type Enum__cairo_line_cap = c_uint;
pub static CAIRO_LINE_CAP_BUTT: c_uint = 0;
pub static CAIRO_LINE_CAP_ROUND: c_uint = 1;
pub static CAIRO_LINE_CAP_SQUARE: c_uint = 2;
pub type cairo_line_cap_t = Enum__cairo_line_cap;
pub type Enum__cairo_line_join = c_uint;
pub static CAIRO_LINE_JOIN_MITER: c_uint = 0;
pub static CAIRO_LINE_JOIN_ROUND: c_uint = 1;
pub static CAIRO_LINE_JOIN_BEVEL: c_uint = 2;
pub type cairo_line_join_t = Enum__cairo_line_join;
pub struct Struct__cairo_rectangle {
    x: c_double,
    y: c_double,
    width: c_double,
    height: c_double,
}
pub type cairo_rectangle_t = Struct__cairo_rectangle;
pub struct Struct__cairo_rectangle_list {
    status: cairo_status_t,
    rectangles: *mut cairo_rectangle_t,
    num_rectangles: c_int,
}
pub type cairo_rectangle_list_t = Struct__cairo_rectangle_list;
pub type Struct__cairo_scaled_font = c_void;
pub type cairo_scaled_font_t = Struct__cairo_scaled_font;
pub type Struct__cairo_font_face = c_void;
pub type cairo_font_face_t = Struct__cairo_font_face;
pub struct cairo_glyph_t {
    index: c_ulong,
    x: c_double,
    y: c_double,
}
pub struct cairo_text_cluster_t {
    num_bytes: c_int,
    num_glyphs: c_int,
}
pub type Enum__cairo_text_cluster_flags = c_uint;
pub static CAIRO_TEXT_CLUSTER_FLAG_BACKWARD: c_uint = 1;
pub type cairo_text_cluster_flags_t = Enum__cairo_text_cluster_flags;
pub struct cairo_text_extents_t {
    x_bearing: c_double,
    y_bearing: c_double,
    width: c_double,
    height: c_double,
    x_advance: c_double,
    y_advance: c_double,
}
pub struct cairo_font_extents_t {
    ascent: c_double,
    descent: c_double,
    height: c_double,
    max_x_advance: c_double,
    max_y_advance: c_double,
}
pub type Enum__cairo_font_slant = c_uint;
pub static CAIRO_FONT_SLANT_NORMAL: c_uint = 0;
pub static CAIRO_FONT_SLANT_ITALIC: c_uint = 1;
pub static CAIRO_FONT_SLANT_OBLIQUE: c_uint = 2;
pub type cairo_font_slant_t = Enum__cairo_font_slant;
pub type Enum__cairo_font_weight = c_uint;
pub static CAIRO_FONT_WEIGHT_NORMAL: c_uint = 0;
pub static CAIRO_FONT_WEIGHT_BOLD: c_uint = 1;
pub type cairo_font_weight_t = Enum__cairo_font_weight;
pub type Enum__cairo_subpixel_order = c_uint;
pub static CAIRO_SUBPIXEL_ORDER_DEFAULT: c_uint = 0;
pub static CAIRO_SUBPIXEL_ORDER_RGB: c_uint = 1;
pub static CAIRO_SUBPIXEL_ORDER_BGR: c_uint = 2;
pub static CAIRO_SUBPIXEL_ORDER_VRGB: c_uint = 3;
pub static CAIRO_SUBPIXEL_ORDER_VBGR: c_uint = 4;
pub type cairo_subpixel_order_t = Enum__cairo_subpixel_order;
pub type Enum__cairo_hint_style = c_uint;
pub static CAIRO_HINT_STYLE_DEFAULT: c_uint = 0;
pub static CAIRO_HINT_STYLE_NONE: c_uint = 1;
pub static CAIRO_HINT_STYLE_SLIGHT: c_uint = 2;
pub static CAIRO_HINT_STYLE_MEDIUM: c_uint = 3;
pub static CAIRO_HINT_STYLE_FULL: c_uint = 4;
pub type cairo_hint_style_t = Enum__cairo_hint_style;
pub type Enum__cairo_hint_metrics = c_uint;
pub static CAIRO_HINT_METRICS_DEFAULT: c_uint = 0;
pub static CAIRO_HINT_METRICS_OFF: c_uint = 1;
pub static CAIRO_HINT_METRICS_ON: c_uint = 2;
pub type cairo_hint_metrics_t = Enum__cairo_hint_metrics;
pub type Struct__cairo_font_options = c_void;
pub type cairo_font_options_t = Struct__cairo_font_options;
pub type Enum__cairo_font_type = c_uint;
pub static CAIRO_FONT_TYPE_TOY: c_uint = 0;
pub static CAIRO_FONT_TYPE_FT: c_uint = 1;
pub static CAIRO_FONT_TYPE_WIN32: c_uint = 2;
pub static CAIRO_FONT_TYPE_QUARTZ: c_uint = 3;
pub static CAIRO_FONT_TYPE_USER: c_uint = 4;
pub type cairo_font_type_t = Enum__cairo_font_type;
pub type cairo_user_scaled_font_init_func_t =
    extern "C" fn
        (arg1: *mut cairo_scaled_font_t, arg2: *mut cairo_t,
         arg3: *mut cairo_font_extents_t) -> cairo_status_t;
pub type cairo_user_scaled_font_render_glyph_func_t =
    extern "C" fn
        (arg1: *mut cairo_scaled_font_t, arg2: c_ulong, arg3: *mut cairo_t,
         arg4: *mut cairo_text_extents_t) -> cairo_status_t;
pub type cairo_user_scaled_font_text_to_glyphs_func_t =
    extern "C" fn
        (arg1: *mut cairo_scaled_font_t, arg2: *c_schar, arg3: c_int,
         arg4: *mut *mut cairo_glyph_t, arg5: *mut c_int,
         arg6: *mut *mut cairo_text_cluster_t, arg7: *mut c_int,
         arg8: *mut cairo_text_cluster_flags_t) -> cairo_status_t;
pub type cairo_user_scaled_font_unicode_to_glyph_func_t =
    extern "C" fn
        (arg1: *mut cairo_scaled_font_t, arg2: c_ulong, arg3: *mut c_ulong)
        -> cairo_status_t;
pub type Enum__cairo_path_data_type = c_uint;
pub static CAIRO_PATH_MOVE_TO: c_uint = 0;
pub static CAIRO_PATH_LINE_TO: c_uint = 1;
pub static CAIRO_PATH_CURVE_TO: c_uint = 2;
pub static CAIRO_PATH_CLOSE_PATH: c_uint = 3;
pub type cairo_path_data_type_t = Enum__cairo_path_data_type;
pub type cairo_path_data_t = Union__cairo_path_data_t;
pub struct Union__cairo_path_data_t {
    data: [u64, ..2u],
}
impl Union__cairo_path_data_t {
    pub fn header(&mut self) -> *mut Struct_Unnamed46 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn point(&mut self) -> *mut Struct_Unnamed47 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct_Unnamed46 {
    _type: cairo_path_data_type_t,
    length: c_int,
}
pub struct Struct_Unnamed47 {
    x: c_double,
    y: c_double,
}
pub struct Struct_cairo_path {
    status: cairo_status_t,
    data: *mut cairo_path_data_t,
    num_data: c_int,
}
pub type cairo_path_t = Struct_cairo_path;
pub type Enum__cairo_device_type = c_int;
pub static CAIRO_DEVICE_TYPE_DRM: c_int = 0;
pub static CAIRO_DEVICE_TYPE_GL: c_int = 1;
pub static CAIRO_DEVICE_TYPE_SCRIPT: c_int = 2;
pub static CAIRO_DEVICE_TYPE_XCB: c_int = 3;
pub static CAIRO_DEVICE_TYPE_XLIB: c_int = 4;
pub static CAIRO_DEVICE_TYPE_XML: c_int = 5;
pub static CAIRO_DEVICE_TYPE_COGL: c_int = 6;
pub static CAIRO_DEVICE_TYPE_WIN32: c_int = 7;
pub static CAIRO_DEVICE_TYPE_INVALID: c_int = -1;
pub type cairo_device_type_t = Enum__cairo_device_type;
pub type cairo_surface_observer_mode_t = c_uint;
pub static CAIRO_SURFACE_OBSERVER_NORMAL: c_uint = 0;
pub static CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS: c_uint = 1;
pub type cairo_surface_observer_callback_t =
    extern "C" fn
        (arg1: *mut cairo_surface_t, arg2: *mut cairo_surface_t,
         arg3: *mut c_void);
pub type Enum__cairo_surface_type = c_uint;
pub static CAIRO_SURFACE_TYPE_IMAGE: c_uint = 0;
pub static CAIRO_SURFACE_TYPE_PDF: c_uint = 1;
pub static CAIRO_SURFACE_TYPE_PS: c_uint = 2;
pub static CAIRO_SURFACE_TYPE_XLIB: c_uint = 3;
pub static CAIRO_SURFACE_TYPE_XCB: c_uint = 4;
pub static CAIRO_SURFACE_TYPE_GLITZ: c_uint = 5;
pub static CAIRO_SURFACE_TYPE_QUARTZ: c_uint = 6;
pub static CAIRO_SURFACE_TYPE_WIN32: c_uint = 7;
pub static CAIRO_SURFACE_TYPE_BEOS: c_uint = 8;
pub static CAIRO_SURFACE_TYPE_DIRECTFB: c_uint = 9;
pub static CAIRO_SURFACE_TYPE_SVG: c_uint = 10;
pub static CAIRO_SURFACE_TYPE_OS2: c_uint = 11;
pub static CAIRO_SURFACE_TYPE_WIN32_PRINTING: c_uint = 12;
pub static CAIRO_SURFACE_TYPE_QUARTZ_IMAGE: c_uint = 13;
pub static CAIRO_SURFACE_TYPE_SCRIPT: c_uint = 14;
pub static CAIRO_SURFACE_TYPE_QT: c_uint = 15;
pub static CAIRO_SURFACE_TYPE_RECORDING: c_uint = 16;
pub static CAIRO_SURFACE_TYPE_VG: c_uint = 17;
pub static CAIRO_SURFACE_TYPE_GL: c_uint = 18;
pub static CAIRO_SURFACE_TYPE_DRM: c_uint = 19;
pub static CAIRO_SURFACE_TYPE_TEE: c_uint = 20;
pub static CAIRO_SURFACE_TYPE_XML: c_uint = 21;
pub static CAIRO_SURFACE_TYPE_SKIA: c_uint = 22;
pub static CAIRO_SURFACE_TYPE_SUBSURFACE: c_uint = 23;
pub static CAIRO_SURFACE_TYPE_COGL: c_uint = 24;
pub type cairo_surface_type_t = Enum__cairo_surface_type;
pub type cairo_raster_source_acquire_func_t =
    extern "C" fn
        (arg1: *mut cairo_pattern_t, arg2: *mut c_void,
         arg3: *mut cairo_surface_t, arg4: *cairo_rectangle_int_t)
        -> *mut cairo_surface_t;
pub type cairo_raster_source_release_func_t =
    extern "C" fn
        (arg1: *mut cairo_pattern_t, arg2: *mut c_void,
         arg3: *mut cairo_surface_t);
pub type cairo_raster_source_snapshot_func_t =
    extern "C" fn(arg1: *mut cairo_pattern_t, arg2: *mut c_void)
        -> cairo_status_t;
pub type cairo_raster_source_copy_func_t =
    extern "C" fn
        (arg1: *mut cairo_pattern_t, arg2: *mut c_void,
         arg3: *cairo_pattern_t) -> cairo_status_t;
pub type cairo_raster_source_finish_func_t =
    extern "C" fn(arg1: *mut cairo_pattern_t, arg2: *mut c_void);
pub type Enum__cairo_pattern_type = c_uint;
pub static CAIRO_PATTERN_TYPE_SOLID: c_uint = 0;
pub static CAIRO_PATTERN_TYPE_SURFACE: c_uint = 1;
pub static CAIRO_PATTERN_TYPE_LINEAR: c_uint = 2;
pub static CAIRO_PATTERN_TYPE_RADIAL: c_uint = 3;
pub static CAIRO_PATTERN_TYPE_MESH: c_uint = 4;
pub static CAIRO_PATTERN_TYPE_RASTER_SOURCE: c_uint = 5;
pub type cairo_pattern_type_t = Enum__cairo_pattern_type;
pub type Enum__cairo_extend = c_uint;
pub static CAIRO_EXTEND_NONE: c_uint = 0;
pub static CAIRO_EXTEND_REPEAT: c_uint = 1;
pub static CAIRO_EXTEND_REFLECT: c_uint = 2;
pub static CAIRO_EXTEND_PAD: c_uint = 3;
pub type cairo_extend_t = Enum__cairo_extend;
pub type Enum__cairo_filter = c_uint;
pub static CAIRO_FILTER_FAST: c_uint = 0;
pub static CAIRO_FILTER_GOOD: c_uint = 1;
pub static CAIRO_FILTER_BEST: c_uint = 2;
pub static CAIRO_FILTER_NEAREST: c_uint = 3;
pub static CAIRO_FILTER_BILINEAR: c_uint = 4;
pub static CAIRO_FILTER_GAUSSIAN: c_uint = 5;
pub type cairo_filter_t = Enum__cairo_filter;
pub type Struct__cairo_region = c_void;
pub type cairo_region_t = Struct__cairo_region;
pub type Enum__cairo_region_overlap = c_uint;
pub static CAIRO_REGION_OVERLAP_IN: c_uint = 0;
pub static CAIRO_REGION_OVERLAP_OUT: c_uint = 1;
pub static CAIRO_REGION_OVERLAP_PART: c_uint = 2;
pub type cairo_region_overlap_t = Enum__cairo_region_overlap;
pub type GdkPoint = Struct__GdkPoint;
pub type GdkRectangle = cairo_rectangle_int_t;
pub type Struct__GdkAtom = c_void;
pub type GdkAtom = *mut Struct__GdkAtom;
pub type GdkColor = Struct__GdkColor;
pub type GdkRGBA = Struct__GdkRGBA;
pub type Struct__GdkCursor = c_void;
pub type GdkCursor = Struct__GdkCursor;
pub type Struct__GdkVisual = c_void;
pub type GdkVisual = Struct__GdkVisual;
pub type Struct__GdkDevice = c_void;
pub type GdkDevice = Struct__GdkDevice;
pub type Struct__GdkDragContext = c_void;
pub type GdkDragContext = Struct__GdkDragContext;
pub type Struct__GdkDisplayManager = c_void;
pub type GdkDisplayManager = Struct__GdkDisplayManager;
pub type Struct__GdkDeviceManager = c_void;
pub type GdkDeviceManager = Struct__GdkDeviceManager;
pub type Struct__GdkDisplay = c_void;
pub type GdkDisplay = Struct__GdkDisplay;
pub type Struct__GdkScreen = c_void;
pub type GdkScreen = Struct__GdkScreen;
pub type Struct__GdkWindow = c_void;
pub type GdkWindow = Struct__GdkWindow;
pub type Struct__GdkKeymap = c_void;
pub type GdkKeymap = Struct__GdkKeymap;
pub type Struct__GdkAppLaunchContext = c_void;
pub type GdkAppLaunchContext = Struct__GdkAppLaunchContext;
pub type GdkByteOrder = c_uint;
pub static GDK_LSB_FIRST: c_uint = 0;
pub static GDK_MSB_FIRST: c_uint = 1;
pub type GdkModifierType = c_uint;
pub static GDK_SHIFT_MASK: c_uint = 1;
pub static GDK_LOCK_MASK: c_uint = 2;
pub static GDK_CONTROL_MASK: c_uint = 4;
pub static GDK_MOD1_MASK: c_uint = 8;
pub static GDK_MOD2_MASK: c_uint = 16;
pub static GDK_MOD3_MASK: c_uint = 32;
pub static GDK_MOD4_MASK: c_uint = 64;
pub static GDK_MOD5_MASK: c_uint = 128;
pub static GDK_BUTTON1_MASK: c_uint = 256;
pub static GDK_BUTTON2_MASK: c_uint = 512;
pub static GDK_BUTTON3_MASK: c_uint = 1024;
pub static GDK_BUTTON4_MASK: c_uint = 2048;
pub static GDK_BUTTON5_MASK: c_uint = 4096;
pub static GDK_MODIFIER_RESERVED_13_MASK: c_uint = 8192;
pub static GDK_MODIFIER_RESERVED_14_MASK: c_uint = 16384;
pub static GDK_MODIFIER_RESERVED_15_MASK: c_uint = 32768;
pub static GDK_MODIFIER_RESERVED_16_MASK: c_uint = 65536;
pub static GDK_MODIFIER_RESERVED_17_MASK: c_uint = 131072;
pub static GDK_MODIFIER_RESERVED_18_MASK: c_uint = 262144;
pub static GDK_MODIFIER_RESERVED_19_MASK: c_uint = 524288;
pub static GDK_MODIFIER_RESERVED_20_MASK: c_uint = 1048576;
pub static GDK_MODIFIER_RESERVED_21_MASK: c_uint = 2097152;
pub static GDK_MODIFIER_RESERVED_22_MASK: c_uint = 4194304;
pub static GDK_MODIFIER_RESERVED_23_MASK: c_uint = 8388608;
pub static GDK_MODIFIER_RESERVED_24_MASK: c_uint = 16777216;
pub static GDK_MODIFIER_RESERVED_25_MASK: c_uint = 33554432;
pub static GDK_SUPER_MASK: c_uint = 67108864;
pub static GDK_HYPER_MASK: c_uint = 134217728;
pub static GDK_META_MASK: c_uint = 268435456;
pub static GDK_MODIFIER_RESERVED_29_MASK: c_uint = 536870912;
pub static GDK_RELEASE_MASK: c_uint = 1073741824;
pub static GDK_MODIFIER_MASK: c_uint = 1543512063;
pub type GdkModifierIntent = c_uint;
pub static GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR: c_uint = 0;
pub static GDK_MODIFIER_INTENT_CONTEXT_MENU: c_uint = 1;
pub static GDK_MODIFIER_INTENT_EXTEND_SELECTION: c_uint = 2;
pub static GDK_MODIFIER_INTENT_MODIFY_SELECTION: c_uint = 3;
pub static GDK_MODIFIER_INTENT_NO_TEXT_INPUT: c_uint = 4;
pub static GDK_MODIFIER_INTENT_SHIFT_GROUP: c_uint = 5;
pub type GdkStatus = c_int;
pub static GDK_OK: c_int = 0;
pub static GDK_ERROR: c_int = -1;
pub static GDK_ERROR_PARAM: c_int = -2;
pub static GDK_ERROR_FILE: c_int = -3;
pub static GDK_ERROR_MEM: c_int = -4;
pub type GdkGrabStatus = c_uint;
pub static GDK_GRAB_SUCCESS: c_uint = 0;
pub static GDK_GRAB_ALREADY_GRABBED: c_uint = 1;
pub static GDK_GRAB_INVALID_TIME: c_uint = 2;
pub static GDK_GRAB_NOT_VIEWABLE: c_uint = 3;
pub static GDK_GRAB_FROZEN: c_uint = 4;
pub type GdkGrabOwnership = c_uint;
pub static GDK_OWNERSHIP_NONE: c_uint = 0;
pub static GDK_OWNERSHIP_WINDOW: c_uint = 1;
pub static GDK_OWNERSHIP_APPLICATION: c_uint = 2;
pub type GdkEventMask = c_uint;
pub static GDK_EXPOSURE_MASK: c_uint = 2;
pub static GDK_POINTER_MOTION_MASK: c_uint = 4;
pub static GDK_POINTER_MOTION_HINT_MASK: c_uint = 8;
pub static GDK_BUTTON_MOTION_MASK: c_uint = 16;
pub static GDK_BUTTON1_MOTION_MASK: c_uint = 32;
pub static GDK_BUTTON2_MOTION_MASK: c_uint = 64;
pub static GDK_BUTTON3_MOTION_MASK: c_uint = 128;
pub static GDK_BUTTON_PRESS_MASK: c_uint = 256;
pub static GDK_BUTTON_RELEASE_MASK: c_uint = 512;
pub static GDK_KEY_PRESS_MASK: c_uint = 1024;
pub static GDK_KEY_RELEASE_MASK: c_uint = 2048;
pub static GDK_ENTER_NOTIFY_MASK: c_uint = 4096;
pub static GDK_LEAVE_NOTIFY_MASK: c_uint = 8192;
pub static GDK_FOCUS_CHANGE_MASK: c_uint = 16384;
pub static GDK_STRUCTURE_MASK: c_uint = 32768;
pub static GDK_PROPERTY_CHANGE_MASK: c_uint = 65536;
pub static GDK_VISIBILITY_NOTIFY_MASK: c_uint = 131072;
pub static GDK_PROXIMITY_IN_MASK: c_uint = 262144;
pub static GDK_PROXIMITY_OUT_MASK: c_uint = 524288;
pub static GDK_SUBSTRUCTURE_MASK: c_uint = 1048576;
pub static GDK_SCROLL_MASK: c_uint = 2097152;
pub static GDK_TOUCH_MASK: c_uint = 4194304;
pub static GDK_SMOOTH_SCROLL_MASK: c_uint = 8388608;
pub static GDK_ALL_EVENTS_MASK: c_uint = 16777214;
pub struct Struct__GdkPoint {
    x: gint,
    y: gint,
}
pub struct Struct__GdkColor {
    pixel: guint32,
    red: guint16,
    green: guint16,
    blue: guint16,
}
pub type GdkTimeCoord = Struct__GdkTimeCoord;
pub type GdkInputSource = c_uint;
pub static GDK_SOURCE_MOUSE: c_uint = 0;
pub static GDK_SOURCE_PEN: c_uint = 1;
pub static GDK_SOURCE_ERASER: c_uint = 2;
pub static GDK_SOURCE_CURSOR: c_uint = 3;
pub static GDK_SOURCE_KEYBOARD: c_uint = 4;
pub static GDK_SOURCE_TOUCHSCREEN: c_uint = 5;
pub static GDK_SOURCE_TOUCHPAD: c_uint = 6;
pub type GdkInputMode = c_uint;
pub static GDK_MODE_DISABLED: c_uint = 0;
pub static GDK_MODE_SCREEN: c_uint = 1;
pub static GDK_MODE_WINDOW: c_uint = 2;
pub type GdkAxisUse = c_uint;
pub static GDK_AXIS_IGNORE: c_uint = 0;
pub static GDK_AXIS_X: c_uint = 1;
pub static GDK_AXIS_Y: c_uint = 2;
pub static GDK_AXIS_PRESSURE: c_uint = 3;
pub static GDK_AXIS_XTILT: c_uint = 4;
pub static GDK_AXIS_YTILT: c_uint = 5;
pub static GDK_AXIS_WHEEL: c_uint = 6;
pub static GDK_AXIS_LAST: c_uint = 7;
pub type GdkDeviceType = c_uint;
pub static GDK_DEVICE_TYPE_MASTER: c_uint = 0;
pub static GDK_DEVICE_TYPE_SLAVE: c_uint = 1;
pub static GDK_DEVICE_TYPE_FLOATING: c_uint = 2;
pub struct Struct__GdkTimeCoord {
    time: guint32,
    axes: [gdouble, ..128u],
}
pub type GdkDragAction = c_uint;
pub static GDK_ACTION_DEFAULT: c_uint = 1;
pub static GDK_ACTION_COPY: c_uint = 2;
pub static GDK_ACTION_MOVE: c_uint = 4;
pub static GDK_ACTION_LINK: c_uint = 8;
pub static GDK_ACTION_PRIVATE: c_uint = 16;
pub static GDK_ACTION_ASK: c_uint = 32;
pub type GdkDragProtocol = c_uint;
pub static GDK_DRAG_PROTO_NONE: c_uint = 0;
pub static GDK_DRAG_PROTO_MOTIF: c_uint = 1;
pub static GDK_DRAG_PROTO_XDND: c_uint = 2;
pub static GDK_DRAG_PROTO_ROOTWIN: c_uint = 3;
pub static GDK_DRAG_PROTO_WIN32_DROPFILES: c_uint = 4;
pub static GDK_DRAG_PROTO_OLE2: c_uint = 5;
pub static GDK_DRAG_PROTO_LOCAL: c_uint = 6;
pub type GdkEventAny = Struct__GdkEventAny;
pub type GdkEventExpose = Struct__GdkEventExpose;
pub type GdkEventVisibility = Struct__GdkEventVisibility;
pub type GdkEventMotion = Struct__GdkEventMotion;
pub type GdkEventButton = Struct__GdkEventButton;
pub type GdkEventTouch = Struct__GdkEventTouch;
pub type GdkEventScroll = Struct__GdkEventScroll;
pub type GdkEventKey = Struct__GdkEventKey;
pub type GdkEventFocus = Struct__GdkEventFocus;
pub type GdkEventCrossing = Struct__GdkEventCrossing;
pub type GdkEventConfigure = Struct__GdkEventConfigure;
pub type GdkEventProperty = Struct__GdkEventProperty;
pub type GdkEventSelection = Struct__GdkEventSelection;
pub type GdkEventOwnerChange = Struct__GdkEventOwnerChange;
pub type GdkEventProximity = Struct__GdkEventProximity;
pub type GdkEventDND = Struct__GdkEventDND;
pub type GdkEventWindowState = Struct__GdkEventWindowState;
pub type GdkEventSetting = Struct__GdkEventSetting;
pub type GdkEventGrabBroken = Struct__GdkEventGrabBroken;
pub type Struct__GdkEventSequence = c_void;
pub type GdkEventSequence = Struct__GdkEventSequence;
pub type GdkEvent = Union__GdkEvent;
pub type GdkEventFunc = extern "C" fn(arg1: *mut GdkEvent, arg2: gpointer);
pub type GdkXEvent = c_void;
pub type GdkFilterReturn = c_uint;
pub static GDK_FILTER_CONTINUE: c_uint = 0;
pub static GDK_FILTER_TRANSLATE: c_uint = 1;
pub static GDK_FILTER_REMOVE: c_uint = 2;
pub type GdkFilterFunc =
    extern "C" fn(arg1: *mut GdkXEvent, arg2: *mut GdkEvent, arg3: gpointer)
        -> GdkFilterReturn;
pub type GdkEventType = c_int;
pub static GDK_NOTHING: c_int = -1;
pub static GDK_DELETE: c_int = 0;
pub static GDK_DESTROY: c_int = 1;
pub static GDK_EXPOSE: c_int = 2;
pub static GDK_MOTION_NOTIFY: c_int = 3;
pub static GDK_BUTTON_PRESS: c_int = 4;
pub static GDK_2BUTTON_PRESS: c_int = 5;
pub static GDK_DOUBLE_BUTTON_PRESS: c_int = 5;
pub static GDK_3BUTTON_PRESS: c_int = 6;
pub static GDK_TRIPLE_BUTTON_PRESS: c_int = 6;
pub static GDK_BUTTON_RELEASE: c_int = 7;
pub static GDK_KEY_PRESS: c_int = 8;
pub static GDK_KEY_RELEASE: c_int = 9;
pub static GDK_ENTER_NOTIFY: c_int = 10;
pub static GDK_LEAVE_NOTIFY: c_int = 11;
pub static GDK_FOCUS_CHANGE: c_int = 12;
pub static GDK_CONFIGURE: c_int = 13;
pub static GDK_MAP: c_int = 14;
pub static GDK_UNMAP: c_int = 15;
pub static GDK_PROPERTY_NOTIFY: c_int = 16;
pub static GDK_SELECTION_CLEAR: c_int = 17;
pub static GDK_SELECTION_REQUEST: c_int = 18;
pub static GDK_SELECTION_NOTIFY: c_int = 19;
pub static GDK_PROXIMITY_IN: c_int = 20;
pub static GDK_PROXIMITY_OUT: c_int = 21;
pub static GDK_DRAG_ENTER: c_int = 22;
pub static GDK_DRAG_LEAVE: c_int = 23;
pub static GDK_DRAG_MOTION: c_int = 24;
pub static GDK_DRAG_STATUS: c_int = 25;
pub static GDK_DROP_START: c_int = 26;
pub static GDK_DROP_FINISHED: c_int = 27;
pub static GDK_CLIENT_EVENT: c_int = 28;
pub static GDK_VISIBILITY_NOTIFY: c_int = 29;
pub static GDK_SCROLL: c_int = 31;
pub static GDK_WINDOW_STATE: c_int = 32;
pub static GDK_SETTING: c_int = 33;
pub static GDK_OWNER_CHANGE: c_int = 34;
pub static GDK_GRAB_BROKEN: c_int = 35;
pub static GDK_DAMAGE: c_int = 36;
pub static GDK_TOUCH_BEGIN: c_int = 37;
pub static GDK_TOUCH_UPDATE: c_int = 38;
pub static GDK_TOUCH_END: c_int = 39;
pub static GDK_TOUCH_CANCEL: c_int = 40;
pub static GDK_EVENT_LAST: c_int = 41;
pub type GdkVisibilityState = c_uint;
pub static GDK_VISIBILITY_UNOBSCURED: c_uint = 0;
pub static GDK_VISIBILITY_PARTIAL: c_uint = 1;
pub static GDK_VISIBILITY_FULLY_OBSCURED: c_uint = 2;
pub type GdkScrollDirection = c_uint;
pub static GDK_SCROLL_UP: c_uint = 0;
pub static GDK_SCROLL_DOWN: c_uint = 1;
pub static GDK_SCROLL_LEFT: c_uint = 2;
pub static GDK_SCROLL_RIGHT: c_uint = 3;
pub static GDK_SCROLL_SMOOTH: c_uint = 4;
pub type GdkNotifyType = c_uint;
pub static GDK_NOTIFY_ANCESTOR: c_uint = 0;
pub static GDK_NOTIFY_VIRTUAL: c_uint = 1;
pub static GDK_NOTIFY_INFERIOR: c_uint = 2;
pub static GDK_NOTIFY_NONLINEAR: c_uint = 3;
pub static GDK_NOTIFY_NONLINEAR_VIRTUAL: c_uint = 4;
pub static GDK_NOTIFY_UNKNOWN: c_uint = 5;
pub type GdkCrossingMode = c_uint;
pub static GDK_CROSSING_NORMAL: c_uint = 0;
pub static GDK_CROSSING_GRAB: c_uint = 1;
pub static GDK_CROSSING_UNGRAB: c_uint = 2;
pub static GDK_CROSSING_GTK_GRAB: c_uint = 3;
pub static GDK_CROSSING_GTK_UNGRAB: c_uint = 4;
pub static GDK_CROSSING_STATE_CHANGED: c_uint = 5;
pub static GDK_CROSSING_TOUCH_BEGIN: c_uint = 6;
pub static GDK_CROSSING_TOUCH_END: c_uint = 7;
pub static GDK_CROSSING_DEVICE_SWITCH: c_uint = 8;
pub type GdkPropertyState = c_uint;
pub static GDK_PROPERTY_NEW_VALUE: c_uint = 0;
pub static GDK_PROPERTY_DELETE: c_uint = 1;
pub type GdkWindowState = c_uint;
pub static GDK_WINDOW_STATE_WITHDRAWN: c_uint = 1;
pub static GDK_WINDOW_STATE_ICONIFIED: c_uint = 2;
pub static GDK_WINDOW_STATE_MAXIMIZED: c_uint = 4;
pub static GDK_WINDOW_STATE_STICKY: c_uint = 8;
pub static GDK_WINDOW_STATE_FULLSCREEN: c_uint = 16;
pub static GDK_WINDOW_STATE_ABOVE: c_uint = 32;
pub static GDK_WINDOW_STATE_BELOW: c_uint = 64;
pub static GDK_WINDOW_STATE_FOCUSED: c_uint = 128;
pub static GDK_WINDOW_STATE_TILED: c_uint = 256;
pub type GdkSettingAction = c_uint;
pub static GDK_SETTING_ACTION_NEW: c_uint = 0;
pub static GDK_SETTING_ACTION_CHANGED: c_uint = 1;
pub static GDK_SETTING_ACTION_DELETED: c_uint = 2;
pub type GdkOwnerChange = c_uint;
pub static GDK_OWNER_CHANGE_NEW_OWNER: c_uint = 0;
pub static GDK_OWNER_CHANGE_DESTROY: c_uint = 1;
pub static GDK_OWNER_CHANGE_CLOSE: c_uint = 2;
pub struct Struct__GdkEventAny {
    _type: GdkEventType,
    window: *mut GdkWindow,
    send_event: gint8,
}
pub struct Struct__GdkEventExpose {
    _type: GdkEventType,
    window: *mut GdkWindow,
    send_event: gint8,
    area: GdkRectangle,
    region: *mut cairo_region_t,
    count: gint,
}
pub struct Struct__GdkEventVisibility {
    _type: GdkEventType,
    window: *mut GdkWindow,
    send_event: gint8,
    state: GdkVisibilityState,
}
pub struct Struct__GdkEventMotion {
    _type: GdkEventType,
    window: *mut GdkWindow,
    send_event: gint8,
    time: guint32,
    x: gdouble,
    y: gdouble,
    axes: *mut gdouble,
    state: guint,
    is_hint: gint16,
    device: *mut GdkDevice,
    x_root: gdouble,
    y_root: gdouble,
}
pub struct Struct__GdkEventButton {
    _type: GdkEventType,
    window: *mut GdkWindow,
    send_event: gint8,
    time: guint32,
    x: gdouble,
    y: gdouble,
    axes: *mut gdouble,
    state: guint,
    button: guint,
    device: *mut GdkDevice,
    x_root: gdouble,
    y_root: gdouble,
}
pub struct Struct__GdkEventTouch {
    _type: GdkEventType,
    window: *mut GdkWindow,
    send_event: gint8,
    time: guint32,
    x: gdouble,
    y: gdouble,
    axes: *mut gdouble,
    state: guint,
    sequence: *mut GdkEventSequence,
    emulating_pointer: gboolean,
    device: *mut GdkDevice,
    x_root: gdouble,
    y_root: gdouble,
}
pub struct Struct__GdkEventScroll {
    _type: GdkEventType,
    window: *mut GdkWindow,
    send_event: gint8,
    time: guint32,
    x: gdouble,
    y: gdouble,
    state: guint,
    direction: GdkScrollDirection,
    device: *mut GdkDevice,
    x_root: gdouble,
    y_root: gdouble,
    delta_x: gdouble,
    delta_y: gdouble,
}
pub struct Struct__GdkEventKey {
    _type: GdkEventType,
    window: *mut GdkWindow,
    send_event: gint8,
    time: guint32,
    state: guint,
    keyval: guint,
    length: gint,
    string: *mut gchar,
    hardware_keycode: guint16,
    group: guint8,
    is_modifier: guint,
}
pub struct Struct__GdkEventCrossing {
    _type: GdkEventType,
    window: *mut GdkWindow,
    send_event: gint8,
    subwindow: *mut GdkWindow,
    time: guint32,
    x: gdouble,
    y: gdouble,
    x_root: gdouble,
    y_root: gdouble,
    mode: GdkCrossingMode,
    detail: GdkNotifyType,
    focus: gboolean,
    state: guint,
}
pub struct Struct__GdkEventFocus {
    _type: GdkEventType,
    window: *mut GdkWindow,
    send_event: gint8,
    _in: gint16,
}
pub struct Struct__GdkEventConfigure {
    _type: GdkEventType,
    window: *mut GdkWindow,
    send_event: gint8,
    x: gint,
    y: gint,
    width: gint,
    height: gint,
}
pub struct Struct__GdkEventProperty {
    _type: GdkEventType,
    window: *mut GdkWindow,
    send_event: gint8,
    atom: GdkAtom,
    time: guint32,
    state: guint,
}
pub struct Struct__GdkEventSelection {
    _type: GdkEventType,
    window: *mut GdkWindow,
    send_event: gint8,
    selection: GdkAtom,
    target: GdkAtom,
    property: GdkAtom,
    time: guint32,
    requestor: *mut GdkWindow,
}
pub struct Struct__GdkEventOwnerChange {
    _type: GdkEventType,
    window: *mut GdkWindow,
    send_event: gint8,
    owner: *mut GdkWindow,
    reason: GdkOwnerChange,
    selection: GdkAtom,
    time: guint32,
    selection_time: guint32,
}
pub struct Struct__GdkEventProximity {
    _type: GdkEventType,
    window: *mut GdkWindow,
    send_event: gint8,
    time: guint32,
    device: *mut GdkDevice,
}
pub struct Struct__GdkEventSetting {
    _type: GdkEventType,
    window: *mut GdkWindow,
    send_event: gint8,
    action: GdkSettingAction,
    name: *mut c_schar,
}
pub struct Struct__GdkEventWindowState {
    _type: GdkEventType,
    window: *mut GdkWindow,
    send_event: gint8,
    changed_mask: GdkWindowState,
    new_window_state: GdkWindowState,
}
pub struct Struct__GdkEventGrabBroken {
    _type: GdkEventType,
    window: *mut GdkWindow,
    send_event: gint8,
    keyboard: gboolean,
    implicit: gboolean,
    grab_window: *mut GdkWindow,
}
pub struct Struct__GdkEventDND {
    _type: GdkEventType,
    window: *mut GdkWindow,
    send_event: gint8,
    context: *mut GdkDragContext,
    time: guint32,
    x_root: gshort,
    y_root: gshort,
}
pub struct Union__GdkEvent {
    data: [u64, ..12u],
}
impl Union__GdkEvent {
    pub fn _type(&mut self) -> *mut GdkEventType {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn any(&mut self) -> *mut GdkEventAny {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn expose(&mut self) -> *mut GdkEventExpose {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn visibility(&mut self) -> *mut GdkEventVisibility {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn motion(&mut self) -> *mut GdkEventMotion {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn button(&mut self) -> *mut GdkEventButton {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn touch(&mut self) -> *mut GdkEventTouch {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn scroll(&mut self) -> *mut GdkEventScroll {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn key(&mut self) -> *mut GdkEventKey {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn crossing(&mut self) -> *mut GdkEventCrossing {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn focus_change(&mut self) -> *mut GdkEventFocus {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn configure(&mut self) -> *mut GdkEventConfigure {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn property(&mut self) -> *mut GdkEventProperty {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn selection(&mut self) -> *mut GdkEventSelection {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn owner_change(&mut self) -> *mut GdkEventOwnerChange {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn proximity(&mut self) -> *mut GdkEventProximity {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn dnd(&mut self) -> *mut GdkEventDND {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn window_state(&mut self) -> *mut GdkEventWindowState {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn setting(&mut self) -> *mut GdkEventSetting {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn grab_broken(&mut self) -> *mut GdkEventGrabBroken {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct__GdkRGBA {
    red: gdouble,
    green: gdouble,
    blue: gdouble,
    alpha: gdouble,
}
pub type GdkPixbufAlphaMode = c_uint;
pub static GDK_PIXBUF_ALPHA_BILEVEL: c_uint = 0;
pub static GDK_PIXBUF_ALPHA_FULL: c_uint = 1;
pub type GdkColorspace = c_uint;
pub static GDK_COLORSPACE_RGB: c_uint = 0;
pub type Struct__GdkPixbuf = c_void;
pub type GdkPixbuf = Struct__GdkPixbuf;
pub type GdkPixbufDestroyNotify =
    extern "C" fn(arg1: *mut guchar, arg2: gpointer);
pub type GdkPixbufError = c_uint;
pub static GDK_PIXBUF_ERROR_CORRUPT_IMAGE: c_uint = 0;
pub static GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY: c_uint = 1;
pub static GDK_PIXBUF_ERROR_BAD_OPTION: c_uint = 2;
pub static GDK_PIXBUF_ERROR_UNKNOWN_TYPE: c_uint = 3;
pub static GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION: c_uint = 4;
pub static GDK_PIXBUF_ERROR_FAILED: c_uint = 5;
pub type GdkPixbufSaveFunc =
    extern "C" fn
        (arg1: *gchar, arg2: gsize, arg3: *mut *mut GError, arg4: gpointer)
        -> gboolean;
pub type GdkInterpType = c_uint;
pub static GDK_INTERP_NEAREST: c_uint = 0;
pub static GDK_INTERP_TILES: c_uint = 1;
pub static GDK_INTERP_BILINEAR: c_uint = 2;
pub static GDK_INTERP_HYPER: c_uint = 3;
pub type GdkPixbufRotation = c_uint;
pub static GDK_PIXBUF_ROTATE_NONE: c_uint = 0;
pub static GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE: c_uint = 90;
pub static GDK_PIXBUF_ROTATE_UPSIDEDOWN: c_uint = 180;
pub static GDK_PIXBUF_ROTATE_CLOCKWISE: c_uint = 270;
pub type Struct__GdkPixbufAnimation = c_void;
pub type GdkPixbufAnimation = Struct__GdkPixbufAnimation;
pub type Struct__GdkPixbufAnimationIter = c_void;
pub type GdkPixbufAnimationIter = Struct__GdkPixbufAnimationIter;
pub type Struct__GdkPixbufSimpleAnim = c_void;
pub type GdkPixbufSimpleAnim = Struct__GdkPixbufSimpleAnim;
pub type Struct__GdkPixbufSimpleAnimClass = c_void;
pub type GdkPixbufSimpleAnimClass = Struct__GdkPixbufSimpleAnimClass;
pub type Struct__GdkPixbufFormat = c_void;
pub type GdkPixbufFormat = Struct__GdkPixbufFormat;
pub type GdkPixbufLoader = Struct__GdkPixbufLoader;
pub struct Struct__GdkPixbufLoader {
    parent_instance: GObject,
    _priv: gpointer,
}
pub type GdkPixbufLoaderClass = Struct__GdkPixbufLoaderClass;
pub struct Struct__GdkPixbufLoaderClass {
    parent_class: GObjectClass,
    size_prepared: extern "C" fn
                       (arg1: *mut GdkPixbufLoader, arg2: c_int, arg3: c_int),
    area_prepared: extern "C" fn(arg1: *mut GdkPixbufLoader),
    area_updated: extern "C" fn
                      (arg1: *mut GdkPixbufLoader, arg2: c_int, arg3: c_int,
                       arg4: c_int, arg5: c_int),
    closed: extern "C" fn(arg1: *mut GdkPixbufLoader),
}
pub type Struct__PangoCairoFont = c_void;
pub type PangoCairoFont = Struct__PangoCairoFont;
pub type Struct__PangoCairoFontMap = c_void;
pub type PangoCairoFontMap = Struct__PangoCairoFontMap;
pub type PangoCairoShapeRendererFunc =
    extern "C" fn
        (arg1: *mut cairo_t, arg2: *mut PangoAttrShape, arg3: gboolean,
         arg4: gpointer);
pub type GdkCursorType = c_int;
pub static GDK_X_CURSOR: c_int = 0;
pub static GDK_ARROW: c_int = 2;
pub static GDK_BASED_ARROW_DOWN: c_int = 4;
pub static GDK_BASED_ARROW_UP: c_int = 6;
pub static GDK_BOAT: c_int = 8;
pub static GDK_BOGOSITY: c_int = 10;
pub static GDK_BOTTOM_LEFT_CORNER: c_int = 12;
pub static GDK_BOTTOM_RIGHT_CORNER: c_int = 14;
pub static GDK_BOTTOM_SIDE: c_int = 16;
pub static GDK_BOTTOM_TEE: c_int = 18;
pub static GDK_BOX_SPIRAL: c_int = 20;
pub static GDK_CENTER_PTR: c_int = 22;
pub static GDK_CIRCLE: c_int = 24;
pub static GDK_CLOCK: c_int = 26;
pub static GDK_COFFEE_MUG: c_int = 28;
pub static GDK_CROSS: c_int = 30;
pub static GDK_CROSS_REVERSE: c_int = 32;
pub static GDK_CROSSHAIR: c_int = 34;
pub static GDK_DIAMOND_CROSS: c_int = 36;
pub static GDK_DOT: c_int = 38;
pub static GDK_DOTBOX: c_int = 40;
pub static GDK_DOUBLE_ARROW: c_int = 42;
pub static GDK_DRAFT_LARGE: c_int = 44;
pub static GDK_DRAFT_SMALL: c_int = 46;
pub static GDK_DRAPED_BOX: c_int = 48;
pub static GDK_EXCHANGE: c_int = 50;
pub static GDK_FLEUR: c_int = 52;
pub static GDK_GOBBLER: c_int = 54;
pub static GDK_GUMBY: c_int = 56;
pub static GDK_HAND1: c_int = 58;
pub static GDK_HAND2: c_int = 60;
pub static GDK_HEART: c_int = 62;
pub static GDK_ICON: c_int = 64;
pub static GDK_IRON_CROSS: c_int = 66;
pub static GDK_LEFT_PTR: c_int = 68;
pub static GDK_LEFT_SIDE: c_int = 70;
pub static GDK_LEFT_TEE: c_int = 72;
pub static GDK_LEFTBUTTON: c_int = 74;
pub static GDK_LL_ANGLE: c_int = 76;
pub static GDK_LR_ANGLE: c_int = 78;
pub static GDK_MAN: c_int = 80;
pub static GDK_MIDDLEBUTTON: c_int = 82;
pub static GDK_MOUSE: c_int = 84;
pub static GDK_PENCIL: c_int = 86;
pub static GDK_PIRATE: c_int = 88;
pub static GDK_PLUS: c_int = 90;
pub static GDK_QUESTION_ARROW: c_int = 92;
pub static GDK_RIGHT_PTR: c_int = 94;
pub static GDK_RIGHT_SIDE: c_int = 96;
pub static GDK_RIGHT_TEE: c_int = 98;
pub static GDK_RIGHTBUTTON: c_int = 100;
pub static GDK_RTL_LOGO: c_int = 102;
pub static GDK_SAILBOAT: c_int = 104;
pub static GDK_SB_DOWN_ARROW: c_int = 106;
pub static GDK_SB_H_DOUBLE_ARROW: c_int = 108;
pub static GDK_SB_LEFT_ARROW: c_int = 110;
pub static GDK_SB_RIGHT_ARROW: c_int = 112;
pub static GDK_SB_UP_ARROW: c_int = 114;
pub static GDK_SB_V_DOUBLE_ARROW: c_int = 116;
pub static GDK_SHUTTLE: c_int = 118;
pub static GDK_SIZING: c_int = 120;
pub static GDK_SPIDER: c_int = 122;
pub static GDK_SPRAYCAN: c_int = 124;
pub static GDK_STAR: c_int = 126;
pub static GDK_TARGET: c_int = 128;
pub static GDK_TCROSS: c_int = 130;
pub static GDK_TOP_LEFT_ARROW: c_int = 132;
pub static GDK_TOP_LEFT_CORNER: c_int = 134;
pub static GDK_TOP_RIGHT_CORNER: c_int = 136;
pub static GDK_TOP_SIDE: c_int = 138;
pub static GDK_TOP_TEE: c_int = 140;
pub static GDK_TREK: c_int = 142;
pub static GDK_UL_ANGLE: c_int = 144;
pub static GDK_UMBRELLA: c_int = 146;
pub static GDK_UR_ANGLE: c_int = 148;
pub static GDK_WATCH: c_int = 150;
pub static GDK_XTERM: c_int = 152;
pub static GDK_LAST_CURSOR: c_int = 153;
pub static GDK_BLANK_CURSOR: c_int = -2;
pub static GDK_CURSOR_IS_PIXMAP: c_int = -1;
pub type Struct__GdkFrameTimings = c_void;
pub type GdkFrameTimings = Struct__GdkFrameTimings;
pub type Struct__GdkFrameClock = c_void;
pub type GdkFrameClock = Struct__GdkFrameClock;
pub type Struct__GdkFrameClockPrivate = c_void;
pub type GdkFrameClockPrivate = Struct__GdkFrameClockPrivate;
pub type Struct__GdkFrameClockClass = c_void;
pub type GdkFrameClockClass = Struct__GdkFrameClockClass;
pub type GdkFrameClockPhase = c_uint;
pub static GDK_FRAME_CLOCK_PHASE_NONE: c_uint = 0;
pub static GDK_FRAME_CLOCK_PHASE_FLUSH_EVENTS: c_uint = 1;
pub static GDK_FRAME_CLOCK_PHASE_BEFORE_PAINT: c_uint = 2;
pub static GDK_FRAME_CLOCK_PHASE_UPDATE: c_uint = 4;
pub static GDK_FRAME_CLOCK_PHASE_LAYOUT: c_uint = 8;
pub static GDK_FRAME_CLOCK_PHASE_PAINT: c_uint = 16;
pub static GDK_FRAME_CLOCK_PHASE_RESUME_EVENTS: c_uint = 32;
pub static GDK_FRAME_CLOCK_PHASE_AFTER_PAINT: c_uint = 64;
pub type GdkKeymapKey = Struct__GdkKeymapKey;
pub struct Struct__GdkKeymapKey {
    keycode: guint,
    group: gint,
    level: gint,
}
pub type GdkPropMode = c_uint;
pub static GDK_PROP_MODE_REPLACE: c_uint = 0;
pub static GDK_PROP_MODE_PREPEND: c_uint = 1;
pub static GDK_PROP_MODE_APPEND: c_uint = 2;
pub type GdkGeometry = Struct__GdkGeometry;
pub type GdkWindowAttr = Struct__GdkWindowAttr;
pub type Struct__GdkWindowRedirect = c_void;
pub type GdkWindowRedirect = Struct__GdkWindowRedirect;
pub type GdkWindowWindowClass = c_uint;
pub static GDK_INPUT_OUTPUT: c_uint = 0;
pub static GDK_INPUT_ONLY: c_uint = 1;
pub type GdkWindowType = c_uint;
pub static GDK_WINDOW_ROOT: c_uint = 0;
pub static GDK_WINDOW_TOPLEVEL: c_uint = 1;
pub static GDK_WINDOW_CHILD: c_uint = 2;
pub static GDK_WINDOW_TEMP: c_uint = 3;
pub static GDK_WINDOW_FOREIGN: c_uint = 4;
pub static GDK_WINDOW_OFFSCREEN: c_uint = 5;
pub type GdkWindowAttributesType = c_uint;
pub static GDK_WA_TITLE: c_uint = 2;
pub static GDK_WA_X: c_uint = 4;
pub static GDK_WA_Y: c_uint = 8;
pub static GDK_WA_CURSOR: c_uint = 16;
pub static GDK_WA_VISUAL: c_uint = 32;
pub static GDK_WA_WMCLASS: c_uint = 64;
pub static GDK_WA_NOREDIR: c_uint = 128;
pub static GDK_WA_TYPE_HINT: c_uint = 256;
pub type GdkWindowHints = c_uint;
pub static GDK_HINT_POS: c_uint = 1;
pub static GDK_HINT_MIN_SIZE: c_uint = 2;
pub static GDK_HINT_MAX_SIZE: c_uint = 4;
pub static GDK_HINT_BASE_SIZE: c_uint = 8;
pub static GDK_HINT_ASPECT: c_uint = 16;
pub static GDK_HINT_RESIZE_INC: c_uint = 32;
pub static GDK_HINT_WIN_GRAVITY: c_uint = 64;
pub static GDK_HINT_USER_POS: c_uint = 128;
pub static GDK_HINT_USER_SIZE: c_uint = 256;
pub type GdkWindowTypeHint = c_uint;
pub static GDK_WINDOW_TYPE_HINT_NORMAL: c_uint = 0;
pub static GDK_WINDOW_TYPE_HINT_DIALOG: c_uint = 1;
pub static GDK_WINDOW_TYPE_HINT_MENU: c_uint = 2;
pub static GDK_WINDOW_TYPE_HINT_TOOLBAR: c_uint = 3;
pub static GDK_WINDOW_TYPE_HINT_SPLASHSCREEN: c_uint = 4;
pub static GDK_WINDOW_TYPE_HINT_UTILITY: c_uint = 5;
pub static GDK_WINDOW_TYPE_HINT_DOCK: c_uint = 6;
pub static GDK_WINDOW_TYPE_HINT_DESKTOP: c_uint = 7;
pub static GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU: c_uint = 8;
pub static GDK_WINDOW_TYPE_HINT_POPUP_MENU: c_uint = 9;
pub static GDK_WINDOW_TYPE_HINT_TOOLTIP: c_uint = 10;
pub static GDK_WINDOW_TYPE_HINT_NOTIFICATION: c_uint = 11;
pub static GDK_WINDOW_TYPE_HINT_COMBO: c_uint = 12;
pub static GDK_WINDOW_TYPE_HINT_DND: c_uint = 13;
pub type GdkWMDecoration = c_uint;
pub static GDK_DECOR_ALL: c_uint = 1;
pub static GDK_DECOR_BORDER: c_uint = 2;
pub static GDK_DECOR_RESIZEH: c_uint = 4;
pub static GDK_DECOR_TITLE: c_uint = 8;
pub static GDK_DECOR_MENU: c_uint = 16;
pub static GDK_DECOR_MINIMIZE: c_uint = 32;
pub static GDK_DECOR_MAXIMIZE: c_uint = 64;
pub type GdkWMFunction = c_uint;
pub static GDK_FUNC_ALL: c_uint = 1;
pub static GDK_FUNC_RESIZE: c_uint = 2;
pub static GDK_FUNC_MOVE: c_uint = 4;
pub static GDK_FUNC_MINIMIZE: c_uint = 8;
pub static GDK_FUNC_MAXIMIZE: c_uint = 16;
pub static GDK_FUNC_CLOSE: c_uint = 32;
pub type GdkGravity = c_uint;
pub static GDK_GRAVITY_NORTH_WEST: c_uint = 1;
pub static GDK_GRAVITY_NORTH: c_uint = 2;
pub static GDK_GRAVITY_NORTH_EAST: c_uint = 3;
pub static GDK_GRAVITY_WEST: c_uint = 4;
pub static GDK_GRAVITY_CENTER: c_uint = 5;
pub static GDK_GRAVITY_EAST: c_uint = 6;
pub static GDK_GRAVITY_SOUTH_WEST: c_uint = 7;
pub static GDK_GRAVITY_SOUTH: c_uint = 8;
pub static GDK_GRAVITY_SOUTH_EAST: c_uint = 9;
pub static GDK_GRAVITY_STATIC: c_uint = 10;
pub type GdkWindowEdge = c_uint;
pub static GDK_WINDOW_EDGE_NORTH_WEST: c_uint = 0;
pub static GDK_WINDOW_EDGE_NORTH: c_uint = 1;
pub static GDK_WINDOW_EDGE_NORTH_EAST: c_uint = 2;
pub static GDK_WINDOW_EDGE_WEST: c_uint = 3;
pub static GDK_WINDOW_EDGE_EAST: c_uint = 4;
pub static GDK_WINDOW_EDGE_SOUTH_WEST: c_uint = 5;
pub static GDK_WINDOW_EDGE_SOUTH: c_uint = 6;
pub static GDK_WINDOW_EDGE_SOUTH_EAST: c_uint = 7;
pub type GdkFullscreenMode = c_uint;
pub static GDK_FULLSCREEN_ON_CURRENT_MONITOR: c_uint = 0;
pub static GDK_FULLSCREEN_ON_ALL_MONITORS: c_uint = 1;
pub struct Struct__GdkWindowAttr {
    title: *mut gchar,
    event_mask: gint,
    x: gint,
    y: gint,
    width: gint,
    height: gint,
    wclass: GdkWindowWindowClass,
    visual: *mut GdkVisual,
    window_type: GdkWindowType,
    cursor: *mut GdkCursor,
    wmclass_name: *mut gchar,
    wmclass_class: *mut gchar,
    override_redirect: gboolean,
    type_hint: GdkWindowTypeHint,
}
pub struct Struct__GdkGeometry {
    min_width: gint,
    min_height: gint,
    max_width: gint,
    max_height: gint,
    base_width: gint,
    base_height: gint,
    width_inc: gint,
    height_inc: gint,
    min_aspect: gdouble,
    max_aspect: gdouble,
    win_gravity: GdkGravity,
}
pub type GdkWindowClass = Struct__GdkWindowClass;
pub struct Struct__GdkWindowClass {
    parent_class: GObjectClass,
    pick_embedded_child: extern "C" fn
                             (arg1: *mut GdkWindow, arg2: gdouble,
                              arg3: gdouble) -> *mut GdkWindow,
    to_embedder: extern "C" fn
                     (arg1: *mut GdkWindow, arg2: gdouble, arg3: gdouble,
                      arg4: *mut gdouble, arg5: *mut gdouble),
    from_embedder: extern "C" fn
                       (arg1: *mut GdkWindow, arg2: gdouble, arg3: gdouble,
                        arg4: *mut gdouble, arg5: *mut gdouble),
    create_surface: extern "C" fn
                        (arg1: *mut GdkWindow, arg2: gint, arg3: gint)
                        -> *mut cairo_surface_t,
    _gdk_reserved1: extern "C" fn(),
    _gdk_reserved2: extern "C" fn(),
    _gdk_reserved3: extern "C" fn(),
    _gdk_reserved4: extern "C" fn(),
    _gdk_reserved5: extern "C" fn(),
    _gdk_reserved6: extern "C" fn(),
    _gdk_reserved7: extern "C" fn(),
    _gdk_reserved8: extern "C" fn(),
}
pub type GdkWindowInvalidateHandlerFunc =
    extern "C" fn(arg1: *mut GdkWindow, arg2: *mut cairo_region_t);
pub type GdkWindowChildFunc =
    extern "C" fn(arg1: *mut GdkWindow, arg2: gpointer) -> gboolean;
pub type GdkVisualType = c_uint;
pub static GDK_VISUAL_STATIC_GRAY: c_uint = 0;
pub static GDK_VISUAL_GRAYSCALE: c_uint = 1;
pub static GDK_VISUAL_STATIC_COLOR: c_uint = 2;
pub static GDK_VISUAL_PSEUDO_COLOR: c_uint = 3;
pub static GDK_VISUAL_TRUE_COLOR: c_uint = 4;
pub static GDK_VISUAL_DIRECT_COLOR: c_uint = 5;
pub type GtkAlign = c_uint;
pub static GTK_ALIGN_FILL: c_uint = 0;
pub static GTK_ALIGN_START: c_uint = 1;
pub static GTK_ALIGN_END: c_uint = 2;
pub static GTK_ALIGN_CENTER: c_uint = 3;
pub static GTK_ALIGN_BASELINE: c_uint = 4;
pub type GtkArrowPlacement = c_uint;
pub static GTK_ARROWS_BOTH: c_uint = 0;
pub static GTK_ARROWS_START: c_uint = 1;
pub static GTK_ARROWS_END: c_uint = 2;
pub type GtkArrowType = c_uint;
pub static GTK_ARROW_UP: c_uint = 0;
pub static GTK_ARROW_DOWN: c_uint = 1;
pub static GTK_ARROW_LEFT: c_uint = 2;
pub static GTK_ARROW_RIGHT: c_uint = 3;
pub static GTK_ARROW_NONE: c_uint = 4;
pub type GtkAttachOptions = c_uint;
pub static GTK_EXPAND: c_uint = 1;
pub static GTK_SHRINK: c_uint = 2;
pub static GTK_FILL: c_uint = 4;
pub type GtkBaselinePosition = c_uint;
pub static GTK_BASELINE_POSITION_TOP: c_uint = 0;
pub static GTK_BASELINE_POSITION_CENTER: c_uint = 1;
pub static GTK_BASELINE_POSITION_BOTTOM: c_uint = 2;
pub type GtkButtonBoxStyle = c_uint;
pub static GTK_BUTTONBOX_SPREAD: c_uint = 1;
pub static GTK_BUTTONBOX_EDGE: c_uint = 2;
pub static GTK_BUTTONBOX_START: c_uint = 3;
pub static GTK_BUTTONBOX_END: c_uint = 4;
pub static GTK_BUTTONBOX_CENTER: c_uint = 5;
pub type GtkDeleteType = c_uint;
pub static GTK_DELETE_CHARS: c_uint = 0;
pub static GTK_DELETE_WORD_ENDS: c_uint = 1;
pub static GTK_DELETE_WORDS: c_uint = 2;
pub static GTK_DELETE_DISPLAY_LINES: c_uint = 3;
pub static GTK_DELETE_DISPLAY_LINE_ENDS: c_uint = 4;
pub static GTK_DELETE_PARAGRAPH_ENDS: c_uint = 5;
pub static GTK_DELETE_PARAGRAPHS: c_uint = 6;
pub static GTK_DELETE_WHITESPACE: c_uint = 7;
pub type GtkDirectionType = c_uint;
pub static GTK_DIR_TAB_FORWARD: c_uint = 0;
pub static GTK_DIR_TAB_BACKWARD: c_uint = 1;
pub static GTK_DIR_UP: c_uint = 2;
pub static GTK_DIR_DOWN: c_uint = 3;
pub static GTK_DIR_LEFT: c_uint = 4;
pub static GTK_DIR_RIGHT: c_uint = 5;
pub type GtkExpanderStyle = c_uint;
pub static GTK_EXPANDER_COLLAPSED: c_uint = 0;
pub static GTK_EXPANDER_SEMI_COLLAPSED: c_uint = 1;
pub static GTK_EXPANDER_SEMI_EXPANDED: c_uint = 2;
pub static GTK_EXPANDER_EXPANDED: c_uint = 3;
pub type GtkIconSize = c_uint;
pub static GTK_ICON_SIZE_INVALID: c_uint = 0;
pub static GTK_ICON_SIZE_MENU: c_uint = 1;
pub static GTK_ICON_SIZE_SMALL_TOOLBAR: c_uint = 2;
pub static GTK_ICON_SIZE_LARGE_TOOLBAR: c_uint = 3;
pub static GTK_ICON_SIZE_BUTTON: c_uint = 4;
pub static GTK_ICON_SIZE_DND: c_uint = 5;
pub static GTK_ICON_SIZE_DIALOG: c_uint = 6;
pub type GtkSensitivityType = c_uint;
pub static GTK_SENSITIVITY_AUTO: c_uint = 0;
pub static GTK_SENSITIVITY_ON: c_uint = 1;
pub static GTK_SENSITIVITY_OFF: c_uint = 2;
pub type GtkTextDirection = c_uint;
pub static GTK_TEXT_DIR_NONE: c_uint = 0;
pub static GTK_TEXT_DIR_LTR: c_uint = 1;
pub static GTK_TEXT_DIR_RTL: c_uint = 2;
pub type GtkJustification = c_uint;
pub static GTK_JUSTIFY_LEFT: c_uint = 0;
pub static GTK_JUSTIFY_RIGHT: c_uint = 1;
pub static GTK_JUSTIFY_CENTER: c_uint = 2;
pub static GTK_JUSTIFY_FILL: c_uint = 3;
pub type GtkMenuDirectionType = c_uint;
pub static GTK_MENU_DIR_PARENT: c_uint = 0;
pub static GTK_MENU_DIR_CHILD: c_uint = 1;
pub static GTK_MENU_DIR_NEXT: c_uint = 2;
pub static GTK_MENU_DIR_PREV: c_uint = 3;
pub type GtkMessageType = c_uint;
pub static GTK_MESSAGE_INFO: c_uint = 0;
pub static GTK_MESSAGE_WARNING: c_uint = 1;
pub static GTK_MESSAGE_QUESTION: c_uint = 2;
pub static GTK_MESSAGE_ERROR: c_uint = 3;
pub static GTK_MESSAGE_OTHER: c_uint = 4;
pub type GtkMovementStep = c_uint;
pub static GTK_MOVEMENT_LOGICAL_POSITIONS: c_uint = 0;
pub static GTK_MOVEMENT_VISUAL_POSITIONS: c_uint = 1;
pub static GTK_MOVEMENT_WORDS: c_uint = 2;
pub static GTK_MOVEMENT_DISPLAY_LINES: c_uint = 3;
pub static GTK_MOVEMENT_DISPLAY_LINE_ENDS: c_uint = 4;
pub static GTK_MOVEMENT_PARAGRAPHS: c_uint = 5;
pub static GTK_MOVEMENT_PARAGRAPH_ENDS: c_uint = 6;
pub static GTK_MOVEMENT_PAGES: c_uint = 7;
pub static GTK_MOVEMENT_BUFFER_ENDS: c_uint = 8;
pub static GTK_MOVEMENT_HORIZONTAL_PAGES: c_uint = 9;
pub type GtkScrollStep = c_uint;
pub static GTK_SCROLL_STEPS: c_uint = 0;
pub static GTK_SCROLL_PAGES: c_uint = 1;
pub static GTK_SCROLL_ENDS: c_uint = 2;
pub static GTK_SCROLL_HORIZONTAL_STEPS: c_uint = 3;
pub static GTK_SCROLL_HORIZONTAL_PAGES: c_uint = 4;
pub static GTK_SCROLL_HORIZONTAL_ENDS: c_uint = 5;
pub type GtkOrientation = c_uint;
pub static GTK_ORIENTATION_HORIZONTAL: c_uint = 0;
pub static GTK_ORIENTATION_VERTICAL: c_uint = 1;
pub type GtkCornerType = c_uint;
pub static GTK_CORNER_TOP_LEFT: c_uint = 0;
pub static GTK_CORNER_BOTTOM_LEFT: c_uint = 1;
pub static GTK_CORNER_TOP_RIGHT: c_uint = 2;
pub static GTK_CORNER_BOTTOM_RIGHT: c_uint = 3;
pub type GtkPackType = c_uint;
pub static GTK_PACK_START: c_uint = 0;
pub static GTK_PACK_END: c_uint = 1;
pub type GtkPathPriorityType = c_uint;
pub static GTK_PATH_PRIO_LOWEST: c_uint = 0;
pub static GTK_PATH_PRIO_GTK: c_uint = 4;
pub static GTK_PATH_PRIO_APPLICATION: c_uint = 8;
pub static GTK_PATH_PRIO_THEME: c_uint = 10;
pub static GTK_PATH_PRIO_RC: c_uint = 12;
pub static GTK_PATH_PRIO_HIGHEST: c_uint = 15;
pub type GtkPathType = c_uint;
pub static GTK_PATH_WIDGET: c_uint = 0;
pub static GTK_PATH_WIDGET_CLASS: c_uint = 1;
pub static GTK_PATH_CLASS: c_uint = 2;
pub type GtkPolicyType = c_uint;
pub static GTK_POLICY_ALWAYS: c_uint = 0;
pub static GTK_POLICY_AUTOMATIC: c_uint = 1;
pub static GTK_POLICY_NEVER: c_uint = 2;
pub type GtkPositionType = c_uint;
pub static GTK_POS_LEFT: c_uint = 0;
pub static GTK_POS_RIGHT: c_uint = 1;
pub static GTK_POS_TOP: c_uint = 2;
pub static GTK_POS_BOTTOM: c_uint = 3;
pub type GtkReliefStyle = c_uint;
pub static GTK_RELIEF_NORMAL: c_uint = 0;
pub static GTK_RELIEF_HALF: c_uint = 1;
pub static GTK_RELIEF_NONE: c_uint = 2;
pub type GtkResizeMode = c_uint;
pub static GTK_RESIZE_PARENT: c_uint = 0;
pub static GTK_RESIZE_QUEUE: c_uint = 1;
pub static GTK_RESIZE_IMMEDIATE: c_uint = 2;
pub type GtkScrollType = c_uint;
pub static GTK_SCROLL_NONE: c_uint = 0;
pub static GTK_SCROLL_JUMP: c_uint = 1;
pub static GTK_SCROLL_STEP_BACKWARD: c_uint = 2;
pub static GTK_SCROLL_STEP_FORWARD: c_uint = 3;
pub static GTK_SCROLL_PAGE_BACKWARD: c_uint = 4;
pub static GTK_SCROLL_PAGE_FORWARD: c_uint = 5;
pub static GTK_SCROLL_STEP_UP: c_uint = 6;
pub static GTK_SCROLL_STEP_DOWN: c_uint = 7;
pub static GTK_SCROLL_PAGE_UP: c_uint = 8;
pub static GTK_SCROLL_PAGE_DOWN: c_uint = 9;
pub static GTK_SCROLL_STEP_LEFT: c_uint = 10;
pub static GTK_SCROLL_STEP_RIGHT: c_uint = 11;
pub static GTK_SCROLL_PAGE_LEFT: c_uint = 12;
pub static GTK_SCROLL_PAGE_RIGHT: c_uint = 13;
pub static GTK_SCROLL_START: c_uint = 14;
pub static GTK_SCROLL_END: c_uint = 15;
pub type GtkSelectionMode = c_uint;
pub static GTK_SELECTION_NONE: c_uint = 0;
pub static GTK_SELECTION_SINGLE: c_uint = 1;
pub static GTK_SELECTION_BROWSE: c_uint = 2;
pub static GTK_SELECTION_MULTIPLE: c_uint = 3;
pub type GtkShadowType = c_uint;
pub static GTK_SHADOW_NONE: c_uint = 0;
pub static GTK_SHADOW_IN: c_uint = 1;
pub static GTK_SHADOW_OUT: c_uint = 2;
pub static GTK_SHADOW_ETCHED_IN: c_uint = 3;
pub static GTK_SHADOW_ETCHED_OUT: c_uint = 4;
pub type GtkStateType = c_uint;
pub static GTK_STATE_NORMAL: c_uint = 0;
pub static GTK_STATE_ACTIVE: c_uint = 1;
pub static GTK_STATE_PRELIGHT: c_uint = 2;
pub static GTK_STATE_SELECTED: c_uint = 3;
pub static GTK_STATE_INSENSITIVE: c_uint = 4;
pub static GTK_STATE_INCONSISTENT: c_uint = 5;
pub static GTK_STATE_FOCUSED: c_uint = 6;
pub type GtkToolbarStyle = c_uint;
pub static GTK_TOOLBAR_ICONS: c_uint = 0;
pub static GTK_TOOLBAR_TEXT: c_uint = 1;
pub static GTK_TOOLBAR_BOTH: c_uint = 2;
pub static GTK_TOOLBAR_BOTH_HORIZ: c_uint = 3;
pub type GtkWindowPosition = c_uint;
pub static GTK_WIN_POS_NONE: c_uint = 0;
pub static GTK_WIN_POS_CENTER: c_uint = 1;
pub static GTK_WIN_POS_MOUSE: c_uint = 2;
pub static GTK_WIN_POS_CENTER_ALWAYS: c_uint = 3;
pub static GTK_WIN_POS_CENTER_ON_PARENT: c_uint = 4;
pub type GtkWindowType = c_uint;
pub static GTK_WINDOW_TOPLEVEL: c_uint = 0;
pub static GTK_WINDOW_POPUP: c_uint = 1;
pub type GtkWrapMode = c_uint;
pub static GTK_WRAP_NONE: c_uint = 0;
pub static GTK_WRAP_CHAR: c_uint = 1;
pub static GTK_WRAP_WORD: c_uint = 2;
pub static GTK_WRAP_WORD_CHAR: c_uint = 3;
pub type GtkSortType = c_uint;
pub static GTK_SORT_ASCENDING: c_uint = 0;
pub static GTK_SORT_DESCENDING: c_uint = 1;
pub type GtkIMPreeditStyle = c_uint;
pub static GTK_IM_PREEDIT_NOTHING: c_uint = 0;
pub static GTK_IM_PREEDIT_CALLBACK: c_uint = 1;
pub static GTK_IM_PREEDIT_NONE: c_uint = 2;
pub type GtkIMStatusStyle = c_uint;
pub static GTK_IM_STATUS_NOTHING: c_uint = 0;
pub static GTK_IM_STATUS_CALLBACK: c_uint = 1;
pub static GTK_IM_STATUS_NONE: c_uint = 2;
pub type GtkPackDirection = c_uint;
pub static GTK_PACK_DIRECTION_LTR: c_uint = 0;
pub static GTK_PACK_DIRECTION_RTL: c_uint = 1;
pub static GTK_PACK_DIRECTION_TTB: c_uint = 2;
pub static GTK_PACK_DIRECTION_BTT: c_uint = 3;
pub type GtkPrintPages = c_uint;
pub static GTK_PRINT_PAGES_ALL: c_uint = 0;
pub static GTK_PRINT_PAGES_CURRENT: c_uint = 1;
pub static GTK_PRINT_PAGES_RANGES: c_uint = 2;
pub static GTK_PRINT_PAGES_SELECTION: c_uint = 3;
pub type GtkPageSet = c_uint;
pub static GTK_PAGE_SET_ALL: c_uint = 0;
pub static GTK_PAGE_SET_EVEN: c_uint = 1;
pub static GTK_PAGE_SET_ODD: c_uint = 2;
pub type GtkNumberUpLayout = c_uint;
pub static GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM: c_uint = 0;
pub static GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP: c_uint = 1;
pub static GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM: c_uint = 2;
pub static GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP: c_uint = 3;
pub static GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT: c_uint = 4;
pub static GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT: c_uint = 5;
pub static GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT: c_uint = 6;
pub static GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT: c_uint = 7;
pub type GtkPageOrientation = c_uint;
pub static GTK_PAGE_ORIENTATION_PORTRAIT: c_uint = 0;
pub static GTK_PAGE_ORIENTATION_LANDSCAPE: c_uint = 1;
pub static GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT: c_uint = 2;
pub static GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE: c_uint = 3;
pub type GtkPrintQuality = c_uint;
pub static GTK_PRINT_QUALITY_LOW: c_uint = 0;
pub static GTK_PRINT_QUALITY_NORMAL: c_uint = 1;
pub static GTK_PRINT_QUALITY_HIGH: c_uint = 2;
pub static GTK_PRINT_QUALITY_DRAFT: c_uint = 3;
pub type GtkPrintDuplex = c_uint;
pub static GTK_PRINT_DUPLEX_SIMPLEX: c_uint = 0;
pub static GTK_PRINT_DUPLEX_HORIZONTAL: c_uint = 1;
pub static GTK_PRINT_DUPLEX_VERTICAL: c_uint = 2;
pub type GtkUnit = c_uint;
pub static GTK_UNIT_NONE: c_uint = 0;
pub static GTK_UNIT_POINTS: c_uint = 1;
pub static GTK_UNIT_INCH: c_uint = 2;
pub static GTK_UNIT_MM: c_uint = 3;
pub type GtkTreeViewGridLines = c_uint;
pub static GTK_TREE_VIEW_GRID_LINES_NONE: c_uint = 0;
pub static GTK_TREE_VIEW_GRID_LINES_HORIZONTAL: c_uint = 1;
pub static GTK_TREE_VIEW_GRID_LINES_VERTICAL: c_uint = 2;
pub static GTK_TREE_VIEW_GRID_LINES_BOTH: c_uint = 3;
pub type GtkDragResult = c_uint;
pub static GTK_DRAG_RESULT_SUCCESS: c_uint = 0;
pub static GTK_DRAG_RESULT_NO_TARGET: c_uint = 1;
pub static GTK_DRAG_RESULT_USER_CANCELLED: c_uint = 2;
pub static GTK_DRAG_RESULT_TIMEOUT_EXPIRED: c_uint = 3;
pub static GTK_DRAG_RESULT_GRAB_BROKEN: c_uint = 4;
pub static GTK_DRAG_RESULT_ERROR: c_uint = 5;
pub type GtkSizeGroupMode = c_uint;
pub static GTK_SIZE_GROUP_NONE: c_uint = 0;
pub static GTK_SIZE_GROUP_HORIZONTAL: c_uint = 1;
pub static GTK_SIZE_GROUP_VERTICAL: c_uint = 2;
pub static GTK_SIZE_GROUP_BOTH: c_uint = 3;
pub type GtkSizeRequestMode = c_uint;
pub static GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH: c_uint = 0;
pub static GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT: c_uint = 1;
pub static GTK_SIZE_REQUEST_CONSTANT_SIZE: c_uint = 2;
pub type GtkScrollablePolicy = c_uint;
pub static GTK_SCROLL_MINIMUM: c_uint = 0;
pub static GTK_SCROLL_NATURAL: c_uint = 1;
pub type GtkStateFlags = c_uint;
pub static GTK_STATE_FLAG_NORMAL: c_uint = 0;
pub static GTK_STATE_FLAG_ACTIVE: c_uint = 1;
pub static GTK_STATE_FLAG_PRELIGHT: c_uint = 2;
pub static GTK_STATE_FLAG_SELECTED: c_uint = 4;
pub static GTK_STATE_FLAG_INSENSITIVE: c_uint = 8;
pub static GTK_STATE_FLAG_INCONSISTENT: c_uint = 16;
pub static GTK_STATE_FLAG_FOCUSED: c_uint = 32;
pub static GTK_STATE_FLAG_BACKDROP: c_uint = 64;
pub static GTK_STATE_FLAG_DIR_LTR: c_uint = 128;
pub static GTK_STATE_FLAG_DIR_RTL: c_uint = 256;
pub type GtkRegionFlags = c_uint;
pub static GTK_REGION_EVEN: c_uint = 1;
pub static GTK_REGION_ODD: c_uint = 2;
pub static GTK_REGION_FIRST: c_uint = 4;
pub static GTK_REGION_LAST: c_uint = 8;
pub static GTK_REGION_ONLY: c_uint = 16;
pub static GTK_REGION_SORTED: c_uint = 32;
pub type GtkJunctionSides = c_uint;
pub static GTK_JUNCTION_NONE: c_uint = 0;
pub static GTK_JUNCTION_CORNER_TOPLEFT: c_uint = 1;
pub static GTK_JUNCTION_CORNER_TOPRIGHT: c_uint = 2;
pub static GTK_JUNCTION_CORNER_BOTTOMLEFT: c_uint = 4;
pub static GTK_JUNCTION_CORNER_BOTTOMRIGHT: c_uint = 8;
pub static GTK_JUNCTION_TOP: c_uint = 3;
pub static GTK_JUNCTION_BOTTOM: c_uint = 12;
pub static GTK_JUNCTION_LEFT: c_uint = 5;
pub static GTK_JUNCTION_RIGHT: c_uint = 10;
pub type GtkBorderStyle = c_uint;
pub static GTK_BORDER_STYLE_NONE: c_uint = 0;
pub static GTK_BORDER_STYLE_SOLID: c_uint = 1;
pub static GTK_BORDER_STYLE_INSET: c_uint = 2;
pub static GTK_BORDER_STYLE_OUTSET: c_uint = 3;
pub static GTK_BORDER_STYLE_HIDDEN: c_uint = 4;
pub static GTK_BORDER_STYLE_DOTTED: c_uint = 5;
pub static GTK_BORDER_STYLE_DASHED: c_uint = 6;
pub static GTK_BORDER_STYLE_DOUBLE: c_uint = 7;
pub static GTK_BORDER_STYLE_GROOVE: c_uint = 8;
pub static GTK_BORDER_STYLE_RIDGE: c_uint = 9;
pub type GtkLevelBarMode = c_uint;
pub static GTK_LEVEL_BAR_MODE_CONTINUOUS: c_uint = 0;
pub static GTK_LEVEL_BAR_MODE_DISCRETE: c_uint = 1;
pub type GtkInputPurpose = c_uint;
pub static GTK_INPUT_PURPOSE_FREE_FORM: c_uint = 0;
pub static GTK_INPUT_PURPOSE_ALPHA: c_uint = 1;
pub static GTK_INPUT_PURPOSE_DIGITS: c_uint = 2;
pub static GTK_INPUT_PURPOSE_NUMBER: c_uint = 3;
pub static GTK_INPUT_PURPOSE_PHONE: c_uint = 4;
pub static GTK_INPUT_PURPOSE_URL: c_uint = 5;
pub static GTK_INPUT_PURPOSE_EMAIL: c_uint = 6;
pub static GTK_INPUT_PURPOSE_NAME: c_uint = 7;
pub static GTK_INPUT_PURPOSE_PASSWORD: c_uint = 8;
pub static GTK_INPUT_PURPOSE_PIN: c_uint = 9;
pub type GtkInputHints = c_uint;
pub static GTK_INPUT_HINT_NONE: c_uint = 0;
pub static GTK_INPUT_HINT_SPELLCHECK: c_uint = 1;
pub static GTK_INPUT_HINT_NO_SPELLCHECK: c_uint = 2;
pub static GTK_INPUT_HINT_WORD_COMPLETION: c_uint = 4;
pub static GTK_INPUT_HINT_LOWERCASE: c_uint = 8;
pub static GTK_INPUT_HINT_UPPERCASE_CHARS: c_uint = 16;
pub static GTK_INPUT_HINT_UPPERCASE_WORDS: c_uint = 32;
pub static GTK_INPUT_HINT_UPPERCASE_SENTENCES: c_uint = 64;
pub static GTK_INPUT_HINT_INHIBIT_OSK: c_uint = 128;
pub type GtkAccelFlags = c_uint;
pub static GTK_ACCEL_VISIBLE: c_uint = 1;
pub static GTK_ACCEL_LOCKED: c_uint = 2;
pub static GTK_ACCEL_MASK: c_uint = 7;
pub type GtkAccelGroup = Struct__GtkAccelGroup;
pub type GtkAccelGroupClass = Struct__GtkAccelGroupClass;
pub type Struct__GtkAccelGroupPrivate = c_void;
pub type GtkAccelGroupPrivate = Struct__GtkAccelGroupPrivate;
pub type GtkAccelKey = Struct__GtkAccelKey;
pub type GtkAccelGroupEntry = Struct__GtkAccelGroupEntry;
pub type GtkAccelGroupActivate =
    extern "C" fn
        (arg1: *mut GtkAccelGroup, arg2: *mut GObject, arg3: guint,
         arg4: GdkModifierType) -> gboolean;
pub type GtkAccelGroupFindFunc =
    extern "C" fn(arg1: *mut GtkAccelKey, arg2: *mut GClosure, arg3: gpointer)
        -> gboolean;
pub struct Struct__GtkAccelGroup {
    parent: GObject,
    _priv: *mut GtkAccelGroupPrivate,
}
pub struct Struct__GtkAccelGroupClass {
    parent_class: GObjectClass,
    accel_changed: extern "C" fn
                       (arg1: *mut GtkAccelGroup, arg2: guint,
                        arg3: GdkModifierType, arg4: *mut GClosure),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub struct Struct__GtkAccelKey {
    accel_key: guint,
    accel_mods: GdkModifierType,
    accel_flags: guint,
}
pub struct Struct__GtkAccelGroupEntry {
    key: GtkAccelKey,
    closure: *mut GClosure,
    accel_path_quark: GQuark,
}
pub type GtkBorder = Struct__GtkBorder;
pub struct Struct__GtkBorder {
    left: gint16,
    right: gint16,
    top: gint16,
    bottom: gint16,
}
pub type GtkAdjustment = Struct__GtkAdjustment;
pub type GtkBuilder = Struct__GtkBuilder;
pub type Struct__GtkClipboard = c_void;
pub type GtkClipboard = Struct__GtkClipboard;
pub type Struct__GtkIconSet = c_void;
pub type GtkIconSet = Struct__GtkIconSet;
pub type Struct__GtkIconSource = c_void;
pub type GtkIconSource = Struct__GtkIconSource;
pub type GtkRcStyle = Struct__GtkRcStyle;
pub type GtkRequisition = Struct__GtkRequisition;
pub type Struct__GtkSelectionData = c_void;
pub type GtkSelectionData = Struct__GtkSelectionData;
pub type GtkSettings = Struct__GtkSettings;
pub type GtkStyle = Struct__GtkStyle;
pub type GtkStyleContext = Struct__GtkStyleContext;
pub type Struct__GtkTooltip = c_void;
pub type GtkTooltip = Struct__GtkTooltip;
pub type GtkWidget = Struct__GtkWidget;
pub type Struct__GtkWidgetPath = c_void;
pub type GtkWidgetPath = Struct__GtkWidgetPath;
pub type GtkWindow = Struct__GtkWindow;
pub type GtkRcPropertyParser =
    extern "C" fn(arg1: *GParamSpec, arg2: *GString, arg3: *mut GValue)
        -> gboolean;
pub type GtkBuilderConnectFunc =
    extern "C" fn
        (arg1: *mut GtkBuilder, arg2: *mut GObject, arg3: *gchar,
         arg4: *gchar, arg5: *mut GObject, arg6: GConnectFlags,
         arg7: gpointer);
pub type AtkStateType = c_uint;
pub static ATK_STATE_INVALID: c_uint = 0;
pub static ATK_STATE_ACTIVE: c_uint = 1;
pub static ATK_STATE_ARMED: c_uint = 2;
pub static ATK_STATE_BUSY: c_uint = 3;
pub static ATK_STATE_CHECKED: c_uint = 4;
pub static ATK_STATE_DEFUNCT: c_uint = 5;
pub static ATK_STATE_EDITABLE: c_uint = 6;
pub static ATK_STATE_ENABLED: c_uint = 7;
pub static ATK_STATE_EXPANDABLE: c_uint = 8;
pub static ATK_STATE_EXPANDED: c_uint = 9;
pub static ATK_STATE_FOCUSABLE: c_uint = 10;
pub static ATK_STATE_FOCUSED: c_uint = 11;
pub static ATK_STATE_HORIZONTAL: c_uint = 12;
pub static ATK_STATE_ICONIFIED: c_uint = 13;
pub static ATK_STATE_MODAL: c_uint = 14;
pub static ATK_STATE_MULTI_LINE: c_uint = 15;
pub static ATK_STATE_MULTISELECTABLE: c_uint = 16;
pub static ATK_STATE_OPAQUE: c_uint = 17;
pub static ATK_STATE_PRESSED: c_uint = 18;
pub static ATK_STATE_RESIZABLE: c_uint = 19;
pub static ATK_STATE_SELECTABLE: c_uint = 20;
pub static ATK_STATE_SELECTED: c_uint = 21;
pub static ATK_STATE_SENSITIVE: c_uint = 22;
pub static ATK_STATE_SHOWING: c_uint = 23;
pub static ATK_STATE_SINGLE_LINE: c_uint = 24;
pub static ATK_STATE_STALE: c_uint = 25;
pub static ATK_STATE_TRANSIENT: c_uint = 26;
pub static ATK_STATE_VERTICAL: c_uint = 27;
pub static ATK_STATE_VISIBLE: c_uint = 28;
pub static ATK_STATE_MANAGES_DESCENDANTS: c_uint = 29;
pub static ATK_STATE_INDETERMINATE: c_uint = 30;
pub static ATK_STATE_TRUNCATED: c_uint = 31;
pub static ATK_STATE_REQUIRED: c_uint = 32;
pub static ATK_STATE_INVALID_ENTRY: c_uint = 33;
pub static ATK_STATE_SUPPORTS_AUTOCOMPLETION: c_uint = 34;
pub static ATK_STATE_SELECTABLE_TEXT: c_uint = 35;
pub static ATK_STATE_DEFAULT: c_uint = 36;
pub static ATK_STATE_ANIMATED: c_uint = 37;
pub static ATK_STATE_VISITED: c_uint = 38;
pub static ATK_STATE_LAST_DEFINED: c_uint = 39;
pub type AtkState = guint64;
pub type AtkRelationType = c_uint;
pub static ATK_RELATION_NULL: c_uint = 0;
pub static ATK_RELATION_CONTROLLED_BY: c_uint = 1;
pub static ATK_RELATION_CONTROLLER_FOR: c_uint = 2;
pub static ATK_RELATION_LABEL_FOR: c_uint = 3;
pub static ATK_RELATION_LABELLED_BY: c_uint = 4;
pub static ATK_RELATION_MEMBER_OF: c_uint = 5;
pub static ATK_RELATION_NODE_CHILD_OF: c_uint = 6;
pub static ATK_RELATION_FLOWS_TO: c_uint = 7;
pub static ATK_RELATION_FLOWS_FROM: c_uint = 8;
pub static ATK_RELATION_SUBWINDOW_OF: c_uint = 9;
pub static ATK_RELATION_EMBEDS: c_uint = 10;
pub static ATK_RELATION_EMBEDDED_BY: c_uint = 11;
pub static ATK_RELATION_POPUP_FOR: c_uint = 12;
pub static ATK_RELATION_PARENT_WINDOW_OF: c_uint = 13;
pub static ATK_RELATION_DESCRIBED_BY: c_uint = 14;
pub static ATK_RELATION_DESCRIPTION_FOR: c_uint = 15;
pub static ATK_RELATION_NODE_PARENT_OF: c_uint = 16;
pub static ATK_RELATION_LAST_DEFINED: c_uint = 17;
pub type AtkRole = c_uint;
pub static ATK_ROLE_INVALID: c_uint = 0;
pub static ATK_ROLE_ACCEL_LABEL: c_uint = 1;
pub static ATK_ROLE_ALERT: c_uint = 2;
pub static ATK_ROLE_ANIMATION: c_uint = 3;
pub static ATK_ROLE_ARROW: c_uint = 4;
pub static ATK_ROLE_CALENDAR: c_uint = 5;
pub static ATK_ROLE_CANVAS: c_uint = 6;
pub static ATK_ROLE_CHECK_BOX: c_uint = 7;
pub static ATK_ROLE_CHECK_MENU_ITEM: c_uint = 8;
pub static ATK_ROLE_COLOR_CHOOSER: c_uint = 9;
pub static ATK_ROLE_COLUMN_HEADER: c_uint = 10;
pub static ATK_ROLE_COMBO_BOX: c_uint = 11;
pub static ATK_ROLE_DATE_EDITOR: c_uint = 12;
pub static ATK_ROLE_DESKTOP_ICON: c_uint = 13;
pub static ATK_ROLE_DESKTOP_FRAME: c_uint = 14;
pub static ATK_ROLE_DIAL: c_uint = 15;
pub static ATK_ROLE_DIALOG: c_uint = 16;
pub static ATK_ROLE_DIRECTORY_PANE: c_uint = 17;
pub static ATK_ROLE_DRAWING_AREA: c_uint = 18;
pub static ATK_ROLE_FILE_CHOOSER: c_uint = 19;
pub static ATK_ROLE_FILLER: c_uint = 20;
pub static ATK_ROLE_FONT_CHOOSER: c_uint = 21;
pub static ATK_ROLE_FRAME: c_uint = 22;
pub static ATK_ROLE_GLASS_PANE: c_uint = 23;
pub static ATK_ROLE_HTML_CONTAINER: c_uint = 24;
pub static ATK_ROLE_ICON: c_uint = 25;
pub static ATK_ROLE_IMAGE: c_uint = 26;
pub static ATK_ROLE_INTERNAL_FRAME: c_uint = 27;
pub static ATK_ROLE_LABEL: c_uint = 28;
pub static ATK_ROLE_LAYERED_PANE: c_uint = 29;
pub static ATK_ROLE_LIST: c_uint = 30;
pub static ATK_ROLE_LIST_ITEM: c_uint = 31;
pub static ATK_ROLE_MENU: c_uint = 32;
pub static ATK_ROLE_MENU_BAR: c_uint = 33;
pub static ATK_ROLE_MENU_ITEM: c_uint = 34;
pub static ATK_ROLE_OPTION_PANE: c_uint = 35;
pub static ATK_ROLE_PAGE_TAB: c_uint = 36;
pub static ATK_ROLE_PAGE_TAB_LIST: c_uint = 37;
pub static ATK_ROLE_PANEL: c_uint = 38;
pub static ATK_ROLE_PASSWORD_TEXT: c_uint = 39;
pub static ATK_ROLE_POPUP_MENU: c_uint = 40;
pub static ATK_ROLE_PROGRESS_BAR: c_uint = 41;
pub static ATK_ROLE_PUSH_BUTTON: c_uint = 42;
pub static ATK_ROLE_RADIO_BUTTON: c_uint = 43;
pub static ATK_ROLE_RADIO_MENU_ITEM: c_uint = 44;
pub static ATK_ROLE_ROOT_PANE: c_uint = 45;
pub static ATK_ROLE_ROW_HEADER: c_uint = 46;
pub static ATK_ROLE_SCROLL_BAR: c_uint = 47;
pub static ATK_ROLE_SCROLL_PANE: c_uint = 48;
pub static ATK_ROLE_SEPARATOR: c_uint = 49;
pub static ATK_ROLE_SLIDER: c_uint = 50;
pub static ATK_ROLE_SPLIT_PANE: c_uint = 51;
pub static ATK_ROLE_SPIN_BUTTON: c_uint = 52;
pub static ATK_ROLE_STATUSBAR: c_uint = 53;
pub static ATK_ROLE_TABLE: c_uint = 54;
pub static ATK_ROLE_TABLE_CELL: c_uint = 55;
pub static ATK_ROLE_TABLE_COLUMN_HEADER: c_uint = 56;
pub static ATK_ROLE_TABLE_ROW_HEADER: c_uint = 57;
pub static ATK_ROLE_TEAR_OFF_MENU_ITEM: c_uint = 58;
pub static ATK_ROLE_TERMINAL: c_uint = 59;
pub static ATK_ROLE_TEXT: c_uint = 60;
pub static ATK_ROLE_TOGGLE_BUTTON: c_uint = 61;
pub static ATK_ROLE_TOOL_BAR: c_uint = 62;
pub static ATK_ROLE_TOOL_TIP: c_uint = 63;
pub static ATK_ROLE_TREE: c_uint = 64;
pub static ATK_ROLE_TREE_TABLE: c_uint = 65;
pub static ATK_ROLE_UNKNOWN: c_uint = 66;
pub static ATK_ROLE_VIEWPORT: c_uint = 67;
pub static ATK_ROLE_WINDOW: c_uint = 68;
pub static ATK_ROLE_HEADER: c_uint = 69;
pub static ATK_ROLE_FOOTER: c_uint = 70;
pub static ATK_ROLE_PARAGRAPH: c_uint = 71;
pub static ATK_ROLE_RULER: c_uint = 72;
pub static ATK_ROLE_APPLICATION: c_uint = 73;
pub static ATK_ROLE_AUTOCOMPLETE: c_uint = 74;
pub static ATK_ROLE_EDITBAR: c_uint = 75;
pub static ATK_ROLE_EMBEDDED: c_uint = 76;
pub static ATK_ROLE_ENTRY: c_uint = 77;
pub static ATK_ROLE_CHART: c_uint = 78;
pub static ATK_ROLE_CAPTION: c_uint = 79;
pub static ATK_ROLE_DOCUMENT_FRAME: c_uint = 80;
pub static ATK_ROLE_HEADING: c_uint = 81;
pub static ATK_ROLE_PAGE: c_uint = 82;
pub static ATK_ROLE_SECTION: c_uint = 83;
pub static ATK_ROLE_REDUNDANT_OBJECT: c_uint = 84;
pub static ATK_ROLE_FORM: c_uint = 85;
pub static ATK_ROLE_LINK: c_uint = 86;
pub static ATK_ROLE_INPUT_METHOD_WINDOW: c_uint = 87;
pub static ATK_ROLE_TABLE_ROW: c_uint = 88;
pub static ATK_ROLE_TREE_ITEM: c_uint = 89;
pub static ATK_ROLE_DOCUMENT_SPREADSHEET: c_uint = 90;
pub static ATK_ROLE_DOCUMENT_PRESENTATION: c_uint = 91;
pub static ATK_ROLE_DOCUMENT_TEXT: c_uint = 92;
pub static ATK_ROLE_DOCUMENT_WEB: c_uint = 93;
pub static ATK_ROLE_DOCUMENT_EMAIL: c_uint = 94;
pub static ATK_ROLE_COMMENT: c_uint = 95;
pub static ATK_ROLE_LIST_BOX: c_uint = 96;
pub static ATK_ROLE_GROUPING: c_uint = 97;
pub static ATK_ROLE_IMAGE_MAP: c_uint = 98;
pub static ATK_ROLE_NOTIFICATION: c_uint = 99;
pub static ATK_ROLE_INFO_BAR: c_uint = 100;
pub static ATK_ROLE_LEVEL_BAR: c_uint = 101;
pub static ATK_ROLE_LAST_DEFINED: c_uint = 102;
pub type AtkLayer = c_uint;
pub static ATK_LAYER_INVALID: c_uint = 0;
pub static ATK_LAYER_BACKGROUND: c_uint = 1;
pub static ATK_LAYER_CANVAS: c_uint = 2;
pub static ATK_LAYER_WIDGET: c_uint = 3;
pub static ATK_LAYER_MDI: c_uint = 4;
pub static ATK_LAYER_POPUP: c_uint = 5;
pub static ATK_LAYER_OVERLAY: c_uint = 6;
pub static ATK_LAYER_WINDOW: c_uint = 7;
pub type AtkAttributeSet = GSList;
pub type AtkAttribute = Struct__AtkAttribute;
pub struct Struct__AtkAttribute {
    name: *mut gchar,
    value: *mut gchar,
}
pub type Struct__AtkImplementor = c_void;
pub type AtkImplementor = Struct__AtkImplementor;
pub type AtkImplementorIface = Struct__AtkImplementorIface;
pub type AtkObject = Struct__AtkObject;
pub type AtkObjectClass = Struct__AtkObjectClass;
pub type AtkRelationSet = Struct__AtkRelationSet;
pub type AtkStateSet = Struct__AtkStateSet;
pub struct Struct__AtkPropertyValues {
    property_name: *gchar,
    old_value: GValue,
    new_value: GValue,
}
pub type AtkPropertyValues = Struct__AtkPropertyValues;
pub type AtkFunction = extern "C" fn(arg1: gpointer) -> gboolean;
pub type AtkPropertyChangeHandler =
    extern "C" fn(arg1: *mut AtkObject, arg2: *mut AtkPropertyValues);
pub struct Struct__AtkObject {
    parent: GObject,
    description: *mut gchar,
    name: *mut gchar,
    accessible_parent: *mut AtkObject,
    role: AtkRole,
    relation_set: *mut AtkRelationSet,
    layer: AtkLayer,
}
pub struct Struct__AtkObjectClass {
    parent: GObjectClass,
    get_name: extern "C" fn(arg1: *mut AtkObject) -> *gchar,
    get_description: extern "C" fn(arg1: *mut AtkObject) -> *gchar,
    get_parent: extern "C" fn(arg1: *mut AtkObject) -> *mut AtkObject,
    get_n_children: extern "C" fn(arg1: *mut AtkObject) -> gint,
    ref_child: extern "C" fn(arg1: *mut AtkObject, arg2: gint)
                   -> *mut AtkObject,
    get_index_in_parent: extern "C" fn(arg1: *mut AtkObject) -> gint,
    ref_relation_set: extern "C" fn(arg1: *mut AtkObject)
                          -> *mut AtkRelationSet,
    get_role: extern "C" fn(arg1: *mut AtkObject) -> AtkRole,
    get_layer: extern "C" fn(arg1: *mut AtkObject) -> AtkLayer,
    get_mdi_zorder: extern "C" fn(arg1: *mut AtkObject) -> gint,
    ref_state_set: extern "C" fn(arg1: *mut AtkObject) -> *mut AtkStateSet,
    set_name: extern "C" fn(arg1: *mut AtkObject, arg2: *gchar),
    set_description: extern "C" fn(arg1: *mut AtkObject, arg2: *gchar),
    set_parent: extern "C" fn(arg1: *mut AtkObject, arg2: *mut AtkObject),
    set_role: extern "C" fn(arg1: *mut AtkObject, arg2: AtkRole),
    connect_property_change_handler: extern "C" fn
                                         (arg1: *mut AtkObject,
                                          arg2: *mut AtkPropertyChangeHandler)
                                         -> guint,
    remove_property_change_handler: extern "C" fn
                                        (arg1: *mut AtkObject, arg2: guint),
    initialize: extern "C" fn(arg1: *mut AtkObject, arg2: gpointer),
    children_changed: extern "C" fn
                          (arg1: *mut AtkObject, arg2: guint, arg3: gpointer),
    focus_event: extern "C" fn(arg1: *mut AtkObject, arg2: gboolean),
    property_change: extern "C" fn
                         (arg1: *mut AtkObject, arg2: *mut AtkPropertyValues),
    state_change: extern "C" fn
                      (arg1: *mut AtkObject, arg2: *gchar, arg3: gboolean),
    visible_data_changed: extern "C" fn(arg1: *mut AtkObject),
    active_descendant_changed: extern "C" fn
                                   (arg1: *mut AtkObject,
                                    arg2: *mut gpointer),
    get_attributes: extern "C" fn(arg1: *mut AtkObject)
                        -> *mut AtkAttributeSet,
    get_object_locale: extern "C" fn(arg1: *mut AtkObject) -> *gchar,
    pad1: AtkFunction,
}
pub struct Struct__AtkImplementorIface {
    parent: GTypeInterface,
    ref_accessible: extern "C" fn(arg1: *mut AtkImplementor)
                        -> *mut AtkObject,
}
pub type Struct__AtkAction = c_void;
pub type AtkAction = Struct__AtkAction;
pub type AtkActionIface = Struct__AtkActionIface;
pub struct Struct__AtkActionIface {
    parent: GTypeInterface,
    do_action: extern "C" fn(arg1: *mut AtkAction, arg2: gint) -> gboolean,
    get_n_actions: extern "C" fn(arg1: *mut AtkAction) -> gint,
    get_description: extern "C" fn(arg1: *mut AtkAction, arg2: gint)
                         -> *gchar,
    get_name: extern "C" fn(arg1: *mut AtkAction, arg2: gint) -> *gchar,
    get_keybinding: extern "C" fn(arg1: *mut AtkAction, arg2: gint) -> *gchar,
    set_description: extern "C" fn
                         (arg1: *mut AtkAction, arg2: gint, arg3: *gchar)
                         -> gboolean,
    get_localized_name: extern "C" fn(arg1: *mut AtkAction, arg2: gint)
                            -> *gchar,
}
pub type AtkUtil = Struct__AtkUtil;
pub type AtkUtilClass = Struct__AtkUtilClass;
pub type AtkKeyEventStruct = Struct__AtkKeyEventStruct;
pub type AtkEventListener = extern "C" fn(arg1: *mut AtkObject);
pub type AtkEventListenerInit = extern "C" fn();
pub type AtkKeySnoopFunc =
    extern "C" fn(arg1: *mut AtkKeyEventStruct, arg2: gpointer) -> gint;
pub struct Struct__AtkKeyEventStruct {
    _type: gint,
    state: guint,
    keyval: guint,
    length: gint,
    string: *mut gchar,
    keycode: guint16,
    timestamp: guint32,
}
pub type AtkKeyEventType = c_uint;
pub static ATK_KEY_EVENT_PRESS: c_uint = 0;
pub static ATK_KEY_EVENT_RELEASE: c_uint = 1;
pub static ATK_KEY_EVENT_LAST_DEFINED: c_uint = 2;
pub struct Struct__AtkUtil {
    parent: GObject,
}
pub struct Struct__AtkUtilClass {
    parent: GObjectClass,
    add_global_event_listener: extern "C" fn
                                   (arg1: GSignalEmissionHook, arg2: *gchar)
                                   -> guint,
    remove_global_event_listener: extern "C" fn(arg1: guint),
    add_key_event_listener: extern "C" fn
                                (arg1: AtkKeySnoopFunc, arg2: gpointer)
                                -> guint,
    remove_key_event_listener: extern "C" fn(arg1: guint),
    get_root: extern "C" fn() -> *mut AtkObject,
    get_toolkit_name: extern "C" fn() -> *gchar,
    get_toolkit_version: extern "C" fn() -> *gchar,
}
pub type AtkCoordType = c_uint;
pub static ATK_XY_SCREEN: c_uint = 0;
pub static ATK_XY_WINDOW: c_uint = 1;
pub type Struct__AtkComponent = c_void;
pub type AtkComponent = Struct__AtkComponent;
pub type AtkComponentIface = Struct__AtkComponentIface;
pub type AtkFocusHandler =
    extern "C" fn(arg1: *mut AtkObject, arg2: gboolean);
pub type AtkRectangle = Struct__AtkRectangle;
pub struct Struct__AtkRectangle {
    x: gint,
    y: gint,
    width: gint,
    height: gint,
}
pub struct Struct__AtkComponentIface {
    parent: GTypeInterface,
    add_focus_handler: extern "C" fn
                           (arg1: *mut AtkComponent, arg2: AtkFocusHandler)
                           -> guint,
    contains: extern "C" fn
                  (arg1: *mut AtkComponent, arg2: gint, arg3: gint,
                   arg4: AtkCoordType) -> gboolean,
    ref_accessible_at_point: extern "C" fn
                                 (arg1: *mut AtkComponent, arg2: gint,
                                  arg3: gint, arg4: AtkCoordType)
                                 -> *mut AtkObject,
    get_extents: extern "C" fn
                     (arg1: *mut AtkComponent, arg2: *mut gint,
                      arg3: *mut gint, arg4: *mut gint, arg5: *mut gint,
                      arg6: AtkCoordType),
    get_position: extern "C" fn
                      (arg1: *mut AtkComponent, arg2: *mut gint,
                       arg3: *mut gint, arg4: AtkCoordType),
    get_size: extern "C" fn
                  (arg1: *mut AtkComponent, arg2: *mut gint, arg3: *mut gint),
    grab_focus: extern "C" fn(arg1: *mut AtkComponent) -> gboolean,
    remove_focus_handler: extern "C" fn(arg1: *mut AtkComponent, arg2: guint),
    set_extents: extern "C" fn
                     (arg1: *mut AtkComponent, arg2: gint, arg3: gint,
                      arg4: gint, arg5: gint, arg6: AtkCoordType) -> gboolean,
    set_position: extern "C" fn
                      (arg1: *mut AtkComponent, arg2: gint, arg3: gint,
                       arg4: AtkCoordType) -> gboolean,
    set_size: extern "C" fn(arg1: *mut AtkComponent, arg2: gint, arg3: gint)
                  -> gboolean,
    get_layer: extern "C" fn(arg1: *mut AtkComponent) -> AtkLayer,
    get_mdi_zorder: extern "C" fn(arg1: *mut AtkComponent) -> gint,
    bounds_changed: extern "C" fn
                        (arg1: *mut AtkComponent, arg2: *mut AtkRectangle),
    get_alpha: extern "C" fn(arg1: *mut AtkComponent) -> gdouble,
}
pub type Struct__AtkDocument = c_void;
pub type AtkDocument = Struct__AtkDocument;
pub type AtkDocumentIface = Struct__AtkDocumentIface;
pub struct Struct__AtkDocumentIface {
    parent: GTypeInterface,
    get_document_type: extern "C" fn(arg1: *mut AtkDocument) -> *gchar,
    get_document: extern "C" fn(arg1: *mut AtkDocument) -> gpointer,
    get_document_locale: extern "C" fn(arg1: *mut AtkDocument) -> *gchar,
    get_document_attributes: extern "C" fn(arg1: *mut AtkDocument)
                                 -> *mut AtkAttributeSet,
    get_document_attribute_value: extern "C" fn
                                      (arg1: *mut AtkDocument, arg2: *gchar)
                                      -> *gchar,
    set_document_attribute: extern "C" fn
                                (arg1: *mut AtkDocument, arg2: *gchar,
                                 arg3: *gchar) -> gboolean,
}
pub type AtkTextAttribute = c_uint;
pub static ATK_TEXT_ATTR_INVALID: c_uint = 0;
pub static ATK_TEXT_ATTR_LEFT_MARGIN: c_uint = 1;
pub static ATK_TEXT_ATTR_RIGHT_MARGIN: c_uint = 2;
pub static ATK_TEXT_ATTR_INDENT: c_uint = 3;
pub static ATK_TEXT_ATTR_INVISIBLE: c_uint = 4;
pub static ATK_TEXT_ATTR_EDITABLE: c_uint = 5;
pub static ATK_TEXT_ATTR_PIXELS_ABOVE_LINES: c_uint = 6;
pub static ATK_TEXT_ATTR_PIXELS_BELOW_LINES: c_uint = 7;
pub static ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP: c_uint = 8;
pub static ATK_TEXT_ATTR_BG_FULL_HEIGHT: c_uint = 9;
pub static ATK_TEXT_ATTR_RISE: c_uint = 10;
pub static ATK_TEXT_ATTR_UNDERLINE: c_uint = 11;
pub static ATK_TEXT_ATTR_STRIKETHROUGH: c_uint = 12;
pub static ATK_TEXT_ATTR_SIZE: c_uint = 13;
pub static ATK_TEXT_ATTR_SCALE: c_uint = 14;
pub static ATK_TEXT_ATTR_WEIGHT: c_uint = 15;
pub static ATK_TEXT_ATTR_LANGUAGE: c_uint = 16;
pub static ATK_TEXT_ATTR_FAMILY_NAME: c_uint = 17;
pub static ATK_TEXT_ATTR_BG_COLOR: c_uint = 18;
pub static ATK_TEXT_ATTR_FG_COLOR: c_uint = 19;
pub static ATK_TEXT_ATTR_BG_STIPPLE: c_uint = 20;
pub static ATK_TEXT_ATTR_FG_STIPPLE: c_uint = 21;
pub static ATK_TEXT_ATTR_WRAP_MODE: c_uint = 22;
pub static ATK_TEXT_ATTR_DIRECTION: c_uint = 23;
pub static ATK_TEXT_ATTR_JUSTIFICATION: c_uint = 24;
pub static ATK_TEXT_ATTR_STRETCH: c_uint = 25;
pub static ATK_TEXT_ATTR_VARIANT: c_uint = 26;
pub static ATK_TEXT_ATTR_STYLE: c_uint = 27;
pub static ATK_TEXT_ATTR_LAST_DEFINED: c_uint = 28;
pub type Struct__AtkText = c_void;
pub type AtkText = Struct__AtkText;
pub type AtkTextIface = Struct__AtkTextIface;
pub type AtkTextBoundary = c_uint;
pub static ATK_TEXT_BOUNDARY_CHAR: c_uint = 0;
pub static ATK_TEXT_BOUNDARY_WORD_START: c_uint = 1;
pub static ATK_TEXT_BOUNDARY_WORD_END: c_uint = 2;
pub static ATK_TEXT_BOUNDARY_SENTENCE_START: c_uint = 3;
pub static ATK_TEXT_BOUNDARY_SENTENCE_END: c_uint = 4;
pub static ATK_TEXT_BOUNDARY_LINE_START: c_uint = 5;
pub static ATK_TEXT_BOUNDARY_LINE_END: c_uint = 6;
pub type AtkTextGranularity = c_uint;
pub static ATK_TEXT_GRANULARITY_CHAR: c_uint = 0;
pub static ATK_TEXT_GRANULARITY_WORD: c_uint = 1;
pub static ATK_TEXT_GRANULARITY_SENTENCE: c_uint = 2;
pub static ATK_TEXT_GRANULARITY_LINE: c_uint = 3;
pub static ATK_TEXT_GRANULARITY_PARAGRAPH: c_uint = 4;
pub type AtkTextRectangle = Struct__AtkTextRectangle;
pub struct Struct__AtkTextRectangle {
    x: gint,
    y: gint,
    width: gint,
    height: gint,
}
pub type AtkTextRange = Struct__AtkTextRange;
pub struct Struct__AtkTextRange {
    bounds: AtkTextRectangle,
    start_offset: gint,
    end_offset: gint,
    content: *mut gchar,
}
pub type AtkTextClipType = c_uint;
pub static ATK_TEXT_CLIP_NONE: c_uint = 0;
pub static ATK_TEXT_CLIP_MIN: c_uint = 1;
pub static ATK_TEXT_CLIP_MAX: c_uint = 2;
pub static ATK_TEXT_CLIP_BOTH: c_uint = 3;
pub struct Struct__AtkTextIface {
    parent: GTypeInterface,
    get_text: extern "C" fn(arg1: *mut AtkText, arg2: gint, arg3: gint)
                  -> *mut gchar,
    get_text_after_offset: extern "C" fn
                               (arg1: *mut AtkText, arg2: gint,
                                arg3: AtkTextBoundary, arg4: *mut gint,
                                arg5: *mut gint) -> *mut gchar,
    get_text_at_offset: extern "C" fn
                            (arg1: *mut AtkText, arg2: gint,
                             arg3: AtkTextBoundary, arg4: *mut gint,
                             arg5: *mut gint) -> *mut gchar,
    get_character_at_offset: extern "C" fn(arg1: *mut AtkText, arg2: gint)
                                 -> gunichar,
    get_text_before_offset: extern "C" fn
                                (arg1: *mut AtkText, arg2: gint,
                                 arg3: AtkTextBoundary, arg4: *mut gint,
                                 arg5: *mut gint) -> *mut gchar,
    get_caret_offset: extern "C" fn(arg1: *mut AtkText) -> gint,
    get_run_attributes: extern "C" fn
                            (arg1: *mut AtkText, arg2: gint, arg3: *mut gint,
                             arg4: *mut gint) -> *mut AtkAttributeSet,
    get_default_attributes: extern "C" fn(arg1: *mut AtkText)
                                -> *mut AtkAttributeSet,
    get_character_extents: extern "C" fn
                               (arg1: *mut AtkText, arg2: gint,
                                arg3: *mut gint, arg4: *mut gint,
                                arg5: *mut gint, arg6: *mut gint,
                                arg7: AtkCoordType),
    get_character_count: extern "C" fn(arg1: *mut AtkText) -> gint,
    get_offset_at_point: extern "C" fn
                             (arg1: *mut AtkText, arg2: gint, arg3: gint,
                              arg4: AtkCoordType) -> gint,
    get_n_selections: extern "C" fn(arg1: *mut AtkText) -> gint,
    get_selection: extern "C" fn
                       (arg1: *mut AtkText, arg2: gint, arg3: *mut gint,
                        arg4: *mut gint) -> *mut gchar,
    add_selection: extern "C" fn(arg1: *mut AtkText, arg2: gint, arg3: gint)
                       -> gboolean,
    remove_selection: extern "C" fn(arg1: *mut AtkText, arg2: gint)
                          -> gboolean,
    set_selection: extern "C" fn
                       (arg1: *mut AtkText, arg2: gint, arg3: gint,
                        arg4: gint) -> gboolean,
    set_caret_offset: extern "C" fn(arg1: *mut AtkText, arg2: gint)
                          -> gboolean,
    text_changed: extern "C" fn(arg1: *mut AtkText, arg2: gint, arg3: gint),
    text_caret_moved: extern "C" fn(arg1: *mut AtkText, arg2: gint),
    text_selection_changed: extern "C" fn(arg1: *mut AtkText),
    text_attributes_changed: extern "C" fn(arg1: *mut AtkText),
    get_range_extents: extern "C" fn
                           (arg1: *mut AtkText, arg2: gint, arg3: gint,
                            arg4: AtkCoordType, arg5: *mut AtkTextRectangle),
    get_bounded_ranges: extern "C" fn
                            (arg1: *mut AtkText, arg2: *mut AtkTextRectangle,
                             arg3: AtkCoordType, arg4: AtkTextClipType,
                             arg5: AtkTextClipType) -> *mut *mut AtkTextRange,
    get_string_at_offset: extern "C" fn
                              (arg1: *mut AtkText, arg2: gint,
                               arg3: AtkTextGranularity, arg4: *mut gint,
                               arg5: *mut gint) -> *mut gchar,
}
pub type Struct__AtkEditableText = c_void;
pub type AtkEditableText = Struct__AtkEditableText;
pub type AtkEditableTextIface = Struct__AtkEditableTextIface;
pub struct Struct__AtkEditableTextIface {
    parent_interface: GTypeInterface,
    set_run_attributes: extern "C" fn
                            (arg1: *mut AtkEditableText,
                             arg2: *mut AtkAttributeSet, arg3: gint,
                             arg4: gint) -> gboolean,
    set_text_contents: extern "C" fn
                           (arg1: *mut AtkEditableText, arg2: *gchar),
    insert_text: extern "C" fn
                     (arg1: *mut AtkEditableText, arg2: *gchar, arg3: gint,
                      arg4: *mut gint),
    copy_text: extern "C" fn
                   (arg1: *mut AtkEditableText, arg2: gint, arg3: gint),
    cut_text: extern "C" fn
                  (arg1: *mut AtkEditableText, arg2: gint, arg3: gint),
    delete_text: extern "C" fn
                     (arg1: *mut AtkEditableText, arg2: gint, arg3: gint),
    paste_text: extern "C" fn(arg1: *mut AtkEditableText, arg2: gint),
}
pub type AtkGObjectAccessible = Struct__AtkGObjectAccessible;
pub type AtkGObjectAccessibleClass = Struct__AtkGObjectAccessibleClass;
pub struct Struct__AtkGObjectAccessible {
    parent: AtkObject,
}
pub struct Struct__AtkGObjectAccessibleClass {
    parent_class: AtkObjectClass,
    pad1: AtkFunction,
    pad2: AtkFunction,
}
pub type AtkHyperlinkStateFlags = c_uint;
pub static ATK_HYPERLINK_IS_INLINE: c_uint = 1;
pub type AtkHyperlink = Struct__AtkHyperlink;
pub type AtkHyperlinkClass = Struct__AtkHyperlinkClass;
pub struct Struct__AtkHyperlink {
    parent: GObject,
}
pub struct Struct__AtkHyperlinkClass {
    parent: GObjectClass,
    get_uri: extern "C" fn(arg1: *mut AtkHyperlink, arg2: gint) -> *mut gchar,
    get_object: extern "C" fn(arg1: *mut AtkHyperlink, arg2: gint)
                    -> *mut AtkObject,
    get_end_index: extern "C" fn(arg1: *mut AtkHyperlink) -> gint,
    get_start_index: extern "C" fn(arg1: *mut AtkHyperlink) -> gint,
    is_valid: extern "C" fn(arg1: *mut AtkHyperlink) -> gboolean,
    get_n_anchors: extern "C" fn(arg1: *mut AtkHyperlink) -> gint,
    link_state: extern "C" fn(arg1: *mut AtkHyperlink) -> guint,
    is_selected_link: extern "C" fn(arg1: *mut AtkHyperlink) -> gboolean,
    link_activated: extern "C" fn(arg1: *mut AtkHyperlink),
    pad1: AtkFunction,
}
pub type Struct__AtkHyperlinkImpl = c_void;
pub type AtkHyperlinkImpl = Struct__AtkHyperlinkImpl;
pub type AtkHyperlinkImplIface = Struct__AtkHyperlinkImplIface;
pub struct Struct__AtkHyperlinkImplIface {
    parent: GTypeInterface,
    get_hyperlink: extern "C" fn(arg1: *mut AtkHyperlinkImpl)
                       -> *mut AtkHyperlink,
}
pub type Struct__AtkHypertext = c_void;
pub type AtkHypertext = Struct__AtkHypertext;
pub type AtkHypertextIface = Struct__AtkHypertextIface;
pub struct Struct__AtkHypertextIface {
    parent: GTypeInterface,
    get_link: extern "C" fn(arg1: *mut AtkHypertext, arg2: gint)
                  -> *mut AtkHyperlink,
    get_n_links: extern "C" fn(arg1: *mut AtkHypertext) -> gint,
    get_link_index: extern "C" fn(arg1: *mut AtkHypertext, arg2: gint)
                        -> gint,
    link_selected: extern "C" fn(arg1: *mut AtkHypertext, arg2: gint),
}
pub type Struct__AtkImage = c_void;
pub type AtkImage = Struct__AtkImage;
pub type AtkImageIface = Struct__AtkImageIface;
pub struct Struct__AtkImageIface {
    parent: GTypeInterface,
    get_image_position: extern "C" fn
                            (arg1: *mut AtkImage, arg2: *mut gint,
                             arg3: *mut gint, arg4: AtkCoordType),
    get_image_description: extern "C" fn(arg1: *mut AtkImage) -> *gchar,
    get_image_size: extern "C" fn
                        (arg1: *mut AtkImage, arg2: *mut gint,
                         arg3: *mut gint),
    set_image_description: extern "C" fn(arg1: *mut AtkImage, arg2: *gchar)
                               -> gboolean,
    get_image_locale: extern "C" fn(arg1: *mut AtkImage) -> *gchar,
}
pub type AtkNoOpObject = Struct__AtkNoOpObject;
pub type AtkNoOpObjectClass = Struct__AtkNoOpObjectClass;
pub struct Struct__AtkNoOpObject {
    parent: AtkObject,
}
pub struct Struct__AtkNoOpObjectClass {
    parent_class: AtkObjectClass,
}
pub type AtkObjectFactory = Struct__AtkObjectFactory;
pub type AtkObjectFactoryClass = Struct__AtkObjectFactoryClass;
pub struct Struct__AtkObjectFactory {
    parent: GObject,
}
pub struct Struct__AtkObjectFactoryClass {
    parent_class: GObjectClass,
    create_accessible: extern "C" fn(arg1: *mut GObject) -> *mut AtkObject,
    invalidate: extern "C" fn(arg1: *mut AtkObjectFactory),
    get_accessible_type: extern "C" fn() -> GType,
    pad1: AtkFunction,
    pad2: AtkFunction,
}
pub type AtkNoOpObjectFactory = Struct__AtkNoOpObjectFactory;
pub type AtkNoOpObjectFactoryClass = Struct__AtkNoOpObjectFactoryClass;
pub struct Struct__AtkNoOpObjectFactory {
    parent: AtkObjectFactory,
}
pub struct Struct__AtkNoOpObjectFactoryClass {
    parent_class: AtkObjectFactoryClass,
}
pub type AtkPlug = Struct__AtkPlug;
pub type AtkPlugClass = Struct__AtkPlugClass;
pub struct Struct__AtkPlug {
    parent: AtkObject,
}
pub struct Struct__AtkPlugClass {
    parent_class: AtkObjectClass,
    get_object_id: extern "C" fn(arg1: *mut AtkPlug) -> *mut gchar,
}
pub struct Struct__AtkRegistry {
    parent: GObject,
    factory_type_registry: *mut GHashTable,
    factory_singleton_cache: *mut GHashTable,
}
pub struct Struct__AtkRegistryClass {
    parent_class: GObjectClass,
}
pub type AtkRegistry = Struct__AtkRegistry;
pub type AtkRegistryClass = Struct__AtkRegistryClass;
pub type AtkRelation = Struct__AtkRelation;
pub type AtkRelationClass = Struct__AtkRelationClass;
pub struct Struct__AtkRelation {
    parent: GObject,
    target: *mut GPtrArray,
    relationship: AtkRelationType,
}
pub struct Struct__AtkRelationClass {
    parent: GObjectClass,
}
pub type AtkRelationSetClass = Struct__AtkRelationSetClass;
pub struct Struct__AtkRelationSet {
    parent: GObject,
    relations: *mut GPtrArray,
}
pub struct Struct__AtkRelationSetClass {
    parent: GObjectClass,
    pad1: AtkFunction,
    pad2: AtkFunction,
}
pub type Struct__AtkSelection = c_void;
pub type AtkSelection = Struct__AtkSelection;
pub type AtkSelectionIface = Struct__AtkSelectionIface;
pub struct Struct__AtkSelectionIface {
    parent: GTypeInterface,
    add_selection: extern "C" fn(arg1: *mut AtkSelection, arg2: gint)
                       -> gboolean,
    clear_selection: extern "C" fn(arg1: *mut AtkSelection) -> gboolean,
    ref_selection: extern "C" fn(arg1: *mut AtkSelection, arg2: gint)
                       -> *mut AtkObject,
    get_selection_count: extern "C" fn(arg1: *mut AtkSelection) -> gint,
    is_child_selected: extern "C" fn(arg1: *mut AtkSelection, arg2: gint)
                           -> gboolean,
    remove_selection: extern "C" fn(arg1: *mut AtkSelection, arg2: gint)
                          -> gboolean,
    select_all_selection: extern "C" fn(arg1: *mut AtkSelection) -> gboolean,
    selection_changed: extern "C" fn(arg1: *mut AtkSelection),
}
pub type AtkSocket = Struct__AtkSocket;
pub type AtkSocketClass = Struct__AtkSocketClass;
pub struct Struct__AtkSocket {
    parent: AtkObject,
    embedded_plug_id: *mut gchar,
}
pub struct Struct__AtkSocketClass {
    parent_class: AtkObjectClass,
    embed: extern "C" fn(arg1: *mut AtkSocket, arg2: *mut gchar),
}
pub type AtkStateSetClass = Struct__AtkStateSetClass;
pub struct Struct__AtkStateSet {
    parent: GObject,
}
pub struct Struct__AtkStateSetClass {
    parent: GObjectClass,
}
pub type Struct__AtkStreamableContent = c_void;
pub type AtkStreamableContent = Struct__AtkStreamableContent;
pub type AtkStreamableContentIface = Struct__AtkStreamableContentIface;
pub struct Struct__AtkStreamableContentIface {
    parent: GTypeInterface,
    get_n_mime_types: extern "C" fn(arg1: *mut AtkStreamableContent) -> gint,
    get_mime_type: extern "C" fn(arg1: *mut AtkStreamableContent, arg2: gint)
                       -> *gchar,
    get_stream: extern "C" fn(arg1: *mut AtkStreamableContent, arg2: *gchar)
                    -> *mut GIOChannel,
    get_uri: extern "C" fn(arg1: *mut AtkStreamableContent, arg2: *gchar)
                 -> *gchar,
    pad1: AtkFunction,
    pad2: AtkFunction,
    pad3: AtkFunction,
}
pub type Struct__AtkTable = c_void;
pub type AtkTable = Struct__AtkTable;
pub type AtkTableIface = Struct__AtkTableIface;
pub struct Struct__AtkTableIface {
    parent: GTypeInterface,
    ref_at: extern "C" fn(arg1: *mut AtkTable, arg2: gint, arg3: gint)
                -> *mut AtkObject,
    get_index_at: extern "C" fn(arg1: *mut AtkTable, arg2: gint, arg3: gint)
                      -> gint,
    get_column_at_index: extern "C" fn(arg1: *mut AtkTable, arg2: gint)
                             -> gint,
    get_row_at_index: extern "C" fn(arg1: *mut AtkTable, arg2: gint) -> gint,
    get_n_columns: extern "C" fn(arg1: *mut AtkTable) -> gint,
    get_n_rows: extern "C" fn(arg1: *mut AtkTable) -> gint,
    get_column_extent_at: extern "C" fn
                              (arg1: *mut AtkTable, arg2: gint, arg3: gint)
                              -> gint,
    get_row_extent_at: extern "C" fn
                           (arg1: *mut AtkTable, arg2: gint, arg3: gint)
                           -> gint,
    get_caption: extern "C" fn(arg1: *mut AtkTable) -> *mut AtkObject,
    get_column_description: extern "C" fn(arg1: *mut AtkTable, arg2: gint)
                                -> *gchar,
    get_column_header: extern "C" fn(arg1: *mut AtkTable, arg2: gint)
                           -> *mut AtkObject,
    get_row_description: extern "C" fn(arg1: *mut AtkTable, arg2: gint)
                             -> *gchar,
    get_row_header: extern "C" fn(arg1: *mut AtkTable, arg2: gint)
                        -> *mut AtkObject,
    get_summary: extern "C" fn(arg1: *mut AtkTable) -> *mut AtkObject,
    set_caption: extern "C" fn(arg1: *mut AtkTable, arg2: *mut AtkObject),
    set_column_description: extern "C" fn
                                (arg1: *mut AtkTable, arg2: gint,
                                 arg3: *gchar),
    set_column_header: extern "C" fn
                           (arg1: *mut AtkTable, arg2: gint,
                            arg3: *mut AtkObject),
    set_row_description: extern "C" fn
                             (arg1: *mut AtkTable, arg2: gint, arg3: *gchar),
    set_row_header: extern "C" fn
                        (arg1: *mut AtkTable, arg2: gint,
                         arg3: *mut AtkObject),
    set_summary: extern "C" fn(arg1: *mut AtkTable, arg2: *mut AtkObject),
    get_selected_columns: extern "C" fn
                              (arg1: *mut AtkTable, arg2: *mut *mut gint)
                              -> gint,
    get_selected_rows: extern "C" fn
                           (arg1: *mut AtkTable, arg2: *mut *mut gint)
                           -> gint,
    is_column_selected: extern "C" fn(arg1: *mut AtkTable, arg2: gint)
                            -> gboolean,
    is_row_selected: extern "C" fn(arg1: *mut AtkTable, arg2: gint)
                         -> gboolean,
    is_selected: extern "C" fn(arg1: *mut AtkTable, arg2: gint, arg3: gint)
                     -> gboolean,
    add_row_selection: extern "C" fn(arg1: *mut AtkTable, arg2: gint)
                           -> gboolean,
    remove_row_selection: extern "C" fn(arg1: *mut AtkTable, arg2: gint)
                              -> gboolean,
    add_column_selection: extern "C" fn(arg1: *mut AtkTable, arg2: gint)
                              -> gboolean,
    remove_column_selection: extern "C" fn(arg1: *mut AtkTable, arg2: gint)
                                 -> gboolean,
    row_inserted: extern "C" fn(arg1: *mut AtkTable, arg2: gint, arg3: gint),
    column_inserted: extern "C" fn
                         (arg1: *mut AtkTable, arg2: gint, arg3: gint),
    row_deleted: extern "C" fn(arg1: *mut AtkTable, arg2: gint, arg3: gint),
    column_deleted: extern "C" fn
                        (arg1: *mut AtkTable, arg2: gint, arg3: gint),
    row_reordered: extern "C" fn(arg1: *mut AtkTable),
    column_reordered: extern "C" fn(arg1: *mut AtkTable),
    model_changed: extern "C" fn(arg1: *mut AtkTable),
}
pub type AtkMisc = Struct__AtkMisc;
pub type AtkMiscClass = Struct__AtkMiscClass;
pub struct Struct__AtkMisc {
    parent: GObject,
}
pub struct Struct__AtkMiscClass {
    parent: GObjectClass,
    threads_enter: extern "C" fn(arg1: *mut AtkMisc),
    threads_leave: extern "C" fn(arg1: *mut AtkMisc),
    vfuncs: [gpointer, ..32u],
}
pub type Struct__AtkValue = c_void;
pub type AtkValue = Struct__AtkValue;
pub type AtkValueIface = Struct__AtkValueIface;
pub struct Struct__AtkValueIface {
    parent: GTypeInterface,
    get_current_value: extern "C" fn(arg1: *mut AtkValue, arg2: *mut GValue),
    get_maximum_value: extern "C" fn(arg1: *mut AtkValue, arg2: *mut GValue),
    get_minimum_value: extern "C" fn(arg1: *mut AtkValue, arg2: *mut GValue),
    set_current_value: extern "C" fn(arg1: *mut AtkValue, arg2: *GValue)
                           -> gboolean,
    get_minimum_increment: extern "C" fn
                               (arg1: *mut AtkValue, arg2: *mut GValue),
}
pub type Struct__AtkWindow = c_void;
pub type AtkWindow = Struct__AtkWindow;
pub type AtkWindowIface = Struct__AtkWindowIface;
pub struct Struct__AtkWindowIface {
    parent: GTypeInterface,
}
pub type GtkWidgetHelpType = c_uint;
pub static GTK_WIDGET_HELP_TOOLTIP: c_uint = 0;
pub static GTK_WIDGET_HELP_WHATS_THIS: c_uint = 1;
pub type Struct__GtkWidgetPrivate = c_void;
pub type GtkWidgetPrivate = Struct__GtkWidgetPrivate;
pub type GtkWidgetClass = Struct__GtkWidgetClass;
pub type Struct__GtkWidgetClassPrivate = c_void;
pub type GtkWidgetClassPrivate = Struct__GtkWidgetClassPrivate;
pub type GtkWidgetAuxInfo = Struct__GtkWidgetAuxInfo;
pub type GtkAllocation = GdkRectangle;
pub type GtkCallback = extern "C" fn(arg1: *mut GtkWidget, arg2: gpointer);
pub type GtkTickCallback =
    extern "C" fn
        (arg1: *mut GtkWidget, arg2: *mut GdkFrameClock, arg3: gpointer)
        -> gboolean;
pub struct Struct__GtkRequisition {
    width: gint,
    height: gint,
}
pub struct Struct__GtkWidget {
    parent_instance: GInitiallyUnowned,
    _priv: *mut GtkWidgetPrivate,
}
pub struct Struct__GtkWidgetClass {
    parent_class: GInitiallyUnownedClass,
    activate_signal: guint,
    dispatch_child_properties_changed: extern "C" fn
                                           (arg1: *mut GtkWidget, arg2: guint,
                                            arg3: *mut *mut GParamSpec),
    destroy: extern "C" fn(arg1: *mut GtkWidget),
    show: extern "C" fn(arg1: *mut GtkWidget),
    show_all: extern "C" fn(arg1: *mut GtkWidget),
    hide: extern "C" fn(arg1: *mut GtkWidget),
    map: extern "C" fn(arg1: *mut GtkWidget),
    unmap: extern "C" fn(arg1: *mut GtkWidget),
    realize: extern "C" fn(arg1: *mut GtkWidget),
    unrealize: extern "C" fn(arg1: *mut GtkWidget),
    size_allocate: extern "C" fn
                       (arg1: *mut GtkWidget, arg2: *mut GtkAllocation),
    state_changed: extern "C" fn(arg1: *mut GtkWidget, arg2: GtkStateType),
    state_flags_changed: extern "C" fn
                             (arg1: *mut GtkWidget, arg2: GtkStateFlags),
    parent_set: extern "C" fn(arg1: *mut GtkWidget, arg2: *mut GtkWidget),
    hierarchy_changed: extern "C" fn
                           (arg1: *mut GtkWidget, arg2: *mut GtkWidget),
    style_set: extern "C" fn(arg1: *mut GtkWidget, arg2: *mut GtkStyle),
    direction_changed: extern "C" fn
                           (arg1: *mut GtkWidget, arg2: GtkTextDirection),
    grab_notify: extern "C" fn(arg1: *mut GtkWidget, arg2: gboolean),
    child_notify: extern "C" fn(arg1: *mut GtkWidget, arg2: *mut GParamSpec),
    draw: extern "C" fn(arg1: *mut GtkWidget, arg2: *mut cairo_t) -> gboolean,
    get_request_mode: extern "C" fn(arg1: *mut GtkWidget)
                          -> GtkSizeRequestMode,
    get_preferred_height: extern "C" fn
                              (arg1: *mut GtkWidget, arg2: *mut gint,
                               arg3: *mut gint),
    get_preferred_width_for_height: extern "C" fn
                                        (arg1: *mut GtkWidget, arg2: gint,
                                         arg3: *mut gint, arg4: *mut gint),
    get_preferred_width: extern "C" fn
                             (arg1: *mut GtkWidget, arg2: *mut gint,
                              arg3: *mut gint),
    get_preferred_height_for_width: extern "C" fn
                                        (arg1: *mut GtkWidget, arg2: gint,
                                         arg3: *mut gint, arg4: *mut gint),
    mnemonic_activate: extern "C" fn(arg1: *mut GtkWidget, arg2: gboolean)
                           -> gboolean,
    grab_focus: extern "C" fn(arg1: *mut GtkWidget),
    focus: extern "C" fn(arg1: *mut GtkWidget, arg2: GtkDirectionType)
               -> gboolean,
    move_focus: extern "C" fn(arg1: *mut GtkWidget, arg2: GtkDirectionType),
    keynav_failed: extern "C" fn(arg1: *mut GtkWidget, arg2: GtkDirectionType)
                       -> gboolean,
    event: extern "C" fn(arg1: *mut GtkWidget, arg2: *mut GdkEvent)
               -> gboolean,
    button_press_event: extern "C" fn
                            (arg1: *mut GtkWidget, arg2: *mut GdkEventButton)
                            -> gboolean,
    button_release_event: extern "C" fn
                              (arg1: *mut GtkWidget,
                               arg2: *mut GdkEventButton) -> gboolean,
    scroll_event: extern "C" fn
                      (arg1: *mut GtkWidget, arg2: *mut GdkEventScroll)
                      -> gboolean,
    motion_notify_event: extern "C" fn
                             (arg1: *mut GtkWidget, arg2: *mut GdkEventMotion)
                             -> gboolean,
    delete_event: extern "C" fn(arg1: *mut GtkWidget, arg2: *mut GdkEventAny)
                      -> gboolean,
    destroy_event: extern "C" fn(arg1: *mut GtkWidget, arg2: *mut GdkEventAny)
                       -> gboolean,
    key_press_event: extern "C" fn
                         (arg1: *mut GtkWidget, arg2: *mut GdkEventKey)
                         -> gboolean,
    key_release_event: extern "C" fn
                           (arg1: *mut GtkWidget, arg2: *mut GdkEventKey)
                           -> gboolean,
    enter_notify_event: extern "C" fn
                            (arg1: *mut GtkWidget,
                             arg2: *mut GdkEventCrossing) -> gboolean,
    leave_notify_event: extern "C" fn
                            (arg1: *mut GtkWidget,
                             arg2: *mut GdkEventCrossing) -> gboolean,
    configure_event: extern "C" fn
                         (arg1: *mut GtkWidget, arg2: *mut GdkEventConfigure)
                         -> gboolean,
    focus_in_event: extern "C" fn
                        (arg1: *mut GtkWidget, arg2: *mut GdkEventFocus)
                        -> gboolean,
    focus_out_event: extern "C" fn
                         (arg1: *mut GtkWidget, arg2: *mut GdkEventFocus)
                         -> gboolean,
    map_event: extern "C" fn(arg1: *mut GtkWidget, arg2: *mut GdkEventAny)
                   -> gboolean,
    unmap_event: extern "C" fn(arg1: *mut GtkWidget, arg2: *mut GdkEventAny)
                     -> gboolean,
    property_notify_event: extern "C" fn
                               (arg1: *mut GtkWidget,
                                arg2: *mut GdkEventProperty) -> gboolean,
    selection_clear_event: extern "C" fn
                               (arg1: *mut GtkWidget,
                                arg2: *mut GdkEventSelection) -> gboolean,
    selection_request_event: extern "C" fn
                                 (arg1: *mut GtkWidget,
                                  arg2: *mut GdkEventSelection) -> gboolean,
    selection_notify_event: extern "C" fn
                                (arg1: *mut GtkWidget,
                                 arg2: *mut GdkEventSelection) -> gboolean,
    proximity_in_event: extern "C" fn
                            (arg1: *mut GtkWidget,
                             arg2: *mut GdkEventProximity) -> gboolean,
    proximity_out_event: extern "C" fn
                             (arg1: *mut GtkWidget,
                              arg2: *mut GdkEventProximity) -> gboolean,
    visibility_notify_event: extern "C" fn
                                 (arg1: *mut GtkWidget,
                                  arg2: *mut GdkEventVisibility) -> gboolean,
    window_state_event: extern "C" fn
                            (arg1: *mut GtkWidget,
                             arg2: *mut GdkEventWindowState) -> gboolean,
    damage_event: extern "C" fn
                      (arg1: *mut GtkWidget, arg2: *mut GdkEventExpose)
                      -> gboolean,
    grab_broken_event: extern "C" fn
                           (arg1: *mut GtkWidget,
                            arg2: *mut GdkEventGrabBroken) -> gboolean,
    selection_get: extern "C" fn
                       (arg1: *mut GtkWidget, arg2: *mut GtkSelectionData,
                        arg3: guint, arg4: guint),
    selection_received: extern "C" fn
                            (arg1: *mut GtkWidget,
                             arg2: *mut GtkSelectionData, arg3: guint),
    drag_begin: extern "C" fn
                    (arg1: *mut GtkWidget, arg2: *mut GdkDragContext),
    drag_end: extern "C" fn(arg1: *mut GtkWidget, arg2: *mut GdkDragContext),
    drag_data_get: extern "C" fn
                       (arg1: *mut GtkWidget, arg2: *mut GdkDragContext,
                        arg3: *mut GtkSelectionData, arg4: guint,
                        arg5: guint),
    drag_data_delete: extern "C" fn
                          (arg1: *mut GtkWidget, arg2: *mut GdkDragContext),
    drag_leave: extern "C" fn
                    (arg1: *mut GtkWidget, arg2: *mut GdkDragContext,
                     arg3: guint),
    drag_motion: extern "C" fn
                     (arg1: *mut GtkWidget, arg2: *mut GdkDragContext,
                      arg3: gint, arg4: gint, arg5: guint) -> gboolean,
    drag_drop: extern "C" fn
                   (arg1: *mut GtkWidget, arg2: *mut GdkDragContext,
                    arg3: gint, arg4: gint, arg5: guint) -> gboolean,
    drag_data_received: extern "C" fn
                            (arg1: *mut GtkWidget, arg2: *mut GdkDragContext,
                             arg3: gint, arg4: gint,
                             arg5: *mut GtkSelectionData, arg6: guint,
                             arg7: guint),
    drag_failed: extern "C" fn
                     (arg1: *mut GtkWidget, arg2: *mut GdkDragContext,
                      arg3: GtkDragResult) -> gboolean,
    popup_menu: extern "C" fn(arg1: *mut GtkWidget) -> gboolean,
    show_help: extern "C" fn(arg1: *mut GtkWidget, arg2: GtkWidgetHelpType)
                   -> gboolean,
    get_accessible: extern "C" fn(arg1: *mut GtkWidget) -> *mut AtkObject,
    screen_changed: extern "C" fn(arg1: *mut GtkWidget, arg2: *mut GdkScreen),
    can_activate_accel: extern "C" fn(arg1: *mut GtkWidget, arg2: guint)
                            -> gboolean,
    composited_changed: extern "C" fn(arg1: *mut GtkWidget),
    query_tooltip: extern "C" fn
                       (arg1: *mut GtkWidget, arg2: gint, arg3: gint,
                        arg4: gboolean, arg5: *mut GtkTooltip) -> gboolean,
    compute_expand: extern "C" fn
                        (arg1: *mut GtkWidget, arg2: *mut gboolean,
                         arg3: *mut gboolean),
    adjust_size_request: extern "C" fn
                             (arg1: *mut GtkWidget, arg2: GtkOrientation,
                              arg3: *mut gint, arg4: *mut gint),
    adjust_size_allocation: extern "C" fn
                                (arg1: *mut GtkWidget, arg2: GtkOrientation,
                                 arg3: *mut gint, arg4: *mut gint,
                                 arg5: *mut gint, arg6: *mut gint),
    style_updated: extern "C" fn(arg1: *mut GtkWidget),
    touch_event: extern "C" fn(arg1: *mut GtkWidget, arg2: *mut GdkEventTouch)
                     -> gboolean,
    get_preferred_height_and_baseline_for_width: extern "C" fn
                                                     (arg1: *mut GtkWidget,
                                                      arg2: gint,
                                                      arg3: *mut gint,
                                                      arg4: *mut gint,
                                                      arg5: *mut gint,
                                                      arg6: *mut gint),
    adjust_baseline_request: extern "C" fn
                                 (arg1: *mut GtkWidget, arg2: *mut gint,
                                  arg3: *mut gint),
    adjust_baseline_allocation: extern "C" fn
                                    (arg1: *mut GtkWidget, arg2: *mut gint),
    queue_draw_region: extern "C" fn
                           (arg1: *mut GtkWidget, arg2: *cairo_region_t),
    _priv: *mut GtkWidgetClassPrivate,
    _gtk_reserved6: extern "C" fn(),
    _gtk_reserved7: extern "C" fn(),
}
pub struct Struct__GtkWidgetAuxInfo {
    width: gint,
    height: gint,
    halign: guint,
    valign: guint,
    margin: GtkBorder,
}
pub type GtkApplication = Struct__GtkApplication;
pub type GtkApplicationClass = Struct__GtkApplicationClass;
pub type Struct__GtkApplicationPrivate = c_void;
pub type GtkApplicationPrivate = Struct__GtkApplicationPrivate;
pub struct Struct__GtkApplication {
    parent: GApplication,
    _priv: *mut GtkApplicationPrivate,
}
pub struct Struct__GtkApplicationClass {
    parent_class: GApplicationClass,
    window_added: extern "C" fn
                      (arg1: *mut GtkApplication, arg2: *mut GtkWindow),
    window_removed: extern "C" fn
                        (arg1: *mut GtkApplication, arg2: *mut GtkWindow),
    padding: [gpointer, ..12u],
}
pub type GtkApplicationInhibitFlags = c_uint;
pub static GTK_APPLICATION_INHIBIT_LOGOUT: c_uint = 1;
pub static GTK_APPLICATION_INHIBIT_SWITCH: c_uint = 2;
pub static GTK_APPLICATION_INHIBIT_SUSPEND: c_uint = 4;
pub static GTK_APPLICATION_INHIBIT_IDLE: c_uint = 8;
pub type GtkContainer = Struct__GtkContainer;
pub type Struct__GtkContainerPrivate = c_void;
pub type GtkContainerPrivate = Struct__GtkContainerPrivate;
pub type GtkContainerClass = Struct__GtkContainerClass;
pub struct Struct__GtkContainer {
    widget: GtkWidget,
    _priv: *mut GtkContainerPrivate,
}
pub struct Struct__GtkContainerClass {
    parent_class: GtkWidgetClass,
    add: extern "C" fn(arg1: *mut GtkContainer, arg2: *mut GtkWidget),
    remove: extern "C" fn(arg1: *mut GtkContainer, arg2: *mut GtkWidget),
    check_resize: extern "C" fn(arg1: *mut GtkContainer),
    forall: extern "C" fn
                (arg1: *mut GtkContainer, arg2: gboolean, arg3: GtkCallback,
                 arg4: gpointer),
    set_focus_child: extern "C" fn
                         (arg1: *mut GtkContainer, arg2: *mut GtkWidget),
    child_type: extern "C" fn(arg1: *mut GtkContainer) -> GType,
    composite_name: extern "C" fn
                        (arg1: *mut GtkContainer, arg2: *mut GtkWidget)
                        -> *mut gchar,
    set_child_property: extern "C" fn
                            (arg1: *mut GtkContainer, arg2: *mut GtkWidget,
                             arg3: guint, arg4: *GValue,
                             arg5: *mut GParamSpec),
    get_child_property: extern "C" fn
                            (arg1: *mut GtkContainer, arg2: *mut GtkWidget,
                             arg3: guint, arg4: *mut GValue,
                             arg5: *mut GParamSpec),
    get_path_for_child: extern "C" fn
                            (arg1: *mut GtkContainer, arg2: *mut GtkWidget)
                            -> *mut GtkWidgetPath,
    _handle_border_width: c_uint,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
    _gtk_reserved6: extern "C" fn(),
    _gtk_reserved7: extern "C" fn(),
    _gtk_reserved8: extern "C" fn(),
}
pub type GtkBin = Struct__GtkBin;
pub type Struct__GtkBinPrivate = c_void;
pub type GtkBinPrivate = Struct__GtkBinPrivate;
pub type GtkBinClass = Struct__GtkBinClass;
pub struct Struct__GtkBin {
    container: GtkContainer,
    _priv: *mut GtkBinPrivate,
}
pub struct Struct__GtkBinClass {
    parent_class: GtkContainerClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type Struct__GtkWindowPrivate = c_void;
pub type GtkWindowPrivate = Struct__GtkWindowPrivate;
pub type GtkWindowClass = Struct__GtkWindowClass;
pub type Struct__GtkWindowGeometryInfo = c_void;
pub type GtkWindowGeometryInfo = Struct__GtkWindowGeometryInfo;
pub type GtkWindowGroup = Struct__GtkWindowGroup;
pub type GtkWindowGroupClass = Struct__GtkWindowGroupClass;
pub type Struct__GtkWindowGroupPrivate = c_void;
pub type GtkWindowGroupPrivate = Struct__GtkWindowGroupPrivate;
pub struct Struct__GtkWindow {
    bin: GtkBin,
    _priv: *mut GtkWindowPrivate,
}
pub struct Struct__GtkWindowClass {
    parent_class: GtkBinClass,
    set_focus: extern "C" fn(arg1: *mut GtkWindow, arg2: *mut GtkWidget),
    activate_focus: extern "C" fn(arg1: *mut GtkWindow),
    activate_default: extern "C" fn(arg1: *mut GtkWindow),
    keys_changed: extern "C" fn(arg1: *mut GtkWindow),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub struct Struct__GtkWindowGroup {
    parent_instance: GObject,
    _priv: *mut GtkWindowGroupPrivate,
}
pub struct Struct__GtkWindowGroupClass {
    parent_class: GObjectClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkDialogFlags = c_uint;
pub static GTK_DIALOG_MODAL: c_uint = 1;
pub static GTK_DIALOG_DESTROY_WITH_PARENT: c_uint = 2;
pub type GtkResponseType = c_int;
pub static GTK_RESPONSE_NONE: c_int = -1;
pub static GTK_RESPONSE_REJECT: c_int = -2;
pub static GTK_RESPONSE_ACCEPT: c_int = -3;
pub static GTK_RESPONSE_DELETE_EVENT: c_int = -4;
pub static GTK_RESPONSE_OK: c_int = -5;
pub static GTK_RESPONSE_CANCEL: c_int = -6;
pub static GTK_RESPONSE_CLOSE: c_int = -7;
pub static GTK_RESPONSE_YES: c_int = -8;
pub static GTK_RESPONSE_NO: c_int = -9;
pub static GTK_RESPONSE_APPLY: c_int = -10;
pub static GTK_RESPONSE_HELP: c_int = -11;
pub type GtkDialog = Struct__GtkDialog;
pub type Struct__GtkDialogPrivate = c_void;
pub type GtkDialogPrivate = Struct__GtkDialogPrivate;
pub type GtkDialogClass = Struct__GtkDialogClass;
pub struct Struct__GtkDialog {
    window: GtkWindow,
    _priv: *mut GtkDialogPrivate,
}
pub struct Struct__GtkDialogClass {
    parent_class: GtkWindowClass,
    response: extern "C" fn(arg1: *mut GtkDialog, arg2: gint),
    close: extern "C" fn(arg1: *mut GtkDialog),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkAboutDialog = Struct__GtkAboutDialog;
pub type GtkAboutDialogClass = Struct__GtkAboutDialogClass;
pub type Struct__GtkAboutDialogPrivate = c_void;
pub type GtkAboutDialogPrivate = Struct__GtkAboutDialogPrivate;
pub type GtkLicense = c_uint;
pub static GTK_LICENSE_UNKNOWN: c_uint = 0;
pub static GTK_LICENSE_CUSTOM: c_uint = 1;
pub static GTK_LICENSE_GPL_2_0: c_uint = 2;
pub static GTK_LICENSE_GPL_3_0: c_uint = 3;
pub static GTK_LICENSE_LGPL_2_1: c_uint = 4;
pub static GTK_LICENSE_LGPL_3_0: c_uint = 5;
pub static GTK_LICENSE_BSD: c_uint = 6;
pub static GTK_LICENSE_MIT_X11: c_uint = 7;
pub static GTK_LICENSE_ARTISTIC: c_uint = 8;
pub struct Struct__GtkAboutDialog {
    parent_instance: GtkDialog,
    _priv: *mut GtkAboutDialogPrivate,
}
pub struct Struct__GtkAboutDialogClass {
    parent_class: GtkDialogClass,
    activate_link: extern "C" fn(arg1: *mut GtkAboutDialog, arg2: *gchar)
                       -> gboolean,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkMisc = Struct__GtkMisc;
pub type Struct__GtkMiscPrivate = c_void;
pub type GtkMiscPrivate = Struct__GtkMiscPrivate;
pub type GtkMiscClass = Struct__GtkMiscClass;
pub struct Struct__GtkMisc {
    widget: GtkWidget,
    _priv: *mut GtkMiscPrivate,
}
pub struct Struct__GtkMiscClass {
    parent_class: GtkWidgetClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkMenuShell = Struct__GtkMenuShell;
pub type GtkMenuShellClass = Struct__GtkMenuShellClass;
pub type Struct__GtkMenuShellPrivate = c_void;
pub type GtkMenuShellPrivate = Struct__GtkMenuShellPrivate;
pub struct Struct__GtkMenuShell {
    container: GtkContainer,
    _priv: *mut GtkMenuShellPrivate,
}
pub struct Struct__GtkMenuShellClass {
    parent_class: GtkContainerClass,
    submenu_placement: guint,
    deactivate: extern "C" fn(arg1: *mut GtkMenuShell),
    selection_done: extern "C" fn(arg1: *mut GtkMenuShell),
    move_current: extern "C" fn
                      (arg1: *mut GtkMenuShell, arg2: GtkMenuDirectionType),
    activate_current: extern "C" fn(arg1: *mut GtkMenuShell, arg2: gboolean),
    cancel: extern "C" fn(arg1: *mut GtkMenuShell),
    select_item: extern "C" fn(arg1: *mut GtkMenuShell, arg2: *mut GtkWidget),
    insert: extern "C" fn
                (arg1: *mut GtkMenuShell, arg2: *mut GtkWidget, arg3: gint),
    get_popup_delay: extern "C" fn(arg1: *mut GtkMenuShell) -> gint,
    move_selected: extern "C" fn(arg1: *mut GtkMenuShell, arg2: gint)
                       -> gboolean,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkMenu = Struct__GtkMenu;
pub type GtkMenuClass = Struct__GtkMenuClass;
pub type Struct__GtkMenuPrivate = c_void;
pub type GtkMenuPrivate = Struct__GtkMenuPrivate;
pub type GtkMenuPositionFunc =
    extern "C" fn
        (arg1: *mut GtkMenu, arg2: *mut gint, arg3: *mut gint,
         arg4: *mut gboolean, arg5: gpointer);
pub type GtkMenuDetachFunc =
    extern "C" fn(arg1: *mut GtkWidget, arg2: *mut GtkMenu);
pub struct Struct__GtkMenu {
    menu_shell: GtkMenuShell,
    _priv: *mut GtkMenuPrivate,
}
pub struct Struct__GtkMenuClass {
    parent_class: GtkMenuShellClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkLabel = Struct__GtkLabel;
pub type Struct__GtkLabelPrivate = c_void;
pub type GtkLabelPrivate = Struct__GtkLabelPrivate;
pub type GtkLabelClass = Struct__GtkLabelClass;
pub type Struct__GtkLabelSelectionInfo = c_void;
pub type GtkLabelSelectionInfo = Struct__GtkLabelSelectionInfo;
pub struct Struct__GtkLabel {
    misc: GtkMisc,
    _priv: *mut GtkLabelPrivate,
}
pub struct Struct__GtkLabelClass {
    parent_class: GtkMiscClass,
    move_cursor: extern "C" fn
                     (arg1: *mut GtkLabel, arg2: GtkMovementStep, arg3: gint,
                      arg4: gboolean),
    copy_clipboard: extern "C" fn(arg1: *mut GtkLabel),
    populate_popup: extern "C" fn(arg1: *mut GtkLabel, arg2: *mut GtkMenu),
    activate_link: extern "C" fn(arg1: *mut GtkLabel, arg2: *gchar)
                       -> gboolean,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
    _gtk_reserved6: extern "C" fn(),
    _gtk_reserved7: extern "C" fn(),
    _gtk_reserved8: extern "C" fn(),
}
pub type GtkAccelLabel = Struct__GtkAccelLabel;
pub type GtkAccelLabelClass = Struct__GtkAccelLabelClass;
pub type Struct__GtkAccelLabelPrivate = c_void;
pub type GtkAccelLabelPrivate = Struct__GtkAccelLabelPrivate;
pub struct Struct__GtkAccelLabel {
    label: GtkLabel,
    _priv: *mut GtkAccelLabelPrivate,
}
pub struct Struct__GtkAccelLabelClass {
    parent_class: GtkLabelClass,
    signal_quote1: *mut gchar,
    signal_quote2: *mut gchar,
    mod_name_shift: *mut gchar,
    mod_name_control: *mut gchar,
    mod_name_alt: *mut gchar,
    mod_separator: *mut gchar,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type Struct__GtkAccelMap = c_void;
pub type GtkAccelMap = Struct__GtkAccelMap;
pub type Struct__GtkAccelMapClass = c_void;
pub type GtkAccelMapClass = Struct__GtkAccelMapClass;
pub type GtkAccelMapForeach =
    extern "C" fn
        (arg1: gpointer, arg2: *gchar, arg3: guint, arg4: GdkModifierType,
         arg5: gboolean);
pub type GtkAccessible = Struct__GtkAccessible;
pub type Struct__GtkAccessiblePrivate = c_void;
pub type GtkAccessiblePrivate = Struct__GtkAccessiblePrivate;
pub type GtkAccessibleClass = Struct__GtkAccessibleClass;
pub struct Struct__GtkAccessible {
    parent: AtkObject,
    _priv: *mut GtkAccessiblePrivate,
}
pub struct Struct__GtkAccessibleClass {
    parent_class: AtkObjectClass,
    connect_widget_destroyed: extern "C" fn(arg1: *mut GtkAccessible),
    widget_set: extern "C" fn(arg1: *mut GtkAccessible),
    widget_unset: extern "C" fn(arg1: *mut GtkAccessible),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkActionableInterface = Struct__GtkActionableInterface;
pub type Struct__GtkActionable = c_void;
pub type GtkActionable = Struct__GtkActionable;
pub struct Struct__GtkActionableInterface {
    g_iface: GTypeInterface,
    get_action_name: extern "C" fn(arg1: *mut GtkActionable) -> *gchar,
    set_action_name: extern "C" fn(arg1: *mut GtkActionable, arg2: *gchar),
    get_action_target_value: extern "C" fn(arg1: *mut GtkActionable)
                                 -> *mut GVariant,
    set_action_target_value: extern "C" fn
                                 (arg1: *mut GtkActionable,
                                  arg2: *mut GVariant),
}
pub type Struct__GtkAdjustmentPrivate = c_void;
pub type GtkAdjustmentPrivate = Struct__GtkAdjustmentPrivate;
pub type GtkAdjustmentClass = Struct__GtkAdjustmentClass;
pub struct Struct__GtkAdjustment {
    parent_instance: GInitiallyUnowned,
    _priv: *mut GtkAdjustmentPrivate,
}
pub struct Struct__GtkAdjustmentClass {
    parent_class: GInitiallyUnownedClass,
    changed: extern "C" fn(arg1: *mut GtkAdjustment),
    value_changed: extern "C" fn(arg1: *mut GtkAdjustment),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkAlignment = Struct__GtkAlignment;
pub type Struct__GtkAlignmentPrivate = c_void;
pub type GtkAlignmentPrivate = Struct__GtkAlignmentPrivate;
pub type GtkAlignmentClass = Struct__GtkAlignmentClass;
pub struct Struct__GtkAlignment {
    bin: GtkBin,
    _priv: *mut GtkAlignmentPrivate,
}
pub struct Struct__GtkAlignmentClass {
    parent_class: GtkBinClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type Struct__GtkAppChooser = c_void;
pub type GtkAppChooser = Struct__GtkAppChooser;
pub type GtkAppChooserDialog = Struct__GtkAppChooserDialog;
pub type GtkAppChooserDialogClass = Struct__GtkAppChooserDialogClass;
pub type Struct__GtkAppChooserDialogPrivate = c_void;
pub type GtkAppChooserDialogPrivate = Struct__GtkAppChooserDialogPrivate;
pub struct Struct__GtkAppChooserDialog {
    parent: GtkDialog,
    _priv: *mut GtkAppChooserDialogPrivate,
}
pub struct Struct__GtkAppChooserDialogClass {
    parent_class: GtkDialogClass,
    padding: [gpointer, ..16u],
}
pub type GtkBox = Struct__GtkBox;
pub type Struct__GtkBoxPrivate = c_void;
pub type GtkBoxPrivate = Struct__GtkBoxPrivate;
pub type GtkBoxClass = Struct__GtkBoxClass;
pub struct Struct__GtkBox {
    container: GtkContainer,
    _priv: *mut GtkBoxPrivate,
}
pub struct Struct__GtkBoxClass {
    parent_class: GtkContainerClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkAppChooserWidget = Struct__GtkAppChooserWidget;
pub type GtkAppChooserWidgetClass = Struct__GtkAppChooserWidgetClass;
pub type Struct__GtkAppChooserWidgetPrivate = c_void;
pub type GtkAppChooserWidgetPrivate = Struct__GtkAppChooserWidgetPrivate;
pub struct Struct__GtkAppChooserWidget {
    parent: GtkBox,
    _priv: *mut GtkAppChooserWidgetPrivate,
}
pub struct Struct__GtkAppChooserWidgetClass {
    parent_class: GtkBoxClass,
    application_selected: extern "C" fn
                              (arg1: *mut GtkAppChooserWidget,
                               arg2: *mut GAppInfo),
    application_activated: extern "C" fn
                               (arg1: *mut GtkAppChooserWidget,
                                arg2: *mut GAppInfo),
    populate_popup: extern "C" fn
                        (arg1: *mut GtkAppChooserWidget, arg2: *mut GtkMenu,
                         arg3: *mut GAppInfo),
    padding: [gpointer, ..16u],
}
pub type GtkTreeIter = Struct__GtkTreeIter;
pub type Struct__GtkTreePath = c_void;
pub type GtkTreePath = Struct__GtkTreePath;
pub type Struct__GtkTreeRowReference = c_void;
pub type GtkTreeRowReference = Struct__GtkTreeRowReference;
pub type Struct__GtkTreeModel = c_void;
pub type GtkTreeModel = Struct__GtkTreeModel;
pub type GtkTreeModelIface = Struct__GtkTreeModelIface;
pub type GtkTreeModelForeachFunc =
    extern "C" fn
        (arg1: *mut GtkTreeModel, arg2: *mut GtkTreePath,
         arg3: *mut GtkTreeIter, arg4: gpointer) -> gboolean;
pub type GtkTreeModelFlags = c_uint;
pub static GTK_TREE_MODEL_ITERS_PERSIST: c_uint = 1;
pub static GTK_TREE_MODEL_LIST_ONLY: c_uint = 2;
pub struct Struct__GtkTreeIter {
    stamp: gint,
    user_data: gpointer,
    user_data2: gpointer,
    user_data3: gpointer,
}
pub struct Struct__GtkTreeModelIface {
    g_iface: GTypeInterface,
    row_changed: extern "C" fn
                     (arg1: *mut GtkTreeModel, arg2: *mut GtkTreePath,
                      arg3: *mut GtkTreeIter),
    row_inserted: extern "C" fn
                      (arg1: *mut GtkTreeModel, arg2: *mut GtkTreePath,
                       arg3: *mut GtkTreeIter),
    row_has_child_toggled: extern "C" fn
                               (arg1: *mut GtkTreeModel,
                                arg2: *mut GtkTreePath,
                                arg3: *mut GtkTreeIter),
    row_deleted: extern "C" fn
                     (arg1: *mut GtkTreeModel, arg2: *mut GtkTreePath),
    rows_reordered: extern "C" fn
                        (arg1: *mut GtkTreeModel, arg2: *mut GtkTreePath,
                         arg3: *mut GtkTreeIter, arg4: *mut gint),
    get_flags: extern "C" fn(arg1: *mut GtkTreeModel) -> GtkTreeModelFlags,
    get_n_columns: extern "C" fn(arg1: *mut GtkTreeModel) -> gint,
    get_column_type: extern "C" fn(arg1: *mut GtkTreeModel, arg2: gint)
                         -> GType,
    get_iter: extern "C" fn
                  (arg1: *mut GtkTreeModel, arg2: *mut GtkTreeIter,
                   arg3: *mut GtkTreePath) -> gboolean,
    get_path: extern "C" fn(arg1: *mut GtkTreeModel, arg2: *mut GtkTreeIter)
                  -> *mut GtkTreePath,
    get_value: extern "C" fn
                   (arg1: *mut GtkTreeModel, arg2: *mut GtkTreeIter,
                    arg3: gint, arg4: *mut GValue),
    iter_next: extern "C" fn(arg1: *mut GtkTreeModel, arg2: *mut GtkTreeIter)
                   -> gboolean,
    iter_previous: extern "C" fn
                       (arg1: *mut GtkTreeModel, arg2: *mut GtkTreeIter)
                       -> gboolean,
    iter_children: extern "C" fn
                       (arg1: *mut GtkTreeModel, arg2: *mut GtkTreeIter,
                        arg3: *mut GtkTreeIter) -> gboolean,
    iter_has_child: extern "C" fn
                        (arg1: *mut GtkTreeModel, arg2: *mut GtkTreeIter)
                        -> gboolean,
    iter_n_children: extern "C" fn
                         (arg1: *mut GtkTreeModel, arg2: *mut GtkTreeIter)
                         -> gint,
    iter_nth_child: extern "C" fn
                        (arg1: *mut GtkTreeModel, arg2: *mut GtkTreeIter,
                         arg3: *mut GtkTreeIter, arg4: gint) -> gboolean,
    iter_parent: extern "C" fn
                     (arg1: *mut GtkTreeModel, arg2: *mut GtkTreeIter,
                      arg3: *mut GtkTreeIter) -> gboolean,
    ref_node: extern "C" fn(arg1: *mut GtkTreeModel, arg2: *mut GtkTreeIter),
    unref_node: extern "C" fn
                    (arg1: *mut GtkTreeModel, arg2: *mut GtkTreeIter),
}
pub type Struct__GtkCellEditable = c_void;
pub type GtkCellEditable = Struct__GtkCellEditable;
pub type GtkCellEditableIface = Struct__GtkCellEditableIface;
pub struct Struct__GtkCellEditableIface {
    g_iface: GTypeInterface,
    editing_done: extern "C" fn(arg1: *mut GtkCellEditable),
    remove_widget: extern "C" fn(arg1: *mut GtkCellEditable),
    start_editing: extern "C" fn
                       (arg1: *mut GtkCellEditable, arg2: *mut GdkEvent),
}
pub type GtkCellRendererState = c_uint;
pub static GTK_CELL_RENDERER_SELECTED: c_uint = 1;
pub static GTK_CELL_RENDERER_PRELIT: c_uint = 2;
pub static GTK_CELL_RENDERER_INSENSITIVE: c_uint = 4;
pub static GTK_CELL_RENDERER_SORTED: c_uint = 8;
pub static GTK_CELL_RENDERER_FOCUSED: c_uint = 16;
pub static GTK_CELL_RENDERER_EXPANDABLE: c_uint = 32;
pub static GTK_CELL_RENDERER_EXPANDED: c_uint = 64;
pub type GtkCellRendererMode = c_uint;
pub static GTK_CELL_RENDERER_MODE_INERT: c_uint = 0;
pub static GTK_CELL_RENDERER_MODE_ACTIVATABLE: c_uint = 1;
pub static GTK_CELL_RENDERER_MODE_EDITABLE: c_uint = 2;
pub type GtkCellRenderer = Struct__GtkCellRenderer;
pub type Struct__GtkCellRendererPrivate = c_void;
pub type GtkCellRendererPrivate = Struct__GtkCellRendererPrivate;
pub type GtkCellRendererClass = Struct__GtkCellRendererClass;
pub type Struct__GtkCellRendererClassPrivate = c_void;
pub type GtkCellRendererClassPrivate = Struct__GtkCellRendererClassPrivate;
pub struct Struct__GtkCellRenderer {
    parent_instance: GInitiallyUnowned,
    _priv: *mut GtkCellRendererPrivate,
}
pub struct Struct__GtkCellRendererClass {
    parent_class: GInitiallyUnownedClass,
    get_request_mode: extern "C" fn(arg1: *mut GtkCellRenderer)
                          -> GtkSizeRequestMode,
    get_preferred_width: extern "C" fn
                             (arg1: *mut GtkCellRenderer,
                              arg2: *mut GtkWidget, arg3: *mut gint,
                              arg4: *mut gint),
    get_preferred_height_for_width: extern "C" fn
                                        (arg1: *mut GtkCellRenderer,
                                         arg2: *mut GtkWidget, arg3: gint,
                                         arg4: *mut gint, arg5: *mut gint),
    get_preferred_height: extern "C" fn
                              (arg1: *mut GtkCellRenderer,
                               arg2: *mut GtkWidget, arg3: *mut gint,
                               arg4: *mut gint),
    get_preferred_width_for_height: extern "C" fn
                                        (arg1: *mut GtkCellRenderer,
                                         arg2: *mut GtkWidget, arg3: gint,
                                         arg4: *mut gint, arg5: *mut gint),
    get_aligned_area: extern "C" fn
                          (arg1: *mut GtkCellRenderer, arg2: *mut GtkWidget,
                           arg3: GtkCellRendererState, arg4: *GdkRectangle,
                           arg5: *mut GdkRectangle),
    get_size: extern "C" fn
                  (arg1: *mut GtkCellRenderer, arg2: *mut GtkWidget,
                   arg3: *GdkRectangle, arg4: *mut gint, arg5: *mut gint,
                   arg6: *mut gint, arg7: *mut gint),
    render: extern "C" fn
                (arg1: *mut GtkCellRenderer, arg2: *mut cairo_t,
                 arg3: *mut GtkWidget, arg4: *GdkRectangle,
                 arg5: *GdkRectangle, arg6: GtkCellRendererState),
    activate: extern "C" fn
                  (arg1: *mut GtkCellRenderer, arg2: *mut GdkEvent,
                   arg3: *mut GtkWidget, arg4: *gchar, arg5: *GdkRectangle,
                   arg6: *GdkRectangle, arg7: GtkCellRendererState)
                  -> gboolean,
    start_editing: extern "C" fn
                       (arg1: *mut GtkCellRenderer, arg2: *mut GdkEvent,
                        arg3: *mut GtkWidget, arg4: *gchar,
                        arg5: *GdkRectangle, arg6: *GdkRectangle,
                        arg7: GtkCellRendererState) -> *mut GtkCellEditable,
    editing_canceled: extern "C" fn(arg1: *mut GtkCellRenderer),
    editing_started: extern "C" fn
                         (arg1: *mut GtkCellRenderer,
                          arg2: *mut GtkCellEditable, arg3: *gchar),
    _priv: *mut GtkCellRendererClassPrivate,
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type Enum_Unnamed48 = c_int;
pub static GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID: c_int = -1;
pub static GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID: c_int = -2;
pub type Struct__GtkTreeSortable = c_void;
pub type GtkTreeSortable = Struct__GtkTreeSortable;
pub type GtkTreeSortableIface = Struct__GtkTreeSortableIface;
pub type GtkTreeIterCompareFunc =
    extern "C" fn
        (arg1: *mut GtkTreeModel, arg2: *mut GtkTreeIter,
         arg3: *mut GtkTreeIter, arg4: gpointer) -> gint;
pub struct Struct__GtkTreeSortableIface {
    g_iface: GTypeInterface,
    sort_column_changed: extern "C" fn(arg1: *mut GtkTreeSortable),
    get_sort_column_id: extern "C" fn
                            (arg1: *mut GtkTreeSortable, arg2: *mut gint,
                             arg3: *mut GtkSortType) -> gboolean,
    set_sort_column_id: extern "C" fn
                            (arg1: *mut GtkTreeSortable, arg2: gint,
                             arg3: GtkSortType),
    set_sort_func: extern "C" fn
                       (arg1: *mut GtkTreeSortable, arg2: gint,
                        arg3: GtkTreeIterCompareFunc, arg4: gpointer,
                        arg5: GDestroyNotify),
    set_default_sort_func: extern "C" fn
                               (arg1: *mut GtkTreeSortable,
                                arg2: GtkTreeIterCompareFunc, arg3: gpointer,
                                arg4: GDestroyNotify),
    has_default_sort_func: extern "C" fn(arg1: *mut GtkTreeSortable)
                               -> gboolean,
}
pub type GtkCellArea = Struct__GtkCellArea;
pub type GtkCellAreaClass = Struct__GtkCellAreaClass;
pub type Struct__GtkCellAreaPrivate = c_void;
pub type GtkCellAreaPrivate = Struct__GtkCellAreaPrivate;
pub type GtkCellAreaContext = Struct__GtkCellAreaContext;
pub type GtkCellCallback =
    extern "C" fn(arg1: *mut GtkCellRenderer, arg2: gpointer) -> gboolean;
pub type GtkCellAllocCallback =
    extern "C" fn
        (arg1: *mut GtkCellRenderer, arg2: *GdkRectangle, arg3: *GdkRectangle,
         arg4: gpointer) -> gboolean;
pub struct Struct__GtkCellArea {
    parent_instance: GInitiallyUnowned,
    _priv: *mut GtkCellAreaPrivate,
}
pub struct Struct__GtkCellAreaClass {
    parent_class: GInitiallyUnownedClass,
    add: extern "C" fn(arg1: *mut GtkCellArea, arg2: *mut GtkCellRenderer),
    remove: extern "C" fn(arg1: *mut GtkCellArea, arg2: *mut GtkCellRenderer),
    foreach: extern "C" fn
                 (arg1: *mut GtkCellArea, arg2: GtkCellCallback,
                  arg3: gpointer),
    foreach_alloc: extern "C" fn
                       (arg1: *mut GtkCellArea, arg2: *mut GtkCellAreaContext,
                        arg3: *mut GtkWidget, arg4: *GdkRectangle,
                        arg5: *GdkRectangle, arg6: GtkCellAllocCallback,
                        arg7: gpointer),
    event: extern "C" fn
               (arg1: *mut GtkCellArea, arg2: *mut GtkCellAreaContext,
                arg3: *mut GtkWidget, arg4: *mut GdkEvent,
                arg5: *GdkRectangle, arg6: GtkCellRendererState) -> gint,
    render: extern "C" fn
                (arg1: *mut GtkCellArea, arg2: *mut GtkCellAreaContext,
                 arg3: *mut GtkWidget, arg4: *mut cairo_t,
                 arg5: *GdkRectangle, arg6: *GdkRectangle,
                 arg7: GtkCellRendererState, arg8: gboolean),
    apply_attributes: extern "C" fn
                          (arg1: *mut GtkCellArea, arg2: *mut GtkTreeModel,
                           arg3: *mut GtkTreeIter, arg4: gboolean,
                           arg5: gboolean),
    create_context: extern "C" fn(arg1: *mut GtkCellArea)
                        -> *mut GtkCellAreaContext,
    copy_context: extern "C" fn
                      (arg1: *mut GtkCellArea, arg2: *mut GtkCellAreaContext)
                      -> *mut GtkCellAreaContext,
    get_request_mode: extern "C" fn(arg1: *mut GtkCellArea)
                          -> GtkSizeRequestMode,
    get_preferred_width: extern "C" fn
                             (arg1: *mut GtkCellArea,
                              arg2: *mut GtkCellAreaContext,
                              arg3: *mut GtkWidget, arg4: *mut gint,
                              arg5: *mut gint),
    get_preferred_height_for_width: extern "C" fn
                                        (arg1: *mut GtkCellArea,
                                         arg2: *mut GtkCellAreaContext,
                                         arg3: *mut GtkWidget, arg4: gint,
                                         arg5: *mut gint, arg6: *mut gint),
    get_preferred_height: extern "C" fn
                              (arg1: *mut GtkCellArea,
                               arg2: *mut GtkCellAreaContext,
                               arg3: *mut GtkWidget, arg4: *mut gint,
                               arg5: *mut gint),
    get_preferred_width_for_height: extern "C" fn
                                        (arg1: *mut GtkCellArea,
                                         arg2: *mut GtkCellAreaContext,
                                         arg3: *mut GtkWidget, arg4: gint,
                                         arg5: *mut gint, arg6: *mut gint),
    set_cell_property: extern "C" fn
                           (arg1: *mut GtkCellArea,
                            arg2: *mut GtkCellRenderer, arg3: guint,
                            arg4: *GValue, arg5: *mut GParamSpec),
    get_cell_property: extern "C" fn
                           (arg1: *mut GtkCellArea,
                            arg2: *mut GtkCellRenderer, arg3: guint,
                            arg4: *mut GValue, arg5: *mut GParamSpec),
    focus: extern "C" fn(arg1: *mut GtkCellArea, arg2: GtkDirectionType)
               -> gboolean,
    is_activatable: extern "C" fn(arg1: *mut GtkCellArea) -> gboolean,
    activate: extern "C" fn
                  (arg1: *mut GtkCellArea, arg2: *mut GtkCellAreaContext,
                   arg3: *mut GtkWidget, arg4: *GdkRectangle,
                   arg5: GtkCellRendererState, arg6: gboolean) -> gboolean,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
    _gtk_reserved6: extern "C" fn(),
    _gtk_reserved7: extern "C" fn(),
    _gtk_reserved8: extern "C" fn(),
}
pub type GtkTreeViewColumn = Struct__GtkTreeViewColumn;
pub type GtkTreeViewColumnClass = Struct__GtkTreeViewColumnClass;
pub type Struct__GtkTreeViewColumnPrivate = c_void;
pub type GtkTreeViewColumnPrivate = Struct__GtkTreeViewColumnPrivate;
pub type GtkTreeViewColumnSizing = c_uint;
pub static GTK_TREE_VIEW_COLUMN_GROW_ONLY: c_uint = 0;
pub static GTK_TREE_VIEW_COLUMN_AUTOSIZE: c_uint = 1;
pub static GTK_TREE_VIEW_COLUMN_FIXED: c_uint = 2;
pub type GtkTreeCellDataFunc =
    extern "C" fn
        (arg1: *mut GtkTreeViewColumn, arg2: *mut GtkCellRenderer,
         arg3: *mut GtkTreeModel, arg4: *mut GtkTreeIter, arg5: gpointer);
pub struct Struct__GtkTreeViewColumn {
    parent_instance: GInitiallyUnowned,
    _priv: *mut GtkTreeViewColumnPrivate,
}
pub struct Struct__GtkTreeViewColumnClass {
    parent_class: GInitiallyUnownedClass,
    clicked: extern "C" fn(arg1: *mut GtkTreeViewColumn),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkTextAttributes = Struct__GtkTextAttributes;
pub type GtkTextAppearance = Struct__GtkTextAppearance;
pub struct Struct__GtkTextAppearance {
    bg_color: GdkColor,
    fg_color: GdkColor,
    rise: gint,
    underline: guint,
    strikethrough: guint,
    draw_bg: guint,
    inside_selection: guint,
    is_text: guint,
    rgba: [*mut GdkRGBA, ..2u],
}
pub struct Struct__GtkTextAttributes {
    refcount: guint,
    appearance: GtkTextAppearance,
    justification: GtkJustification,
    direction: GtkTextDirection,
    font: *mut PangoFontDescription,
    font_scale: gdouble,
    left_margin: gint,
    right_margin: gint,
    indent: gint,
    pixels_above_lines: gint,
    pixels_below_lines: gint,
    pixels_inside_wrap: gint,
    tabs: *mut PangoTabArray,
    wrap_mode: GtkWrapMode,
    language: *mut PangoLanguage,
    pg_bg_color: *mut GdkColor,
    invisible: guint,
    bg_full_height: guint,
    editable: guint,
    pg_bg_rgba: *mut GdkRGBA,
    padding: [guint, ..3u],
}
pub type GtkTextChildAnchor = Struct__GtkTextChildAnchor;
pub type GtkTextChildAnchorClass = Struct__GtkTextChildAnchorClass;
pub struct Struct__GtkTextChildAnchor {
    parent_instance: GObject,
    segment: gpointer,
}
pub struct Struct__GtkTextChildAnchorClass {
    parent_class: GObjectClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkTextIter = Struct__GtkTextIter;
pub type GtkTextTagTable = Struct__GtkTextTagTable;
pub type GtkTextTag = Struct__GtkTextTag;
pub type Struct__GtkTextTagPrivate = c_void;
pub type GtkTextTagPrivate = Struct__GtkTextTagPrivate;
pub type GtkTextTagClass = Struct__GtkTextTagClass;
pub struct Struct__GtkTextTag {
    parent_instance: GObject,
    _priv: *mut GtkTextTagPrivate,
}
pub struct Struct__GtkTextTagClass {
    parent_class: GObjectClass,
    event: extern "C" fn
               (arg1: *mut GtkTextTag, arg2: *mut GObject,
                arg3: *mut GdkEvent, arg4: *GtkTextIter) -> gboolean,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkTextSearchFlags = c_uint;
pub static GTK_TEXT_SEARCH_VISIBLE_ONLY: c_uint = 1;
pub static GTK_TEXT_SEARCH_TEXT_ONLY: c_uint = 2;
pub static GTK_TEXT_SEARCH_CASE_INSENSITIVE: c_uint = 4;
pub type GtkTextBuffer = Struct__GtkTextBuffer;
pub struct Struct__GtkTextIter {
    dummy1: gpointer,
    dummy2: gpointer,
    dummy3: gint,
    dummy4: gint,
    dummy5: gint,
    dummy6: gint,
    dummy7: gint,
    dummy8: gint,
    dummy9: gpointer,
    dummy10: gpointer,
    dummy11: gint,
    dummy12: gint,
    dummy13: gint,
    dummy14: gpointer,
}
pub type GtkTextCharPredicate =
    extern "C" fn(arg1: gunichar, arg2: gpointer) -> gboolean;
pub type Struct__GtkTargetList = c_void;
pub type GtkTargetList = Struct__GtkTargetList;
pub type GtkTargetEntry = Struct__GtkTargetEntry;
pub struct Struct__GtkTargetEntry {
    target: *mut gchar,
    flags: guint,
    info: guint,
}
pub type GtkDestDefaults = c_uint;
pub static GTK_DEST_DEFAULT_MOTION: c_uint = 1;
pub static GTK_DEST_DEFAULT_HIGHLIGHT: c_uint = 2;
pub static GTK_DEST_DEFAULT_DROP: c_uint = 4;
pub static GTK_DEST_DEFAULT_ALL: c_uint = 7;
pub type GtkTargetFlags = c_uint;
pub static GTK_TARGET_SAME_APP: c_uint = 1;
pub static GTK_TARGET_SAME_WIDGET: c_uint = 2;
pub static GTK_TARGET_OTHER_APP: c_uint = 4;
pub static GTK_TARGET_OTHER_WIDGET: c_uint = 8;
pub type Struct__GtkEditable = c_void;
pub type GtkEditable = Struct__GtkEditable;
pub type GtkEditableInterface = Struct__GtkEditableInterface;
pub struct Struct__GtkEditableInterface {
    base_iface: GTypeInterface,
    insert_text: extern "C" fn
                     (arg1: *mut GtkEditable, arg2: *gchar, arg3: gint,
                      arg4: *mut gint),
    delete_text: extern "C" fn
                     (arg1: *mut GtkEditable, arg2: gint, arg3: gint),
    changed: extern "C" fn(arg1: *mut GtkEditable),
    do_insert_text: extern "C" fn
                        (arg1: *mut GtkEditable, arg2: *gchar, arg3: gint,
                         arg4: *mut gint),
    do_delete_text: extern "C" fn
                        (arg1: *mut GtkEditable, arg2: gint, arg3: gint),
    get_chars: extern "C" fn(arg1: *mut GtkEditable, arg2: gint, arg3: gint)
                   -> *mut gchar,
    set_selection_bounds: extern "C" fn
                              (arg1: *mut GtkEditable, arg2: gint,
                               arg3: gint),
    get_selection_bounds: extern "C" fn
                              (arg1: *mut GtkEditable, arg2: *mut gint,
                               arg3: *mut gint) -> gboolean,
    set_position: extern "C" fn(arg1: *mut GtkEditable, arg2: gint),
    get_position: extern "C" fn(arg1: *mut GtkEditable) -> gint,
}
pub type GtkIMContext = Struct__GtkIMContext;
pub type GtkIMContextClass = Struct__GtkIMContextClass;
pub struct Struct__GtkIMContext {
    parent_instance: GObject,
}
pub struct Struct__GtkIMContextClass {
    parent_class: GObjectClass,
    preedit_start: extern "C" fn(arg1: *mut GtkIMContext),
    preedit_end: extern "C" fn(arg1: *mut GtkIMContext),
    preedit_changed: extern "C" fn(arg1: *mut GtkIMContext),
    commit: extern "C" fn(arg1: *mut GtkIMContext, arg2: *gchar),
    retrieve_surrounding: extern "C" fn(arg1: *mut GtkIMContext) -> gboolean,
    delete_surrounding: extern "C" fn
                            (arg1: *mut GtkIMContext, arg2: gint, arg3: gint)
                            -> gboolean,
    set_client_window: extern "C" fn
                           (arg1: *mut GtkIMContext, arg2: *mut GdkWindow),
    get_preedit_string: extern "C" fn
                            (arg1: *mut GtkIMContext, arg2: *mut *mut gchar,
                             arg3: *mut *mut PangoAttrList, arg4: *mut gint),
    filter_keypress: extern "C" fn
                         (arg1: *mut GtkIMContext, arg2: *mut GdkEventKey)
                         -> gboolean,
    focus_in: extern "C" fn(arg1: *mut GtkIMContext),
    focus_out: extern "C" fn(arg1: *mut GtkIMContext),
    reset: extern "C" fn(arg1: *mut GtkIMContext),
    set_cursor_location: extern "C" fn
                             (arg1: *mut GtkIMContext,
                              arg2: *mut GdkRectangle),
    set_use_preedit: extern "C" fn(arg1: *mut GtkIMContext, arg2: gboolean),
    set_surrounding: extern "C" fn
                         (arg1: *mut GtkIMContext, arg2: *gchar, arg3: gint,
                          arg4: gint),
    get_surrounding: extern "C" fn
                         (arg1: *mut GtkIMContext, arg2: *mut *mut gchar,
                          arg3: *mut gint) -> gboolean,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
    _gtk_reserved6: extern "C" fn(),
}
pub type GtkEntryBuffer = Struct__GtkEntryBuffer;
pub type GtkEntryBufferClass = Struct__GtkEntryBufferClass;
pub type Struct__GtkEntryBufferPrivate = c_void;
pub type GtkEntryBufferPrivate = Struct__GtkEntryBufferPrivate;
pub struct Struct__GtkEntryBuffer {
    parent_instance: GObject,
    _priv: *mut GtkEntryBufferPrivate,
}
pub struct Struct__GtkEntryBufferClass {
    parent_class: GObjectClass,
    inserted_text: extern "C" fn
                       (arg1: *mut GtkEntryBuffer, arg2: guint, arg3: *gchar,
                        arg4: guint),
    deleted_text: extern "C" fn
                      (arg1: *mut GtkEntryBuffer, arg2: guint, arg3: guint),
    get_text: extern "C" fn(arg1: *mut GtkEntryBuffer, arg2: *mut gsize)
                  -> *gchar,
    get_length: extern "C" fn(arg1: *mut GtkEntryBuffer) -> guint,
    insert_text: extern "C" fn
                     (arg1: *mut GtkEntryBuffer, arg2: guint, arg3: *gchar,
                      arg4: guint) -> guint,
    delete_text: extern "C" fn
                     (arg1: *mut GtkEntryBuffer, arg2: guint, arg3: guint)
                     -> guint,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
    _gtk_reserved6: extern "C" fn(),
    _gtk_reserved7: extern "C" fn(),
    _gtk_reserved8: extern "C" fn(),
}
pub type GtkListStore = Struct__GtkListStore;
pub type Struct__GtkListStorePrivate = c_void;
pub type GtkListStorePrivate = Struct__GtkListStorePrivate;
pub type GtkListStoreClass = Struct__GtkListStoreClass;
pub struct Struct__GtkListStore {
    parent: GObject,
    _priv: *mut GtkListStorePrivate,
}
pub struct Struct__GtkListStoreClass {
    parent_class: GObjectClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkTreeModelFilterVisibleFunc =
    extern "C" fn
        (arg1: *mut GtkTreeModel, arg2: *mut GtkTreeIter, arg3: gpointer)
        -> gboolean;
pub type GtkTreeModelFilterModifyFunc =
    extern "C" fn
        (arg1: *mut GtkTreeModel, arg2: *mut GtkTreeIter, arg3: *mut GValue,
         arg4: gint, arg5: gpointer);
pub type GtkTreeModelFilter = Struct__GtkTreeModelFilter;
pub type GtkTreeModelFilterClass = Struct__GtkTreeModelFilterClass;
pub type Struct__GtkTreeModelFilterPrivate = c_void;
pub type GtkTreeModelFilterPrivate = Struct__GtkTreeModelFilterPrivate;
pub struct Struct__GtkTreeModelFilter {
    parent: GObject,
    _priv: *mut GtkTreeModelFilterPrivate,
}
pub struct Struct__GtkTreeModelFilterClass {
    parent_class: GObjectClass,
    visible: extern "C" fn
                 (arg1: *mut GtkTreeModelFilter, arg2: *mut GtkTreeModel,
                  arg3: *mut GtkTreeIter) -> gboolean,
    modify: extern "C" fn
                (arg1: *mut GtkTreeModelFilter, arg2: *mut GtkTreeModel,
                 arg3: *mut GtkTreeIter, arg4: *mut GValue, arg5: gint),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkEntryCompletion = Struct__GtkEntryCompletion;
pub type GtkEntryCompletionClass = Struct__GtkEntryCompletionClass;
pub type Struct__GtkEntryCompletionPrivate = c_void;
pub type GtkEntryCompletionPrivate = Struct__GtkEntryCompletionPrivate;
pub type GtkEntryCompletionMatchFunc =
    extern "C" fn
        (arg1: *mut GtkEntryCompletion, arg2: *gchar, arg3: *mut GtkTreeIter,
         arg4: gpointer) -> gboolean;
pub struct Struct__GtkEntryCompletion {
    parent_instance: GObject,
    _priv: *mut GtkEntryCompletionPrivate,
}
pub struct Struct__GtkEntryCompletionClass {
    parent_class: GObjectClass,
    match_selected: extern "C" fn
                        (arg1: *mut GtkEntryCompletion,
                         arg2: *mut GtkTreeModel, arg3: *mut GtkTreeIter)
                        -> gboolean,
    action_activated: extern "C" fn
                          (arg1: *mut GtkEntryCompletion, arg2: gint),
    insert_prefix: extern "C" fn(arg1: *mut GtkEntryCompletion, arg2: *gchar)
                       -> gboolean,
    cursor_on_match: extern "C" fn
                         (arg1: *mut GtkEntryCompletion,
                          arg2: *mut GtkTreeModel, arg3: *mut GtkTreeIter)
                         -> gboolean,
    _gtk_reserved0: extern "C" fn(),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
}
pub type GtkImage = Struct__GtkImage;
pub type Struct__GtkImagePrivate = c_void;
pub type GtkImagePrivate = Struct__GtkImagePrivate;
pub type GtkImageClass = Struct__GtkImageClass;
pub type GtkImageType = c_uint;
pub static GTK_IMAGE_EMPTY: c_uint = 0;
pub static GTK_IMAGE_PIXBUF: c_uint = 1;
pub static GTK_IMAGE_STOCK: c_uint = 2;
pub static GTK_IMAGE_ICON_SET: c_uint = 3;
pub static GTK_IMAGE_ANIMATION: c_uint = 4;
pub static GTK_IMAGE_ICON_NAME: c_uint = 5;
pub static GTK_IMAGE_GICON: c_uint = 6;
pub static GTK_IMAGE_SURFACE: c_uint = 7;
pub struct Struct__GtkImage {
    misc: GtkMisc,
    _priv: *mut GtkImagePrivate,
}
pub struct Struct__GtkImageClass {
    parent_class: GtkMiscClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkEntryIconPosition = c_uint;
pub static GTK_ENTRY_ICON_PRIMARY: c_uint = 0;
pub static GTK_ENTRY_ICON_SECONDARY: c_uint = 1;
pub type GtkEntry = Struct__GtkEntry;
pub type Struct__GtkEntryPrivate = c_void;
pub type GtkEntryPrivate = Struct__GtkEntryPrivate;
pub type GtkEntryClass = Struct__GtkEntryClass;
pub struct Struct__GtkEntry {
    parent_instance: GtkWidget,
    _priv: *mut GtkEntryPrivate,
}
pub struct Struct__GtkEntryClass {
    parent_class: GtkWidgetClass,
    populate_popup: extern "C" fn(arg1: *mut GtkEntry, arg2: *mut GtkWidget),
    activate: extern "C" fn(arg1: *mut GtkEntry),
    move_cursor: extern "C" fn
                     (arg1: *mut GtkEntry, arg2: GtkMovementStep, arg3: gint,
                      arg4: gboolean),
    insert_at_cursor: extern "C" fn(arg1: *mut GtkEntry, arg2: *gchar),
    delete_from_cursor: extern "C" fn
                            (arg1: *mut GtkEntry, arg2: GtkDeleteType,
                             arg3: gint),
    backspace: extern "C" fn(arg1: *mut GtkEntry),
    cut_clipboard: extern "C" fn(arg1: *mut GtkEntry),
    copy_clipboard: extern "C" fn(arg1: *mut GtkEntry),
    paste_clipboard: extern "C" fn(arg1: *mut GtkEntry),
    toggle_overwrite: extern "C" fn(arg1: *mut GtkEntry),
    get_text_area_size: extern "C" fn
                            (arg1: *mut GtkEntry, arg2: *mut gint,
                             arg3: *mut gint, arg4: *mut gint,
                             arg5: *mut gint),
    get_frame_size: extern "C" fn
                        (arg1: *mut GtkEntry, arg2: *mut gint,
                         arg3: *mut gint, arg4: *mut gint, arg5: *mut gint),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
    _gtk_reserved6: extern "C" fn(),
    _gtk_reserved7: extern "C" fn(),
}
pub type GtkTreeViewDropPosition = c_uint;
pub static GTK_TREE_VIEW_DROP_BEFORE: c_uint = 0;
pub static GTK_TREE_VIEW_DROP_AFTER: c_uint = 1;
pub static GTK_TREE_VIEW_DROP_INTO_OR_BEFORE: c_uint = 2;
pub static GTK_TREE_VIEW_DROP_INTO_OR_AFTER: c_uint = 3;
pub type GtkTreeView = Struct__GtkTreeView;
pub type GtkTreeViewClass = Struct__GtkTreeViewClass;
pub type Struct__GtkTreeViewPrivate = c_void;
pub type GtkTreeViewPrivate = Struct__GtkTreeViewPrivate;
pub type GtkTreeSelection = Struct__GtkTreeSelection;
pub type GtkTreeSelectionClass = Struct__GtkTreeSelectionClass;
pub struct Struct__GtkTreeView {
    parent: GtkContainer,
    _priv: *mut GtkTreeViewPrivate,
}
pub struct Struct__GtkTreeViewClass {
    parent_class: GtkContainerClass,
    row_activated: extern "C" fn
                       (arg1: *mut GtkTreeView, arg2: *mut GtkTreePath,
                        arg3: *mut GtkTreeViewColumn),
    test_expand_row: extern "C" fn
                         (arg1: *mut GtkTreeView, arg2: *mut GtkTreeIter,
                          arg3: *mut GtkTreePath) -> gboolean,
    test_collapse_row: extern "C" fn
                           (arg1: *mut GtkTreeView, arg2: *mut GtkTreeIter,
                            arg3: *mut GtkTreePath) -> gboolean,
    row_expanded: extern "C" fn
                      (arg1: *mut GtkTreeView, arg2: *mut GtkTreeIter,
                       arg3: *mut GtkTreePath),
    row_collapsed: extern "C" fn
                       (arg1: *mut GtkTreeView, arg2: *mut GtkTreeIter,
                        arg3: *mut GtkTreePath),
    columns_changed: extern "C" fn(arg1: *mut GtkTreeView),
    cursor_changed: extern "C" fn(arg1: *mut GtkTreeView),
    move_cursor: extern "C" fn
                     (arg1: *mut GtkTreeView, arg2: GtkMovementStep,
                      arg3: gint) -> gboolean,
    select_all: extern "C" fn(arg1: *mut GtkTreeView) -> gboolean,
    unselect_all: extern "C" fn(arg1: *mut GtkTreeView) -> gboolean,
    select_cursor_row: extern "C" fn(arg1: *mut GtkTreeView, arg2: gboolean)
                           -> gboolean,
    toggle_cursor_row: extern "C" fn(arg1: *mut GtkTreeView) -> gboolean,
    expand_collapse_cursor_row: extern "C" fn
                                    (arg1: *mut GtkTreeView, arg2: gboolean,
                                     arg3: gboolean, arg4: gboolean)
                                    -> gboolean,
    select_cursor_parent: extern "C" fn(arg1: *mut GtkTreeView) -> gboolean,
    start_interactive_search: extern "C" fn(arg1: *mut GtkTreeView)
                                  -> gboolean,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
    _gtk_reserved6: extern "C" fn(),
    _gtk_reserved7: extern "C" fn(),
    _gtk_reserved8: extern "C" fn(),
}
pub type GtkTreeViewColumnDropFunc =
    extern "C" fn
        (arg1: *mut GtkTreeView, arg2: *mut GtkTreeViewColumn,
         arg3: *mut GtkTreeViewColumn, arg4: *mut GtkTreeViewColumn,
         arg5: gpointer) -> gboolean;
pub type GtkTreeViewMappingFunc =
    extern "C" fn
        (arg1: *mut GtkTreeView, arg2: *mut GtkTreePath, arg3: gpointer);
pub type GtkTreeViewSearchEqualFunc =
    extern "C" fn
        (arg1: *mut GtkTreeModel, arg2: gint, arg3: *gchar,
         arg4: *mut GtkTreeIter, arg5: gpointer) -> gboolean;
pub type GtkTreeViewRowSeparatorFunc =
    extern "C" fn
        (arg1: *mut GtkTreeModel, arg2: *mut GtkTreeIter, arg3: gpointer)
        -> gboolean;
pub type GtkTreeViewSearchPositionFunc =
    extern "C" fn
        (arg1: *mut GtkTreeView, arg2: *mut GtkWidget, arg3: gpointer);
pub type GtkTreeDestroyCountFunc =
    extern "C" fn
        (arg1: *mut GtkTreeView, arg2: *mut GtkTreePath, arg3: gint,
         arg4: gpointer);
pub type GtkComboBox = Struct__GtkComboBox;
pub type GtkComboBoxClass = Struct__GtkComboBoxClass;
pub type Struct__GtkComboBoxPrivate = c_void;
pub type GtkComboBoxPrivate = Struct__GtkComboBoxPrivate;
pub struct Struct__GtkComboBox {
    parent_instance: GtkBin,
    _priv: *mut GtkComboBoxPrivate,
}
pub struct Struct__GtkComboBoxClass {
    parent_class: GtkBinClass,
    changed: extern "C" fn(arg1: *mut GtkComboBox),
    format_entry_text: extern "C" fn(arg1: *mut GtkComboBox, arg2: *gchar)
                           -> *mut gchar,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
}
pub type GtkAppChooserButton = Struct__GtkAppChooserButton;
pub type GtkAppChooserButtonClass = Struct__GtkAppChooserButtonClass;
pub type Struct__GtkAppChooserButtonPrivate = c_void;
pub type GtkAppChooserButtonPrivate = Struct__GtkAppChooserButtonPrivate;
pub struct Struct__GtkAppChooserButton {
    parent: GtkComboBox,
    _priv: *mut GtkAppChooserButtonPrivate,
}
pub struct Struct__GtkAppChooserButtonClass {
    parent_class: GtkComboBoxClass,
    custom_item_activated: extern "C" fn
                               (arg1: *mut GtkAppChooserButton, arg2: *gchar),
    padding: [gpointer, ..16u],
}
pub type Struct__GtkApplicationWindowPrivate = c_void;
pub type GtkApplicationWindowPrivate = Struct__GtkApplicationWindowPrivate;
pub type GtkApplicationWindowClass = Struct__GtkApplicationWindowClass;
pub type GtkApplicationWindow = Struct__GtkApplicationWindow;
pub struct Struct__GtkApplicationWindow {
    parent_instance: GtkWindow,
    _priv: *mut GtkApplicationWindowPrivate,
}
pub struct Struct__GtkApplicationWindowClass {
    parent_class: GtkWindowClass,
    padding: [gpointer, ..14u],
}
pub type GtkArrow = Struct__GtkArrow;
pub type Struct__GtkArrowPrivate = c_void;
pub type GtkArrowPrivate = Struct__GtkArrowPrivate;
pub type GtkArrowClass = Struct__GtkArrowClass;
pub struct Struct__GtkArrow {
    misc: GtkMisc,
    _priv: *mut GtkArrowPrivate,
}
pub struct Struct__GtkArrowClass {
    parent_class: GtkMiscClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkFrame = Struct__GtkFrame;
pub type Struct__GtkFramePrivate = c_void;
pub type GtkFramePrivate = Struct__GtkFramePrivate;
pub type GtkFrameClass = Struct__GtkFrameClass;
pub struct Struct__GtkFrame {
    bin: GtkBin,
    _priv: *mut GtkFramePrivate,
}
pub struct Struct__GtkFrameClass {
    parent_class: GtkBinClass,
    compute_child_allocation: extern "C" fn
                                  (arg1: *mut GtkFrame,
                                   arg2: *mut GtkAllocation),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkAspectFrame = Struct__GtkAspectFrame;
pub type Struct__GtkAspectFramePrivate = c_void;
pub type GtkAspectFramePrivate = Struct__GtkAspectFramePrivate;
pub type GtkAspectFrameClass = Struct__GtkAspectFrameClass;
pub struct Struct__GtkAspectFrame {
    frame: GtkFrame,
    _priv: *mut GtkAspectFramePrivate,
}
pub struct Struct__GtkAspectFrameClass {
    parent_class: GtkFrameClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkAssistantPageType = c_uint;
pub static GTK_ASSISTANT_PAGE_CONTENT: c_uint = 0;
pub static GTK_ASSISTANT_PAGE_INTRO: c_uint = 1;
pub static GTK_ASSISTANT_PAGE_CONFIRM: c_uint = 2;
pub static GTK_ASSISTANT_PAGE_SUMMARY: c_uint = 3;
pub static GTK_ASSISTANT_PAGE_PROGRESS: c_uint = 4;
pub static GTK_ASSISTANT_PAGE_CUSTOM: c_uint = 5;
pub type GtkAssistant = Struct__GtkAssistant;
pub type Struct__GtkAssistantPrivate = c_void;
pub type GtkAssistantPrivate = Struct__GtkAssistantPrivate;
pub type GtkAssistantClass = Struct__GtkAssistantClass;
pub struct Struct__GtkAssistant {
    parent: GtkWindow,
    _priv: *mut GtkAssistantPrivate,
}
pub struct Struct__GtkAssistantClass {
    parent_class: GtkWindowClass,
    prepare: extern "C" fn(arg1: *mut GtkAssistant, arg2: *mut GtkWidget),
    apply: extern "C" fn(arg1: *mut GtkAssistant),
    close: extern "C" fn(arg1: *mut GtkAssistant),
    cancel: extern "C" fn(arg1: *mut GtkAssistant),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
}
pub type GtkAssistantPageFunc =
    extern "C" fn(arg1: gint, arg2: gpointer) -> gint;
pub type GtkButtonBox = Struct__GtkButtonBox;
pub type Struct__GtkButtonBoxPrivate = c_void;
pub type GtkButtonBoxPrivate = Struct__GtkButtonBoxPrivate;
pub type GtkButtonBoxClass = Struct__GtkButtonBoxClass;
pub struct Struct__GtkButtonBox {
    box: GtkBox,
    _priv: *mut GtkButtonBoxPrivate,
}
pub struct Struct__GtkButtonBoxClass {
    parent_class: GtkBoxClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkBindingSet = Struct__GtkBindingSet;
pub type GtkBindingEntry = Struct__GtkBindingEntry;
pub type GtkBindingSignal = Struct__GtkBindingSignal;
pub type GtkBindingArg = Struct__GtkBindingArg;
pub struct Struct__GtkBindingSet {
    set_name: *mut gchar,
    priority: gint,
    widget_path_pspecs: *mut GSList,
    widget_class_pspecs: *mut GSList,
    class_branch_pspecs: *mut GSList,
    entries: *mut GtkBindingEntry,
    current: *mut GtkBindingEntry,
    parsed: guint,
}
pub struct Struct__GtkBindingEntry {
    keyval: guint,
    modifiers: GdkModifierType,
    binding_set: *mut GtkBindingSet,
    destroyed: guint,
    in_emission: guint,
    marks_unbound: guint,
    set_next: *mut GtkBindingEntry,
    hash_next: *mut GtkBindingEntry,
    signals: *mut GtkBindingSignal,
}
pub struct Struct__GtkBindingArg {
    arg_type: GType,
    d: Union_Unnamed49,
}
pub struct Union_Unnamed49 {
    data: [u64, ..1u],
}
impl Union_Unnamed49 {
    pub fn long_data(&mut self) -> *mut glong {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn double_data(&mut self) -> *mut gdouble {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn string_data(&mut self) -> *mut *mut gchar {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct__GtkBindingSignal {
    next: *mut GtkBindingSignal,
    signal_name: *mut gchar,
    n_args: guint,
    args: *mut GtkBindingArg,
}
pub type GtkBuilderClass = Struct__GtkBuilderClass;
pub type Struct__GtkBuilderPrivate = c_void;
pub type GtkBuilderPrivate = Struct__GtkBuilderPrivate;
pub type GtkBuilderError = c_uint;
pub static GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION: c_uint = 0;
pub static GTK_BUILDER_ERROR_UNHANDLED_TAG: c_uint = 1;
pub static GTK_BUILDER_ERROR_MISSING_ATTRIBUTE: c_uint = 2;
pub static GTK_BUILDER_ERROR_INVALID_ATTRIBUTE: c_uint = 3;
pub static GTK_BUILDER_ERROR_INVALID_TAG: c_uint = 4;
pub static GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE: c_uint = 5;
pub static GTK_BUILDER_ERROR_INVALID_VALUE: c_uint = 6;
pub static GTK_BUILDER_ERROR_VERSION_MISMATCH: c_uint = 7;
pub static GTK_BUILDER_ERROR_DUPLICATE_ID: c_uint = 8;
pub static GTK_BUILDER_ERROR_OBJECT_TYPE_REFUSED: c_uint = 9;
pub static GTK_BUILDER_ERROR_TEMPLATE_MISMATCH: c_uint = 10;
pub struct Struct__GtkBuilder {
    parent_instance: GObject,
    _priv: *mut GtkBuilderPrivate,
}
pub struct Struct__GtkBuilderClass {
    parent_class: GObjectClass,
    get_type_from_name: extern "C" fn(arg1: *mut GtkBuilder, arg2: *c_schar)
                            -> GType,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
    _gtk_reserved6: extern "C" fn(),
    _gtk_reserved7: extern "C" fn(),
    _gtk_reserved8: extern "C" fn(),
}
pub type Struct__GtkBuildable = c_void;
pub type GtkBuildable = Struct__GtkBuildable;
pub type GtkBuildableIface = Struct__GtkBuildableIface;
pub struct Struct__GtkBuildableIface {
    g_iface: GTypeInterface,
    set_name: extern "C" fn(arg1: *mut GtkBuildable, arg2: *gchar),
    get_name: extern "C" fn(arg1: *mut GtkBuildable) -> *gchar,
    add_child: extern "C" fn
                   (arg1: *mut GtkBuildable, arg2: *mut GtkBuilder,
                    arg3: *mut GObject, arg4: *gchar),
    set_buildable_property: extern "C" fn
                                (arg1: *mut GtkBuildable,
                                 arg2: *mut GtkBuilder, arg3: *gchar,
                                 arg4: *GValue),
    construct_child: extern "C" fn
                         (arg1: *mut GtkBuildable, arg2: *mut GtkBuilder,
                          arg3: *gchar) -> *mut GObject,
    custom_tag_start: extern "C" fn
                          (arg1: *mut GtkBuildable, arg2: *mut GtkBuilder,
                           arg3: *mut GObject, arg4: *gchar,
                           arg5: *mut GMarkupParser, arg6: *mut gpointer)
                          -> gboolean,
    custom_tag_end: extern "C" fn
                        (arg1: *mut GtkBuildable, arg2: *mut GtkBuilder,
                         arg3: *mut GObject, arg4: *gchar,
                         arg5: *mut gpointer),
    custom_finished: extern "C" fn
                         (arg1: *mut GtkBuildable, arg2: *mut GtkBuilder,
                          arg3: *mut GObject, arg4: *gchar, arg5: gpointer),
    parser_finished: extern "C" fn
                         (arg1: *mut GtkBuildable, arg2: *mut GtkBuilder),
    get_internal_child: extern "C" fn
                            (arg1: *mut GtkBuildable, arg2: *mut GtkBuilder,
                             arg3: *gchar) -> *mut GObject,
}
pub type GtkButton = Struct__GtkButton;
pub type Struct__GtkButtonPrivate = c_void;
pub type GtkButtonPrivate = Struct__GtkButtonPrivate;
pub type GtkButtonClass = Struct__GtkButtonClass;
pub struct Struct__GtkButton {
    bin: GtkBin,
    _priv: *mut GtkButtonPrivate,
}
pub struct Struct__GtkButtonClass {
    parent_class: GtkBinClass,
    pressed: extern "C" fn(arg1: *mut GtkButton),
    released: extern "C" fn(arg1: *mut GtkButton),
    clicked: extern "C" fn(arg1: *mut GtkButton),
    enter: extern "C" fn(arg1: *mut GtkButton),
    leave: extern "C" fn(arg1: *mut GtkButton),
    activate: extern "C" fn(arg1: *mut GtkButton),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkCalendar = Struct__GtkCalendar;
pub type GtkCalendarClass = Struct__GtkCalendarClass;
pub type Struct__GtkCalendarPrivate = c_void;
pub type GtkCalendarPrivate = Struct__GtkCalendarPrivate;
pub type GtkCalendarDisplayOptions = c_uint;
pub static GTK_CALENDAR_SHOW_HEADING: c_uint = 1;
pub static GTK_CALENDAR_SHOW_DAY_NAMES: c_uint = 2;
pub static GTK_CALENDAR_NO_MONTH_CHANGE: c_uint = 4;
pub static GTK_CALENDAR_SHOW_WEEK_NUMBERS: c_uint = 8;
pub static GTK_CALENDAR_SHOW_DETAILS: c_uint = 32;
pub type GtkCalendarDetailFunc =
    extern "C" fn
        (arg1: *mut GtkCalendar, arg2: guint, arg3: guint, arg4: guint,
         arg5: gpointer) -> *mut gchar;
pub struct Struct__GtkCalendar {
    widget: GtkWidget,
    _priv: *mut GtkCalendarPrivate,
}
pub struct Struct__GtkCalendarClass {
    parent_class: GtkWidgetClass,
    month_changed: extern "C" fn(arg1: *mut GtkCalendar),
    day_selected: extern "C" fn(arg1: *mut GtkCalendar),
    day_selected_double_click: extern "C" fn(arg1: *mut GtkCalendar),
    prev_month: extern "C" fn(arg1: *mut GtkCalendar),
    next_month: extern "C" fn(arg1: *mut GtkCalendar),
    prev_year: extern "C" fn(arg1: *mut GtkCalendar),
    next_year: extern "C" fn(arg1: *mut GtkCalendar),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkCellAreaBox = Struct__GtkCellAreaBox;
pub type GtkCellAreaBoxClass = Struct__GtkCellAreaBoxClass;
pub type Struct__GtkCellAreaBoxPrivate = c_void;
pub type GtkCellAreaBoxPrivate = Struct__GtkCellAreaBoxPrivate;
pub struct Struct__GtkCellAreaBox {
    parent_instance: GtkCellArea,
    _priv: *mut GtkCellAreaBoxPrivate,
}
pub struct Struct__GtkCellAreaBoxClass {
    parent_class: GtkCellAreaClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type Struct__GtkCellAreaContextPrivate = c_void;
pub type GtkCellAreaContextPrivate = Struct__GtkCellAreaContextPrivate;
pub type GtkCellAreaContextClass = Struct__GtkCellAreaContextClass;
pub struct Struct__GtkCellAreaContext {
    parent_instance: GObject,
    _priv: *mut GtkCellAreaContextPrivate,
}
pub struct Struct__GtkCellAreaContextClass {
    parent_class: GObjectClass,
    allocate: extern "C" fn
                  (arg1: *mut GtkCellAreaContext, arg2: gint, arg3: gint),
    reset: extern "C" fn(arg1: *mut GtkCellAreaContext),
    get_preferred_height_for_width: extern "C" fn
                                        (arg1: *mut GtkCellAreaContext,
                                         arg2: gint, arg3: *mut gint,
                                         arg4: *mut gint),
    get_preferred_width_for_height: extern "C" fn
                                        (arg1: *mut GtkCellAreaContext,
                                         arg2: gint, arg3: *mut gint,
                                         arg4: *mut gint),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
    _gtk_reserved6: extern "C" fn(),
}
pub type Struct__GtkCellLayout = c_void;
pub type GtkCellLayout = Struct__GtkCellLayout;
pub type GtkCellLayoutIface = Struct__GtkCellLayoutIface;
pub type GtkCellLayoutDataFunc =
    extern "C" fn
        (arg1: *mut GtkCellLayout, arg2: *mut GtkCellRenderer,
         arg3: *mut GtkTreeModel, arg4: *mut GtkTreeIter, arg5: gpointer);
pub struct Struct__GtkCellLayoutIface {
    g_iface: GTypeInterface,
    pack_start: extern "C" fn
                    (arg1: *mut GtkCellLayout, arg2: *mut GtkCellRenderer,
                     arg3: gboolean),
    pack_end: extern "C" fn
                  (arg1: *mut GtkCellLayout, arg2: *mut GtkCellRenderer,
                   arg3: gboolean),
    clear: extern "C" fn(arg1: *mut GtkCellLayout),
    add_attribute: extern "C" fn
                       (arg1: *mut GtkCellLayout, arg2: *mut GtkCellRenderer,
                        arg3: *gchar, arg4: gint),
    set_cell_data_func: extern "C" fn
                            (arg1: *mut GtkCellLayout,
                             arg2: *mut GtkCellRenderer,
                             arg3: GtkCellLayoutDataFunc, arg4: gpointer,
                             arg5: GDestroyNotify),
    clear_attributes: extern "C" fn
                          (arg1: *mut GtkCellLayout,
                           arg2: *mut GtkCellRenderer),
    reorder: extern "C" fn
                 (arg1: *mut GtkCellLayout, arg2: *mut GtkCellRenderer,
                  arg3: gint),
    get_cells: extern "C" fn(arg1: *mut GtkCellLayout) -> *mut GList,
    get_area: extern "C" fn(arg1: *mut GtkCellLayout) -> *mut GtkCellArea,
}
pub type GtkCellRendererText = Struct__GtkCellRendererText;
pub type Struct__GtkCellRendererTextPrivate = c_void;
pub type GtkCellRendererTextPrivate = Struct__GtkCellRendererTextPrivate;
pub type GtkCellRendererTextClass = Struct__GtkCellRendererTextClass;
pub struct Struct__GtkCellRendererText {
    parent: GtkCellRenderer,
    _priv: *mut GtkCellRendererTextPrivate,
}
pub struct Struct__GtkCellRendererTextClass {
    parent_class: GtkCellRendererClass,
    edited: extern "C" fn
                (arg1: *mut GtkCellRendererText, arg2: *gchar, arg3: *gchar),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkCellRendererAccel = Struct__GtkCellRendererAccel;
pub type Struct__GtkCellRendererAccelPrivate = c_void;
pub type GtkCellRendererAccelPrivate = Struct__GtkCellRendererAccelPrivate;
pub type GtkCellRendererAccelClass = Struct__GtkCellRendererAccelClass;
pub type GtkCellRendererAccelMode = c_uint;
pub static GTK_CELL_RENDERER_ACCEL_MODE_GTK: c_uint = 0;
pub static GTK_CELL_RENDERER_ACCEL_MODE_OTHER: c_uint = 1;
pub struct Struct__GtkCellRendererAccel {
    parent: GtkCellRendererText,
    _priv: *mut GtkCellRendererAccelPrivate,
}
pub struct Struct__GtkCellRendererAccelClass {
    parent_class: GtkCellRendererTextClass,
    accel_edited: extern "C" fn
                      (arg1: *mut GtkCellRendererAccel, arg2: *gchar,
                       arg3: guint, arg4: GdkModifierType, arg5: guint),
    accel_cleared: extern "C" fn
                       (arg1: *mut GtkCellRendererAccel, arg2: *gchar),
    _gtk_reserved0: extern "C" fn(),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkCellRendererCombo = Struct__GtkCellRendererCombo;
pub type Struct__GtkCellRendererComboPrivate = c_void;
pub type GtkCellRendererComboPrivate = Struct__GtkCellRendererComboPrivate;
pub type GtkCellRendererComboClass = Struct__GtkCellRendererComboClass;
pub struct Struct__GtkCellRendererCombo {
    parent: GtkCellRendererText,
    _priv: *mut GtkCellRendererComboPrivate,
}
pub struct Struct__GtkCellRendererComboClass {
    parent: GtkCellRendererTextClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkCellRendererPixbuf = Struct__GtkCellRendererPixbuf;
pub type Struct__GtkCellRendererPixbufPrivate = c_void;
pub type GtkCellRendererPixbufPrivate = Struct__GtkCellRendererPixbufPrivate;
pub type GtkCellRendererPixbufClass = Struct__GtkCellRendererPixbufClass;
pub struct Struct__GtkCellRendererPixbuf {
    parent: GtkCellRenderer,
    _priv: *mut GtkCellRendererPixbufPrivate,
}
pub struct Struct__GtkCellRendererPixbufClass {
    parent_class: GtkCellRendererClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkCellRendererProgress = Struct__GtkCellRendererProgress;
pub type GtkCellRendererProgressClass = Struct__GtkCellRendererProgressClass;
pub type Struct__GtkCellRendererProgressPrivate = c_void;
pub type GtkCellRendererProgressPrivate =
    Struct__GtkCellRendererProgressPrivate;
pub struct Struct__GtkCellRendererProgress {
    parent_instance: GtkCellRenderer,
    _priv: *mut GtkCellRendererProgressPrivate,
}
pub struct Struct__GtkCellRendererProgressClass {
    parent_class: GtkCellRendererClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkCellRendererSpin = Struct__GtkCellRendererSpin;
pub type GtkCellRendererSpinClass = Struct__GtkCellRendererSpinClass;
pub type Struct__GtkCellRendererSpinPrivate = c_void;
pub type GtkCellRendererSpinPrivate = Struct__GtkCellRendererSpinPrivate;
pub struct Struct__GtkCellRendererSpin {
    parent: GtkCellRendererText,
    _priv: *mut GtkCellRendererSpinPrivate,
}
pub struct Struct__GtkCellRendererSpinClass {
    parent: GtkCellRendererTextClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkCellRendererSpinner = Struct__GtkCellRendererSpinner;
pub type GtkCellRendererSpinnerClass = Struct__GtkCellRendererSpinnerClass;
pub type Struct__GtkCellRendererSpinnerPrivate = c_void;
pub type GtkCellRendererSpinnerPrivate =
    Struct__GtkCellRendererSpinnerPrivate;
pub struct Struct__GtkCellRendererSpinner {
    parent: GtkCellRenderer,
    _priv: *mut GtkCellRendererSpinnerPrivate,
}
pub struct Struct__GtkCellRendererSpinnerClass {
    parent_class: GtkCellRendererClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkCellRendererToggle = Struct__GtkCellRendererToggle;
pub type Struct__GtkCellRendererTogglePrivate = c_void;
pub type GtkCellRendererTogglePrivate = Struct__GtkCellRendererTogglePrivate;
pub type GtkCellRendererToggleClass = Struct__GtkCellRendererToggleClass;
pub struct Struct__GtkCellRendererToggle {
    parent: GtkCellRenderer,
    _priv: *mut GtkCellRendererTogglePrivate,
}
pub struct Struct__GtkCellRendererToggleClass {
    parent_class: GtkCellRendererClass,
    toggled: extern "C" fn(arg1: *mut GtkCellRendererToggle, arg2: *gchar),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkCellView = Struct__GtkCellView;
pub type GtkCellViewClass = Struct__GtkCellViewClass;
pub type Struct__GtkCellViewPrivate = c_void;
pub type GtkCellViewPrivate = Struct__GtkCellViewPrivate;
pub struct Struct__GtkCellView {
    parent_instance: GtkWidget,
    _priv: *mut GtkCellViewPrivate,
}
pub struct Struct__GtkCellViewClass {
    parent_class: GtkWidgetClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkToggleButton = Struct__GtkToggleButton;
pub type Struct__GtkToggleButtonPrivate = c_void;
pub type GtkToggleButtonPrivate = Struct__GtkToggleButtonPrivate;
pub type GtkToggleButtonClass = Struct__GtkToggleButtonClass;
pub struct Struct__GtkToggleButton {
    button: GtkButton,
    _priv: *mut GtkToggleButtonPrivate,
}
pub struct Struct__GtkToggleButtonClass {
    parent_class: GtkButtonClass,
    toggled: extern "C" fn(arg1: *mut GtkToggleButton),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkCheckButton = Struct__GtkCheckButton;
pub type GtkCheckButtonClass = Struct__GtkCheckButtonClass;
pub struct Struct__GtkCheckButton {
    toggle_button: GtkToggleButton,
}
pub struct Struct__GtkCheckButtonClass {
    parent_class: GtkToggleButtonClass,
    draw_indicator: extern "C" fn
                        (arg1: *mut GtkCheckButton, arg2: *mut cairo_t),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkMenuItem = Struct__GtkMenuItem;
pub type GtkMenuItemClass = Struct__GtkMenuItemClass;
pub type Struct__GtkMenuItemPrivate = c_void;
pub type GtkMenuItemPrivate = Struct__GtkMenuItemPrivate;
pub struct Struct__GtkMenuItem {
    bin: GtkBin,
    _priv: *mut GtkMenuItemPrivate,
}
pub struct Struct__GtkMenuItemClass {
    parent_class: GtkBinClass,
    hide_on_activate: guint,
    activate: extern "C" fn(arg1: *mut GtkMenuItem),
    activate_item: extern "C" fn(arg1: *mut GtkMenuItem),
    toggle_size_request: extern "C" fn
                             (arg1: *mut GtkMenuItem, arg2: *mut gint),
    toggle_size_allocate: extern "C" fn(arg1: *mut GtkMenuItem, arg2: gint),
    set_label: extern "C" fn(arg1: *mut GtkMenuItem, arg2: *gchar),
    get_label: extern "C" fn(arg1: *mut GtkMenuItem) -> *gchar,
    select: extern "C" fn(arg1: *mut GtkMenuItem),
    deselect: extern "C" fn(arg1: *mut GtkMenuItem),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkCheckMenuItem = Struct__GtkCheckMenuItem;
pub type Struct__GtkCheckMenuItemPrivate = c_void;
pub type GtkCheckMenuItemPrivate = Struct__GtkCheckMenuItemPrivate;
pub type GtkCheckMenuItemClass = Struct__GtkCheckMenuItemClass;
pub struct Struct__GtkCheckMenuItem {
    menu_item: GtkMenuItem,
    _priv: *mut GtkCheckMenuItemPrivate,
}
pub struct Struct__GtkCheckMenuItemClass {
    parent_class: GtkMenuItemClass,
    toggled: extern "C" fn(arg1: *mut GtkCheckMenuItem),
    draw_indicator: extern "C" fn
                        (arg1: *mut GtkCheckMenuItem, arg2: *mut cairo_t),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkClipboardReceivedFunc =
    extern "C" fn
        (arg1: *mut GtkClipboard, arg2: *mut GtkSelectionData,
         arg3: gpointer);
pub type GtkClipboardTextReceivedFunc =
    extern "C" fn(arg1: *mut GtkClipboard, arg2: *gchar, arg3: gpointer);
pub type GtkClipboardRichTextReceivedFunc =
    extern "C" fn
        (arg1: *mut GtkClipboard, arg2: GdkAtom, arg3: *guint8, arg4: gsize,
         arg5: gpointer);
pub type GtkClipboardImageReceivedFunc =
    extern "C" fn
        (arg1: *mut GtkClipboard, arg2: *mut GdkPixbuf, arg3: gpointer);
pub type GtkClipboardURIReceivedFunc =
    extern "C" fn
        (arg1: *mut GtkClipboard, arg2: *mut *mut gchar, arg3: gpointer);
pub type GtkClipboardTargetsReceivedFunc =
    extern "C" fn
        (arg1: *mut GtkClipboard, arg2: *mut GdkAtom, arg3: gint,
         arg4: gpointer);
pub type GtkClipboardGetFunc =
    extern "C" fn
        (arg1: *mut GtkClipboard, arg2: *mut GtkSelectionData, arg3: guint,
         arg4: gpointer);
pub type GtkClipboardClearFunc =
    extern "C" fn(arg1: *mut GtkClipboard, arg2: gpointer);
pub type GtkColorButton = Struct__GtkColorButton;
pub type GtkColorButtonClass = Struct__GtkColorButtonClass;
pub type Struct__GtkColorButtonPrivate = c_void;
pub type GtkColorButtonPrivate = Struct__GtkColorButtonPrivate;
pub struct Struct__GtkColorButton {
    button: GtkButton,
    _priv: *mut GtkColorButtonPrivate,
}
pub struct Struct__GtkColorButtonClass {
    parent_class: GtkButtonClass,
    color_set: extern "C" fn(arg1: *mut GtkColorButton),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type Struct__GtkColorChooser = c_void;
pub type GtkColorChooser = Struct__GtkColorChooser;
pub type GtkColorChooserInterface = Struct__GtkColorChooserInterface;
pub struct Struct__GtkColorChooserInterface {
    base_interface: GTypeInterface,
    get_rgba: extern "C" fn(arg1: *mut GtkColorChooser, arg2: *mut GdkRGBA),
    set_rgba: extern "C" fn(arg1: *mut GtkColorChooser, arg2: *GdkRGBA),
    add_palette: extern "C" fn
                     (arg1: *mut GtkColorChooser, arg2: GtkOrientation,
                      arg3: gint, arg4: gint, arg5: *mut GdkRGBA),
    color_activated: extern "C" fn
                         (arg1: *mut GtkColorChooser, arg2: *GdkRGBA),
    padding: [gpointer, ..12u],
}
pub type GtkColorChooserDialog = Struct__GtkColorChooserDialog;
pub type Struct__GtkColorChooserDialogPrivate = c_void;
pub type GtkColorChooserDialogPrivate = Struct__GtkColorChooserDialogPrivate;
pub type GtkColorChooserDialogClass = Struct__GtkColorChooserDialogClass;
pub struct Struct__GtkColorChooserDialog {
    parent_instance: GtkDialog,
    _priv: *mut GtkColorChooserDialogPrivate,
}
pub struct Struct__GtkColorChooserDialogClass {
    parent_class: GtkDialogClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkColorChooserWidget = Struct__GtkColorChooserWidget;
pub type Struct__GtkColorChooserWidgetPrivate = c_void;
pub type GtkColorChooserWidgetPrivate = Struct__GtkColorChooserWidgetPrivate;
pub type GtkColorChooserWidgetClass = Struct__GtkColorChooserWidgetClass;
pub struct Struct__GtkColorChooserWidget {
    parent_instance: GtkBox,
    _priv: *mut GtkColorChooserWidgetPrivate,
}
pub struct Struct__GtkColorChooserWidgetClass {
    parent_class: GtkBoxClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
    _gtk_reserved6: extern "C" fn(),
    _gtk_reserved7: extern "C" fn(),
    _gtk_reserved8: extern "C" fn(),
}
pub type GtkComboBoxText = Struct__GtkComboBoxText;
pub type Struct__GtkComboBoxTextPrivate = c_void;
pub type GtkComboBoxTextPrivate = Struct__GtkComboBoxTextPrivate;
pub type GtkComboBoxTextClass = Struct__GtkComboBoxTextClass;
pub struct Struct__GtkComboBoxText {
    parent_instance: GtkComboBox,
    _priv: *mut GtkComboBoxTextPrivate,
}
pub struct Struct__GtkComboBoxTextClass {
    parent_class: GtkComboBoxClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkCssSectionType = c_uint;
pub static GTK_CSS_SECTION_DOCUMENT: c_uint = 0;
pub static GTK_CSS_SECTION_IMPORT: c_uint = 1;
pub static GTK_CSS_SECTION_COLOR_DEFINITION: c_uint = 2;
pub static GTK_CSS_SECTION_BINDING_SET: c_uint = 3;
pub static GTK_CSS_SECTION_RULESET: c_uint = 4;
pub static GTK_CSS_SECTION_SELECTOR: c_uint = 5;
pub static GTK_CSS_SECTION_DECLARATION: c_uint = 6;
pub static GTK_CSS_SECTION_VALUE: c_uint = 7;
pub static GTK_CSS_SECTION_KEYFRAMES: c_uint = 8;
pub type Struct__GtkCssSection = c_void;
pub type GtkCssSection = Struct__GtkCssSection;
pub type GtkCssProviderError = c_uint;
pub static GTK_CSS_PROVIDER_ERROR_FAILED: c_uint = 0;
pub static GTK_CSS_PROVIDER_ERROR_SYNTAX: c_uint = 1;
pub static GTK_CSS_PROVIDER_ERROR_IMPORT: c_uint = 2;
pub static GTK_CSS_PROVIDER_ERROR_NAME: c_uint = 3;
pub static GTK_CSS_PROVIDER_ERROR_DEPRECATED: c_uint = 4;
pub static GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE: c_uint = 5;
pub type GtkCssProvider = Struct__GtkCssProvider;
pub type GtkCssProviderClass = Struct__GtkCssProviderClass;
pub type Struct__GtkCssProviderPrivate = c_void;
pub type GtkCssProviderPrivate = Struct__GtkCssProviderPrivate;
pub struct Struct__GtkCssProvider {
    parent_instance: GObject,
    _priv: *mut GtkCssProviderPrivate,
}
pub struct Struct__GtkCssProviderClass {
    parent_class: GObjectClass,
    parsing_error: extern "C" fn
                       (arg1: *mut GtkCssProvider, arg2: *mut GtkCssSection,
                        arg3: *GError),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkDebugFlag = c_uint;
pub static GTK_DEBUG_MISC: c_uint = 1;
pub static GTK_DEBUG_PLUGSOCKET: c_uint = 2;
pub static GTK_DEBUG_TEXT: c_uint = 4;
pub static GTK_DEBUG_TREE: c_uint = 8;
pub static GTK_DEBUG_UPDATES: c_uint = 16;
pub static GTK_DEBUG_KEYBINDINGS: c_uint = 32;
pub static GTK_DEBUG_MULTIHEAD: c_uint = 64;
pub static GTK_DEBUG_MODULES: c_uint = 128;
pub static GTK_DEBUG_GEOMETRY: c_uint = 256;
pub static GTK_DEBUG_ICONTHEME: c_uint = 512;
pub static GTK_DEBUG_PRINTING: c_uint = 1024;
pub static GTK_DEBUG_BUILDER: c_uint = 2048;
pub static GTK_DEBUG_SIZE_REQUEST: c_uint = 4096;
pub static GTK_DEBUG_NO_CSS_CACHE: c_uint = 8192;
pub static GTK_DEBUG_BASELINES: c_uint = 16384;
pub static GTK_DEBUG_PIXEL_CACHE: c_uint = 32768;
pub static GTK_DEBUG_NO_PIXEL_CACHE: c_uint = 65536;
pub type GtkDrawingArea = Struct__GtkDrawingArea;
pub type GtkDrawingAreaClass = Struct__GtkDrawingAreaClass;
pub struct Struct__GtkDrawingArea {
    widget: GtkWidget,
    dummy: gpointer,
}
pub struct Struct__GtkDrawingAreaClass {
    parent_class: GtkWidgetClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkEventBox = Struct__GtkEventBox;
pub type GtkEventBoxClass = Struct__GtkEventBoxClass;
pub type Struct__GtkEventBoxPrivate = c_void;
pub type GtkEventBoxPrivate = Struct__GtkEventBoxPrivate;
pub struct Struct__GtkEventBox {
    bin: GtkBin,
    _priv: *mut GtkEventBoxPrivate,
}
pub struct Struct__GtkEventBoxClass {
    parent_class: GtkBinClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkExpander = Struct__GtkExpander;
pub type GtkExpanderClass = Struct__GtkExpanderClass;
pub type Struct__GtkExpanderPrivate = c_void;
pub type GtkExpanderPrivate = Struct__GtkExpanderPrivate;
pub struct Struct__GtkExpander {
    bin: GtkBin,
    _priv: *mut GtkExpanderPrivate,
}
pub struct Struct__GtkExpanderClass {
    parent_class: GtkBinClass,
    activate: extern "C" fn(arg1: *mut GtkExpander),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkFixed = Struct__GtkFixed;
pub type Struct__GtkFixedPrivate = c_void;
pub type GtkFixedPrivate = Struct__GtkFixedPrivate;
pub type GtkFixedClass = Struct__GtkFixedClass;
pub type GtkFixedChild = Struct__GtkFixedChild;
pub struct Struct__GtkFixed {
    container: GtkContainer,
    _priv: *mut GtkFixedPrivate,
}
pub struct Struct__GtkFixedClass {
    parent_class: GtkContainerClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub struct Struct__GtkFixedChild {
    widget: *mut GtkWidget,
    x: gint,
    y: gint,
}
pub type Struct__GtkFileFilter = c_void;
pub type GtkFileFilter = Struct__GtkFileFilter;
pub type GtkFileFilterInfo = Struct__GtkFileFilterInfo;
pub type GtkFileFilterFlags = c_uint;
pub static GTK_FILE_FILTER_FILENAME: c_uint = 1;
pub static GTK_FILE_FILTER_URI: c_uint = 2;
pub static GTK_FILE_FILTER_DISPLAY_NAME: c_uint = 4;
pub static GTK_FILE_FILTER_MIME_TYPE: c_uint = 8;
pub type GtkFileFilterFunc =
    extern "C" fn(arg1: *GtkFileFilterInfo, arg2: gpointer) -> gboolean;
pub struct Struct__GtkFileFilterInfo {
    contains: GtkFileFilterFlags,
    filename: *gchar,
    uri: *gchar,
    display_name: *gchar,
    mime_type: *gchar,
}
pub type Struct__GtkFileChooser = c_void;
pub type GtkFileChooser = Struct__GtkFileChooser;
pub type GtkFileChooserAction = c_uint;
pub static GTK_FILE_CHOOSER_ACTION_OPEN: c_uint = 0;
pub static GTK_FILE_CHOOSER_ACTION_SAVE: c_uint = 1;
pub static GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER: c_uint = 2;
pub static GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER: c_uint = 3;
pub type GtkFileChooserConfirmation = c_uint;
pub static GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM: c_uint = 0;
pub static GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME: c_uint = 1;
pub static GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN: c_uint = 2;
pub type GtkFileChooserError = c_uint;
pub static GTK_FILE_CHOOSER_ERROR_NONEXISTENT: c_uint = 0;
pub static GTK_FILE_CHOOSER_ERROR_BAD_FILENAME: c_uint = 1;
pub static GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS: c_uint = 2;
pub static GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME: c_uint = 3;
pub type GtkFileChooserButton = Struct__GtkFileChooserButton;
pub type Struct__GtkFileChooserButtonPrivate = c_void;
pub type GtkFileChooserButtonPrivate = Struct__GtkFileChooserButtonPrivate;
pub type GtkFileChooserButtonClass = Struct__GtkFileChooserButtonClass;
pub struct Struct__GtkFileChooserButton {
    parent: GtkBox,
    _priv: *mut GtkFileChooserButtonPrivate,
}
pub struct Struct__GtkFileChooserButtonClass {
    parent_class: GtkBoxClass,
    file_set: extern "C" fn(arg1: *mut GtkFileChooserButton),
    __gtk_reserved1: *mut c_void,
    __gtk_reserved2: *mut c_void,
    __gtk_reserved3: *mut c_void,
    __gtk_reserved4: *mut c_void,
}
pub type GtkFileChooserDialog = Struct__GtkFileChooserDialog;
pub type Struct__GtkFileChooserDialogPrivate = c_void;
pub type GtkFileChooserDialogPrivate = Struct__GtkFileChooserDialogPrivate;
pub type GtkFileChooserDialogClass = Struct__GtkFileChooserDialogClass;
pub struct Struct__GtkFileChooserDialog {
    parent_instance: GtkDialog,
    _priv: *mut GtkFileChooserDialogPrivate,
}
pub struct Struct__GtkFileChooserDialogClass {
    parent_class: GtkDialogClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkFileChooserWidget = Struct__GtkFileChooserWidget;
pub type Struct__GtkFileChooserWidgetPrivate = c_void;
pub type GtkFileChooserWidgetPrivate = Struct__GtkFileChooserWidgetPrivate;
pub type GtkFileChooserWidgetClass = Struct__GtkFileChooserWidgetClass;
pub struct Struct__GtkFileChooserWidget {
    parent_instance: GtkBox,
    _priv: *mut GtkFileChooserWidgetPrivate,
}
pub struct Struct__GtkFileChooserWidgetClass {
    parent_class: GtkBoxClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkFontButton = Struct__GtkFontButton;
pub type GtkFontButtonClass = Struct__GtkFontButtonClass;
pub type Struct__GtkFontButtonPrivate = c_void;
pub type GtkFontButtonPrivate = Struct__GtkFontButtonPrivate;
pub struct Struct__GtkFontButton {
    button: GtkButton,
    _priv: *mut GtkFontButtonPrivate,
}
pub struct Struct__GtkFontButtonClass {
    parent_class: GtkButtonClass,
    font_set: extern "C" fn(arg1: *mut GtkFontButton),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkFontFilterFunc =
    extern "C" fn
        (arg1: *PangoFontFamily, arg2: *PangoFontFace, arg3: gpointer)
        -> gboolean;
pub type Struct__GtkFontChooser = c_void;
pub type GtkFontChooser = Struct__GtkFontChooser;
pub type GtkFontChooserIface = Struct__GtkFontChooserIface;
pub struct Struct__GtkFontChooserIface {
    base_iface: GTypeInterface,
    get_font_family: extern "C" fn(arg1: *mut GtkFontChooser)
                         -> *mut PangoFontFamily,
    get_font_face: extern "C" fn(arg1: *mut GtkFontChooser)
                       -> *mut PangoFontFace,
    get_font_size: extern "C" fn(arg1: *mut GtkFontChooser) -> gint,
    set_filter_func: extern "C" fn
                         (arg1: *mut GtkFontChooser, arg2: GtkFontFilterFunc,
                          arg3: gpointer, arg4: GDestroyNotify),
    font_activated: extern "C" fn(arg1: *mut GtkFontChooser, arg2: *gchar),
    padding: [gpointer, ..12u],
}
pub type GtkFontChooserDialog = Struct__GtkFontChooserDialog;
pub type Struct__GtkFontChooserDialogPrivate = c_void;
pub type GtkFontChooserDialogPrivate = Struct__GtkFontChooserDialogPrivate;
pub type GtkFontChooserDialogClass = Struct__GtkFontChooserDialogClass;
pub struct Struct__GtkFontChooserDialog {
    parent_instance: GtkDialog,
    _priv: *mut GtkFontChooserDialogPrivate,
}
pub struct Struct__GtkFontChooserDialogClass {
    parent_class: GtkDialogClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkFontChooserWidget = Struct__GtkFontChooserWidget;
pub type Struct__GtkFontChooserWidgetPrivate = c_void;
pub type GtkFontChooserWidgetPrivate = Struct__GtkFontChooserWidgetPrivate;
pub type GtkFontChooserWidgetClass = Struct__GtkFontChooserWidgetClass;
pub struct Struct__GtkFontChooserWidget {
    parent_instance: GtkBox,
    _priv: *mut GtkFontChooserWidgetPrivate,
}
pub struct Struct__GtkFontChooserWidgetClass {
    parent_class: GtkBoxClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
    _gtk_reserved6: extern "C" fn(),
    _gtk_reserved7: extern "C" fn(),
    _gtk_reserved8: extern "C" fn(),
}
pub type GtkGrid = Struct__GtkGrid;
pub type Struct__GtkGridPrivate = c_void;
pub type GtkGridPrivate = Struct__GtkGridPrivate;
pub type GtkGridClass = Struct__GtkGridClass;
pub struct Struct__GtkGrid {
    container: GtkContainer,
    _priv: *mut GtkGridPrivate,
}
pub struct Struct__GtkGridClass {
    parent_class: GtkContainerClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
    _gtk_reserved6: extern "C" fn(),
    _gtk_reserved7: extern "C" fn(),
    _gtk_reserved8: extern "C" fn(),
}
pub type GtkHeaderBar = Struct__GtkHeaderBar;
pub type Struct__GtkHeaderBarPrivate = c_void;
pub type GtkHeaderBarPrivate = Struct__GtkHeaderBarPrivate;
pub type GtkHeaderBarClass = Struct__GtkHeaderBarClass;
pub struct Struct__GtkHeaderBar {
    container: GtkContainer,
}
pub struct Struct__GtkHeaderBarClass {
    parent_class: GtkContainerClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkIconFactory = Struct__GtkIconFactory;
pub type Struct__GtkIconFactoryPrivate = c_void;
pub type GtkIconFactoryPrivate = Struct__GtkIconFactoryPrivate;
pub type GtkIconFactoryClass = Struct__GtkIconFactoryClass;
pub struct Struct__GtkIconFactory {
    parent_instance: GObject,
    _priv: *mut GtkIconFactoryPrivate,
}
pub struct Struct__GtkIconFactoryClass {
    parent_class: GObjectClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkStyleProperties = Struct__GtkStyleProperties;
pub type GtkStylePropertiesClass = Struct__GtkStylePropertiesClass;
pub type Struct__GtkStylePropertiesPrivate = c_void;
pub type GtkStylePropertiesPrivate = Struct__GtkStylePropertiesPrivate;
pub type Struct__GtkSymbolicColor = c_void;
pub type GtkSymbolicColor = Struct__GtkSymbolicColor;
pub type Struct__GtkGradient = c_void;
pub type GtkGradient = Struct__GtkGradient;
pub struct Struct__GtkStyleProperties {
    parent_object: GObject,
    _priv: *mut GtkStylePropertiesPrivate,
}
pub struct Struct__GtkStylePropertiesClass {
    parent_class: GObjectClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkStylePropertyParser =
    extern "C" fn(arg1: *gchar, arg2: *mut GValue, arg3: *mut *mut GError)
        -> gboolean;
pub type GtkStyleProviderIface = Struct__GtkStyleProviderIface;
pub type Struct__GtkStyleProvider = c_void;
pub type GtkStyleProvider = Struct__GtkStyleProvider;
pub struct Struct__GtkStyleProviderIface {
    g_iface: GTypeInterface,
    get_style: extern "C" fn
                   (arg1: *mut GtkStyleProvider, arg2: *mut GtkWidgetPath)
                   -> *mut GtkStyleProperties,
    get_style_property: extern "C" fn
                            (arg1: *mut GtkStyleProvider,
                             arg2: *mut GtkWidgetPath, arg3: GtkStateFlags,
                             arg4: *mut GParamSpec, arg5: *mut GValue)
                            -> gboolean,
    get_icon_factory: extern "C" fn
                          (arg1: *mut GtkStyleProvider,
                           arg2: *mut GtkWidgetPath) -> *mut GtkIconFactory,
}
pub type GtkStyleContextClass = Struct__GtkStyleContextClass;
pub type Struct__GtkStyleContextPrivate = c_void;
pub type GtkStyleContextPrivate = Struct__GtkStyleContextPrivate;
pub struct Struct__GtkStyleContext {
    parent_object: GObject,
    _priv: *mut GtkStyleContextPrivate,
}
pub struct Struct__GtkStyleContextClass {
    parent_class: GObjectClass,
    changed: extern "C" fn(arg1: *mut GtkStyleContext),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type Struct__GtkIconInfo = c_void;
pub type GtkIconInfo = Struct__GtkIconInfo;
pub type Struct__GtkIconInfoClass = c_void;
pub type GtkIconInfoClass = Struct__GtkIconInfoClass;
pub type GtkIconTheme = Struct__GtkIconTheme;
pub type GtkIconThemeClass = Struct__GtkIconThemeClass;
pub type Struct__GtkIconThemePrivate = c_void;
pub type GtkIconThemePrivate = Struct__GtkIconThemePrivate;
pub struct Struct__GtkIconTheme {
    parent_instance: GObject,
    _priv: *mut GtkIconThemePrivate,
}
pub struct Struct__GtkIconThemeClass {
    parent_class: GObjectClass,
    changed: extern "C" fn(arg1: *mut GtkIconTheme),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkIconLookupFlags = c_uint;
pub static GTK_ICON_LOOKUP_NO_SVG: c_uint = 1;
pub static GTK_ICON_LOOKUP_FORCE_SVG: c_uint = 2;
pub static GTK_ICON_LOOKUP_USE_BUILTIN: c_uint = 4;
pub static GTK_ICON_LOOKUP_GENERIC_FALLBACK: c_uint = 8;
pub static GTK_ICON_LOOKUP_FORCE_SIZE: c_uint = 16;
pub type GtkIconThemeError = c_uint;
pub static GTK_ICON_THEME_NOT_FOUND: c_uint = 0;
pub static GTK_ICON_THEME_FAILED: c_uint = 1;
pub type GtkIconView = Struct__GtkIconView;
pub type GtkIconViewClass = Struct__GtkIconViewClass;
pub type Struct__GtkIconViewPrivate = c_void;
pub type GtkIconViewPrivate = Struct__GtkIconViewPrivate;
pub type GtkIconViewForeachFunc =
    extern "C" fn
        (arg1: *mut GtkIconView, arg2: *mut GtkTreePath, arg3: gpointer);
pub type GtkIconViewDropPosition = c_uint;
pub static GTK_ICON_VIEW_NO_DROP: c_uint = 0;
pub static GTK_ICON_VIEW_DROP_INTO: c_uint = 1;
pub static GTK_ICON_VIEW_DROP_LEFT: c_uint = 2;
pub static GTK_ICON_VIEW_DROP_RIGHT: c_uint = 3;
pub static GTK_ICON_VIEW_DROP_ABOVE: c_uint = 4;
pub static GTK_ICON_VIEW_DROP_BELOW: c_uint = 5;
pub struct Struct__GtkIconView {
    parent: GtkContainer,
    _priv: *mut GtkIconViewPrivate,
}
pub struct Struct__GtkIconViewClass {
    parent_class: GtkContainerClass,
    item_activated: extern "C" fn
                        (arg1: *mut GtkIconView, arg2: *mut GtkTreePath),
    selection_changed: extern "C" fn(arg1: *mut GtkIconView),
    select_all: extern "C" fn(arg1: *mut GtkIconView),
    unselect_all: extern "C" fn(arg1: *mut GtkIconView),
    select_cursor_item: extern "C" fn(arg1: *mut GtkIconView),
    toggle_cursor_item: extern "C" fn(arg1: *mut GtkIconView),
    move_cursor: extern "C" fn
                     (arg1: *mut GtkIconView, arg2: GtkMovementStep,
                      arg3: gint) -> gboolean,
    activate_cursor_item: extern "C" fn(arg1: *mut GtkIconView) -> gboolean,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkIMContextInfo = Struct__GtkIMContextInfo;
pub struct Struct__GtkIMContextInfo {
    context_id: *gchar,
    context_name: *gchar,
    domain: *gchar,
    domain_dirname: *gchar,
    default_locales: *gchar,
}
pub type GtkIMContextSimple = Struct__GtkIMContextSimple;
pub type Struct__GtkIMContextSimplePrivate = c_void;
pub type GtkIMContextSimplePrivate = Struct__GtkIMContextSimplePrivate;
pub type GtkIMContextSimpleClass = Struct__GtkIMContextSimpleClass;
pub struct Struct__GtkIMContextSimple {
    object: GtkIMContext,
    _priv: *mut GtkIMContextSimplePrivate,
}
pub struct Struct__GtkIMContextSimpleClass {
    parent_class: GtkIMContextClass,
}
pub type GtkIMMulticontext = Struct__GtkIMMulticontext;
pub type GtkIMMulticontextClass = Struct__GtkIMMulticontextClass;
pub type Struct__GtkIMMulticontextPrivate = c_void;
pub type GtkIMMulticontextPrivate = Struct__GtkIMMulticontextPrivate;
pub struct Struct__GtkIMMulticontext {
    object: GtkIMContext,
    _priv: *mut GtkIMMulticontextPrivate,
}
pub struct Struct__GtkIMMulticontextClass {
    parent_class: GtkIMContextClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type Struct__GtkInfoBarPrivate = c_void;
pub type GtkInfoBarPrivate = Struct__GtkInfoBarPrivate;
pub type GtkInfoBarClass = Struct__GtkInfoBarClass;
pub type GtkInfoBar = Struct__GtkInfoBar;
pub struct Struct__GtkInfoBar {
    parent: GtkBox,
    _priv: *mut GtkInfoBarPrivate,
}
pub struct Struct__GtkInfoBarClass {
    parent_class: GtkBoxClass,
    response: extern "C" fn(arg1: *mut GtkInfoBar, arg2: gint),
    close: extern "C" fn(arg1: *mut GtkInfoBar),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkInvisible = Struct__GtkInvisible;
pub type Struct__GtkInvisiblePrivate = c_void;
pub type GtkInvisiblePrivate = Struct__GtkInvisiblePrivate;
pub type GtkInvisibleClass = Struct__GtkInvisibleClass;
pub struct Struct__GtkInvisible {
    widget: GtkWidget,
    _priv: *mut GtkInvisiblePrivate,
}
pub struct Struct__GtkInvisibleClass {
    parent_class: GtkWidgetClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkLayout = Struct__GtkLayout;
pub type Struct__GtkLayoutPrivate = c_void;
pub type GtkLayoutPrivate = Struct__GtkLayoutPrivate;
pub type GtkLayoutClass = Struct__GtkLayoutClass;
pub struct Struct__GtkLayout {
    container: GtkContainer,
    _priv: *mut GtkLayoutPrivate,
}
pub struct Struct__GtkLayoutClass {
    parent_class: GtkContainerClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkLevelBarClass = Struct__GtkLevelBarClass;
pub type GtkLevelBar = Struct__GtkLevelBar;
pub type Struct__GtkLevelBarPrivate = c_void;
pub type GtkLevelBarPrivate = Struct__GtkLevelBarPrivate;
pub struct Struct__GtkLevelBar {
    parent: GtkWidget,
    _priv: *mut GtkLevelBarPrivate,
}
pub struct Struct__GtkLevelBarClass {
    parent_class: GtkWidgetClass,
    offset_changed: extern "C" fn(arg1: *mut GtkLevelBar, arg2: *gchar),
    padding: [gpointer, ..16u],
}
pub type GtkLinkButton = Struct__GtkLinkButton;
pub type GtkLinkButtonClass = Struct__GtkLinkButtonClass;
pub type Struct__GtkLinkButtonPrivate = c_void;
pub type GtkLinkButtonPrivate = Struct__GtkLinkButtonPrivate;
pub struct Struct__GtkLinkButton {
    parent_instance: GtkButton,
    _priv: *mut GtkLinkButtonPrivate,
}
pub struct Struct__GtkLinkButtonClass {
    parent_class: GtkButtonClass,
    activate_link: extern "C" fn(arg1: *mut GtkLinkButton) -> gboolean,
    _gtk_padding1: extern "C" fn(),
    _gtk_padding2: extern "C" fn(),
    _gtk_padding3: extern "C" fn(),
    _gtk_padding4: extern "C" fn(),
}
pub type GtkListBox = Struct__GtkListBox;
pub type GtkListBoxClass = Struct__GtkListBoxClass;
pub type GtkListBoxRow = Struct__GtkListBoxRow;
pub type GtkListBoxRowClass = Struct__GtkListBoxRowClass;
pub struct Struct__GtkListBox {
    parent_instance: GtkContainer,
}
pub struct Struct__GtkListBoxClass {
    parent_class: GtkContainerClass,
    row_selected: extern "C" fn
                      (arg1: *mut GtkListBox, arg2: *mut GtkListBoxRow),
    row_activated: extern "C" fn
                       (arg1: *mut GtkListBox, arg2: *mut GtkListBoxRow),
    activate_cursor_row: extern "C" fn(arg1: *mut GtkListBox),
    toggle_cursor_row: extern "C" fn(arg1: *mut GtkListBox),
    move_cursor: extern "C" fn
                     (arg1: *mut GtkListBox, arg2: GtkMovementStep,
                      arg3: gint),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
    _gtk_reserved6: extern "C" fn(),
}
pub struct Struct__GtkListBoxRow {
    parent_instance: GtkBin,
}
pub struct Struct__GtkListBoxRowClass {
    parent_class: GtkBinClass,
    activate: extern "C" fn(arg1: *mut GtkListBoxRow),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
}
pub type GtkListBoxFilterFunc =
    extern "C" fn(arg1: *mut GtkListBoxRow, arg2: gpointer) -> gboolean;
pub type GtkListBoxSortFunc =
    extern "C" fn
        (arg1: *mut GtkListBoxRow, arg2: *mut GtkListBoxRow, arg3: gpointer)
        -> gint;
pub type GtkListBoxUpdateHeaderFunc =
    extern "C" fn
        (arg1: *mut GtkListBoxRow, arg2: *mut GtkListBoxRow, arg3: gpointer);
pub type GtkLockButton = Struct__GtkLockButton;
pub type GtkLockButtonClass = Struct__GtkLockButtonClass;
pub type Struct__GtkLockButtonPrivate = c_void;
pub type GtkLockButtonPrivate = Struct__GtkLockButtonPrivate;
pub struct Struct__GtkLockButton {
    parent: GtkButton,
    _priv: *mut GtkLockButtonPrivate,
}
pub struct Struct__GtkLockButtonClass {
    parent_class: GtkButtonClass,
    reserved0: extern "C" fn(),
    reserved1: extern "C" fn(),
    reserved2: extern "C" fn(),
    reserved3: extern "C" fn(),
    reserved4: extern "C" fn(),
    reserved5: extern "C" fn(),
    reserved6: extern "C" fn(),
    reserved7: extern "C" fn(),
}
pub type GtkKeySnoopFunc =
    extern "C" fn
        (arg1: *mut GtkWidget, arg2: *mut GdkEventKey, arg3: gpointer)
        -> gint;
pub type GtkMenuBar = Struct__GtkMenuBar;
pub type Struct__GtkMenuBarPrivate = c_void;
pub type GtkMenuBarPrivate = Struct__GtkMenuBarPrivate;
pub type GtkMenuBarClass = Struct__GtkMenuBarClass;
pub struct Struct__GtkMenuBar {
    menu_shell: GtkMenuShell,
    _priv: *mut GtkMenuBarPrivate,
}
pub struct Struct__GtkMenuBarClass {
    parent_class: GtkMenuShellClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkMenuButton = Struct__GtkMenuButton;
pub type GtkMenuButtonClass = Struct__GtkMenuButtonClass;
pub type Struct__GtkMenuButtonPrivate = c_void;
pub type GtkMenuButtonPrivate = Struct__GtkMenuButtonPrivate;
pub struct Struct__GtkMenuButton {
    parent: GtkToggleButton,
    _priv: *mut GtkMenuButtonPrivate,
}
pub struct Struct__GtkMenuButtonClass {
    parent_class: GtkToggleButtonClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkSizeGroup = Struct__GtkSizeGroup;
pub type Struct__GtkSizeGroupPrivate = c_void;
pub type GtkSizeGroupPrivate = Struct__GtkSizeGroupPrivate;
pub type GtkSizeGroupClass = Struct__GtkSizeGroupClass;
pub struct Struct__GtkSizeGroup {
    parent_instance: GObject,
    _priv: *mut GtkSizeGroupPrivate,
}
pub struct Struct__GtkSizeGroupClass {
    parent_class: GObjectClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkToolItem = Struct__GtkToolItem;
pub type GtkToolItemClass = Struct__GtkToolItemClass;
pub type Struct__GtkToolItemPrivate = c_void;
pub type GtkToolItemPrivate = Struct__GtkToolItemPrivate;
pub struct Struct__GtkToolItem {
    parent: GtkBin,
    _priv: *mut GtkToolItemPrivate,
}
pub struct Struct__GtkToolItemClass {
    parent_class: GtkBinClass,
    create_menu_proxy: extern "C" fn(arg1: *mut GtkToolItem) -> gboolean,
    toolbar_reconfigured: extern "C" fn(arg1: *mut GtkToolItem),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkToolButton = Struct__GtkToolButton;
pub type GtkToolButtonClass = Struct__GtkToolButtonClass;
pub type Struct__GtkToolButtonPrivate = c_void;
pub type GtkToolButtonPrivate = Struct__GtkToolButtonPrivate;
pub struct Struct__GtkToolButton {
    parent: GtkToolItem,
    _priv: *mut GtkToolButtonPrivate,
}
pub struct Struct__GtkToolButtonClass {
    parent_class: GtkToolItemClass,
    button_type: GType,
    clicked: extern "C" fn(arg1: *mut GtkToolButton),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkMenuToolButtonClass = Struct__GtkMenuToolButtonClass;
pub type GtkMenuToolButton = Struct__GtkMenuToolButton;
pub type Struct__GtkMenuToolButtonPrivate = c_void;
pub type GtkMenuToolButtonPrivate = Struct__GtkMenuToolButtonPrivate;
pub struct Struct__GtkMenuToolButton {
    parent: GtkToolButton,
    _priv: *mut GtkMenuToolButtonPrivate,
}
pub struct Struct__GtkMenuToolButtonClass {
    parent_class: GtkToolButtonClass,
    show_menu: extern "C" fn(arg1: *mut GtkMenuToolButton),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkMessageDialog = Struct__GtkMessageDialog;
pub type Struct__GtkMessageDialogPrivate = c_void;
pub type GtkMessageDialogPrivate = Struct__GtkMessageDialogPrivate;
pub type GtkMessageDialogClass = Struct__GtkMessageDialogClass;
pub struct Struct__GtkMessageDialog {
    parent_instance: GtkDialog,
    _priv: *mut GtkMessageDialogPrivate,
}
pub struct Struct__GtkMessageDialogClass {
    parent_class: GtkDialogClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkButtonsType = c_uint;
pub static GTK_BUTTONS_NONE: c_uint = 0;
pub static GTK_BUTTONS_OK: c_uint = 1;
pub static GTK_BUTTONS_CLOSE: c_uint = 2;
pub static GTK_BUTTONS_CANCEL: c_uint = 3;
pub static GTK_BUTTONS_YES_NO: c_uint = 4;
pub static GTK_BUTTONS_OK_CANCEL: c_uint = 5;
pub type GtkModuleInitFunc =
    extern "C" fn(arg1: *mut gint, arg2: *mut *mut *mut gchar);
pub type GtkModuleDisplayInitFunc = extern "C" fn(arg1: *mut GdkDisplay);
pub type GtkMountOperation = Struct__GtkMountOperation;
pub type GtkMountOperationClass = Struct__GtkMountOperationClass;
pub type Struct__GtkMountOperationPrivate = c_void;
pub type GtkMountOperationPrivate = Struct__GtkMountOperationPrivate;
pub struct Struct__GtkMountOperation {
    parent_instance: GMountOperation,
    _priv: *mut GtkMountOperationPrivate,
}
pub struct Struct__GtkMountOperationClass {
    parent_class: GMountOperationClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkNotebookTab = c_uint;
pub static GTK_NOTEBOOK_TAB_FIRST: c_uint = 0;
pub static GTK_NOTEBOOK_TAB_LAST: c_uint = 1;
pub type GtkNotebook = Struct__GtkNotebook;
pub type Struct__GtkNotebookPrivate = c_void;
pub type GtkNotebookPrivate = Struct__GtkNotebookPrivate;
pub type GtkNotebookClass = Struct__GtkNotebookClass;
pub struct Struct__GtkNotebook {
    container: GtkContainer,
    _priv: *mut GtkNotebookPrivate,
}
pub struct Struct__GtkNotebookClass {
    parent_class: GtkContainerClass,
    switch_page: extern "C" fn
                     (arg1: *mut GtkNotebook, arg2: *mut GtkWidget,
                      arg3: guint),
    select_page: extern "C" fn(arg1: *mut GtkNotebook, arg2: gboolean)
                     -> gboolean,
    focus_tab: extern "C" fn(arg1: *mut GtkNotebook, arg2: GtkNotebookTab)
                   -> gboolean,
    change_current_page: extern "C" fn(arg1: *mut GtkNotebook, arg2: gint)
                             -> gboolean,
    move_focus_out: extern "C" fn
                        (arg1: *mut GtkNotebook, arg2: GtkDirectionType),
    reorder_tab: extern "C" fn
                     (arg1: *mut GtkNotebook, arg2: GtkDirectionType,
                      arg3: gboolean) -> gboolean,
    insert_page: extern "C" fn
                     (arg1: *mut GtkNotebook, arg2: *mut GtkWidget,
                      arg3: *mut GtkWidget, arg4: *mut GtkWidget, arg5: gint)
                     -> gint,
    create_window: extern "C" fn
                       (arg1: *mut GtkNotebook, arg2: *mut GtkWidget,
                        arg3: gint, arg4: gint) -> *mut GtkNotebook,
    page_reordered: extern "C" fn
                        (arg1: *mut GtkNotebook, arg2: *mut GtkWidget,
                         arg3: guint),
    page_removed: extern "C" fn
                      (arg1: *mut GtkNotebook, arg2: *mut GtkWidget,
                       arg3: guint),
    page_added: extern "C" fn
                    (arg1: *mut GtkNotebook, arg2: *mut GtkWidget,
                     arg3: guint),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
    _gtk_reserved6: extern "C" fn(),
    _gtk_reserved7: extern "C" fn(),
    _gtk_reserved8: extern "C" fn(),
}
pub type GtkNumerableIcon = Struct__GtkNumerableIcon;
pub type GtkNumerableIconClass = Struct__GtkNumerableIconClass;
pub type Struct__GtkNumerableIconPrivate = c_void;
pub type GtkNumerableIconPrivate = Struct__GtkNumerableIconPrivate;
pub struct Struct__GtkNumerableIcon {
    parent: GEmblemedIcon,
    _priv: *mut GtkNumerableIconPrivate,
}
pub struct Struct__GtkNumerableIconClass {
    parent_class: GEmblemedIconClass,
    padding: [gpointer, ..16u],
}
pub type GtkOffscreenWindow = Struct__GtkOffscreenWindow;
pub type GtkOffscreenWindowClass = Struct__GtkOffscreenWindowClass;
pub struct Struct__GtkOffscreenWindow {
    parent_object: GtkWindow,
}
pub struct Struct__GtkOffscreenWindowClass {
    parent_class: GtkWindowClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type Struct__GtkOrientable = c_void;
pub type GtkOrientable = Struct__GtkOrientable;
pub type GtkOrientableIface = Struct__GtkOrientableIface;
pub struct Struct__GtkOrientableIface {
    base_iface: GTypeInterface,
}
pub type GtkOverlay = Struct__GtkOverlay;
pub type GtkOverlayClass = Struct__GtkOverlayClass;
pub type Struct__GtkOverlayPrivate = c_void;
pub type GtkOverlayPrivate = Struct__GtkOverlayPrivate;
pub struct Struct__GtkOverlay {
    parent: GtkBin,
    _priv: *mut GtkOverlayPrivate,
}
pub struct Struct__GtkOverlayClass {
    parent_class: GtkBinClass,
    get_child_position: extern "C" fn
                            (arg1: *mut GtkOverlay, arg2: *mut GtkWidget,
                             arg3: *mut GtkAllocation) -> gboolean,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
    _gtk_reserved6: extern "C" fn(),
    _gtk_reserved7: extern "C" fn(),
    _gtk_reserved8: extern "C" fn(),
}
pub type Struct__GtkPaperSize = c_void;
pub type GtkPaperSize = Struct__GtkPaperSize;
pub type Struct__GtkPageSetup = c_void;
pub type GtkPageSetup = Struct__GtkPageSetup;
pub type GtkPaned = Struct__GtkPaned;
pub type GtkPanedClass = Struct__GtkPanedClass;
pub type Struct__GtkPanedPrivate = c_void;
pub type GtkPanedPrivate = Struct__GtkPanedPrivate;
pub struct Struct__GtkPaned {
    container: GtkContainer,
    _priv: *mut GtkPanedPrivate,
}
pub struct Struct__GtkPanedClass {
    parent_class: GtkContainerClass,
    cycle_child_focus: extern "C" fn(arg1: *mut GtkPaned, arg2: gboolean)
                           -> gboolean,
    toggle_handle_focus: extern "C" fn(arg1: *mut GtkPaned) -> gboolean,
    move_handle: extern "C" fn(arg1: *mut GtkPaned, arg2: GtkScrollType)
                     -> gboolean,
    cycle_handle_focus: extern "C" fn(arg1: *mut GtkPaned, arg2: gboolean)
                            -> gboolean,
    accept_position: extern "C" fn(arg1: *mut GtkPaned) -> gboolean,
    cancel_position: extern "C" fn(arg1: *mut GtkPaned) -> gboolean,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type Struct__GtkPlacesSidebar = c_void;
pub type GtkPlacesSidebar = Struct__GtkPlacesSidebar;
pub type Struct__GtkPlacesSidebarClass = c_void;
pub type GtkPlacesSidebarClass = Struct__GtkPlacesSidebarClass;
pub type GtkPlacesOpenFlags = c_uint;
pub static GTK_PLACES_OPEN_NORMAL: c_uint = 1;
pub static GTK_PLACES_OPEN_NEW_TAB: c_uint = 2;
pub static GTK_PLACES_OPEN_NEW_WINDOW: c_uint = 4;
pub type Struct__GtkPrintContext = c_void;
pub type GtkPrintContext = Struct__GtkPrintContext;
pub type Struct__GtkPrintSettings = c_void;
pub type GtkPrintSettings = Struct__GtkPrintSettings;
pub type GtkPrintSettingsFunc =
    extern "C" fn(arg1: *gchar, arg2: *gchar, arg3: gpointer);
pub type GtkPageRange = Struct__GtkPageRange;
pub struct Struct__GtkPageRange {
    start: gint,
    end: gint,
}
pub type Struct__GtkPrintOperationPreview = c_void;
pub type GtkPrintOperationPreview = Struct__GtkPrintOperationPreview;
pub type GtkPrintOperationPreviewIface =
    Struct__GtkPrintOperationPreviewIface;
pub struct Struct__GtkPrintOperationPreviewIface {
    g_iface: GTypeInterface,
    ready: extern "C" fn
               (arg1: *mut GtkPrintOperationPreview,
                arg2: *mut GtkPrintContext),
    got_page_size: extern "C" fn
                       (arg1: *mut GtkPrintOperationPreview,
                        arg2: *mut GtkPrintContext, arg3: *mut GtkPageSetup),
    render_page: extern "C" fn
                     (arg1: *mut GtkPrintOperationPreview, arg2: gint),
    is_selected: extern "C" fn
                     (arg1: *mut GtkPrintOperationPreview, arg2: gint)
                     -> gboolean,
    end_preview: extern "C" fn(arg1: *mut GtkPrintOperationPreview),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
    _gtk_reserved6: extern "C" fn(),
    _gtk_reserved7: extern "C" fn(),
    _gtk_reserved8: extern "C" fn(),
}
pub type GtkPrintOperationClass = Struct__GtkPrintOperationClass;
pub type Struct__GtkPrintOperationPrivate = c_void;
pub type GtkPrintOperationPrivate = Struct__GtkPrintOperationPrivate;
pub type GtkPrintOperation = Struct__GtkPrintOperation;
pub type GtkPrintStatus = c_uint;
pub static GTK_PRINT_STATUS_INITIAL: c_uint = 0;
pub static GTK_PRINT_STATUS_PREPARING: c_uint = 1;
pub static GTK_PRINT_STATUS_GENERATING_DATA: c_uint = 2;
pub static GTK_PRINT_STATUS_SENDING_DATA: c_uint = 3;
pub static GTK_PRINT_STATUS_PENDING: c_uint = 4;
pub static GTK_PRINT_STATUS_PENDING_ISSUE: c_uint = 5;
pub static GTK_PRINT_STATUS_PRINTING: c_uint = 6;
pub static GTK_PRINT_STATUS_FINISHED: c_uint = 7;
pub static GTK_PRINT_STATUS_FINISHED_ABORTED: c_uint = 8;
pub type GtkPrintOperationResult = c_uint;
pub static GTK_PRINT_OPERATION_RESULT_ERROR: c_uint = 0;
pub static GTK_PRINT_OPERATION_RESULT_APPLY: c_uint = 1;
pub static GTK_PRINT_OPERATION_RESULT_CANCEL: c_uint = 2;
pub static GTK_PRINT_OPERATION_RESULT_IN_PROGRESS: c_uint = 3;
pub type GtkPrintOperationAction = c_uint;
pub static GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG: c_uint = 0;
pub static GTK_PRINT_OPERATION_ACTION_PRINT: c_uint = 1;
pub static GTK_PRINT_OPERATION_ACTION_PREVIEW: c_uint = 2;
pub static GTK_PRINT_OPERATION_ACTION_EXPORT: c_uint = 3;
pub struct Struct__GtkPrintOperation {
    parent_instance: GObject,
    _priv: *mut GtkPrintOperationPrivate,
}
pub struct Struct__GtkPrintOperationClass {
    parent_class: GObjectClass,
    done: extern "C" fn
              (arg1: *mut GtkPrintOperation, arg2: GtkPrintOperationResult),
    begin_print: extern "C" fn
                     (arg1: *mut GtkPrintOperation,
                      arg2: *mut GtkPrintContext),
    paginate: extern "C" fn
                  (arg1: *mut GtkPrintOperation, arg2: *mut GtkPrintContext)
                  -> gboolean,
    request_page_setup: extern "C" fn
                            (arg1: *mut GtkPrintOperation,
                             arg2: *mut GtkPrintContext, arg3: gint,
                             arg4: *mut GtkPageSetup),
    draw_page: extern "C" fn
                   (arg1: *mut GtkPrintOperation, arg2: *mut GtkPrintContext,
                    arg3: gint),
    end_print: extern "C" fn
                   (arg1: *mut GtkPrintOperation, arg2: *mut GtkPrintContext),
    status_changed: extern "C" fn(arg1: *mut GtkPrintOperation),
    create_custom_widget: extern "C" fn(arg1: *mut GtkPrintOperation)
                              -> *mut GtkWidget,
    custom_widget_apply: extern "C" fn
                             (arg1: *mut GtkPrintOperation,
                              arg2: *mut GtkWidget),
    preview: extern "C" fn
                 (arg1: *mut GtkPrintOperation,
                  arg2: *mut GtkPrintOperationPreview,
                  arg3: *mut GtkPrintContext, arg4: *mut GtkWindow)
                 -> gboolean,
    update_custom_widget: extern "C" fn
                              (arg1: *mut GtkPrintOperation,
                               arg2: *mut GtkWidget, arg3: *mut GtkPageSetup,
                               arg4: *mut GtkPrintSettings),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
    _gtk_reserved6: extern "C" fn(),
    _gtk_reserved7: extern "C" fn(),
    _gtk_reserved8: extern "C" fn(),
}
pub type GtkPrintError = c_uint;
pub static GTK_PRINT_ERROR_GENERAL: c_uint = 0;
pub static GTK_PRINT_ERROR_INTERNAL_ERROR: c_uint = 1;
pub static GTK_PRINT_ERROR_NOMEM: c_uint = 2;
pub static GTK_PRINT_ERROR_INVALID_FILE: c_uint = 3;
pub type GtkPageSetupDoneFunc =
    extern "C" fn(arg1: *mut GtkPageSetup, arg2: gpointer);
pub type GtkProgressBar = Struct__GtkProgressBar;
pub type Struct__GtkProgressBarPrivate = c_void;
pub type GtkProgressBarPrivate = Struct__GtkProgressBarPrivate;
pub type GtkProgressBarClass = Struct__GtkProgressBarClass;
pub struct Struct__GtkProgressBar {
    parent: GtkWidget,
    _priv: *mut GtkProgressBarPrivate,
}
pub struct Struct__GtkProgressBarClass {
    parent_class: GtkWidgetClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkRadioButton = Struct__GtkRadioButton;
pub type Struct__GtkRadioButtonPrivate = c_void;
pub type GtkRadioButtonPrivate = Struct__GtkRadioButtonPrivate;
pub type GtkRadioButtonClass = Struct__GtkRadioButtonClass;
pub struct Struct__GtkRadioButton {
    check_button: GtkCheckButton,
    _priv: *mut GtkRadioButtonPrivate,
}
pub struct Struct__GtkRadioButtonClass {
    parent_class: GtkCheckButtonClass,
    group_changed: extern "C" fn(arg1: *mut GtkRadioButton),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkRadioMenuItem = Struct__GtkRadioMenuItem;
pub type Struct__GtkRadioMenuItemPrivate = c_void;
pub type GtkRadioMenuItemPrivate = Struct__GtkRadioMenuItemPrivate;
pub type GtkRadioMenuItemClass = Struct__GtkRadioMenuItemClass;
pub struct Struct__GtkRadioMenuItem {
    check_menu_item: GtkCheckMenuItem,
    _priv: *mut GtkRadioMenuItemPrivate,
}
pub struct Struct__GtkRadioMenuItemClass {
    parent_class: GtkCheckMenuItemClass,
    group_changed: extern "C" fn(arg1: *mut GtkRadioMenuItem),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkToggleToolButton = Struct__GtkToggleToolButton;
pub type GtkToggleToolButtonClass = Struct__GtkToggleToolButtonClass;
pub type Struct__GtkToggleToolButtonPrivate = c_void;
pub type GtkToggleToolButtonPrivate = Struct__GtkToggleToolButtonPrivate;
pub struct Struct__GtkToggleToolButton {
    parent: GtkToolButton,
    _priv: *mut GtkToggleToolButtonPrivate,
}
pub struct Struct__GtkToggleToolButtonClass {
    parent_class: GtkToolButtonClass,
    toggled: extern "C" fn(arg1: *mut GtkToggleToolButton),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkRadioToolButton = Struct__GtkRadioToolButton;
pub type GtkRadioToolButtonClass = Struct__GtkRadioToolButtonClass;
pub struct Struct__GtkRadioToolButton {
    parent: GtkToggleToolButton,
}
pub struct Struct__GtkRadioToolButtonClass {
    parent_class: GtkToggleToolButtonClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkRange = Struct__GtkRange;
pub type Struct__GtkRangePrivate = c_void;
pub type GtkRangePrivate = Struct__GtkRangePrivate;
pub type GtkRangeClass = Struct__GtkRangeClass;
pub struct Struct__GtkRange {
    widget: GtkWidget,
    _priv: *mut GtkRangePrivate,
}
pub struct Struct__GtkRangeClass {
    parent_class: GtkWidgetClass,
    slider_detail: *mut gchar,
    stepper_detail: *mut gchar,
    value_changed: extern "C" fn(arg1: *mut GtkRange),
    adjust_bounds: extern "C" fn(arg1: *mut GtkRange, arg2: gdouble),
    move_slider: extern "C" fn(arg1: *mut GtkRange, arg2: GtkScrollType),
    get_range_border: extern "C" fn
                          (arg1: *mut GtkRange, arg2: *mut GtkBorder),
    change_value: extern "C" fn
                      (arg1: *mut GtkRange, arg2: GtkScrollType,
                       arg3: gdouble) -> gboolean,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type Struct__GtkRecentInfo = c_void;
pub type GtkRecentInfo = Struct__GtkRecentInfo;
pub type GtkRecentData = Struct__GtkRecentData;
pub type GtkRecentManager = Struct__GtkRecentManager;
pub type GtkRecentManagerClass = Struct__GtkRecentManagerClass;
pub type Struct__GtkRecentManagerPrivate = c_void;
pub type GtkRecentManagerPrivate = Struct__GtkRecentManagerPrivate;
pub struct Struct__GtkRecentData {
    display_name: *mut gchar,
    description: *mut gchar,
    mime_type: *mut gchar,
    app_name: *mut gchar,
    app_exec: *mut gchar,
    groups: *mut *mut gchar,
    is_private: gboolean,
}
pub struct Struct__GtkRecentManager {
    parent_instance: GObject,
    _priv: *mut GtkRecentManagerPrivate,
}
pub struct Struct__GtkRecentManagerClass {
    parent_class: GObjectClass,
    changed: extern "C" fn(arg1: *mut GtkRecentManager),
    _gtk_recent1: extern "C" fn(),
    _gtk_recent2: extern "C" fn(),
    _gtk_recent3: extern "C" fn(),
    _gtk_recent4: extern "C" fn(),
}
pub type GtkRecentManagerError = c_uint;
pub static GTK_RECENT_MANAGER_ERROR_NOT_FOUND: c_uint = 0;
pub static GTK_RECENT_MANAGER_ERROR_INVALID_URI: c_uint = 1;
pub static GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING: c_uint = 2;
pub static GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED: c_uint = 3;
pub static GTK_RECENT_MANAGER_ERROR_READ: c_uint = 4;
pub static GTK_RECENT_MANAGER_ERROR_WRITE: c_uint = 5;
pub static GTK_RECENT_MANAGER_ERROR_UNKNOWN: c_uint = 6;
pub type Struct__GtkRecentFilter = c_void;
pub type GtkRecentFilter = Struct__GtkRecentFilter;
pub type GtkRecentFilterInfo = Struct__GtkRecentFilterInfo;
pub type GtkRecentFilterFlags = c_uint;
pub static GTK_RECENT_FILTER_URI: c_uint = 1;
pub static GTK_RECENT_FILTER_DISPLAY_NAME: c_uint = 2;
pub static GTK_RECENT_FILTER_MIME_TYPE: c_uint = 4;
pub static GTK_RECENT_FILTER_APPLICATION: c_uint = 8;
pub static GTK_RECENT_FILTER_GROUP: c_uint = 16;
pub static GTK_RECENT_FILTER_AGE: c_uint = 32;
pub type GtkRecentFilterFunc =
    extern "C" fn(arg1: *GtkRecentFilterInfo, arg2: gpointer) -> gboolean;
pub struct Struct__GtkRecentFilterInfo {
    contains: GtkRecentFilterFlags,
    uri: *gchar,
    display_name: *gchar,
    mime_type: *gchar,
    applications: *mut *gchar,
    groups: *mut *gchar,
    age: gint,
}
pub type GtkRecentSortType = c_uint;
pub static GTK_RECENT_SORT_NONE: c_uint = 0;
pub static GTK_RECENT_SORT_MRU: c_uint = 1;
pub static GTK_RECENT_SORT_LRU: c_uint = 2;
pub static GTK_RECENT_SORT_CUSTOM: c_uint = 3;
pub type GtkRecentSortFunc =
    extern "C" fn
        (arg1: *mut GtkRecentInfo, arg2: *mut GtkRecentInfo, arg3: gpointer)
        -> gint;
pub type Struct__GtkRecentChooser = c_void;
pub type GtkRecentChooser = Struct__GtkRecentChooser;
pub type GtkRecentChooserIface = Struct__GtkRecentChooserIface;
pub type GtkRecentChooserError = c_uint;
pub static GTK_RECENT_CHOOSER_ERROR_NOT_FOUND: c_uint = 0;
pub static GTK_RECENT_CHOOSER_ERROR_INVALID_URI: c_uint = 1;
pub struct Struct__GtkRecentChooserIface {
    base_iface: GTypeInterface,
    set_current_uri: extern "C" fn
                         (arg1: *mut GtkRecentChooser, arg2: *gchar,
                          arg3: *mut *mut GError) -> gboolean,
    get_current_uri: extern "C" fn(arg1: *mut GtkRecentChooser) -> *mut gchar,
    select_uri: extern "C" fn
                    (arg1: *mut GtkRecentChooser, arg2: *gchar,
                     arg3: *mut *mut GError) -> gboolean,
    unselect_uri: extern "C" fn(arg1: *mut GtkRecentChooser, arg2: *gchar),
    select_all: extern "C" fn(arg1: *mut GtkRecentChooser),
    unselect_all: extern "C" fn(arg1: *mut GtkRecentChooser),
    get_items: extern "C" fn(arg1: *mut GtkRecentChooser) -> *mut GList,
    get_recent_manager: extern "C" fn(arg1: *mut GtkRecentChooser)
                            -> *mut GtkRecentManager,
    add_filter: extern "C" fn
                    (arg1: *mut GtkRecentChooser, arg2: *mut GtkRecentFilter),
    remove_filter: extern "C" fn
                       (arg1: *mut GtkRecentChooser,
                        arg2: *mut GtkRecentFilter),
    list_filters: extern "C" fn(arg1: *mut GtkRecentChooser) -> *mut GSList,
    set_sort_func: extern "C" fn
                       (arg1: *mut GtkRecentChooser, arg2: GtkRecentSortFunc,
                        arg3: gpointer, arg4: GDestroyNotify),
    item_activated: extern "C" fn(arg1: *mut GtkRecentChooser),
    selection_changed: extern "C" fn(arg1: *mut GtkRecentChooser),
}
pub type GtkRecentChooserDialog = Struct__GtkRecentChooserDialog;
pub type GtkRecentChooserDialogClass = Struct__GtkRecentChooserDialogClass;
pub type Struct__GtkRecentChooserDialogPrivate = c_void;
pub type GtkRecentChooserDialogPrivate =
    Struct__GtkRecentChooserDialogPrivate;
pub struct Struct__GtkRecentChooserDialog {
    parent_instance: GtkDialog,
    _priv: *mut GtkRecentChooserDialogPrivate,
}
pub struct Struct__GtkRecentChooserDialogClass {
    parent_class: GtkDialogClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkRecentChooserMenu = Struct__GtkRecentChooserMenu;
pub type GtkRecentChooserMenuClass = Struct__GtkRecentChooserMenuClass;
pub type Struct__GtkRecentChooserMenuPrivate = c_void;
pub type GtkRecentChooserMenuPrivate = Struct__GtkRecentChooserMenuPrivate;
pub struct Struct__GtkRecentChooserMenu {
    parent_instance: GtkMenu,
    _priv: *mut GtkRecentChooserMenuPrivate,
}
pub struct Struct__GtkRecentChooserMenuClass {
    parent_class: GtkMenuClass,
    gtk_recent1: extern "C" fn(),
    gtk_recent2: extern "C" fn(),
    gtk_recent3: extern "C" fn(),
    gtk_recent4: extern "C" fn(),
}
pub type GtkRecentChooserWidget = Struct__GtkRecentChooserWidget;
pub type GtkRecentChooserWidgetClass = Struct__GtkRecentChooserWidgetClass;
pub type Struct__GtkRecentChooserWidgetPrivate = c_void;
pub type GtkRecentChooserWidgetPrivate =
    Struct__GtkRecentChooserWidgetPrivate;
pub struct Struct__GtkRecentChooserWidget {
    parent_instance: GtkBox,
    _priv: *mut GtkRecentChooserWidgetPrivate,
}
pub struct Struct__GtkRecentChooserWidgetClass {
    parent_class: GtkBoxClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkRevealer = Struct__GtkRevealer;
pub type GtkRevealerClass = Struct__GtkRevealerClass;
pub type GtkRevealerTransitionType = c_uint;
pub static GTK_REVEALER_TRANSITION_TYPE_NONE: c_uint = 0;
pub static GTK_REVEALER_TRANSITION_TYPE_CROSSFADE: c_uint = 1;
pub static GTK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT: c_uint = 2;
pub static GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT: c_uint = 3;
pub static GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP: c_uint = 4;
pub static GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN: c_uint = 5;
pub struct Struct__GtkRevealer {
    parent_instance: GtkBin,
}
pub struct Struct__GtkRevealerClass {
    parent_class: GtkBinClass,
}
pub type GtkScale = Struct__GtkScale;
pub type Struct__GtkScalePrivate = c_void;
pub type GtkScalePrivate = Struct__GtkScalePrivate;
pub type GtkScaleClass = Struct__GtkScaleClass;
pub struct Struct__GtkScale {
    range: GtkRange,
    _priv: *mut GtkScalePrivate,
}
pub struct Struct__GtkScaleClass {
    parent_class: GtkRangeClass,
    format_value: extern "C" fn(arg1: *mut GtkScale, arg2: gdouble)
                      -> *mut gchar,
    draw_value: extern "C" fn(arg1: *mut GtkScale),
    get_layout_offsets: extern "C" fn
                            (arg1: *mut GtkScale, arg2: *mut gint,
                             arg3: *mut gint),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkScaleButton = Struct__GtkScaleButton;
pub type GtkScaleButtonClass = Struct__GtkScaleButtonClass;
pub type Struct__GtkScaleButtonPrivate = c_void;
pub type GtkScaleButtonPrivate = Struct__GtkScaleButtonPrivate;
pub struct Struct__GtkScaleButton {
    parent: GtkButton,
    _priv: *mut GtkScaleButtonPrivate,
}
pub struct Struct__GtkScaleButtonClass {
    parent_class: GtkButtonClass,
    value_changed: extern "C" fn(arg1: *mut GtkScaleButton, arg2: gdouble),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type Struct__GtkScrollable = c_void;
pub type GtkScrollable = Struct__GtkScrollable;
pub type GtkScrollableInterface = Struct__GtkScrollableInterface;
pub struct Struct__GtkScrollableInterface {
    base_iface: GTypeInterface,
}
pub type GtkScrollbar = Struct__GtkScrollbar;
pub type GtkScrollbarClass = Struct__GtkScrollbarClass;
pub struct Struct__GtkScrollbar {
    range: GtkRange,
}
pub struct Struct__GtkScrollbarClass {
    parent_class: GtkRangeClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkScrolledWindow = Struct__GtkScrolledWindow;
pub type Struct__GtkScrolledWindowPrivate = c_void;
pub type GtkScrolledWindowPrivate = Struct__GtkScrolledWindowPrivate;
pub type GtkScrolledWindowClass = Struct__GtkScrolledWindowClass;
pub struct Struct__GtkScrolledWindow {
    container: GtkBin,
    _priv: *mut GtkScrolledWindowPrivate,
}
pub struct Struct__GtkScrolledWindowClass {
    parent_class: GtkBinClass,
    scrollbar_spacing: gint,
    scroll_child: extern "C" fn
                      (arg1: *mut GtkScrolledWindow, arg2: GtkScrollType,
                       arg3: gboolean) -> gboolean,
    move_focus_out: extern "C" fn
                        (arg1: *mut GtkScrolledWindow,
                         arg2: GtkDirectionType),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkSearchBar = Struct__GtkSearchBar;
pub type GtkSearchBarClass = Struct__GtkSearchBarClass;
pub struct Struct__GtkSearchBar {
    parent: GtkBin,
}
pub struct Struct__GtkSearchBarClass {
    parent_class: GtkBinClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkSearchEntry = Struct__GtkSearchEntry;
pub type GtkSearchEntryClass = Struct__GtkSearchEntryClass;
pub struct Struct__GtkSearchEntry {
    parent: GtkEntry,
}
pub struct Struct__GtkSearchEntryClass {
    parent_class: GtkEntryClass,
    search_changed: extern "C" fn(arg1: *mut GtkSearchEntry),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
}
pub type GtkSeparator = Struct__GtkSeparator;
pub type Struct__GtkSeparatorPrivate = c_void;
pub type GtkSeparatorPrivate = Struct__GtkSeparatorPrivate;
pub type GtkSeparatorClass = Struct__GtkSeparatorClass;
pub struct Struct__GtkSeparator {
    widget: GtkWidget,
    _priv: *mut GtkSeparatorPrivate,
}
pub struct Struct__GtkSeparatorClass {
    parent_class: GtkWidgetClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkSeparatorMenuItem = Struct__GtkSeparatorMenuItem;
pub type GtkSeparatorMenuItemClass = Struct__GtkSeparatorMenuItemClass;
pub struct Struct__GtkSeparatorMenuItem {
    menu_item: GtkMenuItem,
}
pub struct Struct__GtkSeparatorMenuItemClass {
    parent_class: GtkMenuItemClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkSeparatorToolItem = Struct__GtkSeparatorToolItem;
pub type GtkSeparatorToolItemClass = Struct__GtkSeparatorToolItemClass;
pub type Struct__GtkSeparatorToolItemPrivate = c_void;
pub type GtkSeparatorToolItemPrivate = Struct__GtkSeparatorToolItemPrivate;
pub struct Struct__GtkSeparatorToolItem {
    parent: GtkToolItem,
    _priv: *mut GtkSeparatorToolItemPrivate,
}
pub struct Struct__GtkSeparatorToolItemClass {
    parent_class: GtkToolItemClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type Struct__GtkSettingsPrivate = c_void;
pub type GtkSettingsPrivate = Struct__GtkSettingsPrivate;
pub type GtkSettingsClass = Struct__GtkSettingsClass;
pub type GtkSettingsValue = Struct__GtkSettingsValue;
pub struct Struct__GtkSettings {
    parent_instance: GObject,
    _priv: *mut GtkSettingsPrivate,
}
pub struct Struct__GtkSettingsClass {
    parent_class: GObjectClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub struct Struct__GtkSettingsValue {
    origin: *mut gchar,
    value: GValue,
}
pub type GtkRequestedSize = Struct__GtkRequestedSize;
pub struct Struct__GtkRequestedSize {
    data: gpointer,
    minimum_size: gint,
    natural_size: gint,
}
pub type GtkSpinButtonUpdatePolicy = c_uint;
pub static GTK_UPDATE_ALWAYS: c_uint = 0;
pub static GTK_UPDATE_IF_VALID: c_uint = 1;
pub type GtkSpinType = c_uint;
pub static GTK_SPIN_STEP_FORWARD: c_uint = 0;
pub static GTK_SPIN_STEP_BACKWARD: c_uint = 1;
pub static GTK_SPIN_PAGE_FORWARD: c_uint = 2;
pub static GTK_SPIN_PAGE_BACKWARD: c_uint = 3;
pub static GTK_SPIN_HOME: c_uint = 4;
pub static GTK_SPIN_END: c_uint = 5;
pub static GTK_SPIN_USER_DEFINED: c_uint = 6;
pub type GtkSpinButton = Struct__GtkSpinButton;
pub type Struct__GtkSpinButtonPrivate = c_void;
pub type GtkSpinButtonPrivate = Struct__GtkSpinButtonPrivate;
pub type GtkSpinButtonClass = Struct__GtkSpinButtonClass;
pub struct Struct__GtkSpinButton {
    entry: GtkEntry,
    _priv: *mut GtkSpinButtonPrivate,
}
pub struct Struct__GtkSpinButtonClass {
    parent_class: GtkEntryClass,
    input: extern "C" fn(arg1: *mut GtkSpinButton, arg2: *mut gdouble)
               -> gint,
    output: extern "C" fn(arg1: *mut GtkSpinButton) -> gint,
    value_changed: extern "C" fn(arg1: *mut GtkSpinButton),
    change_value: extern "C" fn
                      (arg1: *mut GtkSpinButton, arg2: GtkScrollType),
    wrapped: extern "C" fn(arg1: *mut GtkSpinButton),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkSpinner = Struct__GtkSpinner;
pub type GtkSpinnerClass = Struct__GtkSpinnerClass;
pub type Struct__GtkSpinnerPrivate = c_void;
pub type GtkSpinnerPrivate = Struct__GtkSpinnerPrivate;
pub struct Struct__GtkSpinner {
    parent: GtkWidget,
    _priv: *mut GtkSpinnerPrivate,
}
pub struct Struct__GtkSpinnerClass {
    parent_class: GtkWidgetClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkStack = Struct__GtkStack;
pub type GtkStackClass = Struct__GtkStackClass;
pub type GtkStackTransitionType = c_uint;
pub static GTK_STACK_TRANSITION_TYPE_NONE: c_uint = 0;
pub static GTK_STACK_TRANSITION_TYPE_CROSSFADE: c_uint = 1;
pub static GTK_STACK_TRANSITION_TYPE_SLIDE_RIGHT: c_uint = 2;
pub static GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT: c_uint = 3;
pub static GTK_STACK_TRANSITION_TYPE_SLIDE_UP: c_uint = 4;
pub static GTK_STACK_TRANSITION_TYPE_SLIDE_DOWN: c_uint = 5;
pub static GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT: c_uint = 6;
pub static GTK_STACK_TRANSITION_TYPE_SLIDE_UP_DOWN: c_uint = 7;
pub struct Struct__GtkStack {
    parent_instance: GtkContainer,
}
pub struct Struct__GtkStackClass {
    parent_class: GtkContainerClass,
}
pub type GtkStackSwitcher = Struct__GtkStackSwitcher;
pub type GtkStackSwitcherClass = Struct__GtkStackSwitcherClass;
pub struct Struct__GtkStackSwitcher {
    widget: GtkBox,
}
pub struct Struct__GtkStackSwitcherClass {
    parent_class: GtkBoxClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkStatusbar = Struct__GtkStatusbar;
pub type Struct__GtkStatusbarPrivate = c_void;
pub type GtkStatusbarPrivate = Struct__GtkStatusbarPrivate;
pub type GtkStatusbarClass = Struct__GtkStatusbarClass;
pub struct Struct__GtkStatusbar {
    parent_widget: GtkBox,
    _priv: *mut GtkStatusbarPrivate,
}
pub struct Struct__GtkStatusbarClass {
    parent_class: GtkBoxClass,
    reserved: gpointer,
    text_pushed: extern "C" fn
                     (arg1: *mut GtkStatusbar, arg2: guint, arg3: *gchar),
    text_popped: extern "C" fn
                     (arg1: *mut GtkStatusbar, arg2: guint, arg3: *gchar),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkStatusIcon = Struct__GtkStatusIcon;
pub type GtkStatusIconClass = Struct__GtkStatusIconClass;
pub type Struct__GtkStatusIconPrivate = c_void;
pub type GtkStatusIconPrivate = Struct__GtkStatusIconPrivate;
pub struct Struct__GtkStatusIcon {
    parent_instance: GObject,
    _priv: *mut GtkStatusIconPrivate,
}
pub struct Struct__GtkStatusIconClass {
    parent_class: GObjectClass,
    activate: extern "C" fn(arg1: *mut GtkStatusIcon),
    popup_menu: extern "C" fn
                    (arg1: *mut GtkStatusIcon, arg2: guint, arg3: guint32),
    size_changed: extern "C" fn(arg1: *mut GtkStatusIcon, arg2: gint)
                      -> gboolean,
    button_press_event: extern "C" fn
                            (arg1: *mut GtkStatusIcon,
                             arg2: *mut GdkEventButton) -> gboolean,
    button_release_event: extern "C" fn
                              (arg1: *mut GtkStatusIcon,
                               arg2: *mut GdkEventButton) -> gboolean,
    scroll_event: extern "C" fn
                      (arg1: *mut GtkStatusIcon, arg2: *mut GdkEventScroll)
                      -> gboolean,
    query_tooltip: extern "C" fn
                       (arg1: *mut GtkStatusIcon, arg2: gint, arg3: gint,
                        arg4: gboolean, arg5: *mut GtkTooltip) -> gboolean,
    __gtk_reserved1: *mut c_void,
    __gtk_reserved2: *mut c_void,
    __gtk_reserved3: *mut c_void,
    __gtk_reserved4: *mut c_void,
}
pub type GtkSwitch = Struct__GtkSwitch;
pub type Struct__GtkSwitchPrivate = c_void;
pub type GtkSwitchPrivate = Struct__GtkSwitchPrivate;
pub type GtkSwitchClass = Struct__GtkSwitchClass;
pub struct Struct__GtkSwitch {
    parent_instance: GtkWidget,
    _priv: *mut GtkSwitchPrivate,
}
pub struct Struct__GtkSwitchClass {
    parent_class: GtkWidgetClass,
    activate: extern "C" fn(arg1: *mut GtkSwitch),
    _switch_padding_1: extern "C" fn(),
    _switch_padding_2: extern "C" fn(),
    _switch_padding_3: extern "C" fn(),
    _switch_padding_4: extern "C" fn(),
    _switch_padding_5: extern "C" fn(),
    _switch_padding_6: extern "C" fn(),
}
pub type GtkTextTagTableForeach =
    extern "C" fn(arg1: *mut GtkTextTag, arg2: gpointer);
pub type Struct__GtkTextTagTablePrivate = c_void;
pub type GtkTextTagTablePrivate = Struct__GtkTextTagTablePrivate;
pub type GtkTextTagTableClass = Struct__GtkTextTagTableClass;
pub struct Struct__GtkTextTagTable {
    parent_instance: GObject,
    _priv: *mut GtkTextTagTablePrivate,
}
pub struct Struct__GtkTextTagTableClass {
    parent_class: GObjectClass,
    tag_changed: extern "C" fn
                     (arg1: *mut GtkTextTagTable, arg2: *mut GtkTextTag,
                      arg3: gboolean),
    tag_added: extern "C" fn
                   (arg1: *mut GtkTextTagTable, arg2: *mut GtkTextTag),
    tag_removed: extern "C" fn
                     (arg1: *mut GtkTextTagTable, arg2: *mut GtkTextTag),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkTextMark = Struct__GtkTextMark;
pub type GtkTextMarkClass = Struct__GtkTextMarkClass;
pub struct Struct__GtkTextMark {
    parent_instance: GObject,
    segment: gpointer,
}
pub struct Struct__GtkTextMarkClass {
    parent_class: GObjectClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkTextBufferTargetInfo = c_int;
pub static GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS: c_int = -1;
pub static GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT: c_int = -2;
pub static GTK_TEXT_BUFFER_TARGET_INFO_TEXT: c_int = -3;
pub type Struct__GtkTextBTree = c_void;
pub type GtkTextBTree = Struct__GtkTextBTree;
pub type Struct__GtkTextBufferPrivate = c_void;
pub type GtkTextBufferPrivate = Struct__GtkTextBufferPrivate;
pub type GtkTextBufferClass = Struct__GtkTextBufferClass;
pub struct Struct__GtkTextBuffer {
    parent_instance: GObject,
    _priv: *mut GtkTextBufferPrivate,
}
pub struct Struct__GtkTextBufferClass {
    parent_class: GObjectClass,
    insert_text: extern "C" fn
                     (arg1: *mut GtkTextBuffer, arg2: *mut GtkTextIter,
                      arg3: *gchar, arg4: gint),
    insert_pixbuf: extern "C" fn
                       (arg1: *mut GtkTextBuffer, arg2: *mut GtkTextIter,
                        arg3: *mut GdkPixbuf),
    insert_child_anchor: extern "C" fn
                             (arg1: *mut GtkTextBuffer,
                              arg2: *mut GtkTextIter,
                              arg3: *mut GtkTextChildAnchor),
    delete_range: extern "C" fn
                      (arg1: *mut GtkTextBuffer, arg2: *mut GtkTextIter,
                       arg3: *mut GtkTextIter),
    changed: extern "C" fn(arg1: *mut GtkTextBuffer),
    modified_changed: extern "C" fn(arg1: *mut GtkTextBuffer),
    mark_set: extern "C" fn
                  (arg1: *mut GtkTextBuffer, arg2: *GtkTextIter,
                   arg3: *mut GtkTextMark),
    mark_deleted: extern "C" fn
                      (arg1: *mut GtkTextBuffer, arg2: *mut GtkTextMark),
    apply_tag: extern "C" fn
                   (arg1: *mut GtkTextBuffer, arg2: *mut GtkTextTag,
                    arg3: *GtkTextIter, arg4: *GtkTextIter),
    remove_tag: extern "C" fn
                    (arg1: *mut GtkTextBuffer, arg2: *mut GtkTextTag,
                     arg3: *GtkTextIter, arg4: *GtkTextIter),
    begin_user_action: extern "C" fn(arg1: *mut GtkTextBuffer),
    end_user_action: extern "C" fn(arg1: *mut GtkTextBuffer),
    paste_done: extern "C" fn
                    (arg1: *mut GtkTextBuffer, arg2: *mut GtkClipboard),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkTextBufferSerializeFunc =
    extern "C" fn
        (arg1: *mut GtkTextBuffer, arg2: *mut GtkTextBuffer,
         arg3: *GtkTextIter, arg4: *GtkTextIter, arg5: *mut gsize,
         arg6: gpointer) -> *mut guint8;
pub type GtkTextBufferDeserializeFunc =
    extern "C" fn
        (arg1: *mut GtkTextBuffer, arg2: *mut GtkTextBuffer,
         arg3: *mut GtkTextIter, arg4: *guint8, arg5: gsize, arg6: gboolean,
         arg7: gpointer, arg8: *mut *mut GError) -> gboolean;
pub type GtkTextWindowType = c_uint;
pub static GTK_TEXT_WINDOW_PRIVATE: c_uint = 0;
pub static GTK_TEXT_WINDOW_WIDGET: c_uint = 1;
pub static GTK_TEXT_WINDOW_TEXT: c_uint = 2;
pub static GTK_TEXT_WINDOW_LEFT: c_uint = 3;
pub static GTK_TEXT_WINDOW_RIGHT: c_uint = 4;
pub static GTK_TEXT_WINDOW_TOP: c_uint = 5;
pub static GTK_TEXT_WINDOW_BOTTOM: c_uint = 6;
pub type GtkTextView = Struct__GtkTextView;
pub type Struct__GtkTextViewPrivate = c_void;
pub type GtkTextViewPrivate = Struct__GtkTextViewPrivate;
pub type GtkTextViewClass = Struct__GtkTextViewClass;
pub struct Struct__GtkTextView {
    parent_instance: GtkContainer,
    _priv: *mut GtkTextViewPrivate,
}
pub struct Struct__GtkTextViewClass {
    parent_class: GtkContainerClass,
    populate_popup: extern "C" fn
                        (arg1: *mut GtkTextView, arg2: *mut GtkWidget),
    move_cursor: extern "C" fn
                     (arg1: *mut GtkTextView, arg2: GtkMovementStep,
                      arg3: gint, arg4: gboolean),
    set_anchor: extern "C" fn(arg1: *mut GtkTextView),
    insert_at_cursor: extern "C" fn(arg1: *mut GtkTextView, arg2: *gchar),
    delete_from_cursor: extern "C" fn
                            (arg1: *mut GtkTextView, arg2: GtkDeleteType,
                             arg3: gint),
    backspace: extern "C" fn(arg1: *mut GtkTextView),
    cut_clipboard: extern "C" fn(arg1: *mut GtkTextView),
    copy_clipboard: extern "C" fn(arg1: *mut GtkTextView),
    paste_clipboard: extern "C" fn(arg1: *mut GtkTextView),
    toggle_overwrite: extern "C" fn(arg1: *mut GtkTextView),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
    _gtk_reserved6: extern "C" fn(),
    _gtk_reserved7: extern "C" fn(),
    _gtk_reserved8: extern "C" fn(),
}
pub type GtkThemingEngine = Struct__GtkThemingEngine;
pub type Struct_GtkThemingEnginePrivate = c_void;
pub type GtkThemingEnginePrivate = Struct_GtkThemingEnginePrivate;
pub type GtkThemingEngineClass = Struct__GtkThemingEngineClass;
pub struct Struct__GtkThemingEngine {
    parent_object: GObject,
    _priv: *mut GtkThemingEnginePrivate,
}
pub struct Struct__GtkThemingEngineClass {
    parent_class: GObjectClass,
    render_line: extern "C" fn
                     (arg1: *mut GtkThemingEngine, arg2: *mut cairo_t,
                      arg3: gdouble, arg4: gdouble, arg5: gdouble,
                      arg6: gdouble),
    render_background: extern "C" fn
                           (arg1: *mut GtkThemingEngine, arg2: *mut cairo_t,
                            arg3: gdouble, arg4: gdouble, arg5: gdouble,
                            arg6: gdouble),
    render_frame: extern "C" fn
                      (arg1: *mut GtkThemingEngine, arg2: *mut cairo_t,
                       arg3: gdouble, arg4: gdouble, arg5: gdouble,
                       arg6: gdouble),
    render_frame_gap: extern "C" fn
                          (arg1: *mut GtkThemingEngine, arg2: *mut cairo_t,
                           arg3: gdouble, arg4: gdouble, arg5: gdouble,
                           arg6: gdouble, arg7: GtkPositionType,
                           arg8: gdouble, arg9: gdouble),
    render_extension: extern "C" fn
                          (arg1: *mut GtkThemingEngine, arg2: *mut cairo_t,
                           arg3: gdouble, arg4: gdouble, arg5: gdouble,
                           arg6: gdouble, arg7: GtkPositionType),
    render_check: extern "C" fn
                      (arg1: *mut GtkThemingEngine, arg2: *mut cairo_t,
                       arg3: gdouble, arg4: gdouble, arg5: gdouble,
                       arg6: gdouble),
    render_option: extern "C" fn
                       (arg1: *mut GtkThemingEngine, arg2: *mut cairo_t,
                        arg3: gdouble, arg4: gdouble, arg5: gdouble,
                        arg6: gdouble),
    render_arrow: extern "C" fn
                      (arg1: *mut GtkThemingEngine, arg2: *mut cairo_t,
                       arg3: gdouble, arg4: gdouble, arg5: gdouble,
                       arg6: gdouble),
    render_expander: extern "C" fn
                         (arg1: *mut GtkThemingEngine, arg2: *mut cairo_t,
                          arg3: gdouble, arg4: gdouble, arg5: gdouble,
                          arg6: gdouble),
    render_focus: extern "C" fn
                      (arg1: *mut GtkThemingEngine, arg2: *mut cairo_t,
                       arg3: gdouble, arg4: gdouble, arg5: gdouble,
                       arg6: gdouble),
    render_layout: extern "C" fn
                       (arg1: *mut GtkThemingEngine, arg2: *mut cairo_t,
                        arg3: gdouble, arg4: gdouble, arg5: *mut PangoLayout),
    render_slider: extern "C" fn
                       (arg1: *mut GtkThemingEngine, arg2: *mut cairo_t,
                        arg3: gdouble, arg4: gdouble, arg5: gdouble,
                        arg6: gdouble, arg7: GtkOrientation),
    render_handle: extern "C" fn
                       (arg1: *mut GtkThemingEngine, arg2: *mut cairo_t,
                        arg3: gdouble, arg4: gdouble, arg5: gdouble,
                        arg6: gdouble),
    render_activity: extern "C" fn
                         (arg1: *mut GtkThemingEngine, arg2: *mut cairo_t,
                          arg3: gdouble, arg4: gdouble, arg5: gdouble,
                          arg6: gdouble),
    render_icon_pixbuf: extern "C" fn
                            (arg1: *mut GtkThemingEngine,
                             arg2: *GtkIconSource, arg3: GtkIconSize)
                            -> *mut GdkPixbuf,
    render_icon: extern "C" fn
                     (arg1: *mut GtkThemingEngine, arg2: *mut cairo_t,
                      arg3: *mut GdkPixbuf, arg4: gdouble, arg5: gdouble),
    render_icon_surface: extern "C" fn
                             (arg1: *mut GtkThemingEngine, arg2: *mut cairo_t,
                              arg3: *mut cairo_surface_t, arg4: gdouble,
                              arg5: gdouble),
    padding: [gpointer, ..14u],
}
pub type GtkToolbarSpaceStyle = c_uint;
pub static GTK_TOOLBAR_SPACE_EMPTY: c_uint = 0;
pub static GTK_TOOLBAR_SPACE_LINE: c_uint = 1;
pub type GtkToolbar = Struct__GtkToolbar;
pub type Struct__GtkToolbarPrivate = c_void;
pub type GtkToolbarPrivate = Struct__GtkToolbarPrivate;
pub type GtkToolbarClass = Struct__GtkToolbarClass;
pub struct Struct__GtkToolbar {
    container: GtkContainer,
    _priv: *mut GtkToolbarPrivate,
}
pub struct Struct__GtkToolbarClass {
    parent_class: GtkContainerClass,
    orientation_changed: extern "C" fn
                             (arg1: *mut GtkToolbar, arg2: GtkOrientation),
    style_changed: extern "C" fn
                       (arg1: *mut GtkToolbar, arg2: GtkToolbarStyle),
    popup_context_menu: extern "C" fn
                            (arg1: *mut GtkToolbar, arg2: gint, arg3: gint,
                             arg4: gint) -> gboolean,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkToolItemGroup = Struct__GtkToolItemGroup;
pub type GtkToolItemGroupClass = Struct__GtkToolItemGroupClass;
pub type Struct__GtkToolItemGroupPrivate = c_void;
pub type GtkToolItemGroupPrivate = Struct__GtkToolItemGroupPrivate;
pub struct Struct__GtkToolItemGroup {
    parent_instance: GtkContainer,
    _priv: *mut GtkToolItemGroupPrivate,
}
pub struct Struct__GtkToolItemGroupClass {
    parent_class: GtkContainerClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkToolPalette = Struct__GtkToolPalette;
pub type GtkToolPaletteClass = Struct__GtkToolPaletteClass;
pub type Struct__GtkToolPalettePrivate = c_void;
pub type GtkToolPalettePrivate = Struct__GtkToolPalettePrivate;
pub type GtkToolPaletteDragTargets = c_uint;
pub static GTK_TOOL_PALETTE_DRAG_ITEMS: c_uint = 1;
pub static GTK_TOOL_PALETTE_DRAG_GROUPS: c_uint = 2;
pub struct Struct__GtkToolPalette {
    parent_instance: GtkContainer,
    _priv: *mut GtkToolPalettePrivate,
}
pub struct Struct__GtkToolPaletteClass {
    parent_class: GtkContainerClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type Struct__GtkToolShell = c_void;
pub type GtkToolShell = Struct__GtkToolShell;
pub type GtkToolShellIface = Struct__GtkToolShellIface;
pub struct Struct__GtkToolShellIface {
    g_iface: GTypeInterface,
    get_icon_size: extern "C" fn(arg1: *mut GtkToolShell) -> GtkIconSize,
    get_orientation: extern "C" fn(arg1: *mut GtkToolShell) -> GtkOrientation,
    get_style: extern "C" fn(arg1: *mut GtkToolShell) -> GtkToolbarStyle,
    get_relief_style: extern "C" fn(arg1: *mut GtkToolShell)
                          -> GtkReliefStyle,
    rebuild_menu: extern "C" fn(arg1: *mut GtkToolShell),
    get_text_orientation: extern "C" fn(arg1: *mut GtkToolShell)
                              -> GtkOrientation,
    get_text_alignment: extern "C" fn(arg1: *mut GtkToolShell) -> gfloat,
    get_ellipsize_mode: extern "C" fn(arg1: *mut GtkToolShell)
                            -> PangoEllipsizeMode,
    get_text_size_group: extern "C" fn(arg1: *mut GtkToolShell)
                             -> *mut GtkSizeGroup,
}
pub type Struct__GtkTreeDragSource = c_void;
pub type GtkTreeDragSource = Struct__GtkTreeDragSource;
pub type GtkTreeDragSourceIface = Struct__GtkTreeDragSourceIface;
pub struct Struct__GtkTreeDragSourceIface {
    g_iface: GTypeInterface,
    row_draggable: extern "C" fn
                       (arg1: *mut GtkTreeDragSource, arg2: *mut GtkTreePath)
                       -> gboolean,
    drag_data_get: extern "C" fn
                       (arg1: *mut GtkTreeDragSource, arg2: *mut GtkTreePath,
                        arg3: *mut GtkSelectionData) -> gboolean,
    drag_data_delete: extern "C" fn
                          (arg1: *mut GtkTreeDragSource,
                           arg2: *mut GtkTreePath) -> gboolean,
}
pub type Struct__GtkTreeDragDest = c_void;
pub type GtkTreeDragDest = Struct__GtkTreeDragDest;
pub type GtkTreeDragDestIface = Struct__GtkTreeDragDestIface;
pub struct Struct__GtkTreeDragDestIface {
    g_iface: GTypeInterface,
    drag_data_received: extern "C" fn
                            (arg1: *mut GtkTreeDragDest,
                             arg2: *mut GtkTreePath,
                             arg3: *mut GtkSelectionData) -> gboolean,
    row_drop_possible: extern "C" fn
                           (arg1: *mut GtkTreeDragDest,
                            arg2: *mut GtkTreePath,
                            arg3: *mut GtkSelectionData) -> gboolean,
}
pub type GtkTreeModelSort = Struct__GtkTreeModelSort;
pub type GtkTreeModelSortClass = Struct__GtkTreeModelSortClass;
pub type Struct__GtkTreeModelSortPrivate = c_void;
pub type GtkTreeModelSortPrivate = Struct__GtkTreeModelSortPrivate;
pub struct Struct__GtkTreeModelSort {
    parent: GObject,
    _priv: *mut GtkTreeModelSortPrivate,
}
pub struct Struct__GtkTreeModelSortClass {
    parent_class: GObjectClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type Struct__GtkTreeSelectionPrivate = c_void;
pub type GtkTreeSelectionPrivate = Struct__GtkTreeSelectionPrivate;
pub type GtkTreeSelectionFunc =
    extern "C" fn
        (arg1: *mut GtkTreeSelection, arg2: *mut GtkTreeModel,
         arg3: *mut GtkTreePath, arg4: gboolean, arg5: gpointer) -> gboolean;
pub type GtkTreeSelectionForeachFunc =
    extern "C" fn
        (arg1: *mut GtkTreeModel, arg2: *mut GtkTreePath,
         arg3: *mut GtkTreeIter, arg4: gpointer);
pub struct Struct__GtkTreeSelection {
    parent: GObject,
    _priv: *mut GtkTreeSelectionPrivate,
}
pub struct Struct__GtkTreeSelectionClass {
    parent_class: GObjectClass,
    changed: extern "C" fn(arg1: *mut GtkTreeSelection),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkTreeStore = Struct__GtkTreeStore;
pub type GtkTreeStoreClass = Struct__GtkTreeStoreClass;
pub type Struct__GtkTreeStorePrivate = c_void;
pub type GtkTreeStorePrivate = Struct__GtkTreeStorePrivate;
pub struct Struct__GtkTreeStore {
    parent: GObject,
    _priv: *mut GtkTreeStorePrivate,
}
pub struct Struct__GtkTreeStoreClass {
    parent_class: GObjectClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkViewport = Struct__GtkViewport;
pub type Struct__GtkViewportPrivate = c_void;
pub type GtkViewportPrivate = Struct__GtkViewportPrivate;
pub type GtkViewportClass = Struct__GtkViewportClass;
pub struct Struct__GtkViewport {
    bin: GtkBin,
    _priv: *mut GtkViewportPrivate,
}
pub struct Struct__GtkViewportClass {
    parent_class: GtkBinClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkVolumeButton = Struct__GtkVolumeButton;
pub type GtkVolumeButtonClass = Struct__GtkVolumeButtonClass;
pub struct Struct__GtkVolumeButton {
    parent: GtkScaleButton,
}
pub struct Struct__GtkVolumeButtonClass {
    parent_class: GtkScaleButtonClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkAction = Struct__GtkAction;
pub type GtkActionClass = Struct__GtkActionClass;
pub type Struct__GtkActionPrivate = c_void;
pub type GtkActionPrivate = Struct__GtkActionPrivate;
pub struct Struct__GtkAction {
    object: GObject,
    private_data: *mut GtkActionPrivate,
}
pub struct Struct__GtkActionClass {
    parent_class: GObjectClass,
    activate: extern "C" fn(arg1: *mut GtkAction),
    menu_item_type: GType,
    toolbar_item_type: GType,
    create_menu_item: extern "C" fn(arg1: *mut GtkAction) -> *mut GtkWidget,
    create_tool_item: extern "C" fn(arg1: *mut GtkAction) -> *mut GtkWidget,
    connect_proxy: extern "C" fn(arg1: *mut GtkAction, arg2: *mut GtkWidget),
    disconnect_proxy: extern "C" fn
                          (arg1: *mut GtkAction, arg2: *mut GtkWidget),
    create_menu: extern "C" fn(arg1: *mut GtkAction) -> *mut GtkWidget,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type Struct__GtkActivatable = c_void;
pub type GtkActivatable = Struct__GtkActivatable;
pub type GtkActivatableIface = Struct__GtkActivatableIface;
pub struct Struct__GtkActivatableIface {
    g_iface: GTypeInterface,
    update: extern "C" fn
                (arg1: *mut GtkActivatable, arg2: *mut GtkAction,
                 arg3: *gchar),
    sync_action_properties: extern "C" fn
                                (arg1: *mut GtkActivatable,
                                 arg2: *mut GtkAction),
}
pub type GtkTranslateFunc =
    extern "C" fn(arg1: *gchar, arg2: gpointer) -> *mut gchar;
pub type GtkStockItem = Struct__GtkStockItem;
pub struct Struct__GtkStockItem {
    stock_id: *mut gchar,
    label: *mut gchar,
    modifier: GdkModifierType,
    keyval: guint,
    translation_domain: *mut gchar,
}
pub type GtkStock = *mut c_schar;
pub type GtkActionGroup = Struct__GtkActionGroup;
pub type Struct__GtkActionGroupPrivate = c_void;
pub type GtkActionGroupPrivate = Struct__GtkActionGroupPrivate;
pub type GtkActionGroupClass = Struct__GtkActionGroupClass;
pub type GtkActionEntry = Struct__GtkActionEntry;
pub type GtkToggleActionEntry = Struct__GtkToggleActionEntry;
pub type GtkRadioActionEntry = Struct__GtkRadioActionEntry;
pub struct Struct__GtkActionGroup {
    parent: GObject,
    _priv: *mut GtkActionGroupPrivate,
}
pub struct Struct__GtkActionGroupClass {
    parent_class: GObjectClass,
    get_action: extern "C" fn(arg1: *mut GtkActionGroup, arg2: *gchar)
                    -> *mut GtkAction,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub struct Struct__GtkActionEntry {
    name: *gchar,
    stock_id: *gchar,
    label: *gchar,
    accelerator: *gchar,
    tooltip: *gchar,
    callback: GCallback,
}
pub struct Struct__GtkToggleActionEntry {
    name: *gchar,
    stock_id: *gchar,
    label: *gchar,
    accelerator: *gchar,
    tooltip: *gchar,
    callback: GCallback,
    is_active: gboolean,
}
pub struct Struct__GtkRadioActionEntry {
    name: *gchar,
    stock_id: *gchar,
    label: *gchar,
    accelerator: *gchar,
    tooltip: *gchar,
    value: gint,
}
pub type GtkColorSelection = Struct__GtkColorSelection;
pub type Struct__GtkColorSelectionPrivate = c_void;
pub type GtkColorSelectionPrivate = Struct__GtkColorSelectionPrivate;
pub type GtkColorSelectionClass = Struct__GtkColorSelectionClass;
pub type GtkColorSelectionChangePaletteFunc =
    extern "C" fn(arg1: *GdkColor, arg2: gint);
pub type GtkColorSelectionChangePaletteWithScreenFunc =
    extern "C" fn(arg1: *mut GdkScreen, arg2: *GdkColor, arg3: gint);
pub struct Struct__GtkColorSelection {
    parent_instance: GtkBox,
    private_data: *mut GtkColorSelectionPrivate,
}
pub struct Struct__GtkColorSelectionClass {
    parent_class: GtkBoxClass,
    color_changed: extern "C" fn(arg1: *mut GtkColorSelection),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkColorSelectionDialog = Struct__GtkColorSelectionDialog;
pub type Struct__GtkColorSelectionDialogPrivate = c_void;
pub type GtkColorSelectionDialogPrivate =
    Struct__GtkColorSelectionDialogPrivate;
pub type GtkColorSelectionDialogClass = Struct__GtkColorSelectionDialogClass;
pub struct Struct__GtkColorSelectionDialog {
    parent_instance: GtkDialog,
    _priv: *mut GtkColorSelectionDialogPrivate,
}
pub struct Struct__GtkColorSelectionDialogClass {
    parent_class: GtkDialogClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkFontSelection = Struct__GtkFontSelection;
pub type Struct__GtkFontSelectionPrivate = c_void;
pub type GtkFontSelectionPrivate = Struct__GtkFontSelectionPrivate;
pub type GtkFontSelectionClass = Struct__GtkFontSelectionClass;
pub type GtkFontSelectionDialog = Struct__GtkFontSelectionDialog;
pub type Struct__GtkFontSelectionDialogPrivate = c_void;
pub type GtkFontSelectionDialogPrivate =
    Struct__GtkFontSelectionDialogPrivate;
pub type GtkFontSelectionDialogClass = Struct__GtkFontSelectionDialogClass;
pub struct Struct__GtkFontSelection {
    parent_instance: GtkBox,
    _priv: *mut GtkFontSelectionPrivate,
}
pub struct Struct__GtkFontSelectionClass {
    parent_class: GtkBoxClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub struct Struct__GtkFontSelectionDialog {
    parent_instance: GtkDialog,
    _priv: *mut GtkFontSelectionDialogPrivate,
}
pub struct Struct__GtkFontSelectionDialogClass {
    parent_class: GtkDialogClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkHandleBox = Struct__GtkHandleBox;
pub type Struct__GtkHandleBoxPrivate = c_void;
pub type GtkHandleBoxPrivate = Struct__GtkHandleBoxPrivate;
pub type GtkHandleBoxClass = Struct__GtkHandleBoxClass;
pub struct Struct__GtkHandleBox {
    bin: GtkBin,
    _priv: *mut GtkHandleBoxPrivate,
}
pub struct Struct__GtkHandleBoxClass {
    parent_class: GtkBinClass,
    child_attached: extern "C" fn
                        (arg1: *mut GtkHandleBox, arg2: *mut GtkWidget),
    child_detached: extern "C" fn
                        (arg1: *mut GtkHandleBox, arg2: *mut GtkWidget),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkHButtonBox = Struct__GtkHButtonBox;
pub type GtkHButtonBoxClass = Struct__GtkHButtonBoxClass;
pub struct Struct__GtkHButtonBox {
    button_box: GtkButtonBox,
}
pub struct Struct__GtkHButtonBoxClass {
    parent_class: GtkButtonBoxClass,
}
pub type GtkHBox = Struct__GtkHBox;
pub type GtkHBoxClass = Struct__GtkHBoxClass;
pub struct Struct__GtkHBox {
    box: GtkBox,
}
pub struct Struct__GtkHBoxClass {
    parent_class: GtkBoxClass,
}
pub type GtkHPaned = Struct__GtkHPaned;
pub type GtkHPanedClass = Struct__GtkHPanedClass;
pub struct Struct__GtkHPaned {
    paned: GtkPaned,
}
pub struct Struct__GtkHPanedClass {
    parent_class: GtkPanedClass,
}
pub type GtkHSV = Struct__GtkHSV;
pub type Struct__GtkHSVPrivate = c_void;
pub type GtkHSVPrivate = Struct__GtkHSVPrivate;
pub type GtkHSVClass = Struct__GtkHSVClass;
pub struct Struct__GtkHSV {
    parent_instance: GtkWidget,
    _priv: *mut GtkHSVPrivate,
}
pub struct Struct__GtkHSVClass {
    parent_class: GtkWidgetClass,
    changed: extern "C" fn(arg1: *mut GtkHSV),
    move: extern "C" fn(arg1: *mut GtkHSV, arg2: GtkDirectionType),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkHScale = Struct__GtkHScale;
pub type GtkHScaleClass = Struct__GtkHScaleClass;
pub struct Struct__GtkHScale {
    scale: GtkScale,
}
pub struct Struct__GtkHScaleClass {
    parent_class: GtkScaleClass,
}
pub type GtkHScrollbar = Struct__GtkHScrollbar;
pub type GtkHScrollbarClass = Struct__GtkHScrollbarClass;
pub struct Struct__GtkHScrollbar {
    scrollbar: GtkScrollbar,
}
pub struct Struct__GtkHScrollbarClass {
    parent_class: GtkScrollbarClass,
}
pub type GtkHSeparator = Struct__GtkHSeparator;
pub type GtkHSeparatorClass = Struct__GtkHSeparatorClass;
pub struct Struct__GtkHSeparator {
    separator: GtkSeparator,
}
pub struct Struct__GtkHSeparatorClass {
    parent_class: GtkSeparatorClass,
}
pub type GtkImageMenuItem = Struct__GtkImageMenuItem;
pub type Struct__GtkImageMenuItemPrivate = c_void;
pub type GtkImageMenuItemPrivate = Struct__GtkImageMenuItemPrivate;
pub type GtkImageMenuItemClass = Struct__GtkImageMenuItemClass;
pub struct Struct__GtkImageMenuItem {
    menu_item: GtkMenuItem,
    _priv: *mut GtkImageMenuItemPrivate,
}
pub struct Struct__GtkImageMenuItemClass {
    parent_class: GtkMenuItemClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkToggleAction = Struct__GtkToggleAction;
pub type Struct__GtkToggleActionPrivate = c_void;
pub type GtkToggleActionPrivate = Struct__GtkToggleActionPrivate;
pub type GtkToggleActionClass = Struct__GtkToggleActionClass;
pub struct Struct__GtkToggleAction {
    parent: GtkAction,
    private_data: *mut GtkToggleActionPrivate,
}
pub struct Struct__GtkToggleActionClass {
    parent_class: GtkActionClass,
    toggled: extern "C" fn(arg1: *mut GtkToggleAction),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkRadioAction = Struct__GtkRadioAction;
pub type Struct__GtkRadioActionPrivate = c_void;
pub type GtkRadioActionPrivate = Struct__GtkRadioActionPrivate;
pub type GtkRadioActionClass = Struct__GtkRadioActionClass;
pub struct Struct__GtkRadioAction {
    parent: GtkToggleAction,
    private_data: *mut GtkRadioActionPrivate,
}
pub struct Struct__GtkRadioActionClass {
    parent_class: GtkToggleActionClass,
    changed: extern "C" fn
                 (arg1: *mut GtkRadioAction, arg2: *mut GtkRadioAction),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type Struct__GtkRcContext = c_void;
pub type GtkRcContext = Struct__GtkRcContext;
pub type GtkRcStyleClass = Struct__GtkRcStyleClass;
pub type GtkRcFlags = c_uint;
pub static GTK_RC_FG: c_uint = 1;
pub static GTK_RC_BG: c_uint = 2;
pub static GTK_RC_TEXT: c_uint = 4;
pub static GTK_RC_BASE: c_uint = 8;
pub struct Struct__GtkRcStyle {
    parent_instance: GObject,
    name: *mut gchar,
    bg_pixmap_name: [*mut gchar, ..5u],
    font_desc: *mut PangoFontDescription,
    color_flags: [GtkRcFlags, ..5u],
    fg: [GdkColor, ..5u],
    bg: [GdkColor, ..5u],
    text: [GdkColor, ..5u],
    base: [GdkColor, ..5u],
    xthickness: gint,
    ythickness: gint,
    rc_properties: *mut GArray,
    rc_style_lists: *mut GSList,
    icon_factories: *mut GSList,
    engine_specified: guint,
}
pub struct Struct__GtkRcStyleClass {
    parent_class: GObjectClass,
    create_rc_style: extern "C" fn(arg1: *mut GtkRcStyle) -> *mut GtkRcStyle,
    parse: extern "C" fn
               (arg1: *mut GtkRcStyle, arg2: *mut GtkSettings,
                arg3: *mut GScanner) -> guint,
    merge: extern "C" fn(arg1: *mut GtkRcStyle, arg2: *mut GtkRcStyle),
    create_style: extern "C" fn(arg1: *mut GtkRcStyle) -> *mut GtkStyle,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkRcTokenType = c_uint;
pub static GTK_RC_TOKEN_INVALID: c_uint = 270;
pub static GTK_RC_TOKEN_INCLUDE: c_uint = 271;
pub static GTK_RC_TOKEN_NORMAL: c_uint = 272;
pub static GTK_RC_TOKEN_ACTIVE: c_uint = 273;
pub static GTK_RC_TOKEN_PRELIGHT: c_uint = 274;
pub static GTK_RC_TOKEN_SELECTED: c_uint = 275;
pub static GTK_RC_TOKEN_INSENSITIVE: c_uint = 276;
pub static GTK_RC_TOKEN_FG: c_uint = 277;
pub static GTK_RC_TOKEN_BG: c_uint = 278;
pub static GTK_RC_TOKEN_TEXT: c_uint = 279;
pub static GTK_RC_TOKEN_BASE: c_uint = 280;
pub static GTK_RC_TOKEN_XTHICKNESS: c_uint = 281;
pub static GTK_RC_TOKEN_YTHICKNESS: c_uint = 282;
pub static GTK_RC_TOKEN_FONT: c_uint = 283;
pub static GTK_RC_TOKEN_FONTSET: c_uint = 284;
pub static GTK_RC_TOKEN_FONT_NAME: c_uint = 285;
pub static GTK_RC_TOKEN_BG_PIXMAP: c_uint = 286;
pub static GTK_RC_TOKEN_PIXMAP_PATH: c_uint = 287;
pub static GTK_RC_TOKEN_STYLE: c_uint = 288;
pub static GTK_RC_TOKEN_BINDING: c_uint = 289;
pub static GTK_RC_TOKEN_BIND: c_uint = 290;
pub static GTK_RC_TOKEN_WIDGET: c_uint = 291;
pub static GTK_RC_TOKEN_WIDGET_CLASS: c_uint = 292;
pub static GTK_RC_TOKEN_CLASS: c_uint = 293;
pub static GTK_RC_TOKEN_LOWEST: c_uint = 294;
pub static GTK_RC_TOKEN_GTK: c_uint = 295;
pub static GTK_RC_TOKEN_APPLICATION: c_uint = 296;
pub static GTK_RC_TOKEN_THEME: c_uint = 297;
pub static GTK_RC_TOKEN_RC: c_uint = 298;
pub static GTK_RC_TOKEN_HIGHEST: c_uint = 299;
pub static GTK_RC_TOKEN_ENGINE: c_uint = 300;
pub static GTK_RC_TOKEN_MODULE_PATH: c_uint = 301;
pub static GTK_RC_TOKEN_IM_MODULE_PATH: c_uint = 302;
pub static GTK_RC_TOKEN_IM_MODULE_FILE: c_uint = 303;
pub static GTK_RC_TOKEN_STOCK: c_uint = 304;
pub static GTK_RC_TOKEN_LTR: c_uint = 305;
pub static GTK_RC_TOKEN_RTL: c_uint = 306;
pub static GTK_RC_TOKEN_COLOR: c_uint = 307;
pub static GTK_RC_TOKEN_UNBIND: c_uint = 308;
pub static GTK_RC_TOKEN_LAST: c_uint = 309;
pub struct Struct__GtkRcProperty {
    type_name: GQuark,
    property_name: GQuark,
    origin: *mut gchar,
    value: GValue,
}
pub type GtkRecentAction = Struct__GtkRecentAction;
pub type Struct__GtkRecentActionPrivate = c_void;
pub type GtkRecentActionPrivate = Struct__GtkRecentActionPrivate;
pub type GtkRecentActionClass = Struct__GtkRecentActionClass;
pub struct Struct__GtkRecentAction {
    parent_instance: GtkAction,
    _priv: *mut GtkRecentActionPrivate,
}
pub struct Struct__GtkRecentActionClass {
    parent_class: GtkActionClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkStyleClass = Struct__GtkStyleClass;
pub type Struct__GtkThemeEngine = c_void;
pub type GtkThemeEngine = Struct__GtkThemeEngine;
pub type GtkRcProperty = Struct__GtkRcProperty;
pub struct Struct__GtkStyle {
    parent_instance: GObject,
    fg: [GdkColor, ..5u],
    bg: [GdkColor, ..5u],
    light: [GdkColor, ..5u],
    dark: [GdkColor, ..5u],
    mid: [GdkColor, ..5u],
    text: [GdkColor, ..5u],
    base: [GdkColor, ..5u],
    text_aa: [GdkColor, ..5u],
    black: GdkColor,
    white: GdkColor,
    font_desc: *mut PangoFontDescription,
    xthickness: gint,
    ythickness: gint,
    background: [*mut cairo_pattern_t, ..5u],
    attach_count: gint,
    visual: *mut GdkVisual,
    private_font_desc: *mut PangoFontDescription,
    rc_style: *mut GtkRcStyle,
    styles: *mut GSList,
    property_cache: *mut GArray,
    icon_factories: *mut GSList,
}
pub struct Struct__GtkStyleClass {
    parent_class: GObjectClass,
    realize: extern "C" fn(arg1: *mut GtkStyle),
    unrealize: extern "C" fn(arg1: *mut GtkStyle),
    copy: extern "C" fn(arg1: *mut GtkStyle, arg2: *mut GtkStyle),
    clone: extern "C" fn(arg1: *mut GtkStyle) -> *mut GtkStyle,
    init_from_rc: extern "C" fn(arg1: *mut GtkStyle, arg2: *mut GtkRcStyle),
    set_background: extern "C" fn
                        (arg1: *mut GtkStyle, arg2: *mut GdkWindow,
                         arg3: GtkStateType),
    render_icon: extern "C" fn
                     (arg1: *mut GtkStyle, arg2: *GtkIconSource,
                      arg3: GtkTextDirection, arg4: GtkStateType,
                      arg5: GtkIconSize, arg6: *mut GtkWidget, arg7: *gchar)
                     -> *mut GdkPixbuf,
    draw_hline: extern "C" fn
                    (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                     arg3: GtkStateType, arg4: *mut GtkWidget, arg5: *gchar,
                     arg6: gint, arg7: gint, arg8: gint),
    draw_vline: extern "C" fn
                    (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                     arg3: GtkStateType, arg4: *mut GtkWidget, arg5: *gchar,
                     arg6: gint, arg7: gint, arg8: gint),
    draw_shadow: extern "C" fn
                     (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                      arg3: GtkStateType, arg4: GtkShadowType,
                      arg5: *mut GtkWidget, arg6: *gchar, arg7: gint,
                      arg8: gint, arg9: gint, arg10: gint),
    draw_arrow: extern "C" fn
                    (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                     arg3: GtkStateType, arg4: GtkShadowType,
                     arg5: *mut GtkWidget, arg6: *gchar, arg7: GtkArrowType,
                     arg8: gboolean, arg9: gint, arg10: gint, arg11: gint,
                     arg12: gint),
    draw_diamond: extern "C" fn
                      (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                       arg3: GtkStateType, arg4: GtkShadowType,
                       arg5: *mut GtkWidget, arg6: *gchar, arg7: gint,
                       arg8: gint, arg9: gint, arg10: gint),
    draw_box: extern "C" fn
                  (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                   arg3: GtkStateType, arg4: GtkShadowType,
                   arg5: *mut GtkWidget, arg6: *gchar, arg7: gint, arg8: gint,
                   arg9: gint, arg10: gint),
    draw_flat_box: extern "C" fn
                       (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                        arg3: GtkStateType, arg4: GtkShadowType,
                        arg5: *mut GtkWidget, arg6: *gchar, arg7: gint,
                        arg8: gint, arg9: gint, arg10: gint),
    draw_check: extern "C" fn
                    (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                     arg3: GtkStateType, arg4: GtkShadowType,
                     arg5: *mut GtkWidget, arg6: *gchar, arg7: gint,
                     arg8: gint, arg9: gint, arg10: gint),
    draw_option: extern "C" fn
                     (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                      arg3: GtkStateType, arg4: GtkShadowType,
                      arg5: *mut GtkWidget, arg6: *gchar, arg7: gint,
                      arg8: gint, arg9: gint, arg10: gint),
    draw_tab: extern "C" fn
                  (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                   arg3: GtkStateType, arg4: GtkShadowType,
                   arg5: *mut GtkWidget, arg6: *gchar, arg7: gint, arg8: gint,
                   arg9: gint, arg10: gint),
    draw_shadow_gap: extern "C" fn
                         (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                          arg3: GtkStateType, arg4: GtkShadowType,
                          arg5: *mut GtkWidget, arg6: *gchar, arg7: gint,
                          arg8: gint, arg9: gint, arg10: gint,
                          arg11: GtkPositionType, arg12: gint, arg13: gint),
    draw_box_gap: extern "C" fn
                      (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                       arg3: GtkStateType, arg4: GtkShadowType,
                       arg5: *mut GtkWidget, arg6: *gchar, arg7: gint,
                       arg8: gint, arg9: gint, arg10: gint,
                       arg11: GtkPositionType, arg12: gint, arg13: gint),
    draw_extension: extern "C" fn
                        (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                         arg3: GtkStateType, arg4: GtkShadowType,
                         arg5: *mut GtkWidget, arg6: *gchar, arg7: gint,
                         arg8: gint, arg9: gint, arg10: gint,
                         arg11: GtkPositionType),
    draw_focus: extern "C" fn
                    (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                     arg3: GtkStateType, arg4: *mut GtkWidget, arg5: *gchar,
                     arg6: gint, arg7: gint, arg8: gint, arg9: gint),
    draw_slider: extern "C" fn
                     (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                      arg3: GtkStateType, arg4: GtkShadowType,
                      arg5: *mut GtkWidget, arg6: *gchar, arg7: gint,
                      arg8: gint, arg9: gint, arg10: gint,
                      arg11: GtkOrientation),
    draw_handle: extern "C" fn
                     (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                      arg3: GtkStateType, arg4: GtkShadowType,
                      arg5: *mut GtkWidget, arg6: *gchar, arg7: gint,
                      arg8: gint, arg9: gint, arg10: gint,
                      arg11: GtkOrientation),
    draw_expander: extern "C" fn
                       (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                        arg3: GtkStateType, arg4: *mut GtkWidget,
                        arg5: *gchar, arg6: gint, arg7: gint,
                        arg8: GtkExpanderStyle),
    draw_layout: extern "C" fn
                     (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                      arg3: GtkStateType, arg4: gboolean,
                      arg5: *mut GtkWidget, arg6: *gchar, arg7: gint,
                      arg8: gint, arg9: *mut PangoLayout),
    draw_resize_grip: extern "C" fn
                          (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                           arg3: GtkStateType, arg4: *mut GtkWidget,
                           arg5: *gchar, arg6: GdkWindowEdge, arg7: gint,
                           arg8: gint, arg9: gint, arg10: gint),
    draw_spinner: extern "C" fn
                      (arg1: *mut GtkStyle, arg2: *mut cairo_t,
                       arg3: GtkStateType, arg4: *mut GtkWidget, arg5: *gchar,
                       arg6: guint, arg7: gint, arg8: gint, arg9: gint,
                       arg10: gint),
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
    _gtk_reserved5: extern "C" fn(),
    _gtk_reserved6: extern "C" fn(),
    _gtk_reserved7: extern "C" fn(),
    _gtk_reserved8: extern "C" fn(),
    _gtk_reserved9: extern "C" fn(),
    _gtk_reserved10: extern "C" fn(),
    _gtk_reserved11: extern "C" fn(),
}
pub type GtkTable = Struct__GtkTable;
pub type Struct__GtkTablePrivate = c_void;
pub type GtkTablePrivate = Struct__GtkTablePrivate;
pub type GtkTableClass = Struct__GtkTableClass;
pub type GtkTableChild = Struct__GtkTableChild;
pub type GtkTableRowCol = Struct__GtkTableRowCol;
pub struct Struct__GtkTable {
    container: GtkContainer,
    _priv: *mut GtkTablePrivate,
}
pub struct Struct__GtkTableClass {
    parent_class: GtkContainerClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub struct Struct__GtkTableChild {
    widget: *mut GtkWidget,
    left_attach: guint16,
    right_attach: guint16,
    top_attach: guint16,
    bottom_attach: guint16,
    xpadding: guint16,
    ypadding: guint16,
    xexpand: guint,
    yexpand: guint,
    xshrink: guint,
    yshrink: guint,
    xfill: guint,
    yfill: guint,
}
pub struct Struct__GtkTableRowCol {
    requisition: guint16,
    allocation: guint16,
    spacing: guint16,
    need_expand: guint,
    need_shrink: guint,
    expand: guint,
    shrink: guint,
    empty: guint,
}
pub type GtkTearoffMenuItem = Struct__GtkTearoffMenuItem;
pub type Struct__GtkTearoffMenuItemPrivate = c_void;
pub type GtkTearoffMenuItemPrivate = Struct__GtkTearoffMenuItemPrivate;
pub type GtkTearoffMenuItemClass = Struct__GtkTearoffMenuItemClass;
pub struct Struct__GtkTearoffMenuItem {
    menu_item: GtkMenuItem,
    _priv: *mut GtkTearoffMenuItemPrivate,
}
pub struct Struct__GtkTearoffMenuItemClass {
    parent_class: GtkMenuItemClass,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkUIManager = Struct__GtkUIManager;
pub type GtkUIManagerClass = Struct__GtkUIManagerClass;
pub type Struct__GtkUIManagerPrivate = c_void;
pub type GtkUIManagerPrivate = Struct__GtkUIManagerPrivate;
pub struct Struct__GtkUIManager {
    parent: GObject,
    private_data: *mut GtkUIManagerPrivate,
}
pub struct Struct__GtkUIManagerClass {
    parent_class: GObjectClass,
    add_widget: extern "C" fn(arg1: *mut GtkUIManager, arg2: *mut GtkWidget),
    actions_changed: extern "C" fn(arg1: *mut GtkUIManager),
    connect_proxy: extern "C" fn
                       (arg1: *mut GtkUIManager, arg2: *mut GtkAction,
                        arg3: *mut GtkWidget),
    disconnect_proxy: extern "C" fn
                          (arg1: *mut GtkUIManager, arg2: *mut GtkAction,
                           arg3: *mut GtkWidget),
    pre_activate: extern "C" fn
                      (arg1: *mut GtkUIManager, arg2: *mut GtkAction),
    post_activate: extern "C" fn
                       (arg1: *mut GtkUIManager, arg2: *mut GtkAction),
    get_widget: extern "C" fn(arg1: *mut GtkUIManager, arg2: *gchar)
                    -> *mut GtkWidget,
    get_action: extern "C" fn(arg1: *mut GtkUIManager, arg2: *gchar)
                    -> *mut GtkAction,
    _gtk_reserved1: extern "C" fn(),
    _gtk_reserved2: extern "C" fn(),
    _gtk_reserved3: extern "C" fn(),
    _gtk_reserved4: extern "C" fn(),
}
pub type GtkUIManagerItemType = c_uint;
pub static GTK_UI_MANAGER_AUTO: c_uint = 0;
pub static GTK_UI_MANAGER_MENUBAR: c_uint = 1;
pub static GTK_UI_MANAGER_MENU: c_uint = 2;
pub static GTK_UI_MANAGER_TOOLBAR: c_uint = 4;
pub static GTK_UI_MANAGER_PLACEHOLDER: c_uint = 8;
pub static GTK_UI_MANAGER_POPUP: c_uint = 16;
pub static GTK_UI_MANAGER_MENUITEM: c_uint = 32;
pub static GTK_UI_MANAGER_TOOLITEM: c_uint = 64;
pub static GTK_UI_MANAGER_SEPARATOR: c_uint = 128;
pub static GTK_UI_MANAGER_ACCELERATOR: c_uint = 256;
pub static GTK_UI_MANAGER_POPUP_WITH_ACCELS: c_uint = 512;
pub type GtkVButtonBox = Struct__GtkVButtonBox;
pub type GtkVButtonBoxClass = Struct__GtkVButtonBoxClass;
pub struct Struct__GtkVButtonBox {
    button_box: GtkButtonBox,
}
pub struct Struct__GtkVButtonBoxClass {
    parent_class: GtkButtonBoxClass,
}
pub type GtkVBox = Struct__GtkVBox;
pub type GtkVBoxClass = Struct__GtkVBoxClass;
pub struct Struct__GtkVBox {
    box: GtkBox,
}
pub struct Struct__GtkVBoxClass {
    parent_class: GtkBoxClass,
}
pub type GtkVPaned = Struct__GtkVPaned;
pub type GtkVPanedClass = Struct__GtkVPanedClass;
pub struct Struct__GtkVPaned {
    paned: GtkPaned,
}
pub struct Struct__GtkVPanedClass {
    parent_class: GtkPanedClass,
}
pub type GtkVScale = Struct__GtkVScale;
pub type GtkVScaleClass = Struct__GtkVScaleClass;
pub struct Struct__GtkVScale {
    scale: GtkScale,
}
pub struct Struct__GtkVScaleClass {
    parent_class: GtkScaleClass,
}
pub type GtkVScrollbar = Struct__GtkVScrollbar;
pub type GtkVScrollbarClass = Struct__GtkVScrollbarClass;
pub struct Struct__GtkVScrollbar {
    scrollbar: GtkScrollbar,
}
pub struct Struct__GtkVScrollbarClass {
    parent_class: GtkScrollbarClass,
}
pub type GtkVSeparator = Struct__GtkVSeparator;
pub type GtkVSeparatorClass = Struct__GtkVSeparatorClass;
pub struct Struct__GtkVSeparator {
    separator: GtkSeparator,
}
pub struct Struct__GtkVSeparatorClass {
    parent_class: GtkSeparatorClass,
}
pub type GstElement = Struct__GstElement;
pub type GstElementClass = Struct__GstElementClass;
pub type GstState = c_uint;
pub static GST_STATE_VOID_PENDING: c_uint = 0;
pub static GST_STATE_NULL: c_uint = 1;
pub static GST_STATE_READY: c_uint = 2;
pub static GST_STATE_PAUSED: c_uint = 3;
pub static GST_STATE_PLAYING: c_uint = 4;
pub type GstObjectFlags = c_uint;
pub static GST_OBJECT_FLAG_LAST: c_uint = 16;
pub type GstObject = Struct__GstObject;
pub type GstObjectClass = Struct__GstObjectClass;
pub struct Struct__GstObject {
    object: GInitiallyUnowned,
    lock: GMutex,
    name: *mut gchar,
    parent: *mut GstObject,
    flags: guint32,
    control_bindings: *mut GList,
    control_rate: guint64,
    last_sync: guint64,
    _gst_reserved: gpointer,
}
pub struct Struct__GstObjectClass {
    parent_class: GInitiallyUnownedClass,
    path_string_separator: *gchar,
    deep_notify: extern "C" fn
                     (arg1: *mut GstObject, arg2: *mut GstObject,
                      arg3: *mut GParamSpec),
    _gst_reserved: [gpointer, ..4u],
}
pub type GstClockTime = guint64;
pub type GstClockTimeDiff = gint64;
pub type GstClockID = gpointer;
pub type GstClockEntry = Struct__GstClockEntry;
pub type GstClock = Struct__GstClock;
pub type GstClockClass = Struct__GstClockClass;
pub type Struct__GstClockPrivate = c_void;
pub type GstClockPrivate = Struct__GstClockPrivate;
pub type GstClockCallback =
    extern "C" fn
        (arg1: *mut GstClock, arg2: GstClockTime, arg3: GstClockID,
         arg4: gpointer) -> gboolean;
pub type GstClockReturn = c_uint;
pub static GST_CLOCK_OK: c_uint = 0;
pub static GST_CLOCK_EARLY: c_uint = 1;
pub static GST_CLOCK_UNSCHEDULED: c_uint = 2;
pub static GST_CLOCK_BUSY: c_uint = 3;
pub static GST_CLOCK_BADTIME: c_uint = 4;
pub static GST_CLOCK_ERROR: c_uint = 5;
pub static GST_CLOCK_UNSUPPORTED: c_uint = 6;
pub static GST_CLOCK_DONE: c_uint = 7;
pub type GstClockEntryType = c_uint;
pub static GST_CLOCK_ENTRY_SINGLE: c_uint = 0;
pub static GST_CLOCK_ENTRY_PERIODIC: c_uint = 1;
pub struct Struct__GstClockEntry {
    refcount: gint,
    clock: *mut GstClock,
    _type: GstClockEntryType,
    time: GstClockTime,
    interval: GstClockTime,
    status: GstClockReturn,
    func: GstClockCallback,
    user_data: gpointer,
    destroy_data: GDestroyNotify,
    unscheduled: gboolean,
    woken_up: gboolean,
    _gst_reserved: [gpointer, ..4u],
}
pub type GstClockFlags = c_uint;
pub static GST_CLOCK_FLAG_CAN_DO_SINGLE_SYNC: c_uint = 16;
pub static GST_CLOCK_FLAG_CAN_DO_SINGLE_ASYNC: c_uint = 32;
pub static GST_CLOCK_FLAG_CAN_DO_PERIODIC_SYNC: c_uint = 64;
pub static GST_CLOCK_FLAG_CAN_DO_PERIODIC_ASYNC: c_uint = 128;
pub static GST_CLOCK_FLAG_CAN_SET_RESOLUTION: c_uint = 256;
pub static GST_CLOCK_FLAG_CAN_SET_MASTER: c_uint = 512;
pub static GST_CLOCK_FLAG_LAST: c_uint = 4096;
pub struct Struct__GstClock {
    object: GstObject,
    _priv: *mut GstClockPrivate,
    _gst_reserved: [gpointer, ..4u],
}
pub struct Struct__GstClockClass {
    parent_class: GstObjectClass,
    change_resolution: extern "C" fn
                           (arg1: *mut GstClock, arg2: GstClockTime,
                            arg3: GstClockTime) -> GstClockTime,
    get_resolution: extern "C" fn(arg1: *mut GstClock) -> GstClockTime,
    get_internal_time: extern "C" fn(arg1: *mut GstClock) -> GstClockTime,
    wait: extern "C" fn
              (arg1: *mut GstClock, arg2: *mut GstClockEntry,
               arg3: *mut GstClockTimeDiff) -> GstClockReturn,
    wait_async: extern "C" fn(arg1: *mut GstClock, arg2: *mut GstClockEntry)
                    -> GstClockReturn,
    unschedule: extern "C" fn(arg1: *mut GstClock, arg2: *mut GstClockEntry),
    _gst_reserved: [gpointer, ..4u],
}
pub type GstControlSource = Struct__GstControlSource;
pub type GstControlSourceClass = Struct__GstControlSourceClass;
pub type GstTimedValue = Struct__GstTimedValue;
pub type Struct__GstValueArray = c_void;
pub type GstValueArray = Struct__GstValueArray;
pub struct Struct__GstTimedValue {
    timestamp: GstClockTime,
    value: gdouble,
}
pub type GstControlSourceGetValue =
    extern "C" fn
        (arg1: *mut GstControlSource, arg2: GstClockTime, arg3: *mut gdouble)
        -> gboolean;
pub type GstControlSourceGetValueArray =
    extern "C" fn
        (arg1: *mut GstControlSource, arg2: GstClockTime, arg3: GstClockTime,
         arg4: guint, arg5: *mut gdouble) -> gboolean;
pub struct Struct__GstControlSource {
    parent: GstObject,
    get_value: GstControlSourceGetValue,
    get_value_array: GstControlSourceGetValueArray,
    _gst_reserved: [gpointer, ..4u],
}
pub struct Struct__GstControlSourceClass {
    parent_class: GstObjectClass,
    _gst_reserved: [gpointer, ..4u],
}
pub type GstControlBinding = Struct__GstControlBinding;
pub type GstControlBindingClass = Struct__GstControlBindingClass;
pub type GstControlBindingConvert =
    extern "C" fn
        (arg1: *mut GstControlBinding, arg2: gdouble, arg3: *mut GValue);
pub struct Struct__GstControlBinding {
    parent: GstObject,
    name: *mut gchar,
    pspec: *mut GParamSpec,
    object: *mut GstObject,
    disabled: gboolean,
    _gst_reserved: [gpointer, ..4u],
}
pub struct Struct__GstControlBindingClass {
    parent_class: GstObjectClass,
    sync_values: extern "C" fn
                     (arg1: *mut GstControlBinding, arg2: *mut GstObject,
                      arg3: GstClockTime, arg4: GstClockTime) -> gboolean,
    get_value: extern "C" fn(arg1: *mut GstControlBinding, arg2: GstClockTime)
                   -> *mut GValue,
    get_value_array: extern "C" fn
                         (arg1: *mut GstControlBinding, arg2: GstClockTime,
                          arg3: GstClockTime, arg4: guint, arg5: gpointer)
                         -> gboolean,
    get_g_value_array: extern "C" fn
                           (arg1: *mut GstControlBinding, arg2: GstClockTime,
                            arg3: GstClockTime, arg4: guint,
                            arg5: *mut GValue) -> gboolean,
    _gst_reserved: [gpointer, ..4u],
}
pub type GstPad = Struct__GstPad;
pub type Struct__GstPadPrivate = c_void;
pub type GstPadPrivate = Struct__GstPadPrivate;
pub type GstPadClass = Struct__GstPadClass;
pub type GstPadProbeInfo = Struct__GstPadProbeInfo;
pub type GstPadDirection = c_uint;
pub static GST_PAD_UNKNOWN: c_uint = 0;
pub static GST_PAD_SRC: c_uint = 1;
pub static GST_PAD_SINK: c_uint = 2;
pub type GstPadMode = c_uint;
pub static GST_PAD_MODE_NONE: c_uint = 0;
pub static GST_PAD_MODE_PUSH: c_uint = 1;
pub static GST_PAD_MODE_PULL: c_uint = 2;
pub type GstMiniObject = Struct__GstMiniObject;
pub type GstMiniObjectCopyFunction =
    extern "C" fn(arg1: *GstMiniObject) -> *mut GstMiniObject;
pub type GstMiniObjectDisposeFunction =
    extern "C" fn(arg1: *mut GstMiniObject) -> gboolean;
pub type GstMiniObjectFreeFunction = extern "C" fn(arg1: *mut GstMiniObject);
pub type GstMiniObjectNotify =
    extern "C" fn(arg1: gpointer, arg2: *mut GstMiniObject);
pub type GstMiniObjectFlags = c_uint;
pub static GST_MINI_OBJECT_FLAG_LOCKABLE: c_uint = 1;
pub static GST_MINI_OBJECT_FLAG_LOCK_READONLY: c_uint = 2;
pub static GST_MINI_OBJECT_FLAG_LAST: c_uint = 16;
pub type GstLockFlags = c_uint;
pub static GST_LOCK_FLAG_READ: c_uint = 1;
pub static GST_LOCK_FLAG_WRITE: c_uint = 2;
pub static GST_LOCK_FLAG_EXCLUSIVE: c_uint = 4;
pub static GST_LOCK_FLAG_LAST: c_uint = 256;
pub struct Struct__GstMiniObject {
    _type: GType,
    refcount: gint,
    lockstate: gint,
    flags: guint,
    copy: GstMiniObjectCopyFunction,
    dispose: GstMiniObjectDisposeFunction,
    free: GstMiniObjectFreeFunction,
    n_qdata: guint,
    qdata: gpointer,
}
pub type GstMemory = Struct__GstMemory;
pub type GstAllocator = Struct__GstAllocator;
pub type GstMemoryFlags = c_uint;
pub static GST_MEMORY_FLAG_READONLY: c_uint = 2;
pub static GST_MEMORY_FLAG_NO_SHARE: c_uint = 16;
pub static GST_MEMORY_FLAG_ZERO_PREFIXED: c_uint = 32;
pub static GST_MEMORY_FLAG_ZERO_PADDED: c_uint = 64;
pub static GST_MEMORY_FLAG_PHYSICALLY_CONTIGUOUS: c_uint = 128;
pub static GST_MEMORY_FLAG_NOT_MAPPABLE: c_uint = 256;
pub static GST_MEMORY_FLAG_LAST: c_uint = 1048576;
pub struct Struct__GstMemory {
    mini_object: GstMiniObject,
    allocator: *mut GstAllocator,
    parent: *mut GstMemory,
    maxsize: gsize,
    align: gsize,
    offset: gsize,
    size: gsize,
}
pub type GstMapFlags = c_uint;
pub static GST_MAP_READ: c_uint = 1;
pub static GST_MAP_WRITE: c_uint = 2;
pub static GST_MAP_FLAG_LAST: c_uint = 65536;
pub struct GstMapInfo {
    memory: *mut GstMemory,
    flags: GstMapFlags,
    data: *mut guint8,
    size: gsize,
    maxsize: gsize,
    user_data: [gpointer, ..4u],
    _gst_reserved: [gpointer, ..4u],
}
pub type GstMemoryMapFunction =
    extern "C" fn(arg1: *mut GstMemory, arg2: gsize, arg3: GstMapFlags)
        -> gpointer;
pub type GstMemoryUnmapFunction = extern "C" fn(arg1: *mut GstMemory);
pub type GstMemoryCopyFunction =
    extern "C" fn(arg1: *mut GstMemory, arg2: gssize, arg3: gssize)
        -> *mut GstMemory;
pub type GstMemoryShareFunction =
    extern "C" fn(arg1: *mut GstMemory, arg2: gssize, arg3: gssize)
        -> *mut GstMemory;
pub type GstMemoryIsSpanFunction =
    extern "C" fn
        (arg1: *mut GstMemory, arg2: *mut GstMemory, arg3: *mut gsize)
        -> gboolean;
pub type Struct__GstAllocatorPrivate = c_void;
pub type GstAllocatorPrivate = Struct__GstAllocatorPrivate;
pub type GstAllocatorClass = Struct__GstAllocatorClass;
pub type GstAllocationParams = Struct__GstAllocationParams;
pub struct Struct__GstAllocationParams {
    flags: GstMemoryFlags,
    align: gsize,
    prefix: gsize,
    padding: gsize,
    _gst_reserved: [gpointer, ..4u],
}
pub type GstAllocatorFlags = c_uint;
pub static GST_ALLOCATOR_FLAG_CUSTOM_ALLOC: c_uint = 16;
pub static GST_ALLOCATOR_FLAG_LAST: c_uint = 1048576;
pub struct Struct__GstAllocator {
    object: GstObject,
    mem_type: *gchar,
    mem_map: GstMemoryMapFunction,
    mem_unmap: GstMemoryUnmapFunction,
    mem_copy: GstMemoryCopyFunction,
    mem_share: GstMemoryShareFunction,
    mem_is_span: GstMemoryIsSpanFunction,
    _gst_reserved: [gpointer, ..4u],
    _priv: *mut GstAllocatorPrivate,
}
pub struct Struct__GstAllocatorClass {
    object_class: GstObjectClass,
    alloc: extern "C" fn
               (arg1: *mut GstAllocator, arg2: gsize,
                arg3: *mut GstAllocationParams) -> *mut GstMemory,
    free: extern "C" fn(arg1: *mut GstAllocator, arg2: *mut GstMemory),
    _gst_reserved: [gpointer, ..4u],
}
pub type GstBuffer = Struct__GstBuffer;
pub type GstBufferPool = Struct__GstBufferPool;
pub type GstBufferFlags = c_uint;
pub static GST_BUFFER_FLAG_LIVE: c_uint = 16;
pub static GST_BUFFER_FLAG_DECODE_ONLY: c_uint = 32;
pub static GST_BUFFER_FLAG_DISCONT: c_uint = 64;
pub static GST_BUFFER_FLAG_RESYNC: c_uint = 128;
pub static GST_BUFFER_FLAG_CORRUPTED: c_uint = 256;
pub static GST_BUFFER_FLAG_MARKER: c_uint = 512;
pub static GST_BUFFER_FLAG_HEADER: c_uint = 1024;
pub static GST_BUFFER_FLAG_GAP: c_uint = 2048;
pub static GST_BUFFER_FLAG_DROPPABLE: c_uint = 4096;
pub static GST_BUFFER_FLAG_DELTA_UNIT: c_uint = 8192;
pub static GST_BUFFER_FLAG_LAST: c_uint = 1048576;
pub struct Struct__GstBuffer {
    mini_object: GstMiniObject,
    pool: *mut GstBufferPool,
    pts: GstClockTime,
    dts: GstClockTime,
    duration: GstClockTime,
    offset: guint64,
    offset_end: guint64,
}
pub type GstBufferCopyFlags = c_uint;
pub static GST_BUFFER_COPY_NONE: c_uint = 0;
pub static GST_BUFFER_COPY_FLAGS: c_uint = 1;
pub static GST_BUFFER_COPY_TIMESTAMPS: c_uint = 2;
pub static GST_BUFFER_COPY_META: c_uint = 4;
pub static GST_BUFFER_COPY_MEMORY: c_uint = 8;
pub static GST_BUFFER_COPY_MERGE: c_uint = 16;
pub static GST_BUFFER_COPY_DEEP: c_uint = 32;
pub type GstMeta = Struct__GstMeta;
pub type GstMetaInfo = Struct__GstMetaInfo;
pub type GstMetaFlags = c_uint;
pub static GST_META_FLAG_NONE: c_uint = 0;
pub static GST_META_FLAG_READONLY: c_uint = 1;
pub static GST_META_FLAG_POOLED: c_uint = 2;
pub static GST_META_FLAG_LOCKED: c_uint = 4;
pub static GST_META_FLAG_LAST: c_uint = 65536;
pub struct Struct__GstMeta {
    flags: GstMetaFlags,
    info: *GstMetaInfo,
}
pub type GstMetaInitFunction =
    extern "C" fn(arg1: *mut GstMeta, arg2: gpointer, arg3: *mut GstBuffer)
        -> gboolean;
pub type GstMetaFreeFunction =
    extern "C" fn(arg1: *mut GstMeta, arg2: *mut GstBuffer);
pub struct GstMetaTransformCopy {
    region: gboolean,
    offset: gsize,
    size: gsize,
}
pub type GstMetaTransformFunction =
    extern "C" fn
        (arg1: *mut GstBuffer, arg2: *mut GstMeta, arg3: *mut GstBuffer,
         arg4: GQuark, arg5: gpointer) -> gboolean;
pub struct Struct__GstMetaInfo {
    api: GType,
    _type: GType,
    size: gsize,
    init_func: GstMetaInitFunction,
    free_func: GstMetaFreeFunction,
    transform_func: GstMetaTransformFunction,
    _gst_reserved: [gpointer, ..4u],
}
pub type GstBufferForeachMetaFunc =
    extern "C" fn
        (arg1: *mut GstBuffer, arg2: *mut *mut GstMeta, arg3: gpointer)
        -> gboolean;
pub type Struct__GstBufferList = c_void;
pub type GstBufferList = Struct__GstBufferList;
pub type GstBufferListFunc =
    extern "C" fn(arg1: *mut *mut GstBuffer, arg2: guint, arg3: gpointer)
        -> gboolean;
pub type Struct__GstDateTime = c_void;
pub type GstDateTime = Struct__GstDateTime;
pub type GstStructure = Struct__GstStructure;
pub type GstStructureForeachFunc =
    extern "C" fn(arg1: GQuark, arg2: *GValue, arg3: gpointer) -> gboolean;
pub type GstStructureMapFunc =
    extern "C" fn(arg1: GQuark, arg2: *mut GValue, arg3: gpointer)
        -> gboolean;
pub struct Struct__GstStructure {
    _type: GType,
    name: GQuark,
}
pub type Struct__GstCapsFeatures = c_void;
pub type GstCapsFeatures = Struct__GstCapsFeatures;
pub type GstCapsFlags = c_uint;
pub static GST_CAPS_FLAG_ANY: c_uint = 16;
pub type GstCapsIntersectMode = c_uint;
pub static GST_CAPS_INTERSECT_ZIG_ZAG: c_uint = 0;
pub static GST_CAPS_INTERSECT_FIRST: c_uint = 1;
pub type GstCaps = Struct__GstCaps;
pub type GstStaticCaps = Struct__GstStaticCaps;
pub struct Struct__GstCaps {
    mini_object: GstMiniObject,
}
pub struct Struct__GstStaticCaps {
    caps: *mut GstCaps,
    string: *c_schar,
    _gst_reserved: [gpointer, ..4u],
}
pub type GstPadTemplate = Struct__GstPadTemplate;
pub type GstPadTemplateClass = Struct__GstPadTemplateClass;
pub type GstStaticPadTemplate = Struct__GstStaticPadTemplate;
pub type GstEvent = Struct__GstEvent;
pub type GstEventTypeFlags = c_uint;
pub static GST_EVENT_TYPE_UPSTREAM: c_uint = 1;
pub static GST_EVENT_TYPE_DOWNSTREAM: c_uint = 2;
pub static GST_EVENT_TYPE_SERIALIZED: c_uint = 4;
pub static GST_EVENT_TYPE_STICKY: c_uint = 8;
pub static GST_EVENT_TYPE_STICKY_MULTI: c_uint = 16;
pub type GstEventType = c_uint;
pub static GST_EVENT_UNKNOWN: c_uint = 0;
pub static GST_EVENT_FLUSH_START: c_uint = 2563;
pub static GST_EVENT_FLUSH_STOP: c_uint = 5127;
pub static GST_EVENT_STREAM_START: c_uint = 10254;
pub static GST_EVENT_CAPS: c_uint = 12814;
pub static GST_EVENT_SEGMENT: c_uint = 17934;
pub static GST_EVENT_TAG: c_uint = 20510;
pub static GST_EVENT_BUFFERSIZE: c_uint = 23054;
pub static GST_EVENT_SINK_MESSAGE: c_uint = 25630;
pub static GST_EVENT_EOS: c_uint = 28174;
pub static GST_EVENT_TOC: c_uint = 30750;
pub static GST_EVENT_SEGMENT_DONE: c_uint = 38406;
pub static GST_EVENT_GAP: c_uint = 40966;
pub static GST_EVENT_QOS: c_uint = 48641;
pub static GST_EVENT_SEEK: c_uint = 51201;
pub static GST_EVENT_NAVIGATION: c_uint = 53761;
pub static GST_EVENT_LATENCY: c_uint = 56321;
pub static GST_EVENT_STEP: c_uint = 58881;
pub static GST_EVENT_RECONFIGURE: c_uint = 61441;
pub static GST_EVENT_TOC_SELECT: c_uint = 64001;
pub static GST_EVENT_CUSTOM_UPSTREAM: c_uint = 69121;
pub static GST_EVENT_CUSTOM_DOWNSTREAM: c_uint = 71686;
pub static GST_EVENT_CUSTOM_DOWNSTREAM_OOB: c_uint = 74242;
pub static GST_EVENT_CUSTOM_DOWNSTREAM_STICKY: c_uint = 76830;
pub static GST_EVENT_CUSTOM_BOTH: c_uint = 79367;
pub static GST_EVENT_CUSTOM_BOTH_OOB: c_uint = 81923;
pub type GstIteratorResult = c_uint;
pub static GST_ITERATOR_DONE: c_uint = 0;
pub static GST_ITERATOR_OK: c_uint = 1;
pub static GST_ITERATOR_RESYNC: c_uint = 2;
pub static GST_ITERATOR_ERROR: c_uint = 3;
pub type GstIterator = Struct__GstIterator;
pub type GstIteratorItem = c_uint;
pub static GST_ITERATOR_ITEM_SKIP: c_uint = 0;
pub static GST_ITERATOR_ITEM_PASS: c_uint = 1;
pub static GST_ITERATOR_ITEM_END: c_uint = 2;
pub type GstIteratorCopyFunction =
    extern "C" fn(arg1: *GstIterator, arg2: *mut GstIterator);
pub type GstIteratorItemFunction =
    extern "C" fn(arg1: *mut GstIterator, arg2: *GValue) -> GstIteratorItem;
pub type GstIteratorNextFunction =
    extern "C" fn(arg1: *mut GstIterator, arg2: *mut GValue)
        -> GstIteratorResult;
pub type GstIteratorResyncFunction = extern "C" fn(arg1: *mut GstIterator);
pub type GstIteratorFreeFunction = extern "C" fn(arg1: *mut GstIterator);
pub type GstIteratorForeachFunction =
    extern "C" fn(arg1: *GValue, arg2: gpointer);
pub type GstIteratorFoldFunction =
    extern "C" fn(arg1: *GValue, arg2: *mut GValue, arg3: gpointer)
        -> gboolean;
pub struct Struct__GstIterator {
    copy: GstIteratorCopyFunction,
    next: GstIteratorNextFunction,
    item: GstIteratorItemFunction,
    resync: GstIteratorResyncFunction,
    free: GstIteratorFreeFunction,
    pushed: *mut GstIterator,
    _type: GType,
    lock: *mut GMutex,
    cookie: guint32,
    master_cookie: *mut guint32,
    size: guint,
    _gst_reserved: [gpointer, ..4u],
}
pub type GstFormat = c_uint;
pub static GST_FORMAT_UNDEFINED: c_uint = 0;
pub static GST_FORMAT_DEFAULT: c_uint = 1;
pub static GST_FORMAT_BYTES: c_uint = 2;
pub static GST_FORMAT_TIME: c_uint = 3;
pub static GST_FORMAT_BUFFERS: c_uint = 4;
pub static GST_FORMAT_PERCENT: c_uint = 5;
pub type GstFormatDefinition = Struct__GstFormatDefinition;
pub struct Struct__GstFormatDefinition {
    value: GstFormat,
    nick: *gchar,
    description: *gchar,
    quark: GQuark,
}
pub type GstSegment = Struct__GstSegment;
pub type GstSeekType = c_uint;
pub static GST_SEEK_TYPE_NONE: c_uint = 0;
pub static GST_SEEK_TYPE_SET: c_uint = 1;
pub static GST_SEEK_TYPE_END: c_uint = 2;
pub type GstSeekFlags = c_uint;
pub static GST_SEEK_FLAG_NONE: c_uint = 0;
pub static GST_SEEK_FLAG_FLUSH: c_uint = 1;
pub static GST_SEEK_FLAG_ACCURATE: c_uint = 2;
pub static GST_SEEK_FLAG_KEY_UNIT: c_uint = 4;
pub static GST_SEEK_FLAG_SEGMENT: c_uint = 8;
pub static GST_SEEK_FLAG_SKIP: c_uint = 16;
pub static GST_SEEK_FLAG_SNAP_BEFORE: c_uint = 32;
pub static GST_SEEK_FLAG_SNAP_AFTER: c_uint = 64;
pub static GST_SEEK_FLAG_SNAP_NEAREST: c_uint = 96;
pub type GstSegmentFlags = c_uint;
pub static GST_SEGMENT_FLAG_NONE: c_uint = 0;
pub static GST_SEGMENT_FLAG_RESET: c_uint = 1;
pub static GST_SEGMENT_FLAG_SKIP: c_uint = 16;
pub static GST_SEGMENT_FLAG_SEGMENT: c_uint = 8;
pub struct Struct__GstSegment {
    flags: GstSegmentFlags,
    rate: gdouble,
    applied_rate: gdouble,
    format: GstFormat,
    base: guint64,
    offset: guint64,
    start: guint64,
    stop: guint64,
    time: guint64,
    position: guint64,
    duration: guint64,
    _gst_reserved: [gpointer, ..4u],
}
pub type Struct__GstSample = c_void;
pub type GstSample = Struct__GstSample;
pub type GstTagMergeMode = c_uint;
pub static GST_TAG_MERGE_UNDEFINED: c_uint = 0;
pub static GST_TAG_MERGE_REPLACE_ALL: c_uint = 1;
pub static GST_TAG_MERGE_REPLACE: c_uint = 2;
pub static GST_TAG_MERGE_APPEND: c_uint = 3;
pub static GST_TAG_MERGE_PREPEND: c_uint = 4;
pub static GST_TAG_MERGE_KEEP: c_uint = 5;
pub static GST_TAG_MERGE_KEEP_ALL: c_uint = 6;
pub static GST_TAG_MERGE_COUNT: c_uint = 7;
pub type GstTagFlag = c_uint;
pub static GST_TAG_FLAG_UNDEFINED: c_uint = 0;
pub static GST_TAG_FLAG_META: c_uint = 1;
pub static GST_TAG_FLAG_ENCODED: c_uint = 2;
pub static GST_TAG_FLAG_DECODED: c_uint = 3;
pub static GST_TAG_FLAG_COUNT: c_uint = 4;
pub type GstTagList = Struct__GstTagList;
pub struct Struct__GstTagList {
    mini_object: GstMiniObject,
}
pub type GstTagForeachFunc =
    extern "C" fn(arg1: *GstTagList, arg2: *gchar, arg3: gpointer);
pub type GstTagMergeFunc = extern "C" fn(arg1: *mut GValue, arg2: *GValue);
pub type GstTagScope = c_uint;
pub static GST_TAG_SCOPE_STREAM: c_uint = 0;
pub static GST_TAG_SCOPE_GLOBAL: c_uint = 1;
pub type GstMessage = Struct__GstMessage;
pub type GstMessageType = c_int;
pub static GST_MESSAGE_UNKNOWN: c_int = 0;
pub static GST_MESSAGE_EOS: c_int = 1;
pub static GST_MESSAGE_ERROR: c_int = 2;
pub static GST_MESSAGE_WARNING: c_int = 4;
pub static GST_MESSAGE_INFO: c_int = 8;
pub static GST_MESSAGE_TAG: c_int = 16;
pub static GST_MESSAGE_BUFFERING: c_int = 32;
pub static GST_MESSAGE_STATE_CHANGED: c_int = 64;
pub static GST_MESSAGE_STATE_DIRTY: c_int = 128;
pub static GST_MESSAGE_STEP_DONE: c_int = 256;
pub static GST_MESSAGE_CLOCK_PROVIDE: c_int = 512;
pub static GST_MESSAGE_CLOCK_LOST: c_int = 1024;
pub static GST_MESSAGE_NEW_CLOCK: c_int = 2048;
pub static GST_MESSAGE_STRUCTURE_CHANGE: c_int = 4096;
pub static GST_MESSAGE_STREAM_STATUS: c_int = 8192;
pub static GST_MESSAGE_APPLICATION: c_int = 16384;
pub static GST_MESSAGE_ELEMENT: c_int = 32768;
pub static GST_MESSAGE_SEGMENT_START: c_int = 65536;
pub static GST_MESSAGE_SEGMENT_DONE: c_int = 131072;
pub static GST_MESSAGE_DURATION_CHANGED: c_int = 262144;
pub static GST_MESSAGE_LATENCY: c_int = 524288;
pub static GST_MESSAGE_ASYNC_START: c_int = 1048576;
pub static GST_MESSAGE_ASYNC_DONE: c_int = 2097152;
pub static GST_MESSAGE_REQUEST_STATE: c_int = 4194304;
pub static GST_MESSAGE_STEP_START: c_int = 8388608;
pub static GST_MESSAGE_QOS: c_int = 16777216;
pub static GST_MESSAGE_PROGRESS: c_int = 33554432;
pub static GST_MESSAGE_TOC: c_int = 67108864;
pub static GST_MESSAGE_RESET_TIME: c_int = 134217728;
pub static GST_MESSAGE_STREAM_START: c_int = 268435456;
pub static GST_MESSAGE_NEED_CONTEXT: c_int = 536870912;
pub static GST_MESSAGE_HAVE_CONTEXT: c_int = 1073741824;
pub static GST_MESSAGE_ANY: c_int = -1;
pub type Struct__GstTocEntry = c_void;
pub type GstTocEntry = Struct__GstTocEntry;
pub type Struct__GstToc = c_void;
pub type GstToc = Struct__GstToc;
pub type GstTocScope = c_uint;
pub static GST_TOC_SCOPE_GLOBAL: c_uint = 1;
pub static GST_TOC_SCOPE_CURRENT: c_uint = 2;
pub type GstTocEntryType = c_int;
pub static GST_TOC_ENTRY_TYPE_ANGLE: c_int = -3;
pub static GST_TOC_ENTRY_TYPE_VERSION: c_int = -2;
pub static GST_TOC_ENTRY_TYPE_EDITION: c_int = -1;
pub static GST_TOC_ENTRY_TYPE_INVALID: c_int = 0;
pub static GST_TOC_ENTRY_TYPE_TITLE: c_int = 1;
pub static GST_TOC_ENTRY_TYPE_TRACK: c_int = 2;
pub static GST_TOC_ENTRY_TYPE_CHAPTER: c_int = 3;
pub type Struct__GstContext = c_void;
pub type GstContext = Struct__GstContext;
pub type GstQuery = Struct__GstQuery;
pub type GstQueryTypeFlags = c_uint;
pub static GST_QUERY_TYPE_UPSTREAM: c_uint = 1;
pub static GST_QUERY_TYPE_DOWNSTREAM: c_uint = 2;
pub static GST_QUERY_TYPE_SERIALIZED: c_uint = 4;
pub type GstQueryType = c_uint;
pub static GST_QUERY_UNKNOWN: c_uint = 0;
pub static GST_QUERY_POSITION: c_uint = 2563;
pub static GST_QUERY_DURATION: c_uint = 5123;
pub static GST_QUERY_LATENCY: c_uint = 7683;
pub static GST_QUERY_JITTER: c_uint = 10243;
pub static GST_QUERY_RATE: c_uint = 12803;
pub static GST_QUERY_SEEKING: c_uint = 15363;
pub static GST_QUERY_SEGMENT: c_uint = 17923;
pub static GST_QUERY_CONVERT: c_uint = 20483;
pub static GST_QUERY_FORMATS: c_uint = 23043;
pub static GST_QUERY_BUFFERING: c_uint = 28163;
pub static GST_QUERY_CUSTOM: c_uint = 30723;
pub static GST_QUERY_URI: c_uint = 33283;
pub static GST_QUERY_ALLOCATION: c_uint = 35846;
pub static GST_QUERY_SCHEDULING: c_uint = 38401;
pub static GST_QUERY_ACCEPT_CAPS: c_uint = 40963;
pub static GST_QUERY_CAPS: c_uint = 43523;
pub static GST_QUERY_DRAIN: c_uint = 46086;
pub static GST_QUERY_CONTEXT: c_uint = 48643;
pub struct Struct__GstQuery {
    mini_object: GstMiniObject,
    _type: GstQueryType,
}
pub type GstBufferingMode = c_uint;
pub static GST_BUFFERING_STREAM: c_uint = 0;
pub static GST_BUFFERING_DOWNLOAD: c_uint = 1;
pub static GST_BUFFERING_TIMESHIFT: c_uint = 2;
pub static GST_BUFFERING_LIVE: c_uint = 3;
pub type GstSchedulingFlags = c_uint;
pub static GST_SCHEDULING_FLAG_SEEKABLE: c_uint = 1;
pub static GST_SCHEDULING_FLAG_SEQUENTIAL: c_uint = 2;
pub static GST_SCHEDULING_FLAG_BANDWIDTH_LIMITED: c_uint = 4;
pub type GstStructureChangeType = c_uint;
pub static GST_STRUCTURE_CHANGE_TYPE_PAD_LINK: c_uint = 0;
pub static GST_STRUCTURE_CHANGE_TYPE_PAD_UNLINK: c_uint = 1;
pub type GstStreamStatusType = c_uint;
pub static GST_STREAM_STATUS_TYPE_CREATE: c_uint = 0;
pub static GST_STREAM_STATUS_TYPE_ENTER: c_uint = 1;
pub static GST_STREAM_STATUS_TYPE_LEAVE: c_uint = 2;
pub static GST_STREAM_STATUS_TYPE_DESTROY: c_uint = 3;
pub static GST_STREAM_STATUS_TYPE_START: c_uint = 8;
pub static GST_STREAM_STATUS_TYPE_PAUSE: c_uint = 9;
pub static GST_STREAM_STATUS_TYPE_STOP: c_uint = 10;
pub type GstProgressType = c_uint;
pub static GST_PROGRESS_TYPE_START: c_uint = 0;
pub static GST_PROGRESS_TYPE_CONTINUE: c_uint = 1;
pub static GST_PROGRESS_TYPE_COMPLETE: c_uint = 2;
pub static GST_PROGRESS_TYPE_CANCELED: c_uint = 3;
pub static GST_PROGRESS_TYPE_ERROR: c_uint = 4;
pub struct Struct__GstMessage {
    mini_object: GstMiniObject,
    _type: GstMessageType,
    timestamp: guint64,
    src: *mut GstObject,
    seqnum: guint32,
    lock: GMutex,
    cond: GCond,
}
pub type GstQOSType = c_uint;
pub static GST_QOS_TYPE_OVERFLOW: c_uint = 0;
pub static GST_QOS_TYPE_UNDERFLOW: c_uint = 1;
pub static GST_QOS_TYPE_THROTTLE: c_uint = 2;
pub type GstStreamFlags = c_uint;
pub static GST_STREAM_FLAG_NONE: c_uint = 0;
pub static GST_STREAM_FLAG_SPARSE: c_uint = 1;
pub static GST_STREAM_FLAG_SELECT: c_uint = 2;
pub static GST_STREAM_FLAG_UNSELECT: c_uint = 4;
pub struct Struct__GstEvent {
    mini_object: GstMiniObject,
    _type: GstEventType,
    timestamp: guint64,
    seqnum: guint32,
}
pub type GstTaskPool = Struct__GstTaskPool;
pub type GstTaskPoolClass = Struct__GstTaskPoolClass;
pub type GstTaskPoolFunction = extern "C" fn(arg1: *mut c_void);
pub struct Struct__GstTaskPool {
    object: GstObject,
    pool: *mut GThreadPool,
    _gst_reserved: [gpointer, ..4u],
}
pub struct Struct__GstTaskPoolClass {
    parent_class: GstObjectClass,
    prepare: extern "C" fn(arg1: *mut GstTaskPool, arg2: *mut *mut GError),
    cleanup: extern "C" fn(arg1: *mut GstTaskPool),
    push: extern "C" fn
              (arg1: *mut GstTaskPool, arg2: GstTaskPoolFunction,
               arg3: gpointer, arg4: *mut *mut GError) -> gpointer,
    join: extern "C" fn(arg1: *mut GstTaskPool, arg2: gpointer),
    _gst_reserved: [gpointer, ..4u],
}
pub type GstTaskFunction = extern "C" fn(arg1: gpointer);
pub type GstTask = Struct__GstTask;
pub type GstTaskClass = Struct__GstTaskClass;
pub type Struct__GstTaskPrivate = c_void;
pub type GstTaskPrivate = Struct__GstTaskPrivate;
pub type GstTaskState = c_uint;
pub static GST_TASK_STARTED: c_uint = 0;
pub static GST_TASK_STOPPED: c_uint = 1;
pub static GST_TASK_PAUSED: c_uint = 2;
pub type GstTaskThreadFunc =
    extern "C" fn(arg1: *mut GstTask, arg2: *mut GThread, arg3: gpointer);
pub struct Struct__GstTask {
    object: GstObject,
    state: GstTaskState,
    cond: GCond,
    lock: *mut GRecMutex,
    func: GstTaskFunction,
    user_data: gpointer,
    notify: GDestroyNotify,
    running: gboolean,
    thread: *mut GThread,
    _priv: *mut GstTaskPrivate,
    _gst_reserved: [gpointer, ..4u],
}
pub struct Struct__GstTaskClass {
    parent_class: GstObjectClass,
    pool: *mut GstTaskPool,
    _gst_reserved: [gpointer, ..4u],
}
pub type GstPadPresence = c_uint;
pub static GST_PAD_ALWAYS: c_uint = 0;
pub static GST_PAD_SOMETIMES: c_uint = 1;
pub static GST_PAD_REQUEST: c_uint = 2;
pub type GstPadTemplateFlags = c_uint;
pub static GST_PAD_TEMPLATE_FLAG_LAST: c_uint = 256;
pub struct Struct__GstPadTemplate {
    object: GstObject,
    name_template: *mut gchar,
    direction: GstPadDirection,
    presence: GstPadPresence,
    caps: *mut GstCaps,
    _gst_reserved: [gpointer, ..4u],
}
pub struct Struct__GstPadTemplateClass {
    parent_class: GstObjectClass,
    pad_created: extern "C" fn(arg1: *mut GstPadTemplate, arg2: *mut GstPad),
    _gst_reserved: [gpointer, ..4u],
}
pub struct Struct__GstStaticPadTemplate {
    name_template: *gchar,
    direction: GstPadDirection,
    presence: GstPadPresence,
    static_caps: GstStaticCaps,
}
pub type GstPadLinkReturn = c_int;
pub static GST_PAD_LINK_OK: c_int = 0;
pub static GST_PAD_LINK_WRONG_HIERARCHY: c_int = -1;
pub static GST_PAD_LINK_WAS_LINKED: c_int = -2;
pub static GST_PAD_LINK_WRONG_DIRECTION: c_int = -3;
pub static GST_PAD_LINK_NOFORMAT: c_int = -4;
pub static GST_PAD_LINK_NOSCHED: c_int = -5;
pub static GST_PAD_LINK_REFUSED: c_int = -6;
pub type GstFlowReturn = c_int;
pub static GST_FLOW_CUSTOM_SUCCESS_2: c_int = 102;
pub static GST_FLOW_CUSTOM_SUCCESS_1: c_int = 101;
pub static GST_FLOW_CUSTOM_SUCCESS: c_int = 100;
pub static GST_FLOW_OK: c_int = 0;
pub static GST_FLOW_NOT_LINKED: c_int = -1;
pub static GST_FLOW_FLUSHING: c_int = -2;
pub static GST_FLOW_EOS: c_int = -3;
pub static GST_FLOW_NOT_NEGOTIATED: c_int = -4;
pub static GST_FLOW_ERROR: c_int = -5;
pub static GST_FLOW_NOT_SUPPORTED: c_int = -6;
pub static GST_FLOW_CUSTOM_ERROR: c_int = -100;
pub static GST_FLOW_CUSTOM_ERROR_1: c_int = -101;
pub static GST_FLOW_CUSTOM_ERROR_2: c_int = -102;
pub type GstPadLinkCheck = c_uint;
pub static GST_PAD_LINK_CHECK_NOTHING: c_uint = 0;
pub static GST_PAD_LINK_CHECK_HIERARCHY: c_uint = 1;
pub static GST_PAD_LINK_CHECK_TEMPLATE_CAPS: c_uint = 2;
pub static GST_PAD_LINK_CHECK_CAPS: c_uint = 4;
pub static GST_PAD_LINK_CHECK_DEFAULT: c_uint = 5;
pub type GstPadActivateFunction =
    extern "C" fn(arg1: *mut GstPad, arg2: *mut GstObject) -> gboolean;
pub type GstPadActivateModeFunction =
    extern "C" fn
        (arg1: *mut GstPad, arg2: *mut GstObject, arg3: GstPadMode,
         arg4: gboolean) -> gboolean;
pub type GstPadChainFunction =
    extern "C" fn
        (arg1: *mut GstPad, arg2: *mut GstObject, arg3: *mut GstBuffer)
        -> GstFlowReturn;
pub type GstPadChainListFunction =
    extern "C" fn
        (arg1: *mut GstPad, arg2: *mut GstObject, arg3: *mut GstBufferList)
        -> GstFlowReturn;
pub type GstPadGetRangeFunction =
    extern "C" fn
        (arg1: *mut GstPad, arg2: *mut GstObject, arg3: guint64, arg4: guint,
         arg5: *mut *mut GstBuffer) -> GstFlowReturn;
pub type GstPadEventFunction =
    extern "C" fn
        (arg1: *mut GstPad, arg2: *mut GstObject, arg3: *mut GstEvent)
        -> gboolean;
pub type GstPadIterIntLinkFunction =
    extern "C" fn(arg1: *mut GstPad, arg2: *mut GstObject)
        -> *mut GstIterator;
pub type GstPadQueryFunction =
    extern "C" fn
        (arg1: *mut GstPad, arg2: *mut GstObject, arg3: *mut GstQuery)
        -> gboolean;
pub type GstPadLinkFunction =
    extern "C" fn(arg1: *mut GstPad, arg2: *mut GstObject, arg3: *mut GstPad)
        -> GstPadLinkReturn;
pub type GstPadUnlinkFunction =
    extern "C" fn(arg1: *mut GstPad, arg2: *mut GstObject);
pub type GstPadForwardFunction =
    extern "C" fn(arg1: *mut GstPad, arg2: gpointer) -> gboolean;
pub type GstPadProbeType = c_uint;
pub static GST_PAD_PROBE_TYPE_INVALID: c_uint = 0;
pub static GST_PAD_PROBE_TYPE_IDLE: c_uint = 1;
pub static GST_PAD_PROBE_TYPE_BLOCK: c_uint = 2;
pub static GST_PAD_PROBE_TYPE_BUFFER: c_uint = 16;
pub static GST_PAD_PROBE_TYPE_BUFFER_LIST: c_uint = 32;
pub static GST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM: c_uint = 64;
pub static GST_PAD_PROBE_TYPE_EVENT_UPSTREAM: c_uint = 128;
pub static GST_PAD_PROBE_TYPE_EVENT_FLUSH: c_uint = 256;
pub static GST_PAD_PROBE_TYPE_QUERY_DOWNSTREAM: c_uint = 512;
pub static GST_PAD_PROBE_TYPE_QUERY_UPSTREAM: c_uint = 1024;
pub static GST_PAD_PROBE_TYPE_PUSH: c_uint = 4096;
pub static GST_PAD_PROBE_TYPE_PULL: c_uint = 8192;
pub static GST_PAD_PROBE_TYPE_BLOCKING: c_uint = 3;
pub static GST_PAD_PROBE_TYPE_DATA_DOWNSTREAM: c_uint = 112;
pub static GST_PAD_PROBE_TYPE_DATA_UPSTREAM: c_uint = 128;
pub static GST_PAD_PROBE_TYPE_DATA_BOTH: c_uint = 240;
pub static GST_PAD_PROBE_TYPE_BLOCK_DOWNSTREAM: c_uint = 114;
pub static GST_PAD_PROBE_TYPE_BLOCK_UPSTREAM: c_uint = 130;
pub static GST_PAD_PROBE_TYPE_EVENT_BOTH: c_uint = 192;
pub static GST_PAD_PROBE_TYPE_QUERY_BOTH: c_uint = 1536;
pub static GST_PAD_PROBE_TYPE_ALL_BOTH: c_uint = 1776;
pub static GST_PAD_PROBE_TYPE_SCHEDULING: c_uint = 12288;
pub type GstPadProbeReturn = c_uint;
pub static GST_PAD_PROBE_DROP: c_uint = 0;
pub static GST_PAD_PROBE_OK: c_uint = 1;
pub static GST_PAD_PROBE_REMOVE: c_uint = 2;
pub static GST_PAD_PROBE_PASS: c_uint = 3;
pub struct Struct__GstPadProbeInfo {
    _type: GstPadProbeType,
    id: gulong,
    data: gpointer,
    offset: guint64,
    size: guint,
    _gst_reserved: [gpointer, ..4u],
}
pub type GstPadProbeCallback =
    extern "C" fn
        (arg1: *mut GstPad, arg2: *mut GstPadProbeInfo, arg3: gpointer)
        -> GstPadProbeReturn;
pub type GstPadStickyEventsForeachFunction =
    extern "C" fn(arg1: *mut GstPad, arg2: *mut *mut GstEvent, arg3: gpointer)
        -> gboolean;
pub type GstPadFlags = c_uint;
pub static GST_PAD_FLAG_BLOCKED: c_uint = 16;
pub static GST_PAD_FLAG_FLUSHING: c_uint = 32;
pub static GST_PAD_FLAG_EOS: c_uint = 64;
pub static GST_PAD_FLAG_BLOCKING: c_uint = 128;
pub static GST_PAD_FLAG_NEED_PARENT: c_uint = 256;
pub static GST_PAD_FLAG_NEED_RECONFIGURE: c_uint = 512;
pub static GST_PAD_FLAG_PENDING_EVENTS: c_uint = 1024;
pub static GST_PAD_FLAG_FIXED_CAPS: c_uint = 2048;
pub static GST_PAD_FLAG_PROXY_CAPS: c_uint = 4096;
pub static GST_PAD_FLAG_PROXY_ALLOCATION: c_uint = 8192;
pub static GST_PAD_FLAG_PROXY_SCHEDULING: c_uint = 16384;
pub static GST_PAD_FLAG_LAST: c_uint = 1048576;
pub struct Struct__GstPad {
    object: GstObject,
    element_private: gpointer,
    padtemplate: *mut GstPadTemplate,
    direction: GstPadDirection,
    stream_rec_lock: GRecMutex,
    task: *mut GstTask,
    block_cond: GCond,
    probes: GHookList,
    mode: GstPadMode,
    activatefunc: GstPadActivateFunction,
    activatedata: gpointer,
    activatenotify: GDestroyNotify,
    activatemodefunc: GstPadActivateModeFunction,
    activatemodedata: gpointer,
    activatemodenotify: GDestroyNotify,
    peer: *mut GstPad,
    linkfunc: GstPadLinkFunction,
    linkdata: gpointer,
    linknotify: GDestroyNotify,
    unlinkfunc: GstPadUnlinkFunction,
    unlinkdata: gpointer,
    unlinknotify: GDestroyNotify,
    chainfunc: GstPadChainFunction,
    chaindata: gpointer,
    chainnotify: GDestroyNotify,
    chainlistfunc: GstPadChainListFunction,
    chainlistdata: gpointer,
    chainlistnotify: GDestroyNotify,
    getrangefunc: GstPadGetRangeFunction,
    getrangedata: gpointer,
    getrangenotify: GDestroyNotify,
    eventfunc: GstPadEventFunction,
    eventdata: gpointer,
    eventnotify: GDestroyNotify,
    offset: gint64,
    queryfunc: GstPadQueryFunction,
    querydata: gpointer,
    querynotify: GDestroyNotify,
    iterintlinkfunc: GstPadIterIntLinkFunction,
    iterintlinkdata: gpointer,
    iterintlinknotify: GDestroyNotify,
    num_probes: gint,
    num_blocked: gint,
    _priv: *mut GstPadPrivate,
    _gst_reserved: [gpointer, ..4u],
}
pub struct Struct__GstPadClass {
    parent_class: GstObjectClass,
    linked: extern "C" fn(arg1: *mut GstPad, arg2: *mut GstPad),
    unlinked: extern "C" fn(arg1: *mut GstPad, arg2: *mut GstPad),
    _gst_reserved: [gpointer, ..4u],
}
pub type GstBus = Struct__GstBus;
pub type Struct__GstBusPrivate = c_void;
pub type GstBusPrivate = Struct__GstBusPrivate;
pub type GstBusClass = Struct__GstBusClass;
pub type GstBusFlags = c_uint;
pub static GST_BUS_FLUSHING: c_uint = 16;
pub static GST_BUS_FLAG_LAST: c_uint = 32;
pub type GstBusSyncReply = c_uint;
pub static GST_BUS_DROP: c_uint = 0;
pub static GST_BUS_PASS: c_uint = 1;
pub static GST_BUS_ASYNC: c_uint = 2;
pub type GstBusSyncHandler =
    extern "C" fn(arg1: *mut GstBus, arg2: *mut GstMessage, arg3: gpointer)
        -> GstBusSyncReply;
pub type GstBusFunc =
    extern "C" fn(arg1: *mut GstBus, arg2: *mut GstMessage, arg3: gpointer)
        -> gboolean;
pub struct Struct__GstBus {
    object: GstObject,
    _priv: *mut GstBusPrivate,
    _gst_reserved: [gpointer, ..4u],
}
pub struct Struct__GstBusClass {
    parent_class: GstObjectClass,
    message: extern "C" fn(arg1: *mut GstBus, arg2: *mut GstMessage),
    sync_message: extern "C" fn(arg1: *mut GstBus, arg2: *mut GstMessage),
    _gst_reserved: [gpointer, ..4u],
}
pub type Struct__GstElementFactory = c_void;
pub type GstElementFactory = Struct__GstElementFactory;
pub type Struct__GstElementFactoryClass = c_void;
pub type GstElementFactoryClass = Struct__GstElementFactoryClass;
pub type Struct__GstPlugin = c_void;
pub type GstPlugin = Struct__GstPlugin;
pub type Struct__GstPluginClass = c_void;
pub type GstPluginClass = Struct__GstPluginClass;
pub type GstPluginDesc = Struct__GstPluginDesc;
pub type GstPluginError = c_uint;
pub static GST_PLUGIN_ERROR_MODULE: c_uint = 0;
pub static GST_PLUGIN_ERROR_DEPENDENCIES: c_uint = 1;
pub static GST_PLUGIN_ERROR_NAME_MISMATCH: c_uint = 2;
pub type GstPluginFlags = c_uint;
pub static GST_PLUGIN_FLAG_CACHED: c_uint = 16;
pub static GST_PLUGIN_FLAG_BLACKLISTED: c_uint = 32;
pub type GstPluginDependencyFlags = c_uint;
pub static GST_PLUGIN_DEPENDENCY_FLAG_NONE: c_uint = 0;
pub static GST_PLUGIN_DEPENDENCY_FLAG_RECURSE: c_uint = 1;
pub static GST_PLUGIN_DEPENDENCY_FLAG_PATHS_ARE_DEFAULT_ONLY: c_uint = 2;
pub static GST_PLUGIN_DEPENDENCY_FLAG_FILE_NAME_IS_SUFFIX: c_uint = 4;
pub type GstPluginInitFunc = extern "C" fn(arg1: *mut GstPlugin) -> gboolean;
pub type GstPluginInitFullFunc =
    extern "C" fn(arg1: *mut GstPlugin, arg2: gpointer) -> gboolean;
pub struct Struct__GstPluginDesc {
    major_version: gint,
    minor_version: gint,
    name: *gchar,
    description: *gchar,
    plugin_init: GstPluginInitFunc,
    version: *gchar,
    license: *gchar,
    source: *gchar,
    package: *gchar,
    origin: *gchar,
    release_datetime: *gchar,
    _gst_reserved: [gpointer, ..4u],
}
pub type GstPluginFilter =
    extern "C" fn(arg1: *mut GstPlugin, arg2: gpointer) -> gboolean;
pub type Struct__GstPluginFeature = c_void;
pub type GstPluginFeature = Struct__GstPluginFeature;
pub type Struct__GstPluginFeatureClass = c_void;
pub type GstPluginFeatureClass = Struct__GstPluginFeatureClass;
pub type GstRank = c_uint;
pub static GST_RANK_NONE: c_uint = 0;
pub static GST_RANK_MARGINAL: c_uint = 64;
pub static GST_RANK_SECONDARY: c_uint = 128;
pub static GST_RANK_PRIMARY: c_uint = 256;
pub type GstPluginFeatureFilter =
    extern "C" fn(arg1: *mut GstPluginFeature, arg2: gpointer) -> gboolean;
pub type GstURIError = c_uint;
pub static GST_URI_ERROR_UNSUPPORTED_PROTOCOL: c_uint = 0;
pub static GST_URI_ERROR_BAD_URI: c_uint = 1;
pub static GST_URI_ERROR_BAD_STATE: c_uint = 2;
pub static GST_URI_ERROR_BAD_REFERENCE: c_uint = 3;
pub type GstURIType = c_uint;
pub static GST_URI_UNKNOWN: c_uint = 0;
pub static GST_URI_SINK: c_uint = 1;
pub static GST_URI_SRC: c_uint = 2;
pub type Struct__GstURIHandler = c_void;
pub type GstURIHandler = Struct__GstURIHandler;
pub type GstURIHandlerInterface = Struct__GstURIHandlerInterface;
pub struct Struct__GstURIHandlerInterface {
    parent: GTypeInterface,
    get_type: extern "C" fn(arg1: GType) -> GstURIType,
    get_protocols: extern "C" fn(arg1: GType) -> **gchar,
    get_uri: extern "C" fn(arg1: *mut GstURIHandler) -> *mut gchar,
    set_uri: extern "C" fn
                 (arg1: *mut GstURIHandler, arg2: *gchar,
                  arg3: *mut *mut GError) -> gboolean,
}
pub type GstElementFactoryListType = guint64;
pub type GstStateChangeReturn = c_uint;
pub static GST_STATE_CHANGE_FAILURE: c_uint = 0;
pub static GST_STATE_CHANGE_SUCCESS: c_uint = 1;
pub static GST_STATE_CHANGE_ASYNC: c_uint = 2;
pub static GST_STATE_CHANGE_NO_PREROLL: c_uint = 3;
pub type GstStateChange = c_uint;
pub static GST_STATE_CHANGE_NULL_TO_READY: c_uint = 10;
pub static GST_STATE_CHANGE_READY_TO_PAUSED: c_uint = 19;
pub static GST_STATE_CHANGE_PAUSED_TO_PLAYING: c_uint = 28;
pub static GST_STATE_CHANGE_PLAYING_TO_PAUSED: c_uint = 35;
pub static GST_STATE_CHANGE_PAUSED_TO_READY: c_uint = 26;
pub static GST_STATE_CHANGE_READY_TO_NULL: c_uint = 17;
pub type GstElementFlags = c_uint;
pub static GST_ELEMENT_FLAG_LOCKED_STATE: c_uint = 16;
pub static GST_ELEMENT_FLAG_SINK: c_uint = 32;
pub static GST_ELEMENT_FLAG_SOURCE: c_uint = 64;
pub static GST_ELEMENT_FLAG_PROVIDE_CLOCK: c_uint = 128;
pub static GST_ELEMENT_FLAG_REQUIRE_CLOCK: c_uint = 256;
pub static GST_ELEMENT_FLAG_INDEXABLE: c_uint = 512;
pub static GST_ELEMENT_FLAG_LAST: c_uint = 16384;
pub struct Struct__GstElement {
    object: GstObject,
    state_lock: GRecMutex,
    state_cond: GCond,
    state_cookie: guint32,
    target_state: GstState,
    current_state: GstState,
    next_state: GstState,
    pending_state: GstState,
    last_return: GstStateChangeReturn,
    bus: *mut GstBus,
    clock: *mut GstClock,
    base_time: GstClockTimeDiff,
    start_time: GstClockTime,
    numpads: guint16,
    pads: *mut GList,
    numsrcpads: guint16,
    srcpads: *mut GList,
    numsinkpads: guint16,
    sinkpads: *mut GList,
    pads_cookie: guint32,
    _gst_reserved: [gpointer, ..4u],
}
pub struct Struct__GstElementClass {
    parent_class: GstObjectClass,
    metadata: gpointer,
    elementfactory: *mut GstElementFactory,
    padtemplates: *mut GList,
    numpadtemplates: gint,
    pad_templ_cookie: guint32,
    pad_added: extern "C" fn(arg1: *mut GstElement, arg2: *mut GstPad),
    pad_removed: extern "C" fn(arg1: *mut GstElement, arg2: *mut GstPad),
    no_more_pads: extern "C" fn(arg1: *mut GstElement),
    request_new_pad: extern "C" fn
                         (arg1: *mut GstElement, arg2: *mut GstPadTemplate,
                          arg3: *gchar, arg4: *GstCaps) -> *mut GstPad,
    release_pad: extern "C" fn(arg1: *mut GstElement, arg2: *mut GstPad),
    get_state: extern "C" fn
                   (arg1: *mut GstElement, arg2: *mut GstState,
                    arg3: *mut GstState, arg4: GstClockTime)
                   -> GstStateChangeReturn,
    set_state: extern "C" fn(arg1: *mut GstElement, arg2: GstState)
                   -> GstStateChangeReturn,
    change_state: extern "C" fn(arg1: *mut GstElement, arg2: GstStateChange)
                      -> GstStateChangeReturn,
    state_changed: extern "C" fn
                       (arg1: *mut GstElement, arg2: GstState, arg3: GstState,
                        arg4: GstState),
    set_bus: extern "C" fn(arg1: *mut GstElement, arg2: *mut GstBus),
    provide_clock: extern "C" fn(arg1: *mut GstElement) -> *mut GstClock,
    set_clock: extern "C" fn(arg1: *mut GstElement, arg2: *mut GstClock)
                   -> gboolean,
    send_event: extern "C" fn(arg1: *mut GstElement, arg2: *mut GstEvent)
                    -> gboolean,
    query: extern "C" fn(arg1: *mut GstElement, arg2: *mut GstQuery)
               -> gboolean,
    post_message: extern "C" fn(arg1: *mut GstElement, arg2: *mut GstMessage)
                      -> gboolean,
    set_context: extern "C" fn(arg1: *mut GstElement, arg2: *mut GstContext),
    _gst_reserved: [gpointer, ..18u],
}
pub type GstBinFlags = c_uint;
pub static GST_BIN_FLAG_NO_RESYNC: c_uint = 16384;
pub static GST_BIN_FLAG_LAST: c_uint = 524288;
pub type GstBin = Struct__GstBin;
pub type GstBinClass = Struct__GstBinClass;
pub type Struct__GstBinPrivate = c_void;
pub type GstBinPrivate = Struct__GstBinPrivate;
pub struct Struct__GstBin {
    element: GstElement,
    numchildren: gint,
    children: *mut GList,
    children_cookie: guint32,
    child_bus: *mut GstBus,
    messages: *mut GList,
    polling: gboolean,
    state_dirty: gboolean,
    clock_dirty: gboolean,
    provided_clock: *mut GstClock,
    clock_provider: *mut GstElement,
    _priv: *mut GstBinPrivate,
    _gst_reserved: [gpointer, ..4u],
}
pub struct Struct__GstBinClass {
    parent_class: GstElementClass,
    pool: *mut GThreadPool,
    element_added: extern "C" fn(arg1: *mut GstBin, arg2: *mut GstElement),
    element_removed: extern "C" fn(arg1: *mut GstBin, arg2: *mut GstElement),
    add_element: extern "C" fn(arg1: *mut GstBin, arg2: *mut GstElement)
                     -> gboolean,
    remove_element: extern "C" fn(arg1: *mut GstBin, arg2: *mut GstElement)
                        -> gboolean,
    handle_message: extern "C" fn(arg1: *mut GstBin, arg2: *mut GstMessage),
    do_latency: extern "C" fn(arg1: *mut GstBin) -> gboolean,
    _gst_reserved: [gpointer, ..4u],
}
pub type Struct__GstBufferPoolPrivate = c_void;
pub type GstBufferPoolPrivate = Struct__GstBufferPoolPrivate;
pub type GstBufferPoolClass = Struct__GstBufferPoolClass;
pub type GstBufferPoolAcquireFlags = c_uint;
pub static GST_BUFFER_POOL_ACQUIRE_FLAG_NONE: c_uint = 0;
pub static GST_BUFFER_POOL_ACQUIRE_FLAG_KEY_UNIT: c_uint = 1;
pub static GST_BUFFER_POOL_ACQUIRE_FLAG_DONTWAIT: c_uint = 2;
pub static GST_BUFFER_POOL_ACQUIRE_FLAG_DISCONT: c_uint = 4;
pub static GST_BUFFER_POOL_ACQUIRE_FLAG_LAST: c_uint = 65536;
pub type GstBufferPoolAcquireParams = Struct__GstBufferPoolAcquireParams;
pub struct Struct__GstBufferPoolAcquireParams {
    format: GstFormat,
    start: gint64,
    stop: gint64,
    flags: GstBufferPoolAcquireFlags,
    _gst_reserved: [gpointer, ..4u],
}
pub struct Struct__GstBufferPool {
    object: GstObject,
    flushing: gint,
    _priv: *mut GstBufferPoolPrivate,
    _gst_reserved: [gpointer, ..4u],
}
pub struct Struct__GstBufferPoolClass {
    object_class: GstObjectClass,
    get_options: extern "C" fn(arg1: *mut GstBufferPool) -> *mut *gchar,
    set_config: extern "C" fn
                    (arg1: *mut GstBufferPool, arg2: *mut GstStructure)
                    -> gboolean,
    start: extern "C" fn(arg1: *mut GstBufferPool) -> gboolean,
    stop: extern "C" fn(arg1: *mut GstBufferPool) -> gboolean,
    acquire_buffer: extern "C" fn
                        (arg1: *mut GstBufferPool, arg2: *mut *mut GstBuffer,
                         arg3: *mut GstBufferPoolAcquireParams)
                        -> GstFlowReturn,
    alloc_buffer: extern "C" fn
                      (arg1: *mut GstBufferPool, arg2: *mut *mut GstBuffer,
                       arg3: *mut GstBufferPoolAcquireParams)
                      -> GstFlowReturn,
    reset_buffer: extern "C" fn
                      (arg1: *mut GstBufferPool, arg2: *mut GstBuffer),
    release_buffer: extern "C" fn
                        (arg1: *mut GstBufferPool, arg2: *mut GstBuffer),
    free_buffer: extern "C" fn
                     (arg1: *mut GstBufferPool, arg2: *mut GstBuffer),
    _gst_reserved: [gpointer, ..4u],
}
pub type Struct__GstChildProxy = c_void;
pub type GstChildProxy = Struct__GstChildProxy;
pub type GstChildProxyInterface = Struct__GstChildProxyInterface;
pub struct Struct__GstChildProxyInterface {
    parent: GTypeInterface,
    get_child_by_name: extern "C" fn(arg1: *mut GstChildProxy, arg2: *gchar)
                           -> *mut GObject,
    get_child_by_index: extern "C" fn(arg1: *mut GstChildProxy, arg2: guint)
                            -> *mut GObject,
    get_children_count: extern "C" fn(arg1: *mut GstChildProxy) -> guint,
    child_added: extern "C" fn
                     (arg1: *mut GstChildProxy, arg2: *mut GObject,
                      arg3: *gchar),
    child_removed: extern "C" fn
                       (arg1: *mut GstChildProxy, arg2: *mut GObject,
                        arg3: *gchar),
    _gst_reserved: [gpointer, ..4u],
}
pub type GstDebugGraphDetails = c_uint;
pub static GST_DEBUG_GRAPH_SHOW_MEDIA_TYPE: c_uint = 1;
pub static GST_DEBUG_GRAPH_SHOW_CAPS_DETAILS: c_uint = 2;
pub static GST_DEBUG_GRAPH_SHOW_NON_DEFAULT_PARAMS: c_uint = 4;
pub static GST_DEBUG_GRAPH_SHOW_STATES: c_uint = 8;
pub static GST_DEBUG_GRAPH_SHOW_ALL: c_uint = 15;
pub type GstCoreError = c_uint;
pub static GST_CORE_ERROR_FAILED: c_uint = 1;
pub static GST_CORE_ERROR_TOO_LAZY: c_uint = 2;
pub static GST_CORE_ERROR_NOT_IMPLEMENTED: c_uint = 3;
pub static GST_CORE_ERROR_STATE_CHANGE: c_uint = 4;
pub static GST_CORE_ERROR_PAD: c_uint = 5;
pub static GST_CORE_ERROR_THREAD: c_uint = 6;
pub static GST_CORE_ERROR_NEGOTIATION: c_uint = 7;
pub static GST_CORE_ERROR_EVENT: c_uint = 8;
pub static GST_CORE_ERROR_SEEK: c_uint = 9;
pub static GST_CORE_ERROR_CAPS: c_uint = 10;
pub static GST_CORE_ERROR_TAG: c_uint = 11;
pub static GST_CORE_ERROR_MISSING_PLUGIN: c_uint = 12;
pub static GST_CORE_ERROR_CLOCK: c_uint = 13;
pub static GST_CORE_ERROR_DISABLED: c_uint = 14;
pub static GST_CORE_ERROR_NUM_ERRORS: c_uint = 15;
pub type GstLibraryError = c_uint;
pub static GST_LIBRARY_ERROR_FAILED: c_uint = 1;
pub static GST_LIBRARY_ERROR_TOO_LAZY: c_uint = 2;
pub static GST_LIBRARY_ERROR_INIT: c_uint = 3;
pub static GST_LIBRARY_ERROR_SHUTDOWN: c_uint = 4;
pub static GST_LIBRARY_ERROR_SETTINGS: c_uint = 5;
pub static GST_LIBRARY_ERROR_ENCODE: c_uint = 6;
pub static GST_LIBRARY_ERROR_NUM_ERRORS: c_uint = 7;
pub type GstResourceError = c_uint;
pub static GST_RESOURCE_ERROR_FAILED: c_uint = 1;
pub static GST_RESOURCE_ERROR_TOO_LAZY: c_uint = 2;
pub static GST_RESOURCE_ERROR_NOT_FOUND: c_uint = 3;
pub static GST_RESOURCE_ERROR_BUSY: c_uint = 4;
pub static GST_RESOURCE_ERROR_OPEN_READ: c_uint = 5;
pub static GST_RESOURCE_ERROR_OPEN_WRITE: c_uint = 6;
pub static GST_RESOURCE_ERROR_OPEN_READ_WRITE: c_uint = 7;
pub static GST_RESOURCE_ERROR_CLOSE: c_uint = 8;
pub static GST_RESOURCE_ERROR_READ: c_uint = 9;
pub static GST_RESOURCE_ERROR_WRITE: c_uint = 10;
pub static GST_RESOURCE_ERROR_SEEK: c_uint = 11;
pub static GST_RESOURCE_ERROR_SYNC: c_uint = 12;
pub static GST_RESOURCE_ERROR_SETTINGS: c_uint = 13;
pub static GST_RESOURCE_ERROR_NO_SPACE_LEFT: c_uint = 14;
pub static GST_RESOURCE_ERROR_NUM_ERRORS: c_uint = 15;
pub type GstStreamError = c_uint;
pub static GST_STREAM_ERROR_FAILED: c_uint = 1;
pub static GST_STREAM_ERROR_TOO_LAZY: c_uint = 2;
pub static GST_STREAM_ERROR_NOT_IMPLEMENTED: c_uint = 3;
pub static GST_STREAM_ERROR_TYPE_NOT_FOUND: c_uint = 4;
pub static GST_STREAM_ERROR_WRONG_TYPE: c_uint = 5;
pub static GST_STREAM_ERROR_CODEC_NOT_FOUND: c_uint = 6;
pub static GST_STREAM_ERROR_DECODE: c_uint = 7;
pub static GST_STREAM_ERROR_ENCODE: c_uint = 8;
pub static GST_STREAM_ERROR_DEMUX: c_uint = 9;
pub static GST_STREAM_ERROR_MUX: c_uint = 10;
pub static GST_STREAM_ERROR_FORMAT: c_uint = 11;
pub static GST_STREAM_ERROR_DECRYPT: c_uint = 12;
pub static GST_STREAM_ERROR_DECRYPT_NOKEY: c_uint = 13;
pub static GST_STREAM_ERROR_NUM_ERRORS: c_uint = 14;
pub type GstProxyPad = Struct__GstProxyPad;
pub type Struct__GstProxyPadPrivate = c_void;
pub type GstProxyPadPrivate = Struct__GstProxyPadPrivate;
pub type GstProxyPadClass = Struct__GstProxyPadClass;
pub struct Struct__GstProxyPad {
    pad: GstPad,
    _priv: *mut GstProxyPadPrivate,
}
pub struct Struct__GstProxyPadClass {
    parent_class: GstPadClass,
    _gst_reserved: [gpointer, ..1u],
}
pub type GstGhostPad = Struct__GstGhostPad;
pub type Struct__GstGhostPadPrivate = c_void;
pub type GstGhostPadPrivate = Struct__GstGhostPadPrivate;
pub type GstGhostPadClass = Struct__GstGhostPadClass;
pub struct Struct__GstGhostPad {
    pad: GstProxyPad,
    _priv: *mut GstGhostPadPrivate,
}
pub struct Struct__GstGhostPadClass {
    parent_class: GstProxyPadClass,
    _gst_reserved: [gpointer, ..4u],
}
pub type GstDebugLevel = c_uint;
pub static GST_LEVEL_NONE: c_uint = 0;
pub static GST_LEVEL_ERROR: c_uint = 1;
pub static GST_LEVEL_WARNING: c_uint = 2;
pub static GST_LEVEL_FIXME: c_uint = 3;
pub static GST_LEVEL_INFO: c_uint = 4;
pub static GST_LEVEL_DEBUG: c_uint = 5;
pub static GST_LEVEL_LOG: c_uint = 6;
pub static GST_LEVEL_TRACE: c_uint = 7;
pub static GST_LEVEL_MEMDUMP: c_uint = 9;
pub static GST_LEVEL_COUNT: c_uint = 10;
pub type GstDebugColorFlags = c_uint;
pub static GST_DEBUG_FG_BLACK: c_uint = 0;
pub static GST_DEBUG_FG_RED: c_uint = 1;
pub static GST_DEBUG_FG_GREEN: c_uint = 2;
pub static GST_DEBUG_FG_YELLOW: c_uint = 3;
pub static GST_DEBUG_FG_BLUE: c_uint = 4;
pub static GST_DEBUG_FG_MAGENTA: c_uint = 5;
pub static GST_DEBUG_FG_CYAN: c_uint = 6;
pub static GST_DEBUG_FG_WHITE: c_uint = 7;
pub static GST_DEBUG_BG_BLACK: c_uint = 0;
pub static GST_DEBUG_BG_RED: c_uint = 16;
pub static GST_DEBUG_BG_GREEN: c_uint = 32;
pub static GST_DEBUG_BG_YELLOW: c_uint = 48;
pub static GST_DEBUG_BG_BLUE: c_uint = 64;
pub static GST_DEBUG_BG_MAGENTA: c_uint = 80;
pub static GST_DEBUG_BG_CYAN: c_uint = 96;
pub static GST_DEBUG_BG_WHITE: c_uint = 112;
pub static GST_DEBUG_BOLD: c_uint = 256;
pub static GST_DEBUG_UNDERLINE: c_uint = 512;
pub type GstDebugColorMode = c_uint;
pub static GST_DEBUG_COLOR_MODE_OFF: c_uint = 0;
pub static GST_DEBUG_COLOR_MODE_ON: c_uint = 1;
pub static GST_DEBUG_COLOR_MODE_UNIX: c_uint = 2;
pub type GstDebugCategory = Struct__GstDebugCategory;
pub struct Struct__GstDebugCategory {
    threshold: gint,
    color: guint,
    name: *gchar,
    description: *gchar,
}
pub type Struct__GstDebugMessage = c_void;
pub type GstDebugMessage = Struct__GstDebugMessage;
pub type GstLogFunction =
    extern "C" fn
        (arg1: *mut GstDebugCategory, arg2: GstDebugLevel, arg3: *gchar,
         arg4: *gchar, arg5: gint, arg6: *mut GObject,
         arg7: *mut GstDebugMessage, arg8: gpointer);
pub type GstDebugFuncPtr = extern "C" fn();
pub type GstValueCompareFunc =
    extern "C" fn(arg1: *GValue, arg2: *GValue) -> gint;
pub type GstValueSerializeFunc = extern "C" fn(arg1: *GValue) -> *mut gchar;
pub type GstValueDeserializeFunc =
    extern "C" fn(arg1: *mut GValue, arg2: *gchar) -> gboolean;
pub type GstValueTable = Struct__GstValueTable;
pub struct Struct__GstValueTable {
    _type: GType,
    compare: GstValueCompareFunc,
    serialize: GstValueSerializeFunc,
    deserialize: GstValueDeserializeFunc,
    _gst_reserved: [gpointer, ..4u],
}
pub type GstParamSpecFraction = Struct__GstParamSpecFraction;
pub struct Struct__GstParamSpecFraction {
    parent_instance: GParamSpec,
    min_num: gint,
    min_den: gint,
    max_num: gint,
    max_den: gint,
    def_num: gint,
    def_den: gint,
}
pub type GstPipeline = Struct__GstPipeline;
pub type GstPipelineClass = Struct__GstPipelineClass;
pub type Struct__GstPipelinePrivate = c_void;
pub type GstPipelinePrivate = Struct__GstPipelinePrivate;
pub type GstPipelineFlags = c_uint;
pub static GST_PIPELINE_FLAG_FIXED_CLOCK: c_uint = 524288;
pub static GST_PIPELINE_FLAG_LAST: c_uint = 8388608;
pub struct Struct__GstPipeline {
    bin: GstBin,
    fixed_clock: *mut GstClock,
    stream_time: GstClockTime,
    delay: GstClockTime,
    _priv: *mut GstPipelinePrivate,
    _gst_reserved: [gpointer, ..4u],
}
pub struct Struct__GstPipelineClass {
    parent_class: GstBinClass,
    _gst_reserved: [gpointer, ..4u],
}
pub type Struct__GstPoll = c_void;
pub type GstPoll = Struct__GstPoll;
pub struct GstPollFD {
    fd: c_int,
    idx: gint,
}
pub type Struct__GstPreset = c_void;
pub type GstPreset = Struct__GstPreset;
pub type GstPresetInterface = Struct__GstPresetInterface;
pub struct Struct__GstPresetInterface {
    parent: GTypeInterface,
    get_preset_names: extern "C" fn(arg1: *mut GstPreset) -> *mut *mut gchar,
    get_property_names: extern "C" fn(arg1: *mut GstPreset)
                            -> *mut *mut gchar,
    load_preset: extern "C" fn(arg1: *mut GstPreset, arg2: *gchar)
                     -> gboolean,
    save_preset: extern "C" fn(arg1: *mut GstPreset, arg2: *gchar)
                     -> gboolean,
    rename_preset: extern "C" fn
                       (arg1: *mut GstPreset, arg2: *gchar, arg3: *gchar)
                       -> gboolean,
    delete_preset: extern "C" fn(arg1: *mut GstPreset, arg2: *gchar)
                       -> gboolean,
    set_meta: extern "C" fn
                  (arg1: *mut GstPreset, arg2: *gchar, arg3: *gchar,
                   arg4: *gchar) -> gboolean,
    get_meta: extern "C" fn
                  (arg1: *mut GstPreset, arg2: *gchar, arg3: *gchar,
                   arg4: *mut *mut gchar) -> gboolean,
    _gst_reserved: [gpointer, ..4u],
}
pub type GstRegistry = Struct__GstRegistry;
pub type GstRegistryClass = Struct__GstRegistryClass;
pub type Struct__GstRegistryPrivate = c_void;
pub type GstRegistryPrivate = Struct__GstRegistryPrivate;
pub struct Struct__GstRegistry {
    object: GstObject,
    _priv: *mut GstRegistryPrivate,
}
pub struct Struct__GstRegistryClass {
    parent_class: GstObjectClass,
}
pub type GstSystemClock = Struct__GstSystemClock;
pub type GstSystemClockClass = Struct__GstSystemClockClass;
pub type Struct__GstSystemClockPrivate = c_void;
pub type GstSystemClockPrivate = Struct__GstSystemClockPrivate;
pub type GstClockType = c_uint;
pub static GST_CLOCK_TYPE_REALTIME: c_uint = 0;
pub static GST_CLOCK_TYPE_MONOTONIC: c_uint = 1;
pub static GST_CLOCK_TYPE_OTHER: c_uint = 2;
pub struct Struct__GstSystemClock {
    clock: GstClock,
    _priv: *mut GstSystemClockPrivate,
    _gst_reserved: [gpointer, ..4u],
}
pub struct Struct__GstSystemClockClass {
    parent_class: GstClockClass,
    _gst_reserved: [gpointer, ..4u],
}
pub type Struct__GstTagSetter = c_void;
pub type GstTagSetter = Struct__GstTagSetter;
pub type GstTagSetterInterface = Struct__GstTagSetterInterface;
pub struct Struct__GstTagSetterInterface {
    g_iface: GTypeInterface,
}
pub type Struct__GstTocSetter = c_void;
pub type GstTocSetter = Struct__GstTocSetter;
pub type GstTocSetterInterface = Struct__GstTocSetterInterface;
pub struct Struct__GstTocSetterInterface {
    g_iface: GTypeInterface,
}
pub type GstTypeFind = Struct__GstTypeFind;
pub type GstTypeFindFunction =
    extern "C" fn(arg1: *mut GstTypeFind, arg2: gpointer);
pub type GstTypeFindProbability = c_uint;
pub static GST_TYPE_FIND_NONE: c_uint = 0;
pub static GST_TYPE_FIND_MINIMUM: c_uint = 1;
pub static GST_TYPE_FIND_POSSIBLE: c_uint = 50;
pub static GST_TYPE_FIND_LIKELY: c_uint = 80;
pub static GST_TYPE_FIND_NEARLY_CERTAIN: c_uint = 99;
pub static GST_TYPE_FIND_MAXIMUM: c_uint = 100;
pub struct Struct__GstTypeFind {
    peek: extern "C" fn(arg1: gpointer, arg2: gint64, arg3: guint) -> *guint8,
    suggest: extern "C" fn(arg1: gpointer, arg2: guint, arg3: *mut GstCaps),
    data: gpointer,
    get_length: extern "C" fn(arg1: gpointer) -> guint64,
    _gst_reserved: [gpointer, ..4u],
}
pub type Struct__GstTypeFindFactory = c_void;
pub type GstTypeFindFactory = Struct__GstTypeFindFactory;
pub type Struct__GstTypeFindFactoryClass = c_void;
pub type GstTypeFindFactoryClass = Struct__GstTypeFindFactoryClass;
pub type GstParseError = c_uint;
pub static GST_PARSE_ERROR_SYNTAX: c_uint = 0;
pub static GST_PARSE_ERROR_NO_SUCH_ELEMENT: c_uint = 1;
pub static GST_PARSE_ERROR_NO_SUCH_PROPERTY: c_uint = 2;
pub static GST_PARSE_ERROR_LINK: c_uint = 3;
pub static GST_PARSE_ERROR_COULD_NOT_SET_PROPERTY: c_uint = 4;
pub static GST_PARSE_ERROR_EMPTY_BIN: c_uint = 5;
pub static GST_PARSE_ERROR_EMPTY: c_uint = 6;
pub type GstParseFlags = c_uint;
pub static GST_PARSE_FLAG_NONE: c_uint = 0;
pub static GST_PARSE_FLAG_FATAL_ERRORS: c_uint = 1;
pub static GST_PARSE_FLAG_NO_SINGLE_ELEMENT_BINS: c_uint = 2;
pub type Struct__GstParseContext = c_void;
pub type GstParseContext = Struct__GstParseContext;
pub type GstSearchMode = c_uint;
pub static GST_SEARCH_MODE_EXACT: c_uint = 0;
pub static GST_SEARCH_MODE_BEFORE: c_uint = 1;
pub static GST_SEARCH_MODE_AFTER: c_uint = 2;
pub type __va_list_tag = Struct___va_list_tag;
pub struct Struct___va_list_tag {
    gp_offset: c_uint,
    fp_offset: c_uint,
    overflow_arg_area: *mut c_void,
    reg_save_area: *mut c_void,
}
extern "C" {
    pub static mut __tzname: [*mut c_schar, ..2u];
    pub static mut __daylight: c_int;
    pub static mut __timezone: c_long;
    pub static mut tzname: [*mut c_schar, ..2u];
    pub static mut daylight: c_int;
    pub static mut timezone: c_long;
    pub static mut _sys_siglist: [*c_schar, ..65u];
    pub static mut sys_siglist: [*c_schar, ..65u];
    pub static mut g_mem_gc_friendly: gboolean;
    pub static mut glib_mem_profiler_table: *mut GMemVTable;
    pub static mut g_timeout_funcs: GSourceFuncs;
    pub static mut g_child_watch_funcs: GSourceFuncs;
    pub static mut g_idle_funcs: GSourceFuncs;
    pub static mut g_unix_signal_funcs: GSourceFuncs;
    pub static mut g_unix_fd_source_funcs: GSourceFuncs;
    pub static g_utf8_skip: *gchar;
    pub static mut g_io_watch_funcs: GSourceFuncs;
    pub static g_ascii_table: *guint16;
    pub static g_test_config_vars: *GTestConfig;
    pub static glib_major_version: guint;
    pub static glib_minor_version: guint;
    pub static glib_micro_version: guint;
    pub static glib_interface_age: guint;
    pub static glib_binary_age: guint;
    pub static mut g_thread_functions_for_glib_use: GThreadFunctions;
    pub static mut g_thread_use_default_impl: gboolean;
    pub static mut g_thread_gettime: extern "C" fn() -> guint64;
    pub static mut g_threads_got_initialized: gboolean;
    pub static mut _g_type_debug_flags: GTypeDebugFlags;
    pub static mut g_param_spec_types: *mut GType;
    pub static mut __environ: *mut *mut c_schar;
    pub static mut optarg: *mut c_schar;
    pub static mut optind: c_int;
    pub static mut opterr: c_int;
    pub static mut optopt: c_int;
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: c_int;
    pub static mut sys_errlist: c_void;
    pub static gdk_pixbuf_major_version: guint;
    pub static gdk_pixbuf_minor_version: guint;
    pub static gdk_pixbuf_micro_version: guint;
    pub static mut gdk_pixbuf_version: *c_schar;
    pub static mut atk_misc_instance: *mut AtkMisc;
    pub static mut gst_memory_alignment: gsize;
    pub static mut _gst_buffer_type: GType;
    pub static mut _gst_meta_transform_copy: GQuark;
    pub static mut _gst_meta_tag_memory: GQuark;
    pub static mut _gst_buffer_list_type: GType;
    pub static mut _gst_structure_type: GType;
    pub static mut _gst_caps_features_any: *mut GstCapsFeatures;
    pub static mut _gst_caps_features_memory_system_memory:
               *mut GstCapsFeatures;
    pub static mut _gst_caps_type: GType;
    pub static mut _gst_caps_any: *mut GstCaps;
    pub static mut _gst_caps_none: *mut GstCaps;
    pub static mut _gst_sample_type: GType;
    pub static mut _gst_event_type: GType;
    pub static mut GST_CAT_DEFAULT: *mut GstDebugCategory;
    pub static mut _gst_debug_enabled: gboolean;
    pub static mut _gst_debug_min: GstDebugLevel;
    pub fn clock() -> clock_t;
    pub fn time(__timer: *mut time_t) -> time_t;
    pub fn difftime(__time1: time_t, __time0: time_t) -> c_double;
    pub fn mktime(__tp: *mut Struct_tm) -> time_t;
    pub fn strftime(__s: *mut c_schar, __maxsize: size_t, __format: *c_schar,
                    __tp: *Struct_tm) -> size_t;
    pub fn strftime_l(__s: *mut c_schar, __maxsize: size_t,
                      __format: *c_schar, __tp: *Struct_tm, __loc: __locale_t)
     -> size_t;
    pub fn gmtime(__timer: *time_t) -> *mut Struct_tm;
    pub fn localtime(__timer: *time_t) -> *mut Struct_tm;
    pub fn gmtime_r(__timer: *time_t, __tp: *mut Struct_tm) -> *mut Struct_tm;
    pub fn localtime_r(__timer: *time_t, __tp: *mut Struct_tm) ->
     *mut Struct_tm;
    pub fn asctime(__tp: *Struct_tm) -> *mut c_schar;
    pub fn ctime(__timer: *time_t) -> *mut c_schar;
    pub fn asctime_r(__tp: *Struct_tm, __buf: *mut c_schar) -> *mut c_schar;
    pub fn ctime_r(__timer: *time_t, __buf: *mut c_schar) -> *mut c_schar;
    pub fn tzset();
    pub fn stime(__when: *time_t) -> c_int;
    pub fn timegm(__tp: *mut Struct_tm) -> time_t;
    pub fn timelocal(__tp: *mut Struct_tm) -> time_t;
    pub fn dysize(__year: c_int) -> c_int;
    pub fn nanosleep(__requested_time: *Struct_timespec,
                     __remaining: *mut Struct_timespec) -> c_int;
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut Struct_timespec) ->
     c_int;
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut Struct_timespec) ->
     c_int;
    pub fn clock_settime(__clock_id: clockid_t, __tp: *Struct_timespec) ->
     c_int;
    pub fn clock_nanosleep(__clock_id: clockid_t, __flags: c_int,
                           __req: *Struct_timespec,
                           __rem: *mut Struct_timespec) -> c_int;
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) ->
     c_int;
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut Struct_sigevent,
                        __timerid: *mut timer_t) -> c_int;
    pub fn timer_delete(__timerid: timer_t) -> c_int;
    pub fn timer_settime(__timerid: timer_t, __flags: c_int,
                         __value: *Struct_itimerspec,
                         __ovalue: *mut Struct_itimerspec) -> c_int;
    pub fn timer_gettime(__timerid: timer_t, __value: *mut Struct_itimerspec)
     -> c_int;
    pub fn timer_getoverrun(__timerid: timer_t) -> c_int;
    pub fn g_array_new(zero_terminated: gboolean, clear_: gboolean,
                       element_size: guint) -> *mut GArray;
    pub fn g_array_sized_new(zero_terminated: gboolean, clear_: gboolean,
                             element_size: guint, reserved_size: guint) ->
     *mut GArray;
    pub fn g_array_free(array: *mut GArray, free_segment: gboolean) ->
     *mut gchar;
    pub fn g_array_ref(array: *mut GArray) -> *mut GArray;
    pub fn g_array_unref(array: *mut GArray);
    pub fn g_array_get_element_size(array: *mut GArray) -> guint;
    pub fn g_array_append_vals(array: *mut GArray, data: gconstpointer,
                               len: guint) -> *mut GArray;
    pub fn g_array_prepend_vals(array: *mut GArray, data: gconstpointer,
                                len: guint) -> *mut GArray;
    pub fn g_array_insert_vals(array: *mut GArray, index_: guint,
                               data: gconstpointer, len: guint) ->
     *mut GArray;
    pub fn g_array_set_size(array: *mut GArray, length: guint) -> *mut GArray;
    pub fn g_array_remove_index(array: *mut GArray, index_: guint) ->
     *mut GArray;
    pub fn g_array_remove_index_fast(array: *mut GArray, index_: guint) ->
     *mut GArray;
    pub fn g_array_remove_range(array: *mut GArray, index_: guint,
                                length: guint) -> *mut GArray;
    pub fn g_array_sort(array: *mut GArray, compare_func: GCompareFunc);
    pub fn g_array_sort_with_data(array: *mut GArray,
                                  compare_func: GCompareDataFunc,
                                  user_data: gpointer);
    pub fn g_array_set_clear_func(array: *mut GArray,
                                  clear_func: GDestroyNotify);
    pub fn g_ptr_array_new() -> *mut GPtrArray;
    pub fn g_ptr_array_new_with_free_func(element_free_func: GDestroyNotify)
     -> *mut GPtrArray;
    pub fn g_ptr_array_sized_new(reserved_size: guint) -> *mut GPtrArray;
    pub fn g_ptr_array_new_full(reserved_size: guint,
                                element_free_func: GDestroyNotify) ->
     *mut GPtrArray;
    pub fn g_ptr_array_free(array: *mut GPtrArray, free_seg: gboolean) ->
     *mut gpointer;
    pub fn g_ptr_array_ref(array: *mut GPtrArray) -> *mut GPtrArray;
    pub fn g_ptr_array_unref(array: *mut GPtrArray);
    pub fn g_ptr_array_set_free_func(array: *mut GPtrArray,
                                     element_free_func: GDestroyNotify);
    pub fn g_ptr_array_set_size(array: *mut GPtrArray, length: gint);
    pub fn g_ptr_array_remove_index(array: *mut GPtrArray, index_: guint) ->
     gpointer;
    pub fn g_ptr_array_remove_index_fast(array: *mut GPtrArray, index_: guint)
     -> gpointer;
    pub fn g_ptr_array_remove(array: *mut GPtrArray, data: gpointer) ->
     gboolean;
    pub fn g_ptr_array_remove_fast(array: *mut GPtrArray, data: gpointer) ->
     gboolean;
    pub fn g_ptr_array_remove_range(array: *mut GPtrArray, index_: guint,
                                    length: guint);
    pub fn g_ptr_array_add(array: *mut GPtrArray, data: gpointer);
    pub fn g_ptr_array_sort(array: *mut GPtrArray,
                            compare_func: GCompareFunc);
    pub fn g_ptr_array_sort_with_data(array: *mut GPtrArray,
                                      compare_func: GCompareDataFunc,
                                      user_data: gpointer);
    pub fn g_ptr_array_foreach(array: *mut GPtrArray, func: GFunc,
                               user_data: gpointer);
    pub fn g_byte_array_new() -> *mut GByteArray;
    pub fn g_byte_array_new_take(data: *mut guint8, len: gsize) ->
     *mut GByteArray;
    pub fn g_byte_array_sized_new(reserved_size: guint) -> *mut GByteArray;
    pub fn g_byte_array_free(array: *mut GByteArray, free_segment: gboolean)
     -> *mut guint8;
    pub fn g_byte_array_free_to_bytes(array: *mut GByteArray) -> *mut GBytes;
    pub fn g_byte_array_ref(array: *mut GByteArray) -> *mut GByteArray;
    pub fn g_byte_array_unref(array: *mut GByteArray);
    pub fn g_byte_array_append(array: *mut GByteArray, data: *guint8,
                               len: guint) -> *mut GByteArray;
    pub fn g_byte_array_prepend(array: *mut GByteArray, data: *guint8,
                                len: guint) -> *mut GByteArray;
    pub fn g_byte_array_set_size(array: *mut GByteArray, length: guint) ->
     *mut GByteArray;
    pub fn g_byte_array_remove_index(array: *mut GByteArray, index_: guint) ->
     *mut GByteArray;
    pub fn g_byte_array_remove_index_fast(array: *mut GByteArray,
                                          index_: guint) -> *mut GByteArray;
    pub fn g_byte_array_remove_range(array: *mut GByteArray, index_: guint,
                                     length: guint) -> *mut GByteArray;
    pub fn g_byte_array_sort(array: *mut GByteArray,
                             compare_func: GCompareFunc);
    pub fn g_byte_array_sort_with_data(array: *mut GByteArray,
                                       compare_func: GCompareDataFunc,
                                       user_data: gpointer);
    pub fn g_atomic_int_get(atomic: *gint) -> gint;
    pub fn g_atomic_int_set(atomic: *mut gint, newval: gint);
    pub fn g_atomic_int_inc(atomic: *mut gint);
    pub fn g_atomic_int_dec_and_test(atomic: *mut gint) -> gboolean;
    pub fn g_atomic_int_compare_and_exchange(atomic: *mut gint, oldval: gint,
                                             newval: gint) -> gboolean;
    pub fn g_atomic_int_add(atomic: *mut gint, val: gint) -> gint;
    pub fn g_atomic_int_and(atomic: *mut guint, val: guint) -> guint;
    pub fn g_atomic_int_or(atomic: *mut guint, val: guint) -> guint;
    pub fn g_atomic_int_xor(atomic: *mut guint, val: guint) -> guint;
    pub fn g_atomic_pointer_get(atomic: *c_void) -> gpointer;
    pub fn g_atomic_pointer_set(atomic: *mut c_void, newval: gpointer);
    pub fn g_atomic_pointer_compare_and_exchange(atomic: *mut c_void,
                                                 oldval: gpointer,
                                                 newval: gpointer) ->
     gboolean;
    pub fn g_atomic_pointer_add(atomic: *mut c_void, val: gssize) -> gssize;
    pub fn g_atomic_pointer_and(atomic: *mut c_void, val: gsize) -> gsize;
    pub fn g_atomic_pointer_or(atomic: *mut c_void, val: gsize) -> gsize;
    pub fn g_atomic_pointer_xor(atomic: *mut c_void, val: gsize) -> gsize;
    pub fn g_atomic_int_exchange_and_add(atomic: *mut gint, val: gint) ->
     gint;
    pub fn g_quark_try_string(string: *gchar) -> GQuark;
    pub fn g_quark_from_static_string(string: *gchar) -> GQuark;
    pub fn g_quark_from_string(string: *gchar) -> GQuark;
    pub fn g_quark_to_string(quark: GQuark) -> *gchar;
    pub fn g_intern_string(string: *gchar) -> *gchar;
    pub fn g_intern_static_string(string: *gchar) -> *gchar;
    pub fn g_error_new(domain: GQuark, code: gint, format: *gchar, ...) ->
     *mut GError;
    pub fn g_error_new_literal(domain: GQuark, code: gint, message: *gchar) ->
     *mut GError;
    pub fn g_error_new_valist(domain: GQuark, code: gint, format: *gchar,
                              args: va_list) -> *mut GError;
    pub fn g_error_free(error: *mut GError);
    pub fn g_error_copy(error: *GError) -> *mut GError;
    pub fn g_error_matches(error: *GError, domain: GQuark, code: gint) ->
     gboolean;
    pub fn g_set_error(err: *mut *mut GError, domain: GQuark, code: gint,
                       format: *gchar, ...);
    pub fn g_set_error_literal(err: *mut *mut GError, domain: GQuark,
                               code: gint, message: *gchar);
    pub fn g_propagate_error(dest: *mut *mut GError, src: *mut GError);
    pub fn g_clear_error(err: *mut *mut GError);
    pub fn g_prefix_error(err: *mut *mut GError, format: *gchar, ...);
    pub fn g_propagate_prefixed_error(dest: *mut *mut GError,
                                      src: *mut GError, format: *gchar, ...);
    pub fn g_thread_error_quark() -> GQuark;
    pub fn g_thread_ref(thread: *mut GThread) -> *mut GThread;
    pub fn g_thread_unref(thread: *mut GThread);
    pub fn g_thread_new(name: *gchar, func: GThreadFunc, data: gpointer) ->
     *mut GThread;
    pub fn g_thread_try_new(name: *gchar, func: GThreadFunc, data: gpointer,
                            error: *mut *mut GError) -> *mut GThread;
    pub fn g_thread_self() -> *mut GThread;
    pub fn g_thread_exit(retval: gpointer);
    pub fn g_thread_join(thread: *mut GThread) -> gpointer;
    pub fn g_thread_yield();
    pub fn g_mutex_init(mutex: *mut GMutex);
    pub fn g_mutex_clear(mutex: *mut GMutex);
    pub fn g_mutex_lock(mutex: *mut GMutex);
    pub fn g_mutex_trylock(mutex: *mut GMutex) -> gboolean;
    pub fn g_mutex_unlock(mutex: *mut GMutex);
    pub fn g_rw_lock_init(rw_lock: *mut GRWLock);
    pub fn g_rw_lock_clear(rw_lock: *mut GRWLock);
    pub fn g_rw_lock_writer_lock(rw_lock: *mut GRWLock);
    pub fn g_rw_lock_writer_trylock(rw_lock: *mut GRWLock) -> gboolean;
    pub fn g_rw_lock_writer_unlock(rw_lock: *mut GRWLock);
    pub fn g_rw_lock_reader_lock(rw_lock: *mut GRWLock);
    pub fn g_rw_lock_reader_trylock(rw_lock: *mut GRWLock) -> gboolean;
    pub fn g_rw_lock_reader_unlock(rw_lock: *mut GRWLock);
    pub fn g_rec_mutex_init(rec_mutex: *mut GRecMutex);
    pub fn g_rec_mutex_clear(rec_mutex: *mut GRecMutex);
    pub fn g_rec_mutex_lock(rec_mutex: *mut GRecMutex);
    pub fn g_rec_mutex_trylock(rec_mutex: *mut GRecMutex) -> gboolean;
    pub fn g_rec_mutex_unlock(rec_mutex: *mut GRecMutex);
    pub fn g_cond_init(cond: *mut GCond);
    pub fn g_cond_clear(cond: *mut GCond);
    pub fn g_cond_wait(cond: *mut GCond, mutex: *mut GMutex);
    pub fn g_cond_signal(cond: *mut GCond);
    pub fn g_cond_broadcast(cond: *mut GCond);
    pub fn g_cond_wait_until(cond: *mut GCond, mutex: *mut GMutex,
                             end_time: gint64) -> gboolean;
    pub fn g_private_get(key: *mut GPrivate) -> gpointer;
    pub fn g_private_set(key: *mut GPrivate, value: gpointer);
    pub fn g_private_replace(key: *mut GPrivate, value: gpointer);
    pub fn g_once_impl(_once: *mut GOnce, func: GThreadFunc, arg: gpointer) ->
     gpointer;
    pub fn g_once_init_enter(location: *mut c_void) -> gboolean;
    pub fn g_once_init_leave(location: *mut c_void, result: gsize);
    pub fn g_get_num_processors() -> guint;
    pub fn g_async_queue_new() -> *mut GAsyncQueue;
    pub fn g_async_queue_new_full(item_free_func: GDestroyNotify) ->
     *mut GAsyncQueue;
    pub fn g_async_queue_lock(queue: *mut GAsyncQueue);
    pub fn g_async_queue_unlock(queue: *mut GAsyncQueue);
    pub fn g_async_queue_ref(queue: *mut GAsyncQueue) -> *mut GAsyncQueue;
    pub fn g_async_queue_unref(queue: *mut GAsyncQueue);
    pub fn g_async_queue_ref_unlocked(queue: *mut GAsyncQueue);
    pub fn g_async_queue_unref_and_unlock(queue: *mut GAsyncQueue);
    pub fn g_async_queue_push(queue: *mut GAsyncQueue, data: gpointer);
    pub fn g_async_queue_push_unlocked(queue: *mut GAsyncQueue,
                                       data: gpointer);
    pub fn g_async_queue_push_sorted(queue: *mut GAsyncQueue, data: gpointer,
                                     func: GCompareDataFunc,
                                     user_data: gpointer);
    pub fn g_async_queue_push_sorted_unlocked(queue: *mut GAsyncQueue,
                                              data: gpointer,
                                              func: GCompareDataFunc,
                                              user_data: gpointer);
    pub fn g_async_queue_pop(queue: *mut GAsyncQueue) -> gpointer;
    pub fn g_async_queue_pop_unlocked(queue: *mut GAsyncQueue) -> gpointer;
    pub fn g_async_queue_try_pop(queue: *mut GAsyncQueue) -> gpointer;
    pub fn g_async_queue_try_pop_unlocked(queue: *mut GAsyncQueue) ->
     gpointer;
    pub fn g_async_queue_timeout_pop(queue: *mut GAsyncQueue,
                                     timeout: guint64) -> gpointer;
    pub fn g_async_queue_timeout_pop_unlocked(queue: *mut GAsyncQueue,
                                              timeout: guint64) -> gpointer;
    pub fn g_async_queue_length(queue: *mut GAsyncQueue) -> gint;
    pub fn g_async_queue_length_unlocked(queue: *mut GAsyncQueue) -> gint;
    pub fn g_async_queue_sort(queue: *mut GAsyncQueue, func: GCompareDataFunc,
                              user_data: gpointer);
    pub fn g_async_queue_sort_unlocked(queue: *mut GAsyncQueue,
                                       func: GCompareDataFunc,
                                       user_data: gpointer);
    pub fn g_async_queue_timed_pop(queue: *mut GAsyncQueue,
                                   end_time: *mut GTimeVal) -> gpointer;
    pub fn g_async_queue_timed_pop_unlocked(queue: *mut GAsyncQueue,
                                            end_time: *mut GTimeVal) ->
     gpointer;
    pub fn __sigismember(arg1: *__sigset_t, arg2: c_int) -> c_int;
    pub fn __sigaddset(arg1: *mut __sigset_t, arg2: c_int) -> c_int;
    pub fn __sigdelset(arg1: *mut __sigset_t, arg2: c_int) -> c_int;
    pub fn __sysv_signal(__sig: c_int, __handler: __sighandler_t) ->
     __sighandler_t;
    pub fn signal(__sig: c_int, __handler: __sighandler_t) -> __sighandler_t;
    pub fn kill(__pid: __pid_t, __sig: c_int) -> c_int;
    pub fn killpg(__pgrp: __pid_t, __sig: c_int) -> c_int;
    pub fn raise(__sig: c_int) -> c_int;
    pub fn ssignal(__sig: c_int, __handler: __sighandler_t) -> __sighandler_t;
    pub fn gsignal(__sig: c_int) -> c_int;
    pub fn psignal(__sig: c_int, __s: *c_schar);
    pub fn psiginfo(__pinfo: *siginfo_t, __s: *c_schar);
    pub fn __sigpause(__sig_or_mask: c_int, __is_sig: c_int) -> c_int;
    pub fn sigblock(__mask: c_int) -> c_int;
    pub fn sigsetmask(__mask: c_int) -> c_int;
    pub fn siggetmask() -> c_int;
    pub fn sigemptyset(__set: *mut sigset_t) -> c_int;
    pub fn sigfillset(__set: *mut sigset_t) -> c_int;
    pub fn sigaddset(__set: *mut sigset_t, __signo: c_int) -> c_int;
    pub fn sigdelset(__set: *mut sigset_t, __signo: c_int) -> c_int;
    pub fn sigismember(__set: *sigset_t, __signo: c_int) -> c_int;
    pub fn sigprocmask(__how: c_int, __set: *sigset_t, __oset: *mut sigset_t)
     -> c_int;
    pub fn sigsuspend(__set: *sigset_t) -> c_int;
    pub fn sigaction(__sig: c_int, __act: *Struct_sigaction,
                     __oact: *mut Struct_sigaction) -> c_int;
    pub fn sigpending(__set: *mut sigset_t) -> c_int;
    pub fn sigwait(__set: *sigset_t, __sig: *mut c_int) -> c_int;
    pub fn sigwaitinfo(__set: *sigset_t, __info: *mut siginfo_t) -> c_int;
    pub fn sigtimedwait(__set: *sigset_t, __info: *mut siginfo_t,
                        __timeout: *Struct_timespec) -> c_int;
    pub fn sigqueue(__pid: __pid_t, __sig: c_int, __val: Union_sigval) ->
     c_int;
    pub fn sigvec(__sig: c_int, __vec: *Struct_sigvec,
                  __ovec: *mut Struct_sigvec) -> c_int;
    pub fn sigreturn(__scp: *mut Struct_sigcontext) -> c_int;
    pub fn siginterrupt(__sig: c_int, __interrupt: c_int) -> c_int;
    pub fn sigstack(__ss: *mut Struct_sigstack, __oss: *mut Struct_sigstack)
     -> c_int;
    pub fn sigaltstack(__ss: *Struct_sigaltstack,
                       __oss: *mut Struct_sigaltstack) -> c_int;
    pub fn pthread_sigmask(__how: c_int, __newmask: *__sigset_t,
                           __oldmask: *mut __sigset_t) -> c_int;
    pub fn pthread_kill(__threadid: pthread_t, __signo: c_int) -> c_int;
    pub fn __libc_current_sigrtmin() -> c_int;
    pub fn __libc_current_sigrtmax() -> c_int;
    pub fn g_on_error_query(prg_name: *gchar);
    pub fn g_on_error_stack_trace(prg_name: *gchar);
    pub fn g_base64_encode_step(_in: *guchar, len: gsize,
                                break_lines: gboolean, out: *mut gchar,
                                state: *mut gint, save: *mut gint) -> gsize;
    pub fn g_base64_encode_close(break_lines: gboolean, out: *mut gchar,
                                 state: *mut gint, save: *mut gint) -> gsize;
    pub fn g_base64_encode(data: *guchar, len: gsize) -> *mut gchar;
    pub fn g_base64_decode_step(_in: *gchar, len: gsize, out: *mut guchar,
                                state: *mut gint, save: *mut guint) -> gsize;
    pub fn g_base64_decode(text: *gchar, out_len: *mut gsize) -> *mut guchar;
    pub fn g_base64_decode_inplace(text: *mut gchar, out_len: *mut gsize) ->
     *mut guchar;
    pub fn g_bit_lock(address: *mut gint, lock_bit: gint);
    pub fn g_bit_trylock(address: *mut gint, lock_bit: gint) -> gboolean;
    pub fn g_bit_unlock(address: *mut gint, lock_bit: gint);
    pub fn g_pointer_bit_lock(address: *mut c_void, lock_bit: gint);
    pub fn g_pointer_bit_trylock(address: *mut c_void, lock_bit: gint) ->
     gboolean;
    pub fn g_pointer_bit_unlock(address: *mut c_void, lock_bit: gint);
    pub fn g_bookmark_file_error_quark() -> GQuark;
    pub fn g_bookmark_file_new() -> *mut GBookmarkFile;
    pub fn g_bookmark_file_free(bookmark: *mut GBookmarkFile);
    pub fn g_bookmark_file_load_from_file(bookmark: *mut GBookmarkFile,
                                          filename: *gchar,
                                          error: *mut *mut GError) ->
     gboolean;
    pub fn g_bookmark_file_load_from_data(bookmark: *mut GBookmarkFile,
                                          data: *gchar, length: gsize,
                                          error: *mut *mut GError) ->
     gboolean;
    pub fn g_bookmark_file_load_from_data_dirs(bookmark: *mut GBookmarkFile,
                                               file: *gchar,
                                               full_path: *mut *mut gchar,
                                               error: *mut *mut GError) ->
     gboolean;
    pub fn g_bookmark_file_to_data(bookmark: *mut GBookmarkFile,
                                   length: *mut gsize,
                                   error: *mut *mut GError) -> *mut gchar;
    pub fn g_bookmark_file_to_file(bookmark: *mut GBookmarkFile,
                                   filename: *gchar, error: *mut *mut GError)
     -> gboolean;
    pub fn g_bookmark_file_set_title(bookmark: *mut GBookmarkFile,
                                     uri: *gchar, title: *gchar);
    pub fn g_bookmark_file_get_title(bookmark: *mut GBookmarkFile,
                                     uri: *gchar, error: *mut *mut GError) ->
     *mut gchar;
    pub fn g_bookmark_file_set_description(bookmark: *mut GBookmarkFile,
                                           uri: *gchar, description: *gchar);
    pub fn g_bookmark_file_get_description(bookmark: *mut GBookmarkFile,
                                           uri: *gchar,
                                           error: *mut *mut GError) ->
     *mut gchar;
    pub fn g_bookmark_file_set_mime_type(bookmark: *mut GBookmarkFile,
                                         uri: *gchar, mime_type: *gchar);
    pub fn g_bookmark_file_get_mime_type(bookmark: *mut GBookmarkFile,
                                         uri: *gchar, error: *mut *mut GError)
     -> *mut gchar;
    pub fn g_bookmark_file_set_groups(bookmark: *mut GBookmarkFile,
                                      uri: *gchar, groups: *mut *gchar,
                                      length: gsize);
    pub fn g_bookmark_file_add_group(bookmark: *mut GBookmarkFile,
                                     uri: *gchar, group: *gchar);
    pub fn g_bookmark_file_has_group(bookmark: *mut GBookmarkFile,
                                     uri: *gchar, group: *gchar,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_bookmark_file_get_groups(bookmark: *mut GBookmarkFile,
                                      uri: *gchar, length: *mut gsize,
                                      error: *mut *mut GError) ->
     *mut *mut gchar;
    pub fn g_bookmark_file_add_application(bookmark: *mut GBookmarkFile,
                                           uri: *gchar, name: *gchar,
                                           exec: *gchar);
    pub fn g_bookmark_file_has_application(bookmark: *mut GBookmarkFile,
                                           uri: *gchar, name: *gchar,
                                           error: *mut *mut GError) ->
     gboolean;
    pub fn g_bookmark_file_get_applications(bookmark: *mut GBookmarkFile,
                                            uri: *gchar, length: *mut gsize,
                                            error: *mut *mut GError) ->
     *mut *mut gchar;
    pub fn g_bookmark_file_set_app_info(bookmark: *mut GBookmarkFile,
                                        uri: *gchar, name: *gchar,
                                        exec: *gchar, count: gint,
                                        stamp: time_t,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_bookmark_file_get_app_info(bookmark: *mut GBookmarkFile,
                                        uri: *gchar, name: *gchar,
                                        exec: *mut *mut gchar,
                                        count: *mut guint, stamp: *mut time_t,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_bookmark_file_set_is_private(bookmark: *mut GBookmarkFile,
                                          uri: *gchar, is_private: gboolean);
    pub fn g_bookmark_file_get_is_private(bookmark: *mut GBookmarkFile,
                                          uri: *gchar,
                                          error: *mut *mut GError) ->
     gboolean;
    pub fn g_bookmark_file_set_icon(bookmark: *mut GBookmarkFile, uri: *gchar,
                                    href: *gchar, mime_type: *gchar);
    pub fn g_bookmark_file_get_icon(bookmark: *mut GBookmarkFile, uri: *gchar,
                                    href: *mut *mut gchar,
                                    mime_type: *mut *mut gchar,
                                    error: *mut *mut GError) -> gboolean;
    pub fn g_bookmark_file_set_added(bookmark: *mut GBookmarkFile,
                                     uri: *gchar, added: time_t);
    pub fn g_bookmark_file_get_added(bookmark: *mut GBookmarkFile,
                                     uri: *gchar, error: *mut *mut GError) ->
     time_t;
    pub fn g_bookmark_file_set_modified(bookmark: *mut GBookmarkFile,
                                        uri: *gchar, modified: time_t);
    pub fn g_bookmark_file_get_modified(bookmark: *mut GBookmarkFile,
                                        uri: *gchar, error: *mut *mut GError)
     -> time_t;
    pub fn g_bookmark_file_set_visited(bookmark: *mut GBookmarkFile,
                                       uri: *gchar, visited: time_t);
    pub fn g_bookmark_file_get_visited(bookmark: *mut GBookmarkFile,
                                       uri: *gchar, error: *mut *mut GError)
     -> time_t;
    pub fn g_bookmark_file_has_item(bookmark: *mut GBookmarkFile, uri: *gchar)
     -> gboolean;
    pub fn g_bookmark_file_get_size(bookmark: *mut GBookmarkFile) -> gint;
    pub fn g_bookmark_file_get_uris(bookmark: *mut GBookmarkFile,
                                    length: *mut gsize) -> *mut *mut gchar;
    pub fn g_bookmark_file_remove_group(bookmark: *mut GBookmarkFile,
                                        uri: *gchar, group: *gchar,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_bookmark_file_remove_application(bookmark: *mut GBookmarkFile,
                                              uri: *gchar, name: *gchar,
                                              error: *mut *mut GError) ->
     gboolean;
    pub fn g_bookmark_file_remove_item(bookmark: *mut GBookmarkFile,
                                       uri: *gchar, error: *mut *mut GError)
     -> gboolean;
    pub fn g_bookmark_file_move_item(bookmark: *mut GBookmarkFile,
                                     old_uri: *gchar, new_uri: *gchar,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_bytes_new(data: gconstpointer, size: gsize) -> *mut GBytes;
    pub fn g_bytes_new_take(data: gpointer, size: gsize) -> *mut GBytes;
    pub fn g_bytes_new_static(data: gconstpointer, size: gsize) ->
     *mut GBytes;
    pub fn g_bytes_new_with_free_func(data: gconstpointer, size: gsize,
                                      free_func: GDestroyNotify,
                                      user_data: gpointer) -> *mut GBytes;
    pub fn g_bytes_new_from_bytes(bytes: *mut GBytes, offset: gsize,
                                  length: gsize) -> *mut GBytes;
    pub fn g_bytes_get_data(bytes: *mut GBytes, size: *mut gsize) ->
     gconstpointer;
    pub fn g_bytes_get_size(bytes: *mut GBytes) -> gsize;
    pub fn g_bytes_ref(bytes: *mut GBytes) -> *mut GBytes;
    pub fn g_bytes_unref(bytes: *mut GBytes);
    pub fn g_bytes_unref_to_data(bytes: *mut GBytes, size: *mut gsize) ->
     gpointer;
    pub fn g_bytes_unref_to_array(bytes: *mut GBytes) -> *mut GByteArray;
    pub fn g_bytes_hash(bytes: gconstpointer) -> guint;
    pub fn g_bytes_equal(bytes1: gconstpointer, bytes2: gconstpointer) ->
     gboolean;
    pub fn g_bytes_compare(bytes1: gconstpointer, bytes2: gconstpointer) ->
     gint;
    pub fn g_get_charset(charset: *mut *c_schar) -> gboolean;
    pub fn g_get_codeset() -> *mut gchar;
    pub fn g_get_language_names() -> **gchar;
    pub fn g_get_locale_variants(locale: *gchar) -> *mut *mut gchar;
    pub fn g_checksum_type_get_length(checksum_type: GChecksumType) -> gssize;
    pub fn g_checksum_new(checksum_type: GChecksumType) -> *mut GChecksum;
    pub fn g_checksum_reset(checksum: *mut GChecksum);
    pub fn g_checksum_copy(checksum: *GChecksum) -> *mut GChecksum;
    pub fn g_checksum_free(checksum: *mut GChecksum);
    pub fn g_checksum_update(checksum: *mut GChecksum, data: *guchar,
                             length: gssize);
    pub fn g_checksum_get_string(checksum: *mut GChecksum) -> *gchar;
    pub fn g_checksum_get_digest(checksum: *mut GChecksum,
                                 buffer: *mut guint8, digest_len: *mut gsize);
    pub fn g_compute_checksum_for_data(checksum_type: GChecksumType,
                                       data: *guchar, length: gsize) ->
     *mut gchar;
    pub fn g_compute_checksum_for_string(checksum_type: GChecksumType,
                                         str: *gchar, length: gssize) ->
     *mut gchar;
    pub fn g_compute_checksum_for_bytes(checksum_type: GChecksumType,
                                        data: *mut GBytes) -> *mut gchar;
    pub fn g_convert_error_quark() -> GQuark;
    pub fn g_iconv_open(to_codeset: *gchar, from_codeset: *gchar) -> GIConv;
    pub fn g_iconv(converter: GIConv, inbuf: *mut *mut gchar,
                   inbytes_left: *mut gsize, outbuf: *mut *mut gchar,
                   outbytes_left: *mut gsize) -> gsize;
    pub fn g_iconv_close(converter: GIConv) -> gint;
    pub fn g_convert(str: *gchar, len: gssize, to_codeset: *gchar,
                     from_codeset: *gchar, bytes_read: *mut gsize,
                     bytes_written: *mut gsize, error: *mut *mut GError) ->
     *mut gchar;
    pub fn g_convert_with_iconv(str: *gchar, len: gssize, converter: GIConv,
                                bytes_read: *mut gsize,
                                bytes_written: *mut gsize,
                                error: *mut *mut GError) -> *mut gchar;
    pub fn g_convert_with_fallback(str: *gchar, len: gssize,
                                   to_codeset: *gchar, from_codeset: *gchar,
                                   fallback: *gchar, bytes_read: *mut gsize,
                                   bytes_written: *mut gsize,
                                   error: *mut *mut GError) -> *mut gchar;
    pub fn g_locale_to_utf8(opsysstring: *gchar, len: gssize,
                            bytes_read: *mut gsize, bytes_written: *mut gsize,
                            error: *mut *mut GError) -> *mut gchar;
    pub fn g_locale_from_utf8(utf8string: *gchar, len: gssize,
                              bytes_read: *mut gsize,
                              bytes_written: *mut gsize,
                              error: *mut *mut GError) -> *mut gchar;
    pub fn g_filename_to_utf8(opsysstring: *gchar, len: gssize,
                              bytes_read: *mut gsize,
                              bytes_written: *mut gsize,
                              error: *mut *mut GError) -> *mut gchar;
    pub fn g_filename_from_utf8(utf8string: *gchar, len: gssize,
                                bytes_read: *mut gsize,
                                bytes_written: *mut gsize,
                                error: *mut *mut GError) -> *mut gchar;
    pub fn g_filename_from_uri(uri: *gchar, hostname: *mut *mut gchar,
                               error: *mut *mut GError) -> *mut gchar;
    pub fn g_filename_to_uri(filename: *gchar, hostname: *gchar,
                             error: *mut *mut GError) -> *mut gchar;
    pub fn g_filename_display_name(filename: *gchar) -> *mut gchar;
    pub fn g_get_filename_charsets(charsets: *mut *mut *gchar) -> gboolean;
    pub fn g_filename_display_basename(filename: *gchar) -> *mut gchar;
    pub fn g_uri_list_extract_uris(uri_list: *gchar) -> *mut *mut gchar;
    pub fn g_datalist_init(datalist: *mut *mut GData);
    pub fn g_datalist_clear(datalist: *mut *mut GData);
    pub fn g_datalist_id_get_data(datalist: *mut *mut GData, key_id: GQuark)
     -> gpointer;
    pub fn g_datalist_id_set_data_full(datalist: *mut *mut GData,
                                       key_id: GQuark, data: gpointer,
                                       destroy_func: GDestroyNotify);
    pub fn g_datalist_id_dup_data(datalist: *mut *mut GData, key_id: GQuark,
                                  dup_func: GDuplicateFunc,
                                  user_data: gpointer) -> gpointer;
    pub fn g_datalist_id_replace_data(datalist: *mut *mut GData,
                                      key_id: GQuark, oldval: gpointer,
                                      newval: gpointer,
                                      destroy: GDestroyNotify,
                                      old_destroy: *mut GDestroyNotify) ->
     gboolean;
    pub fn g_datalist_id_remove_no_notify(datalist: *mut *mut GData,
                                          key_id: GQuark) -> gpointer;
    pub fn g_datalist_foreach(datalist: *mut *mut GData,
                              func: GDataForeachFunc, user_data: gpointer);
    pub fn g_datalist_set_flags(datalist: *mut *mut GData, flags: guint);
    pub fn g_datalist_unset_flags(datalist: *mut *mut GData, flags: guint);
    pub fn g_datalist_get_flags(datalist: *mut *mut GData) -> guint;
    pub fn g_dataset_destroy(dataset_location: gconstpointer);
    pub fn g_dataset_id_get_data(dataset_location: gconstpointer,
                                 key_id: GQuark) -> gpointer;
    pub fn g_datalist_get_data(datalist: *mut *mut GData, key: *gchar) ->
     gpointer;
    pub fn g_dataset_id_set_data_full(dataset_location: gconstpointer,
                                      key_id: GQuark, data: gpointer,
                                      destroy_func: GDestroyNotify);
    pub fn g_dataset_id_remove_no_notify(dataset_location: gconstpointer,
                                         key_id: GQuark) -> gpointer;
    pub fn g_dataset_foreach(dataset_location: gconstpointer,
                             func: GDataForeachFunc, user_data: gpointer);
    pub fn g_date_new() -> *mut GDate;
    pub fn g_date_new_dmy(day: GDateDay, month: GDateMonth, year: GDateYear)
     -> *mut GDate;
    pub fn g_date_new_julian(julian_day: guint32) -> *mut GDate;
    pub fn g_date_free(date: *mut GDate);
    pub fn g_date_valid(date: *GDate) -> gboolean;
    pub fn g_date_valid_day(day: GDateDay) -> gboolean;
    pub fn g_date_valid_month(month: GDateMonth) -> gboolean;
    pub fn g_date_valid_year(year: GDateYear) -> gboolean;
    pub fn g_date_valid_weekday(weekday: GDateWeekday) -> gboolean;
    pub fn g_date_valid_julian(julian_date: guint32) -> gboolean;
    pub fn g_date_valid_dmy(day: GDateDay, month: GDateMonth, year: GDateYear)
     -> gboolean;
    pub fn g_date_get_weekday(date: *GDate) -> GDateWeekday;
    pub fn g_date_get_month(date: *GDate) -> GDateMonth;
    pub fn g_date_get_year(date: *GDate) -> GDateYear;
    pub fn g_date_get_day(date: *GDate) -> GDateDay;
    pub fn g_date_get_julian(date: *GDate) -> guint32;
    pub fn g_date_get_day_of_year(date: *GDate) -> guint;
    pub fn g_date_get_monday_week_of_year(date: *GDate) -> guint;
    pub fn g_date_get_sunday_week_of_year(date: *GDate) -> guint;
    pub fn g_date_get_iso8601_week_of_year(date: *GDate) -> guint;
    pub fn g_date_clear(date: *mut GDate, n_dates: guint);
    pub fn g_date_set_parse(date: *mut GDate, str: *gchar);
    pub fn g_date_set_time_t(date: *mut GDate, timet: time_t);
    pub fn g_date_set_time_val(date: *mut GDate, timeval: *mut GTimeVal);
    pub fn g_date_set_time(date: *mut GDate, time_: GTime);
    pub fn g_date_set_month(date: *mut GDate, month: GDateMonth);
    pub fn g_date_set_day(date: *mut GDate, day: GDateDay);
    pub fn g_date_set_year(date: *mut GDate, year: GDateYear);
    pub fn g_date_set_dmy(date: *mut GDate, day: GDateDay, month: GDateMonth,
                          y: GDateYear);
    pub fn g_date_set_julian(date: *mut GDate, julian_date: guint32);
    pub fn g_date_is_first_of_month(date: *GDate) -> gboolean;
    pub fn g_date_is_last_of_month(date: *GDate) -> gboolean;
    pub fn g_date_add_days(date: *mut GDate, n_days: guint);
    pub fn g_date_subtract_days(date: *mut GDate, n_days: guint);
    pub fn g_date_add_months(date: *mut GDate, n_months: guint);
    pub fn g_date_subtract_months(date: *mut GDate, n_months: guint);
    pub fn g_date_add_years(date: *mut GDate, n_years: guint);
    pub fn g_date_subtract_years(date: *mut GDate, n_years: guint);
    pub fn g_date_is_leap_year(year: GDateYear) -> gboolean;
    pub fn g_date_get_days_in_month(month: GDateMonth, year: GDateYear) ->
     guint8;
    pub fn g_date_get_monday_weeks_in_year(year: GDateYear) -> guint8;
    pub fn g_date_get_sunday_weeks_in_year(year: GDateYear) -> guint8;
    pub fn g_date_days_between(date1: *GDate, date2: *GDate) -> gint;
    pub fn g_date_compare(lhs: *GDate, rhs: *GDate) -> gint;
    pub fn g_date_to_struct_tm(date: *GDate, tm: *mut Struct_tm);
    pub fn g_date_clamp(date: *mut GDate, min_date: *GDate, max_date: *GDate);
    pub fn g_date_order(date1: *mut GDate, date2: *mut GDate);
    pub fn g_date_strftime(s: *mut gchar, slen: gsize, format: *gchar,
                           date: *GDate) -> gsize;
    pub fn g_time_zone_new(identifier: *gchar) -> *mut GTimeZone;
    pub fn g_time_zone_new_utc() -> *mut GTimeZone;
    pub fn g_time_zone_new_local() -> *mut GTimeZone;
    pub fn g_time_zone_ref(tz: *mut GTimeZone) -> *mut GTimeZone;
    pub fn g_time_zone_unref(tz: *mut GTimeZone);
    pub fn g_time_zone_find_interval(tz: *mut GTimeZone, _type: GTimeType,
                                     time_: gint64) -> gint;
    pub fn g_time_zone_adjust_time(tz: *mut GTimeZone, _type: GTimeType,
                                   time_: *mut gint64) -> gint;
    pub fn g_time_zone_get_abbreviation(tz: *mut GTimeZone, interval: gint) ->
     *gchar;
    pub fn g_time_zone_get_offset(tz: *mut GTimeZone, interval: gint) ->
     gint32;
    pub fn g_time_zone_is_dst(tz: *mut GTimeZone, interval: gint) -> gboolean;
    pub fn g_date_time_unref(datetime: *mut GDateTime);
    pub fn g_date_time_ref(datetime: *mut GDateTime) -> *mut GDateTime;
    pub fn g_date_time_new_now(tz: *mut GTimeZone) -> *mut GDateTime;
    pub fn g_date_time_new_now_local() -> *mut GDateTime;
    pub fn g_date_time_new_now_utc() -> *mut GDateTime;
    pub fn g_date_time_new_from_unix_local(t: gint64) -> *mut GDateTime;
    pub fn g_date_time_new_from_unix_utc(t: gint64) -> *mut GDateTime;
    pub fn g_date_time_new_from_timeval_local(tv: *GTimeVal) ->
     *mut GDateTime;
    pub fn g_date_time_new_from_timeval_utc(tv: *GTimeVal) -> *mut GDateTime;
    pub fn g_date_time_new(tz: *mut GTimeZone, year: gint, month: gint,
                           day: gint, hour: gint, minute: gint,
                           seconds: gdouble) -> *mut GDateTime;
    pub fn g_date_time_new_local(year: gint, month: gint, day: gint,
                                 hour: gint, minute: gint, seconds: gdouble)
     -> *mut GDateTime;
    pub fn g_date_time_new_utc(year: gint, month: gint, day: gint, hour: gint,
                               minute: gint, seconds: gdouble) ->
     *mut GDateTime;
    pub fn g_date_time_add(datetime: *mut GDateTime, timespan: GTimeSpan) ->
     *mut GDateTime;
    pub fn g_date_time_add_years(datetime: *mut GDateTime, years: gint) ->
     *mut GDateTime;
    pub fn g_date_time_add_months(datetime: *mut GDateTime, months: gint) ->
     *mut GDateTime;
    pub fn g_date_time_add_weeks(datetime: *mut GDateTime, weeks: gint) ->
     *mut GDateTime;
    pub fn g_date_time_add_days(datetime: *mut GDateTime, days: gint) ->
     *mut GDateTime;
    pub fn g_date_time_add_hours(datetime: *mut GDateTime, hours: gint) ->
     *mut GDateTime;
    pub fn g_date_time_add_minutes(datetime: *mut GDateTime, minutes: gint) ->
     *mut GDateTime;
    pub fn g_date_time_add_seconds(datetime: *mut GDateTime, seconds: gdouble)
     -> *mut GDateTime;
    pub fn g_date_time_add_full(datetime: *mut GDateTime, years: gint,
                                months: gint, days: gint, hours: gint,
                                minutes: gint, seconds: gdouble) ->
     *mut GDateTime;
    pub fn g_date_time_compare(dt1: gconstpointer, dt2: gconstpointer) ->
     gint;
    pub fn g_date_time_difference(end: *mut GDateTime, begin: *mut GDateTime)
     -> GTimeSpan;
    pub fn g_date_time_hash(datetime: gconstpointer) -> guint;
    pub fn g_date_time_equal(dt1: gconstpointer, dt2: gconstpointer) ->
     gboolean;
    pub fn g_date_time_get_ymd(datetime: *mut GDateTime, year: *mut gint,
                               month: *mut gint, day: *mut gint);
    pub fn g_date_time_get_year(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_month(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_day_of_month(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_week_numbering_year(datetime: *mut GDateTime) ->
     gint;
    pub fn g_date_time_get_week_of_year(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_day_of_week(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_day_of_year(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_hour(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_minute(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_second(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_microsecond(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_seconds(datetime: *mut GDateTime) -> gdouble;
    pub fn g_date_time_to_unix(datetime: *mut GDateTime) -> gint64;
    pub fn g_date_time_to_timeval(datetime: *mut GDateTime, tv: *mut GTimeVal)
     -> gboolean;
    pub fn g_date_time_get_utc_offset(datetime: *mut GDateTime) -> GTimeSpan;
    pub fn g_date_time_get_timezone_abbreviation(datetime: *mut GDateTime) ->
     *gchar;
    pub fn g_date_time_is_daylight_savings(datetime: *mut GDateTime) ->
     gboolean;
    pub fn g_date_time_to_timezone(datetime: *mut GDateTime,
                                   tz: *mut GTimeZone) -> *mut GDateTime;
    pub fn g_date_time_to_local(datetime: *mut GDateTime) -> *mut GDateTime;
    pub fn g_date_time_to_utc(datetime: *mut GDateTime) -> *mut GDateTime;
    pub fn g_date_time_format(datetime: *mut GDateTime, format: *gchar) ->
     *mut gchar;
    pub fn opendir(__name: *c_schar) -> *mut DIR;
    pub fn fdopendir(__fd: c_int) -> *mut DIR;
    pub fn closedir(__dirp: *mut DIR) -> c_int;
    pub fn readdir(__dirp: *mut DIR) -> *mut Struct_dirent;
    pub fn readdir_r(__dirp: *mut DIR, __entry: *mut Struct_dirent,
                     __result: *mut *mut Struct_dirent) -> c_int;
    pub fn rewinddir(__dirp: *mut DIR);
    pub fn seekdir(__dirp: *mut DIR, __pos: c_long);
    pub fn telldir(__dirp: *mut DIR) -> c_long;
    pub fn dirfd(__dirp: *mut DIR) -> c_int;
    pub fn scandir(__dir: *c_schar, __namelist: *mut *mut *mut Struct_dirent,
                   __selector: extern "C" fn(arg1: *Struct_dirent) -> c_int,
                   __cmp:
                       extern "C" fn
                           (arg1: *mut *Struct_dirent,
                            arg2: *mut *Struct_dirent) -> c_int) -> c_int;
    pub fn alphasort(__e1: *mut *Struct_dirent, __e2: *mut *Struct_dirent) ->
     c_int;
    pub fn getdirentries(__fd: c_int, __buf: *mut c_schar, __nbytes: size_t,
                         __basep: *mut __off_t) -> __ssize_t;
    pub fn g_dir_open(path: *gchar, flags: guint, error: *mut *mut GError) ->
     *mut GDir;
    pub fn g_dir_read_name(dir: *mut GDir) -> *gchar;
    pub fn g_dir_rewind(dir: *mut GDir);
    pub fn g_dir_close(dir: *mut GDir);
    pub fn g_getenv(variable: *gchar) -> *gchar;
    pub fn g_setenv(variable: *gchar, value: *gchar, overwrite: gboolean) ->
     gboolean;
    pub fn g_unsetenv(variable: *gchar);
    pub fn g_listenv() -> *mut *mut gchar;
    pub fn g_get_environ() -> *mut *mut gchar;
    pub fn g_environ_getenv(envp: *mut *mut gchar, variable: *gchar) ->
     *gchar;
    pub fn g_environ_setenv(envp: *mut *mut gchar, variable: *gchar,
                            value: *gchar, overwrite: gboolean) ->
     *mut *mut gchar;
    pub fn g_environ_unsetenv(envp: *mut *mut gchar, variable: *gchar) ->
     *mut *mut gchar;
    pub fn g_file_error_quark() -> GQuark;
    pub fn g_file_error_from_errno(err_no: gint) -> GFileError;
    pub fn g_file_test(filename: *gchar, test: GFileTest) -> gboolean;
    pub fn g_file_get_contents(filename: *gchar, contents: *mut *mut gchar,
                               length: *mut gsize, error: *mut *mut GError) ->
     gboolean;
    pub fn g_file_set_contents(filename: *gchar, contents: *gchar,
                               length: gssize, error: *mut *mut GError) ->
     gboolean;
    pub fn g_file_read_link(filename: *gchar, error: *mut *mut GError) ->
     *mut gchar;
    pub fn g_mkdtemp(tmpl: *mut gchar) -> *mut gchar;
    pub fn g_mkdtemp_full(tmpl: *mut gchar, mode: gint) -> *mut gchar;
    pub fn g_mkstemp(tmpl: *mut gchar) -> gint;
    pub fn g_mkstemp_full(tmpl: *mut gchar, flags: gint, mode: gint) -> gint;
    pub fn g_file_open_tmp(tmpl: *gchar, name_used: *mut *mut gchar,
                           error: *mut *mut GError) -> gint;
    pub fn g_dir_make_tmp(tmpl: *gchar, error: *mut *mut GError) ->
     *mut gchar;
    pub fn g_build_path(separator: *gchar, first_element: *gchar, ...) ->
     *mut gchar;
    pub fn g_build_pathv(separator: *gchar, args: *mut *mut gchar) ->
     *mut gchar;
    pub fn g_build_filename(first_element: *gchar, ...) -> *mut gchar;
    pub fn g_build_filenamev(args: *mut *mut gchar) -> *mut gchar;
    pub fn g_mkdir_with_parents(pathname: *gchar, mode: gint) -> gint;
    pub fn g_path_is_absolute(file_name: *gchar) -> gboolean;
    pub fn g_path_skip_root(file_name: *gchar) -> *gchar;
    pub fn g_basename(file_name: *gchar) -> *gchar;
    pub fn g_get_current_dir() -> *mut gchar;
    pub fn g_path_get_basename(file_name: *gchar) -> *mut gchar;
    pub fn g_path_get_dirname(file_name: *gchar) -> *mut gchar;
    pub fn g_strip_context(msgid: *gchar, msgval: *gchar) -> *gchar;
    pub fn g_dgettext(domain: *gchar, msgid: *gchar) -> *gchar;
    pub fn g_dcgettext(domain: *gchar, msgid: *gchar, category: gint) ->
     *gchar;
    pub fn g_dngettext(domain: *gchar, msgid: *gchar, msgid_plural: *gchar,
                       n: gulong) -> *gchar;
    pub fn g_dpgettext(domain: *gchar, msgctxtid: *gchar, msgidoffset: gsize)
     -> *gchar;
    pub fn g_dpgettext2(domain: *gchar, context: *gchar, msgid: *gchar) ->
     *gchar;
    pub fn g_free(mem: gpointer);
    pub fn g_clear_pointer(pp: *mut gpointer, destroy: GDestroyNotify);
    pub fn g_malloc(n_bytes: gsize) -> gpointer;
    pub fn g_malloc0(n_bytes: gsize) -> gpointer;
    pub fn g_realloc(mem: gpointer, n_bytes: gsize) -> gpointer;
    pub fn g_try_malloc(n_bytes: gsize) -> gpointer;
    pub fn g_try_malloc0(n_bytes: gsize) -> gpointer;
    pub fn g_try_realloc(mem: gpointer, n_bytes: gsize) -> gpointer;
    pub fn g_malloc_n(n_blocks: gsize, n_block_bytes: gsize) -> gpointer;
    pub fn g_malloc0_n(n_blocks: gsize, n_block_bytes: gsize) -> gpointer;
    pub fn g_realloc_n(mem: gpointer, n_blocks: gsize, n_block_bytes: gsize)
     -> gpointer;
    pub fn g_try_malloc_n(n_blocks: gsize, n_block_bytes: gsize) -> gpointer;
    pub fn g_try_malloc0_n(n_blocks: gsize, n_block_bytes: gsize) -> gpointer;
    pub fn g_try_realloc_n(mem: gpointer, n_blocks: gsize,
                           n_block_bytes: gsize) -> gpointer;
    pub fn g_mem_set_vtable(vtable: *mut GMemVTable);
    pub fn g_mem_is_system_malloc() -> gboolean;
    pub fn g_mem_profile();
    pub fn g_node_new(data: gpointer) -> *mut GNode;
    pub fn g_node_destroy(root: *mut GNode);
    pub fn g_node_unlink(node: *mut GNode);
    pub fn g_node_copy_deep(node: *mut GNode, copy_func: GCopyFunc,
                            data: gpointer) -> *mut GNode;
    pub fn g_node_copy(node: *mut GNode) -> *mut GNode;
    pub fn g_node_insert(parent: *mut GNode, position: gint, node: *mut GNode)
     -> *mut GNode;
    pub fn g_node_insert_before(parent: *mut GNode, sibling: *mut GNode,
                                node: *mut GNode) -> *mut GNode;
    pub fn g_node_insert_after(parent: *mut GNode, sibling: *mut GNode,
                               node: *mut GNode) -> *mut GNode;
    pub fn g_node_prepend(parent: *mut GNode, node: *mut GNode) -> *mut GNode;
    pub fn g_node_n_nodes(root: *mut GNode, flags: GTraverseFlags) -> guint;
    pub fn g_node_get_root(node: *mut GNode) -> *mut GNode;
    pub fn g_node_is_ancestor(node: *mut GNode, descendant: *mut GNode) ->
     gboolean;
    pub fn g_node_depth(node: *mut GNode) -> guint;
    pub fn g_node_find(root: *mut GNode, order: GTraverseType,
                       flags: GTraverseFlags, data: gpointer) -> *mut GNode;
    pub fn g_node_traverse(root: *mut GNode, order: GTraverseType,
                           flags: GTraverseFlags, max_depth: gint,
                           func: GNodeTraverseFunc, data: gpointer);
    pub fn g_node_max_height(root: *mut GNode) -> guint;
    pub fn g_node_children_foreach(node: *mut GNode, flags: GTraverseFlags,
                                   func: GNodeForeachFunc, data: gpointer);
    pub fn g_node_reverse_children(node: *mut GNode);
    pub fn g_node_n_children(node: *mut GNode) -> guint;
    pub fn g_node_nth_child(node: *mut GNode, n: guint) -> *mut GNode;
    pub fn g_node_last_child(node: *mut GNode) -> *mut GNode;
    pub fn g_node_find_child(node: *mut GNode, flags: GTraverseFlags,
                             data: gpointer) -> *mut GNode;
    pub fn g_node_child_position(node: *mut GNode, child: *mut GNode) -> gint;
    pub fn g_node_child_index(node: *mut GNode, data: gpointer) -> gint;
    pub fn g_node_first_sibling(node: *mut GNode) -> *mut GNode;
    pub fn g_node_last_sibling(node: *mut GNode) -> *mut GNode;
    pub fn g_list_alloc() -> *mut GList;
    pub fn g_list_free(list: *mut GList);
    pub fn g_list_free_1(list: *mut GList);
    pub fn g_list_free_full(list: *mut GList, free_func: GDestroyNotify);
    pub fn g_list_append(list: *mut GList, data: gpointer) -> *mut GList;
    pub fn g_list_prepend(list: *mut GList, data: gpointer) -> *mut GList;
    pub fn g_list_insert(list: *mut GList, data: gpointer, position: gint) ->
     *mut GList;
    pub fn g_list_insert_sorted(list: *mut GList, data: gpointer,
                                func: GCompareFunc) -> *mut GList;
    pub fn g_list_insert_sorted_with_data(list: *mut GList, data: gpointer,
                                          func: GCompareDataFunc,
                                          user_data: gpointer) -> *mut GList;
    pub fn g_list_insert_before(list: *mut GList, sibling: *mut GList,
                                data: gpointer) -> *mut GList;
    pub fn g_list_concat(list1: *mut GList, list2: *mut GList) -> *mut GList;
    pub fn g_list_remove(list: *mut GList, data: gconstpointer) -> *mut GList;
    pub fn g_list_remove_all(list: *mut GList, data: gconstpointer) ->
     *mut GList;
    pub fn g_list_remove_link(list: *mut GList, llink: *mut GList) ->
     *mut GList;
    pub fn g_list_delete_link(list: *mut GList, link_: *mut GList) ->
     *mut GList;
    pub fn g_list_reverse(list: *mut GList) -> *mut GList;
    pub fn g_list_copy(list: *mut GList) -> *mut GList;
    pub fn g_list_copy_deep(list: *mut GList, func: GCopyFunc,
                            user_data: gpointer) -> *mut GList;
    pub fn g_list_nth(list: *mut GList, n: guint) -> *mut GList;
    pub fn g_list_nth_prev(list: *mut GList, n: guint) -> *mut GList;
    pub fn g_list_find(list: *mut GList, data: gconstpointer) -> *mut GList;
    pub fn g_list_find_custom(list: *mut GList, data: gconstpointer,
                              func: GCompareFunc) -> *mut GList;
    pub fn g_list_position(list: *mut GList, llink: *mut GList) -> gint;
    pub fn g_list_index(list: *mut GList, data: gconstpointer) -> gint;
    pub fn g_list_last(list: *mut GList) -> *mut GList;
    pub fn g_list_first(list: *mut GList) -> *mut GList;
    pub fn g_list_length(list: *mut GList) -> guint;
    pub fn g_list_foreach(list: *mut GList, func: GFunc, user_data: gpointer);
    pub fn g_list_sort(list: *mut GList, compare_func: GCompareFunc) ->
     *mut GList;
    pub fn g_list_sort_with_data(list: *mut GList,
                                 compare_func: GCompareDataFunc,
                                 user_data: gpointer) -> *mut GList;
    pub fn g_list_nth_data(list: *mut GList, n: guint) -> gpointer;
    pub fn g_hash_table_new(hash_func: GHashFunc, key_equal_func: GEqualFunc)
     -> *mut GHashTable;
    pub fn g_hash_table_new_full(hash_func: GHashFunc,
                                 key_equal_func: GEqualFunc,
                                 key_destroy_func: GDestroyNotify,
                                 value_destroy_func: GDestroyNotify) ->
     *mut GHashTable;
    pub fn g_hash_table_destroy(hash_table: *mut GHashTable);
    pub fn g_hash_table_insert(hash_table: *mut GHashTable, key: gpointer,
                               value: gpointer);
    pub fn g_hash_table_replace(hash_table: *mut GHashTable, key: gpointer,
                                value: gpointer);
    pub fn g_hash_table_add(hash_table: *mut GHashTable, key: gpointer);
    pub fn g_hash_table_remove(hash_table: *mut GHashTable,
                               key: gconstpointer) -> gboolean;
    pub fn g_hash_table_remove_all(hash_table: *mut GHashTable);
    pub fn g_hash_table_steal(hash_table: *mut GHashTable, key: gconstpointer)
     -> gboolean;
    pub fn g_hash_table_steal_all(hash_table: *mut GHashTable);
    pub fn g_hash_table_lookup(hash_table: *mut GHashTable,
                               key: gconstpointer) -> gpointer;
    pub fn g_hash_table_contains(hash_table: *mut GHashTable,
                                 key: gconstpointer) -> gboolean;
    pub fn g_hash_table_lookup_extended(hash_table: *mut GHashTable,
                                        lookup_key: gconstpointer,
                                        orig_key: *mut gpointer,
                                        value: *mut gpointer) -> gboolean;
    pub fn g_hash_table_foreach(hash_table: *mut GHashTable, func: GHFunc,
                                user_data: gpointer);
    pub fn g_hash_table_find(hash_table: *mut GHashTable, predicate: GHRFunc,
                             user_data: gpointer) -> gpointer;
    pub fn g_hash_table_foreach_remove(hash_table: *mut GHashTable,
                                       func: GHRFunc, user_data: gpointer) ->
     guint;
    pub fn g_hash_table_foreach_steal(hash_table: *mut GHashTable,
                                      func: GHRFunc, user_data: gpointer) ->
     guint;
    pub fn g_hash_table_size(hash_table: *mut GHashTable) -> guint;
    pub fn g_hash_table_get_keys(hash_table: *mut GHashTable) -> *mut GList;
    pub fn g_hash_table_get_values(hash_table: *mut GHashTable) -> *mut GList;
    pub fn g_hash_table_iter_init(iter: *mut GHashTableIter,
                                  hash_table: *mut GHashTable);
    pub fn g_hash_table_iter_next(iter: *mut GHashTableIter,
                                  key: *mut gpointer, value: *mut gpointer) ->
     gboolean;
    pub fn g_hash_table_iter_get_hash_table(iter: *mut GHashTableIter) ->
     *mut GHashTable;
    pub fn g_hash_table_iter_remove(iter: *mut GHashTableIter);
    pub fn g_hash_table_iter_replace(iter: *mut GHashTableIter,
                                     value: gpointer);
    pub fn g_hash_table_iter_steal(iter: *mut GHashTableIter);
    pub fn g_hash_table_ref(hash_table: *mut GHashTable) -> *mut GHashTable;
    pub fn g_hash_table_unref(hash_table: *mut GHashTable);
    pub fn g_str_equal(v1: gconstpointer, v2: gconstpointer) -> gboolean;
    pub fn g_str_hash(v: gconstpointer) -> guint;
    pub fn g_int_equal(v1: gconstpointer, v2: gconstpointer) -> gboolean;
    pub fn g_int_hash(v: gconstpointer) -> guint;
    pub fn g_int64_equal(v1: gconstpointer, v2: gconstpointer) -> gboolean;
    pub fn g_int64_hash(v: gconstpointer) -> guint;
    pub fn g_double_equal(v1: gconstpointer, v2: gconstpointer) -> gboolean;
    pub fn g_double_hash(v: gconstpointer) -> guint;
    pub fn g_direct_hash(v: gconstpointer) -> guint;
    pub fn g_direct_equal(v1: gconstpointer, v2: gconstpointer) -> gboolean;
    pub fn g_hmac_new(digest_type: GChecksumType, key: *guchar,
                      key_len: gsize) -> *mut GHmac;
    pub fn g_hmac_copy(hmac: *GHmac) -> *mut GHmac;
    pub fn g_hmac_ref(hmac: *mut GHmac) -> *mut GHmac;
    pub fn g_hmac_unref(hmac: *mut GHmac);
    pub fn g_hmac_update(hmac: *mut GHmac, data: *guchar, length: gssize);
    pub fn g_hmac_get_string(hmac: *mut GHmac) -> *gchar;
    pub fn g_hmac_get_digest(hmac: *mut GHmac, buffer: *mut guint8,
                             digest_len: *mut gsize);
    pub fn g_compute_hmac_for_data(digest_type: GChecksumType, key: *guchar,
                                   key_len: gsize, data: *guchar,
                                   length: gsize) -> *mut gchar;
    pub fn g_compute_hmac_for_string(digest_type: GChecksumType, key: *guchar,
                                     key_len: gsize, str: *gchar,
                                     length: gssize) -> *mut gchar;
    pub fn g_hook_list_init(hook_list: *mut GHookList, hook_size: guint);
    pub fn g_hook_list_clear(hook_list: *mut GHookList);
    pub fn g_hook_alloc(hook_list: *mut GHookList) -> *mut GHook;
    pub fn g_hook_free(hook_list: *mut GHookList, hook: *mut GHook);
    pub fn g_hook_ref(hook_list: *mut GHookList, hook: *mut GHook) ->
     *mut GHook;
    pub fn g_hook_unref(hook_list: *mut GHookList, hook: *mut GHook);
    pub fn g_hook_destroy(hook_list: *mut GHookList, hook_id: gulong) ->
     gboolean;
    pub fn g_hook_destroy_link(hook_list: *mut GHookList, hook: *mut GHook);
    pub fn g_hook_prepend(hook_list: *mut GHookList, hook: *mut GHook);
    pub fn g_hook_insert_before(hook_list: *mut GHookList,
                                sibling: *mut GHook, hook: *mut GHook);
    pub fn g_hook_insert_sorted(hook_list: *mut GHookList, hook: *mut GHook,
                                func: GHookCompareFunc);
    pub fn g_hook_get(hook_list: *mut GHookList, hook_id: gulong) ->
     *mut GHook;
    pub fn g_hook_find(hook_list: *mut GHookList, need_valids: gboolean,
                       func: GHookFindFunc, data: gpointer) -> *mut GHook;
    pub fn g_hook_find_data(hook_list: *mut GHookList, need_valids: gboolean,
                            data: gpointer) -> *mut GHook;
    pub fn g_hook_find_func(hook_list: *mut GHookList, need_valids: gboolean,
                            func: gpointer) -> *mut GHook;
    pub fn g_hook_find_func_data(hook_list: *mut GHookList,
                                 need_valids: gboolean, func: gpointer,
                                 data: gpointer) -> *mut GHook;
    pub fn g_hook_first_valid(hook_list: *mut GHookList,
                              may_be_in_call: gboolean) -> *mut GHook;
    pub fn g_hook_next_valid(hook_list: *mut GHookList, hook: *mut GHook,
                             may_be_in_call: gboolean) -> *mut GHook;
    pub fn g_hook_compare_ids(new_hook: *mut GHook, sibling: *mut GHook) ->
     gint;
    pub fn g_hook_list_invoke(hook_list: *mut GHookList,
                              may_recurse: gboolean);
    pub fn g_hook_list_invoke_check(hook_list: *mut GHookList,
                                    may_recurse: gboolean);
    pub fn g_hook_list_marshal(hook_list: *mut GHookList,
                               may_recurse: gboolean,
                               marshaller: GHookMarshaller,
                               marshal_data: gpointer);
    pub fn g_hook_list_marshal_check(hook_list: *mut GHookList,
                                     may_recurse: gboolean,
                                     marshaller: GHookCheckMarshaller,
                                     marshal_data: gpointer);
    pub fn g_hostname_is_non_ascii(hostname: *gchar) -> gboolean;
    pub fn g_hostname_is_ascii_encoded(hostname: *gchar) -> gboolean;
    pub fn g_hostname_is_ip_address(hostname: *gchar) -> gboolean;
    pub fn g_hostname_to_ascii(hostname: *gchar) -> *mut gchar;
    pub fn g_hostname_to_unicode(hostname: *gchar) -> *mut gchar;
    pub fn g_poll(fds: *mut GPollFD, nfds: guint, timeout: gint) -> gint;
    pub fn g_slist_alloc() -> *mut GSList;
    pub fn g_slist_free(list: *mut GSList);
    pub fn g_slist_free_1(list: *mut GSList);
    pub fn g_slist_free_full(list: *mut GSList, free_func: GDestroyNotify);
    pub fn g_slist_append(list: *mut GSList, data: gpointer) -> *mut GSList;
    pub fn g_slist_prepend(list: *mut GSList, data: gpointer) -> *mut GSList;
    pub fn g_slist_insert(list: *mut GSList, data: gpointer, position: gint)
     -> *mut GSList;
    pub fn g_slist_insert_sorted(list: *mut GSList, data: gpointer,
                                 func: GCompareFunc) -> *mut GSList;
    pub fn g_slist_insert_sorted_with_data(list: *mut GSList, data: gpointer,
                                           func: GCompareDataFunc,
                                           user_data: gpointer) ->
     *mut GSList;
    pub fn g_slist_insert_before(slist: *mut GSList, sibling: *mut GSList,
                                 data: gpointer) -> *mut GSList;
    pub fn g_slist_concat(list1: *mut GSList, list2: *mut GSList) ->
     *mut GSList;
    pub fn g_slist_remove(list: *mut GSList, data: gconstpointer) ->
     *mut GSList;
    pub fn g_slist_remove_all(list: *mut GSList, data: gconstpointer) ->
     *mut GSList;
    pub fn g_slist_remove_link(list: *mut GSList, link_: *mut GSList) ->
     *mut GSList;
    pub fn g_slist_delete_link(list: *mut GSList, link_: *mut GSList) ->
     *mut GSList;
    pub fn g_slist_reverse(list: *mut GSList) -> *mut GSList;
    pub fn g_slist_copy(list: *mut GSList) -> *mut GSList;
    pub fn g_slist_copy_deep(list: *mut GSList, func: GCopyFunc,
                             user_data: gpointer) -> *mut GSList;
    pub fn g_slist_nth(list: *mut GSList, n: guint) -> *mut GSList;
    pub fn g_slist_find(list: *mut GSList, data: gconstpointer) ->
     *mut GSList;
    pub fn g_slist_find_custom(list: *mut GSList, data: gconstpointer,
                               func: GCompareFunc) -> *mut GSList;
    pub fn g_slist_position(list: *mut GSList, llink: *mut GSList) -> gint;
    pub fn g_slist_index(list: *mut GSList, data: gconstpointer) -> gint;
    pub fn g_slist_last(list: *mut GSList) -> *mut GSList;
    pub fn g_slist_length(list: *mut GSList) -> guint;
    pub fn g_slist_foreach(list: *mut GSList, func: GFunc,
                           user_data: gpointer);
    pub fn g_slist_sort(list: *mut GSList, compare_func: GCompareFunc) ->
     *mut GSList;
    pub fn g_slist_sort_with_data(list: *mut GSList,
                                  compare_func: GCompareDataFunc,
                                  user_data: gpointer) -> *mut GSList;
    pub fn g_slist_nth_data(list: *mut GSList, n: guint) -> gpointer;
    pub fn g_main_context_new() -> *mut GMainContext;
    pub fn g_main_context_ref(context: *mut GMainContext) ->
     *mut GMainContext;
    pub fn g_main_context_unref(context: *mut GMainContext);
    pub fn g_main_context_default() -> *mut GMainContext;
    pub fn g_main_context_iteration(context: *mut GMainContext,
                                    may_block: gboolean) -> gboolean;
    pub fn g_main_context_pending(context: *mut GMainContext) -> gboolean;
    pub fn g_main_context_find_source_by_id(context: *mut GMainContext,
                                            source_id: guint) -> *mut GSource;
    pub fn g_main_context_find_source_by_user_data(context: *mut GMainContext,
                                                   user_data: gpointer) ->
     *mut GSource;
    pub fn g_main_context_find_source_by_funcs_user_data(context:
                                                             *mut GMainContext,
                                                         funcs:
                                                             *mut GSourceFuncs,
                                                         user_data: gpointer)
     -> *mut GSource;
    pub fn g_main_context_wakeup(context: *mut GMainContext);
    pub fn g_main_context_acquire(context: *mut GMainContext) -> gboolean;
    pub fn g_main_context_release(context: *mut GMainContext);
    pub fn g_main_context_is_owner(context: *mut GMainContext) -> gboolean;
    pub fn g_main_context_wait(context: *mut GMainContext, cond: *mut GCond,
                               mutex: *mut GMutex) -> gboolean;
    pub fn g_main_context_prepare(context: *mut GMainContext,
                                  priority: *mut gint) -> gboolean;
    pub fn g_main_context_query(context: *mut GMainContext,
                                max_priority: gint, timeout_: *mut gint,
                                fds: *mut GPollFD, n_fds: gint) -> gint;
    pub fn g_main_context_check(context: *mut GMainContext,
                                max_priority: gint, fds: *mut GPollFD,
                                n_fds: gint) -> gint;
    pub fn g_main_context_dispatch(context: *mut GMainContext);
    pub fn g_main_context_set_poll_func(context: *mut GMainContext,
                                        func: GPollFunc);
    pub fn g_main_context_get_poll_func(context: *mut GMainContext) ->
     GPollFunc;
    pub fn g_main_context_add_poll(context: *mut GMainContext,
                                   fd: *mut GPollFD, priority: gint);
    pub fn g_main_context_remove_poll(context: *mut GMainContext,
                                      fd: *mut GPollFD);
    pub fn g_main_depth() -> gint;
    pub fn g_main_current_source() -> *mut GSource;
    pub fn g_main_context_push_thread_default(context: *mut GMainContext);
    pub fn g_main_context_pop_thread_default(context: *mut GMainContext);
    pub fn g_main_context_get_thread_default() -> *mut GMainContext;
    pub fn g_main_context_ref_thread_default() -> *mut GMainContext;
    pub fn g_main_loop_new(context: *mut GMainContext, is_running: gboolean)
     -> *mut GMainLoop;
    pub fn g_main_loop_run(_loop: *mut GMainLoop);
    pub fn g_main_loop_quit(_loop: *mut GMainLoop);
    pub fn g_main_loop_ref(_loop: *mut GMainLoop) -> *mut GMainLoop;
    pub fn g_main_loop_unref(_loop: *mut GMainLoop);
    pub fn g_main_loop_is_running(_loop: *mut GMainLoop) -> gboolean;
    pub fn g_main_loop_get_context(_loop: *mut GMainLoop) ->
     *mut GMainContext;
    pub fn g_source_new(source_funcs: *mut GSourceFuncs, struct_size: guint)
     -> *mut GSource;
    pub fn g_source_ref(source: *mut GSource) -> *mut GSource;
    pub fn g_source_unref(source: *mut GSource);
    pub fn g_source_attach(source: *mut GSource, context: *mut GMainContext)
     -> guint;
    pub fn g_source_destroy(source: *mut GSource);
    pub fn g_source_set_priority(source: *mut GSource, priority: gint);
    pub fn g_source_get_priority(source: *mut GSource) -> gint;
    pub fn g_source_set_can_recurse(source: *mut GSource,
                                    can_recurse: gboolean);
    pub fn g_source_get_can_recurse(source: *mut GSource) -> gboolean;
    pub fn g_source_get_id(source: *mut GSource) -> guint;
    pub fn g_source_get_context(source: *mut GSource) -> *mut GMainContext;
    pub fn g_source_set_callback(source: *mut GSource, func: GSourceFunc,
                                 data: gpointer, notify: GDestroyNotify);
    pub fn g_source_set_funcs(source: *mut GSource, funcs: *mut GSourceFuncs);
    pub fn g_source_is_destroyed(source: *mut GSource) -> gboolean;
    pub fn g_source_set_name(source: *mut GSource, name: *c_schar);
    pub fn g_source_get_name(source: *mut GSource) -> *c_schar;
    pub fn g_source_set_name_by_id(tag: guint, name: *c_schar);
    pub fn g_source_set_ready_time(source: *mut GSource, ready_time: gint64);
    pub fn g_source_get_ready_time(source: *mut GSource) -> gint64;
    pub fn g_source_add_unix_fd(source: *mut GSource, fd: gint,
                                events: GIOCondition) -> gpointer;
    pub fn g_source_modify_unix_fd(source: *mut GSource, tag: gpointer,
                                   new_events: GIOCondition);
    pub fn g_source_remove_unix_fd(source: *mut GSource, tag: gpointer);
    pub fn g_source_query_unix_fd(source: *mut GSource, tag: gpointer) ->
     GIOCondition;
    pub fn g_source_set_callback_indirect(source: *mut GSource,
                                          callback_data: gpointer,
                                          callback_funcs:
                                              *mut GSourceCallbackFuncs);
    pub fn g_source_add_poll(source: *mut GSource, fd: *mut GPollFD);
    pub fn g_source_remove_poll(source: *mut GSource, fd: *mut GPollFD);
    pub fn g_source_add_child_source(source: *mut GSource,
                                     child_source: *mut GSource);
    pub fn g_source_remove_child_source(source: *mut GSource,
                                        child_source: *mut GSource);
    pub fn g_source_get_current_time(source: *mut GSource,
                                     timeval: *mut GTimeVal);
    pub fn g_source_get_time(source: *mut GSource) -> gint64;
    pub fn g_idle_source_new() -> *mut GSource;
    pub fn g_child_watch_source_new(pid: GPid) -> *mut GSource;
    pub fn g_timeout_source_new(interval: guint) -> *mut GSource;
    pub fn g_timeout_source_new_seconds(interval: guint) -> *mut GSource;
    pub fn g_get_current_time(result: *mut GTimeVal);
    pub fn g_get_monotonic_time() -> gint64;
    pub fn g_get_real_time() -> gint64;
    pub fn g_source_remove(tag: guint) -> gboolean;
    pub fn g_source_remove_by_user_data(user_data: gpointer) -> gboolean;
    pub fn g_source_remove_by_funcs_user_data(funcs: *mut GSourceFuncs,
                                              user_data: gpointer) ->
     gboolean;
    pub fn g_timeout_add_full(priority: gint, interval: guint,
                              function: GSourceFunc, data: gpointer,
                              notify: GDestroyNotify) -> guint;
    pub fn g_timeout_add(interval: guint, function: GSourceFunc,
                         data: gpointer) -> guint;
    pub fn g_timeout_add_seconds_full(priority: gint, interval: guint,
                                      function: GSourceFunc, data: gpointer,
                                      notify: GDestroyNotify) -> guint;
    pub fn g_timeout_add_seconds(interval: guint, function: GSourceFunc,
                                 data: gpointer) -> guint;
    pub fn g_child_watch_add_full(priority: gint, pid: GPid,
                                  function: GChildWatchFunc, data: gpointer,
                                  notify: GDestroyNotify) -> guint;
    pub fn g_child_watch_add(pid: GPid, function: GChildWatchFunc,
                             data: gpointer) -> guint;
    pub fn g_idle_add(function: GSourceFunc, data: gpointer) -> guint;
    pub fn g_idle_add_full(priority: gint, function: GSourceFunc,
                           data: gpointer, notify: GDestroyNotify) -> guint;
    pub fn g_idle_remove_by_data(data: gpointer) -> gboolean;
    pub fn g_main_context_invoke_full(context: *mut GMainContext,
                                      priority: gint, function: GSourceFunc,
                                      data: gpointer, notify: GDestroyNotify);
    pub fn g_main_context_invoke(context: *mut GMainContext,
                                 function: GSourceFunc, data: gpointer);
    pub fn g_unicode_script_to_iso15924(script: GUnicodeScript) -> guint32;
    pub fn g_unicode_script_from_iso15924(iso15924: guint32) ->
     GUnicodeScript;
    pub fn g_unichar_isalnum(c: gunichar) -> gboolean;
    pub fn g_unichar_isalpha(c: gunichar) -> gboolean;
    pub fn g_unichar_iscntrl(c: gunichar) -> gboolean;
    pub fn g_unichar_isdigit(c: gunichar) -> gboolean;
    pub fn g_unichar_isgraph(c: gunichar) -> gboolean;
    pub fn g_unichar_islower(c: gunichar) -> gboolean;
    pub fn g_unichar_isprint(c: gunichar) -> gboolean;
    pub fn g_unichar_ispunct(c: gunichar) -> gboolean;
    pub fn g_unichar_isspace(c: gunichar) -> gboolean;
    pub fn g_unichar_isupper(c: gunichar) -> gboolean;
    pub fn g_unichar_isxdigit(c: gunichar) -> gboolean;
    pub fn g_unichar_istitle(c: gunichar) -> gboolean;
    pub fn g_unichar_isdefined(c: gunichar) -> gboolean;
    pub fn g_unichar_iswide(c: gunichar) -> gboolean;
    pub fn g_unichar_iswide_cjk(c: gunichar) -> gboolean;
    pub fn g_unichar_iszerowidth(c: gunichar) -> gboolean;
    pub fn g_unichar_ismark(c: gunichar) -> gboolean;
    pub fn g_unichar_toupper(c: gunichar) -> gunichar;
    pub fn g_unichar_tolower(c: gunichar) -> gunichar;
    pub fn g_unichar_totitle(c: gunichar) -> gunichar;
    pub fn g_unichar_digit_value(c: gunichar) -> gint;
    pub fn g_unichar_xdigit_value(c: gunichar) -> gint;
    pub fn g_unichar_type(c: gunichar) -> GUnicodeType;
    pub fn g_unichar_break_type(c: gunichar) -> GUnicodeBreakType;
    pub fn g_unichar_combining_class(uc: gunichar) -> gint;
    pub fn g_unichar_get_mirror_char(ch: gunichar, mirrored_ch: *mut gunichar)
     -> gboolean;
    pub fn g_unichar_get_script(ch: gunichar) -> GUnicodeScript;
    pub fn g_unichar_validate(ch: gunichar) -> gboolean;
    pub fn g_unichar_compose(a: gunichar, b: gunichar, ch: *mut gunichar) ->
     gboolean;
    pub fn g_unichar_decompose(ch: gunichar, a: *mut gunichar,
                               b: *mut gunichar) -> gboolean;
    pub fn g_unichar_fully_decompose(ch: gunichar, compat: gboolean,
                                     result: *mut gunichar, result_len: gsize)
     -> gsize;
    pub fn g_unicode_canonical_ordering(string: *mut gunichar, len: gsize);
    pub fn g_unicode_canonical_decomposition(ch: gunichar,
                                             result_len: *mut gsize) ->
     *mut gunichar;
    pub fn g_utf8_get_char(p: *gchar) -> gunichar;
    pub fn g_utf8_get_char_validated(p: *gchar, max_len: gssize) -> gunichar;
    pub fn g_utf8_offset_to_pointer(str: *gchar, offset: glong) -> *mut gchar;
    pub fn g_utf8_pointer_to_offset(str: *gchar, pos: *gchar) -> glong;
    pub fn g_utf8_prev_char(p: *gchar) -> *mut gchar;
    pub fn g_utf8_find_next_char(p: *gchar, end: *gchar) -> *mut gchar;
    pub fn g_utf8_find_prev_char(str: *gchar, p: *gchar) -> *mut gchar;
    pub fn g_utf8_strlen(p: *gchar, max: gssize) -> glong;
    pub fn g_utf8_substring(str: *gchar, start_pos: glong, end_pos: glong) ->
     *mut gchar;
    pub fn g_utf8_strncpy(dest: *mut gchar, src: *gchar, n: gsize) ->
     *mut gchar;
    pub fn g_utf8_strchr(p: *gchar, len: gssize, c: gunichar) -> *mut gchar;
    pub fn g_utf8_strrchr(p: *gchar, len: gssize, c: gunichar) -> *mut gchar;
    pub fn g_utf8_strreverse(str: *gchar, len: gssize) -> *mut gchar;
    pub fn g_utf8_to_utf16(str: *gchar, len: glong, items_read: *mut glong,
                           items_written: *mut glong, error: *mut *mut GError)
     -> *mut gunichar2;
    pub fn g_utf8_to_ucs4(str: *gchar, len: glong, items_read: *mut glong,
                          items_written: *mut glong, error: *mut *mut GError)
     -> *mut gunichar;
    pub fn g_utf8_to_ucs4_fast(str: *gchar, len: glong,
                               items_written: *mut glong) -> *mut gunichar;
    pub fn g_utf16_to_ucs4(str: *gunichar2, len: glong,
                           items_read: *mut glong, items_written: *mut glong,
                           error: *mut *mut GError) -> *mut gunichar;
    pub fn g_utf16_to_utf8(str: *gunichar2, len: glong,
                           items_read: *mut glong, items_written: *mut glong,
                           error: *mut *mut GError) -> *mut gchar;
    pub fn g_ucs4_to_utf16(str: *gunichar, len: glong, items_read: *mut glong,
                           items_written: *mut glong, error: *mut *mut GError)
     -> *mut gunichar2;
    pub fn g_ucs4_to_utf8(str: *gunichar, len: glong, items_read: *mut glong,
                          items_written: *mut glong, error: *mut *mut GError)
     -> *mut gchar;
    pub fn g_unichar_to_utf8(c: gunichar, outbuf: *mut gchar) -> gint;
    pub fn g_utf8_validate(str: *gchar, max_len: gssize, end: *mut *gchar) ->
     gboolean;
    pub fn g_utf8_strup(str: *gchar, len: gssize) -> *mut gchar;
    pub fn g_utf8_strdown(str: *gchar, len: gssize) -> *mut gchar;
    pub fn g_utf8_casefold(str: *gchar, len: gssize) -> *mut gchar;
    pub fn g_utf8_normalize(str: *gchar, len: gssize, mode: GNormalizeMode) ->
     *mut gchar;
    pub fn g_utf8_collate(str1: *gchar, str2: *gchar) -> gint;
    pub fn g_utf8_collate_key(str: *gchar, len: gssize) -> *mut gchar;
    pub fn g_utf8_collate_key_for_filename(str: *gchar, len: gssize) ->
     *mut gchar;
    pub fn _g_utf8_make_valid(name: *gchar) -> *mut gchar;
    pub fn g_get_user_name() -> *gchar;
    pub fn g_get_real_name() -> *gchar;
    pub fn g_get_home_dir() -> *gchar;
    pub fn g_get_tmp_dir() -> *gchar;
    pub fn g_get_host_name() -> *gchar;
    pub fn g_get_prgname() -> *gchar;
    pub fn g_set_prgname(prgname: *gchar);
    pub fn g_get_application_name() -> *gchar;
    pub fn g_set_application_name(application_name: *gchar);
    pub fn g_reload_user_special_dirs_cache();
    pub fn g_get_user_data_dir() -> *gchar;
    pub fn g_get_user_config_dir() -> *gchar;
    pub fn g_get_user_cache_dir() -> *gchar;
    pub fn g_get_system_data_dirs() -> **gchar;
    pub fn g_get_system_config_dirs() -> **gchar;
    pub fn g_get_user_runtime_dir() -> *gchar;
    pub fn g_get_user_special_dir(directory: GUserDirectory) -> *gchar;
    pub fn g_parse_debug_string(string: *gchar, keys: *GDebugKey,
                                nkeys: guint) -> guint;
    pub fn g_snprintf(string: *mut gchar, n: gulong, format: *gchar, ...) ->
     gint;
    pub fn g_vsnprintf(string: *mut gchar, n: gulong, format: *gchar,
                       args: va_list) -> gint;
    pub fn g_nullify_pointer(nullify_location: *mut gpointer);
    pub fn g_format_size_full(size: guint64, flags: GFormatSizeFlags) ->
     *mut gchar;
    pub fn g_format_size(size: guint64) -> *mut gchar;
    pub fn g_format_size_for_display(size: goffset) -> *mut gchar;
    pub fn g_atexit(func: GVoidFunc);
    pub fn g_find_program_in_path(program: *gchar) -> *mut gchar;
    pub fn g_string_new(init: *gchar) -> *mut GString;
    pub fn g_string_new_len(init: *gchar, len: gssize) -> *mut GString;
    pub fn g_string_sized_new(dfl_size: gsize) -> *mut GString;
    pub fn g_string_free(string: *mut GString, free_segment: gboolean) ->
     *mut gchar;
    pub fn g_string_free_to_bytes(string: *mut GString) -> *mut GBytes;
    pub fn g_string_equal(v: *GString, v2: *GString) -> gboolean;
    pub fn g_string_hash(str: *GString) -> guint;
    pub fn g_string_assign(string: *mut GString, rval: *gchar) ->
     *mut GString;
    pub fn g_string_truncate(string: *mut GString, len: gsize) ->
     *mut GString;
    pub fn g_string_set_size(string: *mut GString, len: gsize) ->
     *mut GString;
    pub fn g_string_insert_len(string: *mut GString, pos: gssize, val: *gchar,
                               len: gssize) -> *mut GString;
    pub fn g_string_append(string: *mut GString, val: *gchar) -> *mut GString;
    pub fn g_string_append_len(string: *mut GString, val: *gchar, len: gssize)
     -> *mut GString;
    pub fn g_string_append_c(string: *mut GString, c: gchar) -> *mut GString;
    pub fn g_string_append_unichar(string: *mut GString, wc: gunichar) ->
     *mut GString;
    pub fn g_string_prepend(string: *mut GString, val: *gchar) ->
     *mut GString;
    pub fn g_string_prepend_c(string: *mut GString, c: gchar) -> *mut GString;
    pub fn g_string_prepend_unichar(string: *mut GString, wc: gunichar) ->
     *mut GString;
    pub fn g_string_prepend_len(string: *mut GString, val: *gchar,
                                len: gssize) -> *mut GString;
    pub fn g_string_insert(string: *mut GString, pos: gssize, val: *gchar) ->
     *mut GString;
    pub fn g_string_insert_c(string: *mut GString, pos: gssize, c: gchar) ->
     *mut GString;
    pub fn g_string_insert_unichar(string: *mut GString, pos: gssize,
                                   wc: gunichar) -> *mut GString;
    pub fn g_string_overwrite(string: *mut GString, pos: gsize, val: *gchar)
     -> *mut GString;
    pub fn g_string_overwrite_len(string: *mut GString, pos: gsize,
                                  val: *gchar, len: gssize) -> *mut GString;
    pub fn g_string_erase(string: *mut GString, pos: gssize, len: gssize) ->
     *mut GString;
    pub fn g_string_ascii_down(string: *mut GString) -> *mut GString;
    pub fn g_string_ascii_up(string: *mut GString) -> *mut GString;
    pub fn g_string_vprintf(string: *mut GString, format: *gchar,
                            args: va_list);
    pub fn g_string_printf(string: *mut GString, format: *gchar, ...);
    pub fn g_string_append_vprintf(string: *mut GString, format: *gchar,
                                   args: va_list);
    pub fn g_string_append_printf(string: *mut GString, format: *gchar, ...);
    pub fn g_string_append_uri_escaped(string: *mut GString,
                                       unescaped: *gchar,
                                       reserved_chars_allowed: *gchar,
                                       allow_utf8: gboolean) -> *mut GString;
    pub fn g_string_down(string: *mut GString) -> *mut GString;
    pub fn g_string_up(string: *mut GString) -> *mut GString;
    pub fn g_io_channel_init(channel: *mut GIOChannel);
    pub fn g_io_channel_ref(channel: *mut GIOChannel) -> *mut GIOChannel;
    pub fn g_io_channel_unref(channel: *mut GIOChannel);
    pub fn g_io_channel_read(channel: *mut GIOChannel, buf: *mut gchar,
                             count: gsize, bytes_read: *mut gsize) ->
     GIOError;
    pub fn g_io_channel_write(channel: *mut GIOChannel, buf: *gchar,
                              count: gsize, bytes_written: *mut gsize) ->
     GIOError;
    pub fn g_io_channel_seek(channel: *mut GIOChannel, offset: gint64,
                             _type: GSeekType) -> GIOError;
    pub fn g_io_channel_close(channel: *mut GIOChannel);
    pub fn g_io_channel_shutdown(channel: *mut GIOChannel, flush: gboolean,
                                 err: *mut *mut GError) -> GIOStatus;
    pub fn g_io_add_watch_full(channel: *mut GIOChannel, priority: gint,
                               condition: GIOCondition, func: GIOFunc,
                               user_data: gpointer, notify: GDestroyNotify) ->
     guint;
    pub fn g_io_create_watch(channel: *mut GIOChannel,
                             condition: GIOCondition) -> *mut GSource;
    pub fn g_io_add_watch(channel: *mut GIOChannel, condition: GIOCondition,
                          func: GIOFunc, user_data: gpointer) -> guint;
    pub fn g_io_channel_set_buffer_size(channel: *mut GIOChannel,
                                        size: gsize);
    pub fn g_io_channel_get_buffer_size(channel: *mut GIOChannel) -> gsize;
    pub fn g_io_channel_get_buffer_condition(channel: *mut GIOChannel) ->
     GIOCondition;
    pub fn g_io_channel_set_flags(channel: *mut GIOChannel, flags: GIOFlags,
                                  error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_get_flags(channel: *mut GIOChannel) -> GIOFlags;
    pub fn g_io_channel_set_line_term(channel: *mut GIOChannel,
                                      line_term: *gchar, length: gint);
    pub fn g_io_channel_get_line_term(channel: *mut GIOChannel,
                                      length: *mut gint) -> *gchar;
    pub fn g_io_channel_set_buffered(channel: *mut GIOChannel,
                                     buffered: gboolean);
    pub fn g_io_channel_get_buffered(channel: *mut GIOChannel) -> gboolean;
    pub fn g_io_channel_set_encoding(channel: *mut GIOChannel,
                                     encoding: *gchar,
                                     error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_get_encoding(channel: *mut GIOChannel) -> *gchar;
    pub fn g_io_channel_set_close_on_unref(channel: *mut GIOChannel,
                                           do_close: gboolean);
    pub fn g_io_channel_get_close_on_unref(channel: *mut GIOChannel) ->
     gboolean;
    pub fn g_io_channel_flush(channel: *mut GIOChannel,
                              error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_read_line(channel: *mut GIOChannel,
                                  str_return: *mut *mut gchar,
                                  length: *mut gsize,
                                  terminator_pos: *mut gsize,
                                  error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_read_line_string(channel: *mut GIOChannel,
                                         buffer: *mut GString,
                                         terminator_pos: *mut gsize,
                                         error: *mut *mut GError) ->
     GIOStatus;
    pub fn g_io_channel_read_to_end(channel: *mut GIOChannel,
                                    str_return: *mut *mut gchar,
                                    length: *mut gsize,
                                    error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_read_chars(channel: *mut GIOChannel, buf: *mut gchar,
                                   count: gsize, bytes_read: *mut gsize,
                                   error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_read_unichar(channel: *mut GIOChannel,
                                     thechar: *mut gunichar,
                                     error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_write_chars(channel: *mut GIOChannel, buf: *gchar,
                                    count: gssize, bytes_written: *mut gsize,
                                    error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_write_unichar(channel: *mut GIOChannel,
                                      thechar: gunichar,
                                      error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_seek_position(channel: *mut GIOChannel,
                                      offset: gint64, _type: GSeekType,
                                      error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_new_file(filename: *gchar, mode: *gchar,
                                 error: *mut *mut GError) -> *mut GIOChannel;
    pub fn g_io_channel_error_quark() -> GQuark;
    pub fn g_io_channel_error_from_errno(en: gint) -> GIOChannelError;
    pub fn g_io_channel_unix_new(fd: c_int) -> *mut GIOChannel;
    pub fn g_io_channel_unix_get_fd(channel: *mut GIOChannel) -> gint;
    pub fn g_key_file_error_quark() -> GQuark;
    pub fn g_key_file_new() -> *mut GKeyFile;
    pub fn g_key_file_ref(key_file: *mut GKeyFile) -> *mut GKeyFile;
    pub fn g_key_file_unref(key_file: *mut GKeyFile);
    pub fn g_key_file_free(key_file: *mut GKeyFile);
    pub fn g_key_file_set_list_separator(key_file: *mut GKeyFile,
                                         separator: gchar);
    pub fn g_key_file_load_from_file(key_file: *mut GKeyFile, file: *gchar,
                                     flags: GKeyFileFlags,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_key_file_load_from_data(key_file: *mut GKeyFile, data: *gchar,
                                     length: gsize, flags: GKeyFileFlags,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_key_file_load_from_dirs(key_file: *mut GKeyFile, file: *gchar,
                                     search_dirs: *mut *gchar,
                                     full_path: *mut *mut gchar,
                                     flags: GKeyFileFlags,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_key_file_load_from_data_dirs(key_file: *mut GKeyFile,
                                          file: *gchar,
                                          full_path: *mut *mut gchar,
                                          flags: GKeyFileFlags,
                                          error: *mut *mut GError) ->
     gboolean;
    pub fn g_key_file_to_data(key_file: *mut GKeyFile, length: *mut gsize,
                              error: *mut *mut GError) -> *mut gchar;
    pub fn g_key_file_get_start_group(key_file: *mut GKeyFile) -> *mut gchar;
    pub fn g_key_file_get_groups(key_file: *mut GKeyFile, length: *mut gsize)
     -> *mut *mut gchar;
    pub fn g_key_file_get_keys(key_file: *mut GKeyFile, group_name: *gchar,
                               length: *mut gsize, error: *mut *mut GError) ->
     *mut *mut gchar;
    pub fn g_key_file_has_group(key_file: *mut GKeyFile, group_name: *gchar)
     -> gboolean;
    pub fn g_key_file_has_key(key_file: *mut GKeyFile, group_name: *gchar,
                              key: *gchar, error: *mut *mut GError) ->
     gboolean;
    pub fn g_key_file_get_value(key_file: *mut GKeyFile, group_name: *gchar,
                                key: *gchar, error: *mut *mut GError) ->
     *mut gchar;
    pub fn g_key_file_set_value(key_file: *mut GKeyFile, group_name: *gchar,
                                key: *gchar, value: *gchar);
    pub fn g_key_file_get_string(key_file: *mut GKeyFile, group_name: *gchar,
                                 key: *gchar, error: *mut *mut GError) ->
     *mut gchar;
    pub fn g_key_file_set_string(key_file: *mut GKeyFile, group_name: *gchar,
                                 key: *gchar, string: *gchar);
    pub fn g_key_file_get_locale_string(key_file: *mut GKeyFile,
                                        group_name: *gchar, key: *gchar,
                                        locale: *gchar,
                                        error: *mut *mut GError) ->
     *mut gchar;
    pub fn g_key_file_set_locale_string(key_file: *mut GKeyFile,
                                        group_name: *gchar, key: *gchar,
                                        locale: *gchar, string: *gchar);
    pub fn g_key_file_get_boolean(key_file: *mut GKeyFile, group_name: *gchar,
                                  key: *gchar, error: *mut *mut GError) ->
     gboolean;
    pub fn g_key_file_set_boolean(key_file: *mut GKeyFile, group_name: *gchar,
                                  key: *gchar, value: gboolean);
    pub fn g_key_file_get_integer(key_file: *mut GKeyFile, group_name: *gchar,
                                  key: *gchar, error: *mut *mut GError) ->
     gint;
    pub fn g_key_file_set_integer(key_file: *mut GKeyFile, group_name: *gchar,
                                  key: *gchar, value: gint);
    pub fn g_key_file_get_int64(key_file: *mut GKeyFile, group_name: *gchar,
                                key: *gchar, error: *mut *mut GError) ->
     gint64;
    pub fn g_key_file_set_int64(key_file: *mut GKeyFile, group_name: *gchar,
                                key: *gchar, value: gint64);
    pub fn g_key_file_get_uint64(key_file: *mut GKeyFile, group_name: *gchar,
                                 key: *gchar, error: *mut *mut GError) ->
     guint64;
    pub fn g_key_file_set_uint64(key_file: *mut GKeyFile, group_name: *gchar,
                                 key: *gchar, value: guint64);
    pub fn g_key_file_get_double(key_file: *mut GKeyFile, group_name: *gchar,
                                 key: *gchar, error: *mut *mut GError) ->
     gdouble;
    pub fn g_key_file_set_double(key_file: *mut GKeyFile, group_name: *gchar,
                                 key: *gchar, value: gdouble);
    pub fn g_key_file_get_string_list(key_file: *mut GKeyFile,
                                      group_name: *gchar, key: *gchar,
                                      length: *mut gsize,
                                      error: *mut *mut GError) ->
     *mut *mut gchar;
    pub fn g_key_file_set_string_list(key_file: *mut GKeyFile,
                                      group_name: *gchar, key: *gchar,
                                      list: c_void, length: gsize);
    pub fn g_key_file_get_locale_string_list(key_file: *mut GKeyFile,
                                             group_name: *gchar, key: *gchar,
                                             locale: *gchar,
                                             length: *mut gsize,
                                             error: *mut *mut GError) ->
     *mut *mut gchar;
    pub fn g_key_file_set_locale_string_list(key_file: *mut GKeyFile,
                                             group_name: *gchar, key: *gchar,
                                             locale: *gchar, list: c_void,
                                             length: gsize);
    pub fn g_key_file_get_boolean_list(key_file: *mut GKeyFile,
                                       group_name: *gchar, key: *gchar,
                                       length: *mut gsize,
                                       error: *mut *mut GError) ->
     *mut gboolean;
    pub fn g_key_file_set_boolean_list(key_file: *mut GKeyFile,
                                       group_name: *gchar, key: *gchar,
                                       list: c_void, length: gsize);
    pub fn g_key_file_get_integer_list(key_file: *mut GKeyFile,
                                       group_name: *gchar, key: *gchar,
                                       length: *mut gsize,
                                       error: *mut *mut GError) -> *mut gint;
    pub fn g_key_file_set_double_list(key_file: *mut GKeyFile,
                                      group_name: *gchar, key: *gchar,
                                      list: c_void, length: gsize);
    pub fn g_key_file_get_double_list(key_file: *mut GKeyFile,
                                      group_name: *gchar, key: *gchar,
                                      length: *mut gsize,
                                      error: *mut *mut GError) ->
     *mut gdouble;
    pub fn g_key_file_set_integer_list(key_file: *mut GKeyFile,
                                       group_name: *gchar, key: *gchar,
                                       list: c_void, length: gsize);
    pub fn g_key_file_set_comment(key_file: *mut GKeyFile, group_name: *gchar,
                                  key: *gchar, comment: *gchar,
                                  error: *mut *mut GError) -> gboolean;
    pub fn g_key_file_get_comment(key_file: *mut GKeyFile, group_name: *gchar,
                                  key: *gchar, error: *mut *mut GError) ->
     *mut gchar;
    pub fn g_key_file_remove_comment(key_file: *mut GKeyFile,
                                     group_name: *gchar, key: *gchar,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_key_file_remove_key(key_file: *mut GKeyFile, group_name: *gchar,
                                 key: *gchar, error: *mut *mut GError) ->
     gboolean;
    pub fn g_key_file_remove_group(key_file: *mut GKeyFile,
                                   group_name: *gchar,
                                   error: *mut *mut GError) -> gboolean;
    pub fn g_mapped_file_new(filename: *gchar, writable: gboolean,
                             error: *mut *mut GError) -> *mut GMappedFile;
    pub fn g_mapped_file_new_from_fd(fd: gint, writable: gboolean,
                                     error: *mut *mut GError) ->
     *mut GMappedFile;
    pub fn g_mapped_file_get_length(file: *mut GMappedFile) -> gsize;
    pub fn g_mapped_file_get_contents(file: *mut GMappedFile) -> *mut gchar;
    pub fn g_mapped_file_get_bytes(file: *mut GMappedFile) -> *mut GBytes;
    pub fn g_mapped_file_ref(file: *mut GMappedFile) -> *mut GMappedFile;
    pub fn g_mapped_file_unref(file: *mut GMappedFile);
    pub fn g_mapped_file_free(file: *mut GMappedFile);
    pub fn g_markup_error_quark() -> GQuark;
    pub fn g_markup_parse_context_new(parser: *GMarkupParser,
                                      flags: GMarkupParseFlags,
                                      user_data: gpointer,
                                      user_data_dnotify: GDestroyNotify) ->
     *mut GMarkupParseContext;
    pub fn g_markup_parse_context_ref(context: *mut GMarkupParseContext) ->
     *mut GMarkupParseContext;
    pub fn g_markup_parse_context_unref(context: *mut GMarkupParseContext);
    pub fn g_markup_parse_context_free(context: *mut GMarkupParseContext);
    pub fn g_markup_parse_context_parse(context: *mut GMarkupParseContext,
                                        text: *gchar, text_len: gssize,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_markup_parse_context_push(context: *mut GMarkupParseContext,
                                       parser: *GMarkupParser,
                                       user_data: gpointer);
    pub fn g_markup_parse_context_pop(context: *mut GMarkupParseContext) ->
     gpointer;
    pub fn g_markup_parse_context_end_parse(context: *mut GMarkupParseContext,
                                            error: *mut *mut GError) ->
     gboolean;
    pub fn g_markup_parse_context_get_element(context:
                                                  *mut GMarkupParseContext) ->
     *gchar;
    pub fn g_markup_parse_context_get_element_stack(context:
                                                        *mut GMarkupParseContext)
     -> *GSList;
    pub fn g_markup_parse_context_get_position(context:
                                                   *mut GMarkupParseContext,
                                               line_number: *mut gint,
                                               char_number: *mut gint);
    pub fn g_markup_parse_context_get_user_data(context:
                                                    *mut GMarkupParseContext)
     -> gpointer;
    pub fn g_markup_escape_text(text: *gchar, length: gssize) -> *mut gchar;
    pub fn g_markup_printf_escaped(format: *c_schar, ...) -> *mut gchar;
    pub fn g_markup_vprintf_escaped(format: *c_schar, args: va_list) ->
     *mut gchar;
    pub fn g_markup_collect_attributes(element_name: *gchar,
                                       attribute_names: *mut *gchar,
                                       attribute_values: *mut *gchar,
                                       error: *mut *mut GError,
                                       first_type: GMarkupCollectType,
                                       first_attr: *gchar, ...) -> gboolean;
    pub fn g_printf_string_upper_bound(format: *gchar, args: va_list) ->
     gsize;
    pub fn g_log_set_handler(log_domain: *gchar, log_levels: GLogLevelFlags,
                             log_func: GLogFunc, user_data: gpointer) ->
     guint;
    pub fn g_log_remove_handler(log_domain: *gchar, handler_id: guint);
    pub fn g_log_default_handler(log_domain: *gchar,
                                 log_level: GLogLevelFlags, message: *gchar,
                                 unused_data: gpointer);
    pub fn g_log_set_default_handler(log_func: GLogFunc, user_data: gpointer)
     -> GLogFunc;
    pub fn g_log(log_domain: *gchar, log_level: GLogLevelFlags,
                 format: *gchar, ...);
    pub fn g_logv(log_domain: *gchar, log_level: GLogLevelFlags,
                  format: *gchar, args: va_list);
    pub fn g_log_set_fatal_mask(log_domain: *gchar,
                                fatal_mask: GLogLevelFlags) -> GLogLevelFlags;
    pub fn g_log_set_always_fatal(fatal_mask: GLogLevelFlags) ->
     GLogLevelFlags;
    pub fn _g_log_fallback_handler(log_domain: *gchar,
                                   log_level: GLogLevelFlags, message: *gchar,
                                   unused_data: gpointer);
    pub fn g_return_if_fail_warning(log_domain: *c_schar,
                                    pretty_function: *c_schar,
                                    expression: *c_schar);
    pub fn g_warn_message(domain: *c_schar, file: *c_schar, line: c_int,
                          func: *c_schar, warnexpr: *c_schar);
    pub fn g_assert_warning(log_domain: *c_schar, file: *c_schar, line: c_int,
                            pretty_function: *c_schar, expression: *c_schar);
    pub fn g_print(format: *gchar, ...);
    pub fn g_set_print_handler(func: GPrintFunc) -> GPrintFunc;
    pub fn g_printerr(format: *gchar, ...);
    pub fn g_set_printerr_handler(func: GPrintFunc) -> GPrintFunc;
    pub fn g_option_error_quark() -> GQuark;
    pub fn g_option_context_new(parameter_string: *gchar) ->
     *mut GOptionContext;
    pub fn g_option_context_set_summary(context: *mut GOptionContext,
                                        summary: *gchar);
    pub fn g_option_context_get_summary(context: *mut GOptionContext) ->
     *gchar;
    pub fn g_option_context_set_description(context: *mut GOptionContext,
                                            description: *gchar);
    pub fn g_option_context_get_description(context: *mut GOptionContext) ->
     *gchar;
    pub fn g_option_context_free(context: *mut GOptionContext);
    pub fn g_option_context_set_help_enabled(context: *mut GOptionContext,
                                             help_enabled: gboolean);
    pub fn g_option_context_get_help_enabled(context: *mut GOptionContext) ->
     gboolean;
    pub fn g_option_context_set_ignore_unknown_options(context:
                                                           *mut GOptionContext,
                                                       ignore_unknown:
                                                           gboolean);
    pub fn g_option_context_get_ignore_unknown_options(context:
                                                           *mut GOptionContext)
     -> gboolean;
    pub fn g_option_context_add_main_entries(context: *mut GOptionContext,
                                             entries: *GOptionEntry,
                                             translation_domain: *gchar);
    pub fn g_option_context_parse(context: *mut GOptionContext,
                                  argc: *mut gint, argv: *mut *mut *mut gchar,
                                  error: *mut *mut GError) -> gboolean;
    pub fn g_option_context_set_translate_func(context: *mut GOptionContext,
                                               func: GTranslateFunc,
                                               data: gpointer,
                                               destroy_notify:
                                                   GDestroyNotify);
    pub fn g_option_context_set_translation_domain(context:
                                                       *mut GOptionContext,
                                                   domain: *gchar);
    pub fn g_option_context_add_group(context: *mut GOptionContext,
                                      group: *mut GOptionGroup);
    pub fn g_option_context_set_main_group(context: *mut GOptionContext,
                                           group: *mut GOptionGroup);
    pub fn g_option_context_get_main_group(context: *mut GOptionContext) ->
     *mut GOptionGroup;
    pub fn g_option_context_get_help(context: *mut GOptionContext,
                                     main_help: gboolean,
                                     group: *mut GOptionGroup) -> *mut gchar;
    pub fn g_option_group_new(name: *gchar, description: *gchar,
                              help_description: *gchar, user_data: gpointer,
                              destroy: GDestroyNotify) -> *mut GOptionGroup;
    pub fn g_option_group_set_parse_hooks(group: *mut GOptionGroup,
                                          pre_parse_func: GOptionParseFunc,
                                          post_parse_func: GOptionParseFunc);
    pub fn g_option_group_set_error_hook(group: *mut GOptionGroup,
                                         error_func: GOptionErrorFunc);
    pub fn g_option_group_free(group: *mut GOptionGroup);
    pub fn g_option_group_add_entries(group: *mut GOptionGroup,
                                      entries: *GOptionEntry);
    pub fn g_option_group_set_translate_func(group: *mut GOptionGroup,
                                             func: GTranslateFunc,
                                             data: gpointer,
                                             destroy_notify: GDestroyNotify);
    pub fn g_option_group_set_translation_domain(group: *mut GOptionGroup,
                                                 domain: *gchar);
    pub fn g_pattern_spec_new(pattern: *gchar) -> *mut GPatternSpec;
    pub fn g_pattern_spec_free(pspec: *mut GPatternSpec);
    pub fn g_pattern_spec_equal(pspec1: *mut GPatternSpec,
                                pspec2: *mut GPatternSpec) -> gboolean;
    pub fn g_pattern_match(pspec: *mut GPatternSpec, string_length: guint,
                           string: *gchar, string_reversed: *gchar) ->
     gboolean;
    pub fn g_pattern_match_string(pspec: *mut GPatternSpec, string: *gchar) ->
     gboolean;
    pub fn g_pattern_match_simple(pattern: *gchar, string: *gchar) ->
     gboolean;
    pub fn g_spaced_primes_closest(num: guint) -> guint;
    pub fn g_qsort_with_data(pbase: gconstpointer, total_elems: gint,
                             size: gsize, compare_func: GCompareDataFunc,
                             user_data: gpointer);
    pub fn g_queue_new() -> *mut GQueue;
    pub fn g_queue_free(queue: *mut GQueue);
    pub fn g_queue_free_full(queue: *mut GQueue, free_func: GDestroyNotify);
    pub fn g_queue_init(queue: *mut GQueue);
    pub fn g_queue_clear(queue: *mut GQueue);
    pub fn g_queue_is_empty(queue: *mut GQueue) -> gboolean;
    pub fn g_queue_get_length(queue: *mut GQueue) -> guint;
    pub fn g_queue_reverse(queue: *mut GQueue);
    pub fn g_queue_copy(queue: *mut GQueue) -> *mut GQueue;
    pub fn g_queue_foreach(queue: *mut GQueue, func: GFunc,
                           user_data: gpointer);
    pub fn g_queue_find(queue: *mut GQueue, data: gconstpointer) ->
     *mut GList;
    pub fn g_queue_find_custom(queue: *mut GQueue, data: gconstpointer,
                               func: GCompareFunc) -> *mut GList;
    pub fn g_queue_sort(queue: *mut GQueue, compare_func: GCompareDataFunc,
                        user_data: gpointer);
    pub fn g_queue_push_head(queue: *mut GQueue, data: gpointer);
    pub fn g_queue_push_tail(queue: *mut GQueue, data: gpointer);
    pub fn g_queue_push_nth(queue: *mut GQueue, data: gpointer, n: gint);
    pub fn g_queue_pop_head(queue: *mut GQueue) -> gpointer;
    pub fn g_queue_pop_tail(queue: *mut GQueue) -> gpointer;
    pub fn g_queue_pop_nth(queue: *mut GQueue, n: guint) -> gpointer;
    pub fn g_queue_peek_head(queue: *mut GQueue) -> gpointer;
    pub fn g_queue_peek_tail(queue: *mut GQueue) -> gpointer;
    pub fn g_queue_peek_nth(queue: *mut GQueue, n: guint) -> gpointer;
    pub fn g_queue_index(queue: *mut GQueue, data: gconstpointer) -> gint;
    pub fn g_queue_remove(queue: *mut GQueue, data: gconstpointer) ->
     gboolean;
    pub fn g_queue_remove_all(queue: *mut GQueue, data: gconstpointer) ->
     guint;
    pub fn g_queue_insert_before(queue: *mut GQueue, sibling: *mut GList,
                                 data: gpointer);
    pub fn g_queue_insert_after(queue: *mut GQueue, sibling: *mut GList,
                                data: gpointer);
    pub fn g_queue_insert_sorted(queue: *mut GQueue, data: gpointer,
                                 func: GCompareDataFunc, user_data: gpointer);
    pub fn g_queue_push_head_link(queue: *mut GQueue, link_: *mut GList);
    pub fn g_queue_push_tail_link(queue: *mut GQueue, link_: *mut GList);
    pub fn g_queue_push_nth_link(queue: *mut GQueue, n: gint,
                                 link_: *mut GList);
    pub fn g_queue_pop_head_link(queue: *mut GQueue) -> *mut GList;
    pub fn g_queue_pop_tail_link(queue: *mut GQueue) -> *mut GList;
    pub fn g_queue_pop_nth_link(queue: *mut GQueue, n: guint) -> *mut GList;
    pub fn g_queue_peek_head_link(queue: *mut GQueue) -> *mut GList;
    pub fn g_queue_peek_tail_link(queue: *mut GQueue) -> *mut GList;
    pub fn g_queue_peek_nth_link(queue: *mut GQueue, n: guint) -> *mut GList;
    pub fn g_queue_link_index(queue: *mut GQueue, link_: *mut GList) -> gint;
    pub fn g_queue_unlink(queue: *mut GQueue, link_: *mut GList);
    pub fn g_queue_delete_link(queue: *mut GQueue, link_: *mut GList);
    pub fn g_rand_new_with_seed(seed: guint32) -> *mut GRand;
    pub fn g_rand_new_with_seed_array(seed: *guint32, seed_length: guint) ->
     *mut GRand;
    pub fn g_rand_new() -> *mut GRand;
    pub fn g_rand_free(rand_: *mut GRand);
    pub fn g_rand_copy(rand_: *mut GRand) -> *mut GRand;
    pub fn g_rand_set_seed(rand_: *mut GRand, seed: guint32);
    pub fn g_rand_set_seed_array(rand_: *mut GRand, seed: *guint32,
                                 seed_length: guint);
    pub fn g_rand_int(rand_: *mut GRand) -> guint32;
    pub fn g_rand_int_range(rand_: *mut GRand, begin: gint32, end: gint32) ->
     gint32;
    pub fn g_rand_double(rand_: *mut GRand) -> gdouble;
    pub fn g_rand_double_range(rand_: *mut GRand, begin: gdouble,
                               end: gdouble) -> gdouble;
    pub fn g_random_set_seed(seed: guint32);
    pub fn g_random_int() -> guint32;
    pub fn g_random_int_range(begin: gint32, end: gint32) -> gint32;
    pub fn g_random_double() -> gdouble;
    pub fn g_random_double_range(begin: gdouble, end: gdouble) -> gdouble;
    pub fn g_regex_error_quark() -> GQuark;
    pub fn g_regex_new(pattern: *gchar, compile_options: GRegexCompileFlags,
                       match_options: GRegexMatchFlags,
                       error: *mut *mut GError) -> *mut GRegex;
    pub fn g_regex_ref(regex: *mut GRegex) -> *mut GRegex;
    pub fn g_regex_unref(regex: *mut GRegex);
    pub fn g_regex_get_pattern(regex: *GRegex) -> *gchar;
    pub fn g_regex_get_max_backref(regex: *GRegex) -> gint;
    pub fn g_regex_get_capture_count(regex: *GRegex) -> gint;
    pub fn g_regex_get_has_cr_or_lf(regex: *GRegex) -> gboolean;
    pub fn g_regex_get_max_lookbehind(regex: *GRegex) -> gint;
    pub fn g_regex_get_string_number(regex: *GRegex, name: *gchar) -> gint;
    pub fn g_regex_escape_string(string: *gchar, length: gint) -> *mut gchar;
    pub fn g_regex_escape_nul(string: *gchar, length: gint) -> *mut gchar;
    pub fn g_regex_get_compile_flags(regex: *GRegex) -> GRegexCompileFlags;
    pub fn g_regex_get_match_flags(regex: *GRegex) -> GRegexMatchFlags;
    pub fn g_regex_match_simple(pattern: *gchar, string: *gchar,
                                compile_options: GRegexCompileFlags,
                                match_options: GRegexMatchFlags) -> gboolean;
    pub fn g_regex_match(regex: *GRegex, string: *gchar,
                         match_options: GRegexMatchFlags,
                         match_info: *mut *mut GMatchInfo) -> gboolean;
    pub fn g_regex_match_full(regex: *GRegex, string: *gchar,
                              string_len: gssize, start_position: gint,
                              match_options: GRegexMatchFlags,
                              match_info: *mut *mut GMatchInfo,
                              error: *mut *mut GError) -> gboolean;
    pub fn g_regex_match_all(regex: *GRegex, string: *gchar,
                             match_options: GRegexMatchFlags,
                             match_info: *mut *mut GMatchInfo) -> gboolean;
    pub fn g_regex_match_all_full(regex: *GRegex, string: *gchar,
                                  string_len: gssize, start_position: gint,
                                  match_options: GRegexMatchFlags,
                                  match_info: *mut *mut GMatchInfo,
                                  error: *mut *mut GError) -> gboolean;
    pub fn g_regex_split_simple(pattern: *gchar, string: *gchar,
                                compile_options: GRegexCompileFlags,
                                match_options: GRegexMatchFlags) ->
     *mut *mut gchar;
    pub fn g_regex_split(regex: *GRegex, string: *gchar,
                         match_options: GRegexMatchFlags) -> *mut *mut gchar;
    pub fn g_regex_split_full(regex: *GRegex, string: *gchar,
                              string_len: gssize, start_position: gint,
                              match_options: GRegexMatchFlags,
                              max_tokens: gint, error: *mut *mut GError) ->
     *mut *mut gchar;
    pub fn g_regex_replace(regex: *GRegex, string: *gchar, string_len: gssize,
                           start_position: gint, replacement: *gchar,
                           match_options: GRegexMatchFlags,
                           error: *mut *mut GError) -> *mut gchar;
    pub fn g_regex_replace_literal(regex: *GRegex, string: *gchar,
                                   string_len: gssize, start_position: gint,
                                   replacement: *gchar,
                                   match_options: GRegexMatchFlags,
                                   error: *mut *mut GError) -> *mut gchar;
    pub fn g_regex_replace_eval(regex: *GRegex, string: *gchar,
                                string_len: gssize, start_position: gint,
                                match_options: GRegexMatchFlags,
                                eval: GRegexEvalCallback, user_data: gpointer,
                                error: *mut *mut GError) -> *mut gchar;
    pub fn g_regex_check_replacement(replacement: *gchar,
                                     has_references: *mut gboolean,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_match_info_get_regex(match_info: *GMatchInfo) -> *mut GRegex;
    pub fn g_match_info_get_string(match_info: *GMatchInfo) -> *gchar;
    pub fn g_match_info_ref(match_info: *mut GMatchInfo) -> *mut GMatchInfo;
    pub fn g_match_info_unref(match_info: *mut GMatchInfo);
    pub fn g_match_info_free(match_info: *mut GMatchInfo);
    pub fn g_match_info_next(match_info: *mut GMatchInfo,
                             error: *mut *mut GError) -> gboolean;
    pub fn g_match_info_matches(match_info: *GMatchInfo) -> gboolean;
    pub fn g_match_info_get_match_count(match_info: *GMatchInfo) -> gint;
    pub fn g_match_info_is_partial_match(match_info: *GMatchInfo) -> gboolean;
    pub fn g_match_info_expand_references(match_info: *GMatchInfo,
                                          string_to_expand: *gchar,
                                          error: *mut *mut GError) ->
     *mut gchar;
    pub fn g_match_info_fetch(match_info: *GMatchInfo, match_num: gint) ->
     *mut gchar;
    pub fn g_match_info_fetch_pos(match_info: *GMatchInfo, match_num: gint,
                                  start_pos: *mut gint, end_pos: *mut gint) ->
     gboolean;
    pub fn g_match_info_fetch_named(match_info: *GMatchInfo, name: *gchar) ->
     *mut gchar;
    pub fn g_match_info_fetch_named_pos(match_info: *GMatchInfo, name: *gchar,
                                        start_pos: *mut gint,
                                        end_pos: *mut gint) -> gboolean;
    pub fn g_match_info_fetch_all(match_info: *GMatchInfo) -> *mut *mut gchar;
    pub fn g_scanner_new(config_templ: *GScannerConfig) -> *mut GScanner;
    pub fn g_scanner_destroy(scanner: *mut GScanner);
    pub fn g_scanner_input_file(scanner: *mut GScanner, input_fd: gint);
    pub fn g_scanner_sync_file_offset(scanner: *mut GScanner);
    pub fn g_scanner_input_text(scanner: *mut GScanner, text: *gchar,
                                text_len: guint);
    pub fn g_scanner_get_next_token(scanner: *mut GScanner) -> GTokenType;
    pub fn g_scanner_peek_next_token(scanner: *mut GScanner) -> GTokenType;
    pub fn g_scanner_cur_token(scanner: *mut GScanner) -> GTokenType;
    pub fn g_scanner_cur_value(scanner: *mut GScanner) -> GTokenValue;
    pub fn g_scanner_cur_line(scanner: *mut GScanner) -> guint;
    pub fn g_scanner_cur_position(scanner: *mut GScanner) -> guint;
    pub fn g_scanner_eof(scanner: *mut GScanner) -> gboolean;
    pub fn g_scanner_set_scope(scanner: *mut GScanner, scope_id: guint) ->
     guint;
    pub fn g_scanner_scope_add_symbol(scanner: *mut GScanner, scope_id: guint,
                                      symbol: *gchar, value: gpointer);
    pub fn g_scanner_scope_remove_symbol(scanner: *mut GScanner,
                                         scope_id: guint, symbol: *gchar);
    pub fn g_scanner_scope_lookup_symbol(scanner: *mut GScanner,
                                         scope_id: guint, symbol: *gchar) ->
     gpointer;
    pub fn g_scanner_scope_foreach_symbol(scanner: *mut GScanner,
                                          scope_id: guint, func: GHFunc,
                                          user_data: gpointer);
    pub fn g_scanner_lookup_symbol(scanner: *mut GScanner, symbol: *gchar) ->
     gpointer;
    pub fn g_scanner_unexp_token(scanner: *mut GScanner,
                                 expected_token: GTokenType,
                                 identifier_spec: *gchar, symbol_spec: *gchar,
                                 symbol_name: *gchar, message: *gchar,
                                 is_error: gint);
    pub fn g_scanner_error(scanner: *mut GScanner, format: *gchar, ...);
    pub fn g_scanner_warn(scanner: *mut GScanner, format: *gchar, ...);
    pub fn g_sequence_new(data_destroy: GDestroyNotify) -> *mut GSequence;
    pub fn g_sequence_free(seq: *mut GSequence);
    pub fn g_sequence_get_length(seq: *mut GSequence) -> gint;
    pub fn g_sequence_foreach(seq: *mut GSequence, func: GFunc,
                              user_data: gpointer);
    pub fn g_sequence_foreach_range(begin: *mut GSequenceIter,
                                    end: *mut GSequenceIter, func: GFunc,
                                    user_data: gpointer);
    pub fn g_sequence_sort(seq: *mut GSequence, cmp_func: GCompareDataFunc,
                           cmp_data: gpointer);
    pub fn g_sequence_sort_iter(seq: *mut GSequence,
                                cmp_func: GSequenceIterCompareFunc,
                                cmp_data: gpointer);
    pub fn g_sequence_get_begin_iter(seq: *mut GSequence) ->
     *mut GSequenceIter;
    pub fn g_sequence_get_end_iter(seq: *mut GSequence) -> *mut GSequenceIter;
    pub fn g_sequence_get_iter_at_pos(seq: *mut GSequence, pos: gint) ->
     *mut GSequenceIter;
    pub fn g_sequence_append(seq: *mut GSequence, data: gpointer) ->
     *mut GSequenceIter;
    pub fn g_sequence_prepend(seq: *mut GSequence, data: gpointer) ->
     *mut GSequenceIter;
    pub fn g_sequence_insert_before(iter: *mut GSequenceIter, data: gpointer)
     -> *mut GSequenceIter;
    pub fn g_sequence_move(src: *mut GSequenceIter, dest: *mut GSequenceIter);
    pub fn g_sequence_swap(a: *mut GSequenceIter, b: *mut GSequenceIter);
    pub fn g_sequence_insert_sorted(seq: *mut GSequence, data: gpointer,
                                    cmp_func: GCompareDataFunc,
                                    cmp_data: gpointer) -> *mut GSequenceIter;
    pub fn g_sequence_insert_sorted_iter(seq: *mut GSequence, data: gpointer,
                                         iter_cmp: GSequenceIterCompareFunc,
                                         cmp_data: gpointer) ->
     *mut GSequenceIter;
    pub fn g_sequence_sort_changed(iter: *mut GSequenceIter,
                                   cmp_func: GCompareDataFunc,
                                   cmp_data: gpointer);
    pub fn g_sequence_sort_changed_iter(iter: *mut GSequenceIter,
                                        iter_cmp: GSequenceIterCompareFunc,
                                        cmp_data: gpointer);
    pub fn g_sequence_remove(iter: *mut GSequenceIter);
    pub fn g_sequence_remove_range(begin: *mut GSequenceIter,
                                   end: *mut GSequenceIter);
    pub fn g_sequence_move_range(dest: *mut GSequenceIter,
                                 begin: *mut GSequenceIter,
                                 end: *mut GSequenceIter);
    pub fn g_sequence_search(seq: *mut GSequence, data: gpointer,
                             cmp_func: GCompareDataFunc, cmp_data: gpointer)
     -> *mut GSequenceIter;
    pub fn g_sequence_search_iter(seq: *mut GSequence, data: gpointer,
                                  iter_cmp: GSequenceIterCompareFunc,
                                  cmp_data: gpointer) -> *mut GSequenceIter;
    pub fn g_sequence_lookup(seq: *mut GSequence, data: gpointer,
                             cmp_func: GCompareDataFunc, cmp_data: gpointer)
     -> *mut GSequenceIter;
    pub fn g_sequence_lookup_iter(seq: *mut GSequence, data: gpointer,
                                  iter_cmp: GSequenceIterCompareFunc,
                                  cmp_data: gpointer) -> *mut GSequenceIter;
    pub fn g_sequence_get(iter: *mut GSequenceIter) -> gpointer;
    pub fn g_sequence_set(iter: *mut GSequenceIter, data: gpointer);
    pub fn g_sequence_iter_is_begin(iter: *mut GSequenceIter) -> gboolean;
    pub fn g_sequence_iter_is_end(iter: *mut GSequenceIter) -> gboolean;
    pub fn g_sequence_iter_next(iter: *mut GSequenceIter) ->
     *mut GSequenceIter;
    pub fn g_sequence_iter_prev(iter: *mut GSequenceIter) ->
     *mut GSequenceIter;
    pub fn g_sequence_iter_get_position(iter: *mut GSequenceIter) -> gint;
    pub fn g_sequence_iter_move(iter: *mut GSequenceIter, delta: gint) ->
     *mut GSequenceIter;
    pub fn g_sequence_iter_get_sequence(iter: *mut GSequenceIter) ->
     *mut GSequence;
    pub fn g_sequence_iter_compare(a: *mut GSequenceIter,
                                   b: *mut GSequenceIter) -> gint;
    pub fn g_sequence_range_get_midpoint(begin: *mut GSequenceIter,
                                         end: *mut GSequenceIter) ->
     *mut GSequenceIter;
    pub fn g_shell_error_quark() -> GQuark;
    pub fn g_shell_quote(unquoted_string: *gchar) -> *mut gchar;
    pub fn g_shell_unquote(quoted_string: *gchar, error: *mut *mut GError) ->
     *mut gchar;
    pub fn g_shell_parse_argv(command_line: *gchar, argcp: *mut gint,
                              argvp: *mut *mut *mut gchar,
                              error: *mut *mut GError) -> gboolean;
    pub fn g_slice_alloc(block_size: gsize) -> gpointer;
    pub fn g_slice_alloc0(block_size: gsize) -> gpointer;
    pub fn g_slice_copy(block_size: gsize, mem_block: gconstpointer) ->
     gpointer;
    pub fn g_slice_free1(block_size: gsize, mem_block: gpointer);
    pub fn g_slice_free_chain_with_offset(block_size: gsize,
                                          mem_chain: gpointer,
                                          next_offset: gsize);
    pub fn g_slice_set_config(ckey: GSliceConfig, value: gint64);
    pub fn g_slice_get_config(ckey: GSliceConfig) -> gint64;
    pub fn g_slice_get_config_state(ckey: GSliceConfig, address: gint64,
                                    n_values: *mut guint) -> *mut gint64;
    pub fn g_spawn_error_quark() -> GQuark;
    pub fn g_spawn_exit_error_quark() -> GQuark;
    pub fn g_spawn_async(working_directory: *gchar, argv: *mut *mut gchar,
                         envp: *mut *mut gchar, flags: GSpawnFlags,
                         child_setup: GSpawnChildSetupFunc,
                         user_data: gpointer, child_pid: *mut GPid,
                         error: *mut *mut GError) -> gboolean;
    pub fn g_spawn_async_with_pipes(working_directory: *gchar,
                                    argv: *mut *mut gchar,
                                    envp: *mut *mut gchar, flags: GSpawnFlags,
                                    child_setup: GSpawnChildSetupFunc,
                                    user_data: gpointer, child_pid: *mut GPid,
                                    standard_input: *mut gint,
                                    standard_output: *mut gint,
                                    standard_error: *mut gint,
                                    error: *mut *mut GError) -> gboolean;
    pub fn g_spawn_sync(working_directory: *gchar, argv: *mut *mut gchar,
                        envp: *mut *mut gchar, flags: GSpawnFlags,
                        child_setup: GSpawnChildSetupFunc,
                        user_data: gpointer, standard_output: *mut *mut gchar,
                        standard_error: *mut *mut gchar,
                        exit_status: *mut gint, error: *mut *mut GError) ->
     gboolean;
    pub fn g_spawn_command_line_sync(command_line: *gchar,
                                     standard_output: *mut *mut gchar,
                                     standard_error: *mut *mut gchar,
                                     exit_status: *mut gint,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_spawn_command_line_async(command_line: *gchar,
                                      error: *mut *mut GError) -> gboolean;
    pub fn g_spawn_check_exit_status(exit_status: gint,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_spawn_close_pid(pid: GPid);
    pub fn g_ascii_tolower(c: gchar) -> gchar;
    pub fn g_ascii_toupper(c: gchar) -> gchar;
    pub fn g_ascii_digit_value(c: gchar) -> gint;
    pub fn g_ascii_xdigit_value(c: gchar) -> gint;
    pub fn g_strdelimit(string: *mut gchar, delimiters: *gchar,
                        new_delimiter: gchar) -> *mut gchar;
    pub fn g_strcanon(string: *mut gchar, valid_chars: *gchar,
                      substitutor: gchar) -> *mut gchar;
    pub fn g_strerror(errnum: gint) -> *gchar;
    pub fn g_strsignal(signum: gint) -> *gchar;
    pub fn g_strreverse(string: *mut gchar) -> *mut gchar;
    pub fn g_strlcpy(dest: *mut gchar, src: *gchar, dest_size: gsize) ->
     gsize;
    pub fn g_strlcat(dest: *mut gchar, src: *gchar, dest_size: gsize) ->
     gsize;
    pub fn g_strstr_len(haystack: *gchar, haystack_len: gssize,
                        needle: *gchar) -> *mut gchar;
    pub fn g_strrstr(haystack: *gchar, needle: *gchar) -> *mut gchar;
    pub fn g_strrstr_len(haystack: *gchar, haystack_len: gssize,
                         needle: *gchar) -> *mut gchar;
    pub fn g_str_has_suffix(str: *gchar, suffix: *gchar) -> gboolean;
    pub fn g_str_has_prefix(str: *gchar, prefix: *gchar) -> gboolean;
    pub fn g_strtod(nptr: *gchar, endptr: *mut *mut gchar) -> gdouble;
    pub fn g_ascii_strtod(nptr: *gchar, endptr: *mut *mut gchar) -> gdouble;
    pub fn g_ascii_strtoull(nptr: *gchar, endptr: *mut *mut gchar,
                            base: guint) -> guint64;
    pub fn g_ascii_strtoll(nptr: *gchar, endptr: *mut *mut gchar, base: guint)
     -> gint64;
    pub fn g_ascii_dtostr(buffer: *mut gchar, buf_len: gint, d: gdouble) ->
     *mut gchar;
    pub fn g_ascii_formatd(buffer: *mut gchar, buf_len: gint, format: *gchar,
                           d: gdouble) -> *mut gchar;
    pub fn g_strchug(string: *mut gchar) -> *mut gchar;
    pub fn g_strchomp(string: *mut gchar) -> *mut gchar;
    pub fn g_ascii_strcasecmp(s1: *gchar, s2: *gchar) -> gint;
    pub fn g_ascii_strncasecmp(s1: *gchar, s2: *gchar, n: gsize) -> gint;
    pub fn g_ascii_strdown(str: *gchar, len: gssize) -> *mut gchar;
    pub fn g_ascii_strup(str: *gchar, len: gssize) -> *mut gchar;
    pub fn g_strcasecmp(s1: *gchar, s2: *gchar) -> gint;
    pub fn g_strncasecmp(s1: *gchar, s2: *gchar, n: guint) -> gint;
    pub fn g_strdown(string: *mut gchar) -> *mut gchar;
    pub fn g_strup(string: *mut gchar) -> *mut gchar;
    pub fn g_strdup(str: *gchar) -> *mut gchar;
    pub fn g_strdup_printf(format: *gchar, ...) -> *mut gchar;
    pub fn g_strdup_vprintf(format: *gchar, args: va_list) -> *mut gchar;
    pub fn g_strndup(str: *gchar, n: gsize) -> *mut gchar;
    pub fn g_strnfill(length: gsize, fill_char: gchar) -> *mut gchar;
    pub fn g_strconcat(string1: *gchar, ...) -> *mut gchar;
    pub fn g_strjoin(separator: *gchar, ...) -> *mut gchar;
    pub fn g_strcompress(source: *gchar) -> *mut gchar;
    pub fn g_strescape(source: *gchar, exceptions: *gchar) -> *mut gchar;
    pub fn g_memdup(mem: gconstpointer, byte_size: guint) -> gpointer;
    pub fn g_strsplit(string: *gchar, delimiter: *gchar, max_tokens: gint) ->
     *mut *mut gchar;
    pub fn g_strsplit_set(string: *gchar, delimiters: *gchar,
                          max_tokens: gint) -> *mut *mut gchar;
    pub fn g_strjoinv(separator: *gchar, str_array: *mut *mut gchar) ->
     *mut gchar;
    pub fn g_strfreev(str_array: *mut *mut gchar);
    pub fn g_strdupv(str_array: *mut *mut gchar) -> *mut *mut gchar;
    pub fn g_strv_length(str_array: *mut *mut gchar) -> guint;
    pub fn g_stpcpy(dest: *mut gchar, src: *c_schar) -> *mut gchar;
    pub fn g_string_chunk_new(size: gsize) -> *mut GStringChunk;
    pub fn g_string_chunk_free(chunk: *mut GStringChunk);
    pub fn g_string_chunk_clear(chunk: *mut GStringChunk);
    pub fn g_string_chunk_insert(chunk: *mut GStringChunk, string: *gchar) ->
     *mut gchar;
    pub fn g_string_chunk_insert_len(chunk: *mut GStringChunk, string: *gchar,
                                     len: gssize) -> *mut gchar;
    pub fn g_string_chunk_insert_const(chunk: *mut GStringChunk,
                                       string: *gchar) -> *mut gchar;
    pub fn g_strcmp0(str1: *c_schar, str2: *c_schar) -> c_int;
    pub fn g_test_minimized_result(minimized_quantity: c_double,
                                   format: *c_schar, ...);
    pub fn g_test_maximized_result(maximized_quantity: c_double,
                                   format: *c_schar, ...);
    pub fn g_test_init(argc: *mut c_int, argv: *mut *mut *mut c_schar, ...);
    pub fn g_test_subprocess() -> gboolean;
    pub fn g_test_run() -> c_int;
    pub fn g_test_add_func(testpath: *c_schar, test_func: GTestFunc);
    pub fn g_test_add_data_func(testpath: *c_schar, test_data: gconstpointer,
                                test_func: GTestDataFunc);
    pub fn g_test_add_data_func_full(testpath: *c_schar, test_data: gpointer,
                                     test_func: GTestDataFunc,
                                     data_free_func: GDestroyNotify);
    pub fn g_test_fail();
    pub fn g_test_incomplete(msg: *gchar);
    pub fn g_test_skip(msg: *gchar);
    pub fn g_test_failed() -> gboolean;
    pub fn g_test_set_nonfatal_assertions();
    pub fn g_test_message(format: *c_schar, ...);
    pub fn g_test_bug_base(uri_pattern: *c_schar);
    pub fn g_test_bug(bug_uri_snippet: *c_schar);
    pub fn g_test_timer_start();
    pub fn g_test_timer_elapsed() -> c_double;
    pub fn g_test_timer_last() -> c_double;
    pub fn g_test_queue_free(gfree_pointer: gpointer);
    pub fn g_test_queue_destroy(destroy_func: GDestroyNotify,
                                destroy_data: gpointer);
    pub fn g_test_trap_fork(usec_timeout: guint64,
                            test_trap_flags: GTestTrapFlags) -> gboolean;
    pub fn g_test_trap_subprocess(test_path: *c_schar, usec_timeout: guint64,
                                  test_flags: GTestSubprocessFlags);
    pub fn g_test_trap_has_passed() -> gboolean;
    pub fn g_test_trap_reached_timeout() -> gboolean;
    pub fn g_test_rand_int() -> gint32;
    pub fn g_test_rand_int_range(begin: gint32, end: gint32) -> gint32;
    pub fn g_test_rand_double() -> c_double;
    pub fn g_test_rand_double_range(range_start: c_double,
                                    range_end: c_double) -> c_double;
    pub fn g_test_create_case(test_name: *c_schar, data_size: gsize,
                              test_data: gconstpointer,
                              data_setup: GTestFixtureFunc,
                              data_test: GTestFixtureFunc,
                              data_teardown: GTestFixtureFunc) ->
     *mut GTestCase;
    pub fn g_test_create_suite(suite_name: *c_schar) -> *mut GTestSuite;
    pub fn g_test_get_root() -> *mut GTestSuite;
    pub fn g_test_suite_add(suite: *mut GTestSuite,
                            test_case: *mut GTestCase);
    pub fn g_test_suite_add_suite(suite: *mut GTestSuite,
                                  nestedsuite: *mut GTestSuite);
    pub fn g_test_run_suite(suite: *mut GTestSuite) -> c_int;
    pub fn g_test_trap_assertions(domain: *c_schar, file: *c_schar,
                                  line: c_int, func: *c_schar,
                                  assertion_flags: guint64,
                                  pattern: *c_schar);
    pub fn g_assertion_message(domain: *c_schar, file: *c_schar, line: c_int,
                               func: *c_schar, message: *c_schar);
    pub fn g_assertion_message_expr(domain: *c_schar, file: *c_schar,
                                    line: c_int, func: *c_schar,
                                    expr: *c_schar);
    pub fn g_assertion_message_cmpstr(domain: *c_schar, file: *c_schar,
                                      line: c_int, func: *c_schar,
                                      expr: *c_schar, arg1: *c_schar,
                                      cmp: *c_schar, arg2: *c_schar);
    pub fn g_assertion_message_cmpnum(domain: *c_schar, file: *c_schar,
                                      line: c_int, func: *c_schar,
                                      expr: *c_schar, arg1: c_double,
                                      cmp: *c_schar, arg2: c_double,
                                      numtype: c_schar);
    pub fn g_assertion_message_error(domain: *c_schar, file: *c_schar,
                                     line: c_int, func: *c_schar,
                                     expr: *c_schar, error: *GError,
                                     error_domain: GQuark, error_code: c_int);
    pub fn g_test_add_vtable(testpath: *c_schar, data_size: gsize,
                             test_data: gconstpointer,
                             data_setup: GTestFixtureFunc,
                             data_test: GTestFixtureFunc,
                             data_teardown: GTestFixtureFunc);
    pub fn g_test_log_type_name(log_type: GTestLogType) -> *c_schar;
    pub fn g_test_log_buffer_new() -> *mut GTestLogBuffer;
    pub fn g_test_log_buffer_free(tbuffer: *mut GTestLogBuffer);
    pub fn g_test_log_buffer_push(tbuffer: *mut GTestLogBuffer,
                                  n_bytes: guint, bytes: *guint8);
    pub fn g_test_log_buffer_pop(tbuffer: *mut GTestLogBuffer) ->
     *mut GTestLogMsg;
    pub fn g_test_log_msg_free(tmsg: *mut GTestLogMsg);
    pub fn g_test_log_set_fatal_handler(log_func: GTestLogFatalFunc,
                                        user_data: gpointer);
    pub fn g_test_expect_message(log_domain: *gchar,
                                 log_level: GLogLevelFlags, pattern: *gchar);
    pub fn g_test_assert_expected_messages_internal(domain: *c_schar,
                                                    file: *c_schar,
                                                    line: c_int,
                                                    func: *c_schar);
    pub fn g_test_build_filename(file_type: GTestFileType,
                                 first_path: *gchar, ...) -> *mut gchar;
    pub fn g_test_get_dir(file_type: GTestFileType) -> *gchar;
    pub fn g_test_get_filename(file_type: GTestFileType,
                               first_path: *gchar, ...) -> *gchar;
    pub fn g_thread_pool_new(func: GFunc, user_data: gpointer,
                             max_threads: gint, exclusive: gboolean,
                             error: *mut *mut GError) -> *mut GThreadPool;
    pub fn g_thread_pool_free(pool: *mut GThreadPool, immediate: gboolean,
                              wait_: gboolean);
    pub fn g_thread_pool_push(pool: *mut GThreadPool, data: gpointer,
                              error: *mut *mut GError) -> gboolean;
    pub fn g_thread_pool_unprocessed(pool: *mut GThreadPool) -> guint;
    pub fn g_thread_pool_set_sort_function(pool: *mut GThreadPool,
                                           func: GCompareDataFunc,
                                           user_data: gpointer);
    pub fn g_thread_pool_set_max_threads(pool: *mut GThreadPool,
                                         max_threads: gint,
                                         error: *mut *mut GError) -> gboolean;
    pub fn g_thread_pool_get_max_threads(pool: *mut GThreadPool) -> gint;
    pub fn g_thread_pool_get_num_threads(pool: *mut GThreadPool) -> guint;
    pub fn g_thread_pool_set_max_unused_threads(max_threads: gint);
    pub fn g_thread_pool_get_max_unused_threads() -> gint;
    pub fn g_thread_pool_get_num_unused_threads() -> guint;
    pub fn g_thread_pool_stop_unused_threads();
    pub fn g_thread_pool_set_max_idle_time(interval: guint);
    pub fn g_thread_pool_get_max_idle_time() -> guint;
    pub fn g_timer_new() -> *mut GTimer;
    pub fn g_timer_destroy(timer: *mut GTimer);
    pub fn g_timer_start(timer: *mut GTimer);
    pub fn g_timer_stop(timer: *mut GTimer);
    pub fn g_timer_reset(timer: *mut GTimer);
    pub fn g_timer_continue(timer: *mut GTimer);
    pub fn g_timer_elapsed(timer: *mut GTimer, microseconds: *mut gulong) ->
     gdouble;
    pub fn g_usleep(microseconds: gulong);
    pub fn g_time_val_add(time_: *mut GTimeVal, microseconds: glong);
    pub fn g_time_val_from_iso8601(iso_date: *gchar, time_: *mut GTimeVal) ->
     gboolean;
    pub fn g_time_val_to_iso8601(time_: *mut GTimeVal) -> *mut gchar;
    pub fn g_tree_new(key_compare_func: GCompareFunc) -> *mut GTree;
    pub fn g_tree_new_with_data(key_compare_func: GCompareDataFunc,
                                key_compare_data: gpointer) -> *mut GTree;
    pub fn g_tree_new_full(key_compare_func: GCompareDataFunc,
                           key_compare_data: gpointer,
                           key_destroy_func: GDestroyNotify,
                           value_destroy_func: GDestroyNotify) -> *mut GTree;
    pub fn g_tree_ref(tree: *mut GTree) -> *mut GTree;
    pub fn g_tree_unref(tree: *mut GTree);
    pub fn g_tree_destroy(tree: *mut GTree);
    pub fn g_tree_insert(tree: *mut GTree, key: gpointer, value: gpointer);
    pub fn g_tree_replace(tree: *mut GTree, key: gpointer, value: gpointer);
    pub fn g_tree_remove(tree: *mut GTree, key: gconstpointer) -> gboolean;
    pub fn g_tree_steal(tree: *mut GTree, key: gconstpointer) -> gboolean;
    pub fn g_tree_lookup(tree: *mut GTree, key: gconstpointer) -> gpointer;
    pub fn g_tree_lookup_extended(tree: *mut GTree, lookup_key: gconstpointer,
                                  orig_key: *mut gpointer,
                                  value: *mut gpointer) -> gboolean;
    pub fn g_tree_foreach(tree: *mut GTree, func: GTraverseFunc,
                          user_data: gpointer);
    pub fn g_tree_traverse(tree: *mut GTree, traverse_func: GTraverseFunc,
                           traverse_type: GTraverseType, user_data: gpointer);
    pub fn g_tree_search(tree: *mut GTree, search_func: GCompareFunc,
                         user_data: gconstpointer) -> gpointer;
    pub fn g_tree_height(tree: *mut GTree) -> gint;
    pub fn g_tree_nnodes(tree: *mut GTree) -> gint;
    pub fn g_uri_unescape_string(escaped_string: *c_schar,
                                 illegal_characters: *c_schar) ->
     *mut c_schar;
    pub fn g_uri_unescape_segment(escaped_string: *c_schar,
                                  escaped_string_end: *c_schar,
                                  illegal_characters: *c_schar) ->
     *mut c_schar;
    pub fn g_uri_parse_scheme(uri: *c_schar) -> *mut c_schar;
    pub fn g_uri_escape_string(unescaped: *c_schar,
                               reserved_chars_allowed: *c_schar,
                               allow_utf8: gboolean) -> *mut c_schar;
    pub fn g_variant_type_string_is_valid(type_string: *gchar) -> gboolean;
    pub fn g_variant_type_string_scan(string: *gchar, limit: *gchar,
                                      endptr: *mut *gchar) -> gboolean;
    pub fn g_variant_type_free(_type: *mut GVariantType);
    pub fn g_variant_type_copy(_type: *GVariantType) -> *mut GVariantType;
    pub fn g_variant_type_new(type_string: *gchar) -> *mut GVariantType;
    pub fn g_variant_type_get_string_length(_type: *GVariantType) -> gsize;
    pub fn g_variant_type_peek_string(_type: *GVariantType) -> *gchar;
    pub fn g_variant_type_dup_string(_type: *GVariantType) -> *mut gchar;
    pub fn g_variant_type_is_definite(_type: *GVariantType) -> gboolean;
    pub fn g_variant_type_is_container(_type: *GVariantType) -> gboolean;
    pub fn g_variant_type_is_basic(_type: *GVariantType) -> gboolean;
    pub fn g_variant_type_is_maybe(_type: *GVariantType) -> gboolean;
    pub fn g_variant_type_is_array(_type: *GVariantType) -> gboolean;
    pub fn g_variant_type_is_tuple(_type: *GVariantType) -> gboolean;
    pub fn g_variant_type_is_dict_entry(_type: *GVariantType) -> gboolean;
    pub fn g_variant_type_is_variant(_type: *GVariantType) -> gboolean;
    pub fn g_variant_type_hash(_type: gconstpointer) -> guint;
    pub fn g_variant_type_equal(type1: gconstpointer, type2: gconstpointer) ->
     gboolean;
    pub fn g_variant_type_is_subtype_of(_type: *GVariantType,
                                        supertype: *GVariantType) -> gboolean;
    pub fn g_variant_type_element(_type: *GVariantType) -> *GVariantType;
    pub fn g_variant_type_first(_type: *GVariantType) -> *GVariantType;
    pub fn g_variant_type_next(_type: *GVariantType) -> *GVariantType;
    pub fn g_variant_type_n_items(_type: *GVariantType) -> gsize;
    pub fn g_variant_type_key(_type: *GVariantType) -> *GVariantType;
    pub fn g_variant_type_value(_type: *GVariantType) -> *GVariantType;
    pub fn g_variant_type_new_array(element: *GVariantType) ->
     *mut GVariantType;
    pub fn g_variant_type_new_maybe(element: *GVariantType) ->
     *mut GVariantType;
    pub fn g_variant_type_new_tuple(items: **GVariantType, length: gint) ->
     *mut GVariantType;
    pub fn g_variant_type_new_dict_entry(key: *GVariantType,
                                         value: *GVariantType) ->
     *mut GVariantType;
    pub fn g_variant_type_checked_(arg1: *gchar) -> *GVariantType;
    pub fn g_variant_unref(value: *mut GVariant);
    pub fn g_variant_ref(value: *mut GVariant) -> *mut GVariant;
    pub fn g_variant_ref_sink(value: *mut GVariant) -> *mut GVariant;
    pub fn g_variant_is_floating(value: *mut GVariant) -> gboolean;
    pub fn g_variant_take_ref(value: *mut GVariant) -> *mut GVariant;
    pub fn g_variant_get_type(value: *mut GVariant) -> *GVariantType;
    pub fn g_variant_get_type_string(value: *mut GVariant) -> *gchar;
    pub fn g_variant_is_of_type(value: *mut GVariant, _type: *GVariantType) ->
     gboolean;
    pub fn g_variant_is_container(value: *mut GVariant) -> gboolean;
    pub fn g_variant_classify(value: *mut GVariant) -> GVariantClass;
    pub fn g_variant_new_boolean(value: gboolean) -> *mut GVariant;
    pub fn g_variant_new_byte(value: guchar) -> *mut GVariant;
    pub fn g_variant_new_int16(value: gint16) -> *mut GVariant;
    pub fn g_variant_new_uint16(value: guint16) -> *mut GVariant;
    pub fn g_variant_new_int32(value: gint32) -> *mut GVariant;
    pub fn g_variant_new_uint32(value: guint32) -> *mut GVariant;
    pub fn g_variant_new_int64(value: gint64) -> *mut GVariant;
    pub fn g_variant_new_uint64(value: guint64) -> *mut GVariant;
    pub fn g_variant_new_handle(value: gint32) -> *mut GVariant;
    pub fn g_variant_new_double(value: gdouble) -> *mut GVariant;
    pub fn g_variant_new_string(string: *gchar) -> *mut GVariant;
    pub fn g_variant_new_take_string(string: *mut gchar) -> *mut GVariant;
    pub fn g_variant_new_printf(format_string: *gchar, ...) -> *mut GVariant;
    pub fn g_variant_new_object_path(object_path: *gchar) -> *mut GVariant;
    pub fn g_variant_is_object_path(string: *gchar) -> gboolean;
    pub fn g_variant_new_signature(signature: *gchar) -> *mut GVariant;
    pub fn g_variant_is_signature(string: *gchar) -> gboolean;
    pub fn g_variant_new_variant(value: *mut GVariant) -> *mut GVariant;
    pub fn g_variant_new_strv(strv: **gchar, length: gssize) -> *mut GVariant;
    pub fn g_variant_new_objv(strv: **gchar, length: gssize) -> *mut GVariant;
    pub fn g_variant_new_bytestring(string: *gchar) -> *mut GVariant;
    pub fn g_variant_new_bytestring_array(strv: **gchar, length: gssize) ->
     *mut GVariant;
    pub fn g_variant_new_fixed_array(element_type: *GVariantType,
                                     elements: gconstpointer,
                                     n_elements: gsize, element_size: gsize)
     -> *mut GVariant;
    pub fn g_variant_get_boolean(value: *mut GVariant) -> gboolean;
    pub fn g_variant_get_byte(value: *mut GVariant) -> guchar;
    pub fn g_variant_get_int16(value: *mut GVariant) -> gint16;
    pub fn g_variant_get_uint16(value: *mut GVariant) -> guint16;
    pub fn g_variant_get_int32(value: *mut GVariant) -> gint32;
    pub fn g_variant_get_uint32(value: *mut GVariant) -> guint32;
    pub fn g_variant_get_int64(value: *mut GVariant) -> gint64;
    pub fn g_variant_get_uint64(value: *mut GVariant) -> guint64;
    pub fn g_variant_get_handle(value: *mut GVariant) -> gint32;
    pub fn g_variant_get_double(value: *mut GVariant) -> gdouble;
    pub fn g_variant_get_variant(value: *mut GVariant) -> *mut GVariant;
    pub fn g_variant_get_string(value: *mut GVariant, length: *mut gsize) ->
     *gchar;
    pub fn g_variant_dup_string(value: *mut GVariant, length: *mut gsize) ->
     *mut gchar;
    pub fn g_variant_get_strv(value: *mut GVariant, length: *mut gsize) ->
     *mut *gchar;
    pub fn g_variant_dup_strv(value: *mut GVariant, length: *mut gsize) ->
     *mut *mut gchar;
    pub fn g_variant_get_objv(value: *mut GVariant, length: *mut gsize) ->
     *mut *gchar;
    pub fn g_variant_dup_objv(value: *mut GVariant, length: *mut gsize) ->
     *mut *mut gchar;
    pub fn g_variant_get_bytestring(value: *mut GVariant) -> *gchar;
    pub fn g_variant_dup_bytestring(value: *mut GVariant, length: *mut gsize)
     -> *mut gchar;
    pub fn g_variant_get_bytestring_array(value: *mut GVariant,
                                          length: *mut gsize) -> *mut *gchar;
    pub fn g_variant_dup_bytestring_array(value: *mut GVariant,
                                          length: *mut gsize) ->
     *mut *mut gchar;
    pub fn g_variant_new_maybe(child_type: *GVariantType,
                               child: *mut GVariant) -> *mut GVariant;
    pub fn g_variant_new_array(child_type: *GVariantType,
                               children: **mut GVariant, n_children: gsize) ->
     *mut GVariant;
    pub fn g_variant_new_tuple(children: **mut GVariant, n_children: gsize) ->
     *mut GVariant;
    pub fn g_variant_new_dict_entry(key: *mut GVariant, value: *mut GVariant)
     -> *mut GVariant;
    pub fn g_variant_get_maybe(value: *mut GVariant) -> *mut GVariant;
    pub fn g_variant_n_children(value: *mut GVariant) -> gsize;
    pub fn g_variant_get_child(value: *mut GVariant, index_: gsize,
                               format_string: *gchar, ...);
    pub fn g_variant_get_child_value(value: *mut GVariant, index_: gsize) ->
     *mut GVariant;
    pub fn g_variant_lookup(dictionary: *mut GVariant, key: *gchar,
                            format_string: *gchar, ...) -> gboolean;
    pub fn g_variant_lookup_value(dictionary: *mut GVariant, key: *gchar,
                                  expected_type: *GVariantType) ->
     *mut GVariant;
    pub fn g_variant_get_fixed_array(value: *mut GVariant,
                                     n_elements: *mut gsize,
                                     element_size: gsize) -> gconstpointer;
    pub fn g_variant_get_size(value: *mut GVariant) -> gsize;
    pub fn g_variant_get_data(value: *mut GVariant) -> gconstpointer;
    pub fn g_variant_get_data_as_bytes(value: *mut GVariant) -> *mut GBytes;
    pub fn g_variant_store(value: *mut GVariant, data: gpointer);
    pub fn g_variant_print(value: *mut GVariant, type_annotate: gboolean) ->
     *mut gchar;
    pub fn g_variant_print_string(value: *mut GVariant, string: *mut GString,
                                  type_annotate: gboolean) -> *mut GString;
    pub fn g_variant_hash(value: gconstpointer) -> guint;
    pub fn g_variant_equal(one: gconstpointer, two: gconstpointer) ->
     gboolean;
    pub fn g_variant_get_normal_form(value: *mut GVariant) -> *mut GVariant;
    pub fn g_variant_is_normal_form(value: *mut GVariant) -> gboolean;
    pub fn g_variant_byteswap(value: *mut GVariant) -> *mut GVariant;
    pub fn g_variant_new_from_bytes(_type: *GVariantType, bytes: *mut GBytes,
                                    trusted: gboolean) -> *mut GVariant;
    pub fn g_variant_new_from_data(_type: *GVariantType, data: gconstpointer,
                                   size: gsize, trusted: gboolean,
                                   notify: GDestroyNotify,
                                   user_data: gpointer) -> *mut GVariant;
    pub fn g_variant_iter_new(value: *mut GVariant) -> *mut GVariantIter;
    pub fn g_variant_iter_init(iter: *mut GVariantIter, value: *mut GVariant)
     -> gsize;
    pub fn g_variant_iter_copy(iter: *mut GVariantIter) -> *mut GVariantIter;
    pub fn g_variant_iter_n_children(iter: *mut GVariantIter) -> gsize;
    pub fn g_variant_iter_free(iter: *mut GVariantIter);
    pub fn g_variant_iter_next_value(iter: *mut GVariantIter) ->
     *mut GVariant;
    pub fn g_variant_iter_next(iter: *mut GVariantIter,
                               format_string: *gchar, ...) -> gboolean;
    pub fn g_variant_iter_loop(iter: *mut GVariantIter,
                               format_string: *gchar, ...) -> gboolean;
    pub fn g_variant_parser_get_error_quark() -> GQuark;
    pub fn g_variant_builder_new(_type: *GVariantType) ->
     *mut GVariantBuilder;
    pub fn g_variant_builder_unref(builder: *mut GVariantBuilder);
    pub fn g_variant_builder_ref(builder: *mut GVariantBuilder) ->
     *mut GVariantBuilder;
    pub fn g_variant_builder_init(builder: *mut GVariantBuilder,
                                  _type: *GVariantType);
    pub fn g_variant_builder_end(builder: *mut GVariantBuilder) ->
     *mut GVariant;
    pub fn g_variant_builder_clear(builder: *mut GVariantBuilder);
    pub fn g_variant_builder_open(builder: *mut GVariantBuilder,
                                  _type: *GVariantType);
    pub fn g_variant_builder_close(builder: *mut GVariantBuilder);
    pub fn g_variant_builder_add_value(builder: *mut GVariantBuilder,
                                       value: *mut GVariant);
    pub fn g_variant_builder_add(builder: *mut GVariantBuilder,
                                 format_string: *gchar, ...);
    pub fn g_variant_builder_add_parsed(builder: *mut GVariantBuilder,
                                        format: *gchar, ...);
    pub fn g_variant_new(format_string: *gchar, ...) -> *mut GVariant;
    pub fn g_variant_get(value: *mut GVariant, format_string: *gchar, ...);
    pub fn g_variant_new_va(format_string: *gchar, endptr: *mut *gchar,
                            app: *mut va_list) -> *mut GVariant;
    pub fn g_variant_get_va(value: *mut GVariant, format_string: *gchar,
                            endptr: *mut *gchar, app: *mut va_list);
    pub fn g_variant_check_format_string(value: *mut GVariant,
                                         format_string: *gchar,
                                         copy_only: gboolean) -> gboolean;
    pub fn g_variant_parse(_type: *GVariantType, text: *gchar, limit: *gchar,
                           endptr: *mut *gchar, error: *mut *mut GError) ->
     *mut GVariant;
    pub fn g_variant_new_parsed(format: *gchar, ...) -> *mut GVariant;
    pub fn g_variant_new_parsed_va(format: *gchar, app: *mut va_list) ->
     *mut GVariant;
    pub fn g_variant_compare(one: gconstpointer, two: gconstpointer) -> gint;
    pub fn glib_check_version(required_major: guint, required_minor: guint,
                              required_micro: guint) -> *gchar;
    pub fn g_mem_chunk_new(name: *gchar, atom_size: gint, area_size: gsize,
                           _type: gint) -> *mut GMemChunk;
    pub fn g_mem_chunk_destroy(mem_chunk: *mut GMemChunk);
    pub fn g_mem_chunk_alloc(mem_chunk: *mut GMemChunk) -> gpointer;
    pub fn g_mem_chunk_alloc0(mem_chunk: *mut GMemChunk) -> gpointer;
    pub fn g_mem_chunk_free(mem_chunk: *mut GMemChunk, mem: gpointer);
    pub fn g_mem_chunk_clean(mem_chunk: *mut GMemChunk);
    pub fn g_mem_chunk_reset(mem_chunk: *mut GMemChunk);
    pub fn g_mem_chunk_print(mem_chunk: *mut GMemChunk);
    pub fn g_mem_chunk_info();
    pub fn g_blow_chunks();
    pub fn g_allocator_new(name: *gchar, n_preallocs: guint) ->
     *mut GAllocator;
    pub fn g_allocator_free(allocator: *mut GAllocator);
    pub fn g_list_push_allocator(allocator: *mut GAllocator);
    pub fn g_list_pop_allocator();
    pub fn g_slist_push_allocator(allocator: *mut GAllocator);
    pub fn g_slist_pop_allocator();
    pub fn g_node_push_allocator(allocator: *mut GAllocator);
    pub fn g_node_pop_allocator();
    pub fn g_cache_new(value_new_func: GCacheNewFunc,
                       value_destroy_func: GCacheDestroyFunc,
                       key_dup_func: GCacheDupFunc,
                       key_destroy_func: GCacheDestroyFunc,
                       hash_key_func: GHashFunc, hash_value_func: GHashFunc,
                       key_equal_func: GEqualFunc) -> *mut GCache;
    pub fn g_cache_destroy(cache: *mut GCache);
    pub fn g_cache_insert(cache: *mut GCache, key: gpointer) -> gpointer;
    pub fn g_cache_remove(cache: *mut GCache, value: gconstpointer);
    pub fn g_cache_key_foreach(cache: *mut GCache, func: GHFunc,
                               user_data: gpointer);
    pub fn g_cache_value_foreach(cache: *mut GCache, func: GHFunc,
                                 user_data: gpointer);
    pub fn g_completion_new(func: GCompletionFunc) -> *mut GCompletion;
    pub fn g_completion_add_items(cmp: *mut GCompletion, items: *mut GList);
    pub fn g_completion_remove_items(cmp: *mut GCompletion,
                                     items: *mut GList);
    pub fn g_completion_clear_items(cmp: *mut GCompletion);
    pub fn g_completion_complete(cmp: *mut GCompletion, prefix: *gchar,
                                 new_prefix: *mut *mut gchar) -> *mut GList;
    pub fn g_completion_complete_utf8(cmp: *mut GCompletion, prefix: *gchar,
                                      new_prefix: *mut *mut gchar) ->
     *mut GList;
    pub fn g_completion_set_compare(cmp: *mut GCompletion,
                                    strncmp_func: GCompletionStrncmpFunc);
    pub fn g_completion_free(cmp: *mut GCompletion);
    pub fn g_relation_new(fields: gint) -> *mut GRelation;
    pub fn g_relation_destroy(relation: *mut GRelation);
    pub fn g_relation_index(relation: *mut GRelation, field: gint,
                            hash_func: GHashFunc, key_equal_func: GEqualFunc);
    pub fn g_relation_insert(relation: *mut GRelation, ...);
    pub fn g_relation_delete(relation: *mut GRelation, key: gconstpointer,
                             field: gint) -> gint;
    pub fn g_relation_select(relation: *mut GRelation, key: gconstpointer,
                             field: gint) -> *mut GTuples;
    pub fn g_relation_count(relation: *mut GRelation, key: gconstpointer,
                            field: gint) -> gint;
    pub fn g_relation_exists(relation: *mut GRelation, ...) -> gboolean;
    pub fn g_relation_print(relation: *mut GRelation);
    pub fn g_tuples_destroy(tuples: *mut GTuples);
    pub fn g_tuples_index(tuples: *mut GTuples, index_: gint, field: gint) ->
     gpointer;
    pub fn g_thread_create(func: GThreadFunc, data: gpointer,
                           joinable: gboolean, error: *mut *mut GError) ->
     *mut GThread;
    pub fn g_thread_create_full(func: GThreadFunc, data: gpointer,
                                stack_size: gulong, joinable: gboolean,
                                bound: gboolean, priority: GThreadPriority,
                                error: *mut *mut GError) -> *mut GThread;
    pub fn g_thread_set_priority(thread: *mut GThread,
                                 priority: GThreadPriority);
    pub fn g_thread_foreach(thread_func: GFunc, user_data: gpointer);
    pub fn __sched_cpucount(__setsize: size_t, __setp: *cpu_set_t) -> c_int;
    pub fn __sched_cpualloc(__count: size_t) -> *mut cpu_set_t;
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
    pub fn sched_setparam(__pid: __pid_t, __param: *Struct_sched_param) ->
     c_int;
    pub fn sched_getparam(__pid: __pid_t, __param: *mut Struct_sched_param) ->
     c_int;
    pub fn sched_setscheduler(__pid: __pid_t, __policy: c_int,
                              __param: *Struct_sched_param) -> c_int;
    pub fn sched_getscheduler(__pid: __pid_t) -> c_int;
    pub fn sched_yield() -> c_int;
    pub fn sched_get_priority_max(__algorithm: c_int) -> c_int;
    pub fn sched_get_priority_min(__algorithm: c_int) -> c_int;
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut Struct_timespec) ->
     c_int;
    pub fn pthread_create(__newthread: *mut pthread_t,
                          __attr: *pthread_attr_t,
                          __start_routine:
                              extern "C" fn(arg1: *mut c_void) -> *mut c_void,
                          __arg: *mut c_void) -> c_int;
    pub fn pthread_exit(__retval: *mut c_void);
    pub fn pthread_join(__th: pthread_t, __thread_return: *mut *mut c_void) ->
     c_int;
    pub fn pthread_detach(__th: pthread_t) -> c_int;
    pub fn pthread_self() -> pthread_t;
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> c_int;
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> c_int;
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> c_int;
    pub fn pthread_attr_getdetachstate(__attr: *pthread_attr_t,
                                       __detachstate: *mut c_int) -> c_int;
    pub fn pthread_attr_setdetachstate(__attr: *mut pthread_attr_t,
                                       __detachstate: c_int) -> c_int;
    pub fn pthread_attr_getguardsize(__attr: *pthread_attr_t,
                                     __guardsize: *mut size_t) -> c_int;
    pub fn pthread_attr_setguardsize(__attr: *mut pthread_attr_t,
                                     __guardsize: size_t) -> c_int;
    pub fn pthread_attr_getschedparam(__attr: *pthread_attr_t,
                                      __param: *mut Struct_sched_param) ->
     c_int;
    pub fn pthread_attr_setschedparam(__attr: *mut pthread_attr_t,
                                      __param: *Struct_sched_param) -> c_int;
    pub fn pthread_attr_getschedpolicy(__attr: *pthread_attr_t,
                                       __policy: *mut c_int) -> c_int;
    pub fn pthread_attr_setschedpolicy(__attr: *mut pthread_attr_t,
                                       __policy: c_int) -> c_int;
    pub fn pthread_attr_getinheritsched(__attr: *pthread_attr_t,
                                        __inherit: *mut c_int) -> c_int;
    pub fn pthread_attr_setinheritsched(__attr: *mut pthread_attr_t,
                                        __inherit: c_int) -> c_int;
    pub fn pthread_attr_getscope(__attr: *pthread_attr_t, __scope: *mut c_int)
     -> c_int;
    pub fn pthread_attr_setscope(__attr: *mut pthread_attr_t, __scope: c_int)
     -> c_int;
    pub fn pthread_attr_getstackaddr(__attr: *pthread_attr_t,
                                     __stackaddr: *mut *mut c_void) -> c_int;
    pub fn pthread_attr_setstackaddr(__attr: *mut pthread_attr_t,
                                     __stackaddr: *mut c_void) -> c_int;
    pub fn pthread_attr_getstacksize(__attr: *pthread_attr_t,
                                     __stacksize: *mut size_t) -> c_int;
    pub fn pthread_attr_setstacksize(__attr: *mut pthread_attr_t,
                                     __stacksize: size_t) -> c_int;
    pub fn pthread_attr_getstack(__attr: *pthread_attr_t,
                                 __stackaddr: *mut *mut c_void,
                                 __stacksize: *mut size_t) -> c_int;
    pub fn pthread_attr_setstack(__attr: *mut pthread_attr_t,
                                 __stackaddr: *mut c_void,
                                 __stacksize: size_t) -> c_int;
    pub fn pthread_setschedparam(__target_thread: pthread_t, __policy: c_int,
                                 __param: *Struct_sched_param) -> c_int;
    pub fn pthread_getschedparam(__target_thread: pthread_t,
                                 __policy: *mut c_int,
                                 __param: *mut Struct_sched_param) -> c_int;
    pub fn pthread_setschedprio(__target_thread: pthread_t, __prio: c_int) ->
     c_int;
    pub fn pthread_once(__once_control: *mut pthread_once_t,
                        __init_routine: extern "C" fn()) -> c_int;
    pub fn pthread_setcancelstate(__state: c_int, __oldstate: *mut c_int) ->
     c_int;
    pub fn pthread_setcanceltype(__type: c_int, __oldtype: *mut c_int) ->
     c_int;
    pub fn pthread_cancel(__th: pthread_t) -> c_int;
    pub fn pthread_testcancel();
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t);
    pub fn __sigsetjmp(__env: *mut Struct___jmp_buf_tag, __savemask: c_int) ->
     c_int;
    pub fn pthread_mutex_init(__mutex: *mut pthread_mutex_t,
                              __mutexattr: *pthread_mutexattr_t) -> c_int;
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> c_int;
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> c_int;
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> c_int;
    pub fn pthread_mutex_timedlock(__mutex: *mut pthread_mutex_t,
                                   __abstime: *Struct_timespec) -> c_int;
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> c_int;
    pub fn pthread_mutex_getprioceiling(__mutex: *pthread_mutex_t,
                                        __prioceiling: *mut c_int) -> c_int;
    pub fn pthread_mutex_setprioceiling(__mutex: *mut pthread_mutex_t,
                                        __prioceiling: c_int,
                                        __old_ceiling: *mut c_int) -> c_int;
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> c_int;
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> c_int;
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) ->
     c_int;
    pub fn pthread_mutexattr_getpshared(__attr: *pthread_mutexattr_t,
                                        __pshared: *mut c_int) -> c_int;
    pub fn pthread_mutexattr_setpshared(__attr: *mut pthread_mutexattr_t,
                                        __pshared: c_int) -> c_int;
    pub fn pthread_mutexattr_gettype(__attr: *pthread_mutexattr_t,
                                     __kind: *mut c_int) -> c_int;
    pub fn pthread_mutexattr_settype(__attr: *mut pthread_mutexattr_t,
                                     __kind: c_int) -> c_int;
    pub fn pthread_mutexattr_getprotocol(__attr: *pthread_mutexattr_t,
                                         __protocol: *mut c_int) -> c_int;
    pub fn pthread_mutexattr_setprotocol(__attr: *mut pthread_mutexattr_t,
                                         __protocol: c_int) -> c_int;
    pub fn pthread_mutexattr_getprioceiling(__attr: *pthread_mutexattr_t,
                                            __prioceiling: *mut c_int) ->
     c_int;
    pub fn pthread_mutexattr_setprioceiling(__attr: *mut pthread_mutexattr_t,
                                            __prioceiling: c_int) -> c_int;
    pub fn pthread_mutexattr_getrobust(__attr: *pthread_mutexattr_t,
                                       __robustness: *mut c_int) -> c_int;
    pub fn pthread_mutexattr_setrobust(__attr: *mut pthread_mutexattr_t,
                                       __robustness: c_int) -> c_int;
    pub fn pthread_rwlock_init(__rwlock: *mut pthread_rwlock_t,
                               __attr: *pthread_rwlockattr_t) -> c_int;
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> c_int;
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> c_int;
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> c_int;
    pub fn pthread_rwlock_timedrdlock(__rwlock: *mut pthread_rwlock_t,
                                      __abstime: *Struct_timespec) -> c_int;
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> c_int;
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> c_int;
    pub fn pthread_rwlock_timedwrlock(__rwlock: *mut pthread_rwlock_t,
                                      __abstime: *Struct_timespec) -> c_int;
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> c_int;
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) ->
     c_int;
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) ->
     c_int;
    pub fn pthread_rwlockattr_getpshared(__attr: *pthread_rwlockattr_t,
                                         __pshared: *mut c_int) -> c_int;
    pub fn pthread_rwlockattr_setpshared(__attr: *mut pthread_rwlockattr_t,
                                         __pshared: c_int) -> c_int;
    pub fn pthread_rwlockattr_getkind_np(__attr: *pthread_rwlockattr_t,
                                         __pref: *mut c_int) -> c_int;
    pub fn pthread_rwlockattr_setkind_np(__attr: *mut pthread_rwlockattr_t,
                                         __pref: c_int) -> c_int;
    pub fn pthread_cond_init(__cond: *mut pthread_cond_t,
                             __cond_attr: *pthread_condattr_t) -> c_int;
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> c_int;
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> c_int;
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> c_int;
    pub fn pthread_cond_wait(__cond: *mut pthread_cond_t,
                             __mutex: *mut pthread_mutex_t) -> c_int;
    pub fn pthread_cond_timedwait(__cond: *mut pthread_cond_t,
                                  __mutex: *mut pthread_mutex_t,
                                  __abstime: *Struct_timespec) -> c_int;
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> c_int;
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> c_int;
    pub fn pthread_condattr_getpshared(__attr: *pthread_condattr_t,
                                       __pshared: *mut c_int) -> c_int;
    pub fn pthread_condattr_setpshared(__attr: *mut pthread_condattr_t,
                                       __pshared: c_int) -> c_int;
    pub fn pthread_condattr_getclock(__attr: *pthread_condattr_t,
                                     __clock_id: *mut __clockid_t) -> c_int;
    pub fn pthread_condattr_setclock(__attr: *mut pthread_condattr_t,
                                     __clock_id: __clockid_t) -> c_int;
    pub fn pthread_spin_init(__lock: *mut pthread_spinlock_t,
                             __pshared: c_int) -> c_int;
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> c_int;
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> c_int;
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> c_int;
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> c_int;
    pub fn pthread_barrier_init(__barrier: *mut pthread_barrier_t,
                                __attr: *pthread_barrierattr_t,
                                __count: c_uint) -> c_int;
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) ->
     c_int;
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> c_int;
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) ->
     c_int;
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t) ->
     c_int;
    pub fn pthread_barrierattr_getpshared(__attr: *pthread_barrierattr_t,
                                          __pshared: *mut c_int) -> c_int;
    pub fn pthread_barrierattr_setpshared(__attr: *mut pthread_barrierattr_t,
                                          __pshared: c_int) -> c_int;
    pub fn pthread_key_create(__key: *mut pthread_key_t,
                              __destr_function:
                                  extern "C" fn(arg1: *mut c_void)) -> c_int;
    pub fn pthread_key_delete(__key: pthread_key_t) -> c_int;
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut c_void;
    pub fn pthread_setspecific(__key: pthread_key_t, __pointer: *c_void) ->
     c_int;
    pub fn pthread_getcpuclockid(__thread_id: pthread_t,
                                 __clock_id: *mut __clockid_t) -> c_int;
    pub fn pthread_atfork(__prepare: extern "C" fn(),
                          __parent: extern "C" fn(), __child: extern "C" fn())
     -> c_int;
    pub fn g_static_mutex_init(mutex: *mut GStaticMutex);
    pub fn g_static_mutex_free(mutex: *mut GStaticMutex);
    pub fn g_static_mutex_get_mutex_impl(mutex: *mut GStaticMutex) ->
     *mut GMutex;
    pub fn g_static_rec_mutex_init(mutex: *mut GStaticRecMutex);
    pub fn g_static_rec_mutex_lock(mutex: *mut GStaticRecMutex);
    pub fn g_static_rec_mutex_trylock(mutex: *mut GStaticRecMutex) ->
     gboolean;
    pub fn g_static_rec_mutex_unlock(mutex: *mut GStaticRecMutex);
    pub fn g_static_rec_mutex_lock_full(mutex: *mut GStaticRecMutex,
                                        depth: guint);
    pub fn g_static_rec_mutex_unlock_full(mutex: *mut GStaticRecMutex) ->
     guint;
    pub fn g_static_rec_mutex_free(mutex: *mut GStaticRecMutex);
    pub fn g_static_rw_lock_init(lock: *mut GStaticRWLock);
    pub fn g_static_rw_lock_reader_lock(lock: *mut GStaticRWLock);
    pub fn g_static_rw_lock_reader_trylock(lock: *mut GStaticRWLock) ->
     gboolean;
    pub fn g_static_rw_lock_reader_unlock(lock: *mut GStaticRWLock);
    pub fn g_static_rw_lock_writer_lock(lock: *mut GStaticRWLock);
    pub fn g_static_rw_lock_writer_trylock(lock: *mut GStaticRWLock) ->
     gboolean;
    pub fn g_static_rw_lock_writer_unlock(lock: *mut GStaticRWLock);
    pub fn g_static_rw_lock_free(lock: *mut GStaticRWLock);
    pub fn g_private_new(notify: GDestroyNotify) -> *mut GPrivate;
    pub fn g_static_private_init(private_key: *mut GStaticPrivate);
    pub fn g_static_private_get(private_key: *mut GStaticPrivate) -> gpointer;
    pub fn g_static_private_set(private_key: *mut GStaticPrivate,
                                data: gpointer, notify: GDestroyNotify);
    pub fn g_static_private_free(private_key: *mut GStaticPrivate);
    pub fn g_once_init_enter_impl(location: *mut gsize) -> gboolean;
    pub fn g_thread_init(vtable: gpointer);
    pub fn g_thread_init_with_errorcheck_mutexes(vtable: gpointer);
    pub fn g_thread_get_initialized() -> gboolean;
    pub fn g_mutex_new() -> *mut GMutex;
    pub fn g_mutex_free(mutex: *mut GMutex);
    pub fn g_cond_new() -> *mut GCond;
    pub fn g_cond_free(cond: *mut GCond);
    pub fn g_cond_timed_wait(cond: *mut GCond, mutex: *mut GMutex,
                             timeval: *mut GTimeVal) -> gboolean;
    pub fn g_type_init();
    pub fn g_type_init_with_debug_flags(debug_flags: GTypeDebugFlags);
    pub fn g_type_name(_type: GType) -> *gchar;
    pub fn g_type_qname(_type: GType) -> GQuark;
    pub fn g_type_from_name(name: *gchar) -> GType;
    pub fn g_type_parent(_type: GType) -> GType;
    pub fn g_type_depth(_type: GType) -> guint;
    pub fn g_type_next_base(leaf_type: GType, root_type: GType) -> GType;
    pub fn g_type_is_a(_type: GType, is_a_type: GType) -> gboolean;
    pub fn g_type_class_ref(_type: GType) -> gpointer;
    pub fn g_type_class_peek(_type: GType) -> gpointer;
    pub fn g_type_class_peek_static(_type: GType) -> gpointer;
    pub fn g_type_class_unref(g_class: gpointer);
    pub fn g_type_class_peek_parent(g_class: gpointer) -> gpointer;
    pub fn g_type_interface_peek(instance_class: gpointer, iface_type: GType)
     -> gpointer;
    pub fn g_type_interface_peek_parent(g_iface: gpointer) -> gpointer;
    pub fn g_type_default_interface_ref(g_type: GType) -> gpointer;
    pub fn g_type_default_interface_peek(g_type: GType) -> gpointer;
    pub fn g_type_default_interface_unref(g_iface: gpointer);
    pub fn g_type_children(_type: GType, n_children: *mut guint) ->
     *mut GType;
    pub fn g_type_interfaces(_type: GType, n_interfaces: *mut guint) ->
     *mut GType;
    pub fn g_type_set_qdata(_type: GType, quark: GQuark, data: gpointer);
    pub fn g_type_get_qdata(_type: GType, quark: GQuark) -> gpointer;
    pub fn g_type_query(_type: GType, query: *mut GTypeQuery);
    pub fn g_type_register_static(parent_type: GType, type_name: *gchar,
                                  info: *GTypeInfo, flags: GTypeFlags) ->
     GType;
    pub fn g_type_register_static_simple(parent_type: GType,
                                         type_name: *gchar, class_size: guint,
                                         class_init: GClassInitFunc,
                                         instance_size: guint,
                                         instance_init: GInstanceInitFunc,
                                         flags: GTypeFlags) -> GType;
    pub fn g_type_register_dynamic(parent_type: GType, type_name: *gchar,
                                   plugin: *mut GTypePlugin,
                                   flags: GTypeFlags) -> GType;
    pub fn g_type_register_fundamental(type_id: GType, type_name: *gchar,
                                       info: *GTypeInfo,
                                       finfo: *GTypeFundamentalInfo,
                                       flags: GTypeFlags) -> GType;
    pub fn g_type_add_interface_static(instance_type: GType,
                                       interface_type: GType,
                                       info: *GInterfaceInfo);
    pub fn g_type_add_interface_dynamic(instance_type: GType,
                                        interface_type: GType,
                                        plugin: *mut GTypePlugin);
    pub fn g_type_interface_add_prerequisite(interface_type: GType,
                                             prerequisite_type: GType);
    pub fn g_type_interface_prerequisites(interface_type: GType,
                                          n_prerequisites: *mut guint) ->
     *mut GType;
    pub fn g_type_class_add_private(g_class: gpointer, private_size: gsize);
    pub fn g_type_add_instance_private(class_type: GType, private_size: gsize)
     -> gint;
    pub fn g_type_instance_get_private(instance: *mut GTypeInstance,
                                       private_type: GType) -> gpointer;
    pub fn g_type_class_adjust_private_offset(g_class: gpointer,
                                              private_size_or_offset:
                                                  *mut gint);
    pub fn g_type_add_class_private(class_type: GType, private_size: gsize);
    pub fn g_type_class_get_private(klass: *mut GTypeClass,
                                    private_type: GType) -> gpointer;
    pub fn g_type_class_get_instance_private_offset(g_class: gpointer) ->
     gint;
    pub fn g_type_ensure(_type: GType);
    pub fn g_type_get_type_registration_serial() -> guint;
    pub fn g_type_get_plugin(_type: GType) -> *mut GTypePlugin;
    pub fn g_type_interface_get_plugin(instance_type: GType,
                                       interface_type: GType) ->
     *mut GTypePlugin;
    pub fn g_type_fundamental_next() -> GType;
    pub fn g_type_fundamental(type_id: GType) -> GType;
    pub fn g_type_create_instance(_type: GType) -> *mut GTypeInstance;
    pub fn g_type_free_instance(instance: *mut GTypeInstance);
    pub fn g_type_add_class_cache_func(cache_data: gpointer,
                                       cache_func: GTypeClassCacheFunc);
    pub fn g_type_remove_class_cache_func(cache_data: gpointer,
                                          cache_func: GTypeClassCacheFunc);
    pub fn g_type_class_unref_uncached(g_class: gpointer);
    pub fn g_type_add_interface_check(check_data: gpointer,
                                      check_func: GTypeInterfaceCheckFunc);
    pub fn g_type_remove_interface_check(check_data: gpointer,
                                         check_func: GTypeInterfaceCheckFunc);
    pub fn g_type_value_table_peek(_type: GType) -> *mut GTypeValueTable;
    pub fn g_type_check_instance(instance: *mut GTypeInstance) -> gboolean;
    pub fn g_type_check_instance_cast(instance: *mut GTypeInstance,
                                      iface_type: GType) ->
     *mut GTypeInstance;
    pub fn g_type_check_instance_is_a(instance: *mut GTypeInstance,
                                      iface_type: GType) -> gboolean;
    pub fn g_type_check_class_cast(g_class: *mut GTypeClass, is_a_type: GType)
     -> *mut GTypeClass;
    pub fn g_type_check_class_is_a(g_class: *mut GTypeClass, is_a_type: GType)
     -> gboolean;
    pub fn g_type_check_is_value_type(_type: GType) -> gboolean;
    pub fn g_type_check_value(value: *mut GValue) -> gboolean;
    pub fn g_type_check_value_holds(value: *mut GValue, _type: GType) ->
     gboolean;
    pub fn g_type_test_flags(_type: GType, flags: guint) -> gboolean;
    pub fn g_type_name_from_instance(instance: *mut GTypeInstance) -> *gchar;
    pub fn g_type_name_from_class(g_class: *mut GTypeClass) -> *gchar;
    pub fn g_value_init(value: *mut GValue, g_type: GType) -> *mut GValue;
    pub fn g_value_copy(src_value: *GValue, dest_value: *mut GValue);
    pub fn g_value_reset(value: *mut GValue) -> *mut GValue;
    pub fn g_value_unset(value: *mut GValue);
    pub fn g_value_set_instance(value: *mut GValue, instance: gpointer);
    pub fn g_value_fits_pointer(value: *GValue) -> gboolean;
    pub fn g_value_peek_pointer(value: *GValue) -> gpointer;
    pub fn g_value_type_compatible(src_type: GType, dest_type: GType) ->
     gboolean;
    pub fn g_value_type_transformable(src_type: GType, dest_type: GType) ->
     gboolean;
    pub fn g_value_transform(src_value: *GValue, dest_value: *mut GValue) ->
     gboolean;
    pub fn g_value_register_transform_func(src_type: GType, dest_type: GType,
                                           transform_func: GValueTransform);
    pub fn g_param_spec_ref(pspec: *mut GParamSpec) -> *mut GParamSpec;
    pub fn g_param_spec_unref(pspec: *mut GParamSpec);
    pub fn g_param_spec_sink(pspec: *mut GParamSpec);
    pub fn g_param_spec_ref_sink(pspec: *mut GParamSpec) -> *mut GParamSpec;
    pub fn g_param_spec_get_qdata(pspec: *mut GParamSpec, quark: GQuark) ->
     gpointer;
    pub fn g_param_spec_set_qdata(pspec: *mut GParamSpec, quark: GQuark,
                                  data: gpointer);
    pub fn g_param_spec_set_qdata_full(pspec: *mut GParamSpec, quark: GQuark,
                                       data: gpointer,
                                       destroy: GDestroyNotify);
    pub fn g_param_spec_steal_qdata(pspec: *mut GParamSpec, quark: GQuark) ->
     gpointer;
    pub fn g_param_spec_get_redirect_target(pspec: *mut GParamSpec) ->
     *mut GParamSpec;
    pub fn g_param_value_set_default(pspec: *mut GParamSpec,
                                     value: *mut GValue);
    pub fn g_param_value_defaults(pspec: *mut GParamSpec, value: *mut GValue)
     -> gboolean;
    pub fn g_param_value_validate(pspec: *mut GParamSpec, value: *mut GValue)
     -> gboolean;
    pub fn g_param_value_convert(pspec: *mut GParamSpec, src_value: *GValue,
                                 dest_value: *mut GValue,
                                 strict_validation: gboolean) -> gboolean;
    pub fn g_param_values_cmp(pspec: *mut GParamSpec, value1: *GValue,
                              value2: *GValue) -> gint;
    pub fn g_param_spec_get_name(pspec: *mut GParamSpec) -> *gchar;
    pub fn g_param_spec_get_nick(pspec: *mut GParamSpec) -> *gchar;
    pub fn g_param_spec_get_blurb(pspec: *mut GParamSpec) -> *gchar;
    pub fn g_value_set_param(value: *mut GValue, param: *mut GParamSpec);
    pub fn g_value_get_param(value: *GValue) -> *mut GParamSpec;
    pub fn g_value_dup_param(value: *GValue) -> *mut GParamSpec;
    pub fn g_value_take_param(value: *mut GValue, param: *mut GParamSpec);
    pub fn g_value_set_param_take_ownership(value: *mut GValue,
                                            param: *mut GParamSpec);
    pub fn g_param_spec_get_default_value(param: *mut GParamSpec) -> *GValue;
    pub fn g_param_type_register_static(name: *gchar,
                                        pspec_info: *GParamSpecTypeInfo) ->
     GType;
    pub fn _g_param_type_register_static_constant(name: *gchar,
                                                  pspec_info:
                                                      *GParamSpecTypeInfo,
                                                  opt_type: GType) -> GType;
    pub fn g_param_spec_internal(param_type: GType, name: *gchar,
                                 nick: *gchar, blurb: *gchar,
                                 flags: GParamFlags) -> gpointer;
    pub fn g_param_spec_pool_new(type_prefixing: gboolean) ->
     *mut GParamSpecPool;
    pub fn g_param_spec_pool_insert(pool: *mut GParamSpecPool,
                                    pspec: *mut GParamSpec,
                                    owner_type: GType);
    pub fn g_param_spec_pool_remove(pool: *mut GParamSpecPool,
                                    pspec: *mut GParamSpec);
    pub fn g_param_spec_pool_lookup(pool: *mut GParamSpecPool,
                                    param_name: *gchar, owner_type: GType,
                                    walk_ancestors: gboolean) ->
     *mut GParamSpec;
    pub fn g_param_spec_pool_list_owned(pool: *mut GParamSpecPool,
                                        owner_type: GType) -> *mut GList;
    pub fn g_param_spec_pool_list(pool: *mut GParamSpecPool,
                                  owner_type: GType, n_pspecs_p: *mut guint)
     -> *mut *mut GParamSpec;
    pub fn g_cclosure_new(callback_func: GCallback, user_data: gpointer,
                          destroy_data: GClosureNotify) -> *mut GClosure;
    pub fn g_cclosure_new_swap(callback_func: GCallback, user_data: gpointer,
                               destroy_data: GClosureNotify) -> *mut GClosure;
    pub fn g_signal_type_cclosure_new(itype: GType, struct_offset: guint) ->
     *mut GClosure;
    pub fn g_closure_ref(closure: *mut GClosure) -> *mut GClosure;
    pub fn g_closure_sink(closure: *mut GClosure);
    pub fn g_closure_unref(closure: *mut GClosure);
    pub fn g_closure_new_simple(sizeof_closure: guint, data: gpointer) ->
     *mut GClosure;
    pub fn g_closure_add_finalize_notifier(closure: *mut GClosure,
                                           notify_data: gpointer,
                                           notify_func: GClosureNotify);
    pub fn g_closure_remove_finalize_notifier(closure: *mut GClosure,
                                              notify_data: gpointer,
                                              notify_func: GClosureNotify);
    pub fn g_closure_add_invalidate_notifier(closure: *mut GClosure,
                                             notify_data: gpointer,
                                             notify_func: GClosureNotify);
    pub fn g_closure_remove_invalidate_notifier(closure: *mut GClosure,
                                                notify_data: gpointer,
                                                notify_func: GClosureNotify);
    pub fn g_closure_add_marshal_guards(closure: *mut GClosure,
                                        pre_marshal_data: gpointer,
                                        pre_marshal_notify: GClosureNotify,
                                        post_marshal_data: gpointer,
                                        post_marshal_notify: GClosureNotify);
    pub fn g_closure_set_marshal(closure: *mut GClosure,
                                 marshal: GClosureMarshal);
    pub fn g_closure_set_meta_marshal(closure: *mut GClosure,
                                      marshal_data: gpointer,
                                      meta_marshal: GClosureMarshal);
    pub fn g_closure_invalidate(closure: *mut GClosure);
    pub fn g_closure_invoke(closure: *mut GClosure, return_value: *mut GValue,
                            n_param_values: guint, param_values: *GValue,
                            invocation_hint: gpointer);
    pub fn g_cclosure_marshal_generic(closure: *mut GClosure,
                                      return_gvalue: *mut GValue,
                                      n_param_values: guint,
                                      param_values: *GValue,
                                      invocation_hint: gpointer,
                                      marshal_data: gpointer);
    pub fn g_cclosure_marshal_generic_va(closure: *mut GClosure,
                                         return_value: *mut GValue,
                                         instance: gpointer,
                                         args_list: va_list,
                                         marshal_data: gpointer,
                                         n_params: c_int,
                                         param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__VOID(closure: *mut GClosure,
                                         return_value: *mut GValue,
                                         n_param_values: guint,
                                         param_values: *GValue,
                                         invocation_hint: gpointer,
                                         marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__VOIDv(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          instance: gpointer, args: va_list,
                                          marshal_data: gpointer,
                                          n_params: c_int,
                                          param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__BOOLEAN(closure: *mut GClosure,
                                            return_value: *mut GValue,
                                            n_param_values: guint,
                                            param_values: *GValue,
                                            invocation_hint: gpointer,
                                            marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__BOOLEANv(closure: *mut GClosure,
                                             return_value: *mut GValue,
                                             instance: gpointer,
                                             args: va_list,
                                             marshal_data: gpointer,
                                             n_params: c_int,
                                             param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__CHAR(closure: *mut GClosure,
                                         return_value: *mut GValue,
                                         n_param_values: guint,
                                         param_values: *GValue,
                                         invocation_hint: gpointer,
                                         marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__CHARv(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          instance: gpointer, args: va_list,
                                          marshal_data: gpointer,
                                          n_params: c_int,
                                          param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__UCHAR(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          n_param_values: guint,
                                          param_values: *GValue,
                                          invocation_hint: gpointer,
                                          marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__UCHARv(closure: *mut GClosure,
                                           return_value: *mut GValue,
                                           instance: gpointer, args: va_list,
                                           marshal_data: gpointer,
                                           n_params: c_int,
                                           param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__INT(closure: *mut GClosure,
                                        return_value: *mut GValue,
                                        n_param_values: guint,
                                        param_values: *GValue,
                                        invocation_hint: gpointer,
                                        marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__INTv(closure: *mut GClosure,
                                         return_value: *mut GValue,
                                         instance: gpointer, args: va_list,
                                         marshal_data: gpointer,
                                         n_params: c_int,
                                         param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__UINT(closure: *mut GClosure,
                                         return_value: *mut GValue,
                                         n_param_values: guint,
                                         param_values: *GValue,
                                         invocation_hint: gpointer,
                                         marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__UINTv(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          instance: gpointer, args: va_list,
                                          marshal_data: gpointer,
                                          n_params: c_int,
                                          param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__LONG(closure: *mut GClosure,
                                         return_value: *mut GValue,
                                         n_param_values: guint,
                                         param_values: *GValue,
                                         invocation_hint: gpointer,
                                         marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__LONGv(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          instance: gpointer, args: va_list,
                                          marshal_data: gpointer,
                                          n_params: c_int,
                                          param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__ULONG(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          n_param_values: guint,
                                          param_values: *GValue,
                                          invocation_hint: gpointer,
                                          marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__ULONGv(closure: *mut GClosure,
                                           return_value: *mut GValue,
                                           instance: gpointer, args: va_list,
                                           marshal_data: gpointer,
                                           n_params: c_int,
                                           param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__ENUM(closure: *mut GClosure,
                                         return_value: *mut GValue,
                                         n_param_values: guint,
                                         param_values: *GValue,
                                         invocation_hint: gpointer,
                                         marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__ENUMv(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          instance: gpointer, args: va_list,
                                          marshal_data: gpointer,
                                          n_params: c_int,
                                          param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__FLAGS(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          n_param_values: guint,
                                          param_values: *GValue,
                                          invocation_hint: gpointer,
                                          marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__FLAGSv(closure: *mut GClosure,
                                           return_value: *mut GValue,
                                           instance: gpointer, args: va_list,
                                           marshal_data: gpointer,
                                           n_params: c_int,
                                           param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__FLOAT(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          n_param_values: guint,
                                          param_values: *GValue,
                                          invocation_hint: gpointer,
                                          marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__FLOATv(closure: *mut GClosure,
                                           return_value: *mut GValue,
                                           instance: gpointer, args: va_list,
                                           marshal_data: gpointer,
                                           n_params: c_int,
                                           param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__DOUBLE(closure: *mut GClosure,
                                           return_value: *mut GValue,
                                           n_param_values: guint,
                                           param_values: *GValue,
                                           invocation_hint: gpointer,
                                           marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__DOUBLEv(closure: *mut GClosure,
                                            return_value: *mut GValue,
                                            instance: gpointer, args: va_list,
                                            marshal_data: gpointer,
                                            n_params: c_int,
                                            param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__STRING(closure: *mut GClosure,
                                           return_value: *mut GValue,
                                           n_param_values: guint,
                                           param_values: *GValue,
                                           invocation_hint: gpointer,
                                           marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__STRINGv(closure: *mut GClosure,
                                            return_value: *mut GValue,
                                            instance: gpointer, args: va_list,
                                            marshal_data: gpointer,
                                            n_params: c_int,
                                            param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__PARAM(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          n_param_values: guint,
                                          param_values: *GValue,
                                          invocation_hint: gpointer,
                                          marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__PARAMv(closure: *mut GClosure,
                                           return_value: *mut GValue,
                                           instance: gpointer, args: va_list,
                                           marshal_data: gpointer,
                                           n_params: c_int,
                                           param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__BOXED(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          n_param_values: guint,
                                          param_values: *GValue,
                                          invocation_hint: gpointer,
                                          marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__BOXEDv(closure: *mut GClosure,
                                           return_value: *mut GValue,
                                           instance: gpointer, args: va_list,
                                           marshal_data: gpointer,
                                           n_params: c_int,
                                           param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__POINTER(closure: *mut GClosure,
                                            return_value: *mut GValue,
                                            n_param_values: guint,
                                            param_values: *GValue,
                                            invocation_hint: gpointer,
                                            marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__POINTERv(closure: *mut GClosure,
                                             return_value: *mut GValue,
                                             instance: gpointer,
                                             args: va_list,
                                             marshal_data: gpointer,
                                             n_params: c_int,
                                             param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__OBJECT(closure: *mut GClosure,
                                           return_value: *mut GValue,
                                           n_param_values: guint,
                                           param_values: *GValue,
                                           invocation_hint: gpointer,
                                           marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__OBJECTv(closure: *mut GClosure,
                                            return_value: *mut GValue,
                                            instance: gpointer, args: va_list,
                                            marshal_data: gpointer,
                                            n_params: c_int,
                                            param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__VARIANT(closure: *mut GClosure,
                                            return_value: *mut GValue,
                                            n_param_values: guint,
                                            param_values: *GValue,
                                            invocation_hint: gpointer,
                                            marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__VARIANTv(closure: *mut GClosure,
                                             return_value: *mut GValue,
                                             instance: gpointer,
                                             args: va_list,
                                             marshal_data: gpointer,
                                             n_params: c_int,
                                             param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__UINT_POINTER(closure: *mut GClosure,
                                                 return_value: *mut GValue,
                                                 n_param_values: guint,
                                                 param_values: *GValue,
                                                 invocation_hint: gpointer,
                                                 marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__UINT_POINTERv(closure: *mut GClosure,
                                                  return_value: *mut GValue,
                                                  instance: gpointer,
                                                  args: va_list,
                                                  marshal_data: gpointer,
                                                  n_params: c_int,
                                                  param_types: *mut GType);
    pub fn g_cclosure_marshal_BOOLEAN__FLAGS(closure: *mut GClosure,
                                             return_value: *mut GValue,
                                             n_param_values: guint,
                                             param_values: *GValue,
                                             invocation_hint: gpointer,
                                             marshal_data: gpointer);
    pub fn g_cclosure_marshal_BOOLEAN__FLAGSv(closure: *mut GClosure,
                                              return_value: *mut GValue,
                                              instance: gpointer,
                                              args: va_list,
                                              marshal_data: gpointer,
                                              n_params: c_int,
                                              param_types: *mut GType);
    pub fn g_cclosure_marshal_STRING__OBJECT_POINTER(closure: *mut GClosure,
                                                     return_value:
                                                         *mut GValue,
                                                     n_param_values: guint,
                                                     param_values: *GValue,
                                                     invocation_hint:
                                                         gpointer,
                                                     marshal_data: gpointer);
    pub fn g_cclosure_marshal_STRING__OBJECT_POINTERv(closure: *mut GClosure,
                                                      return_value:
                                                          *mut GValue,
                                                      instance: gpointer,
                                                      args: va_list,
                                                      marshal_data: gpointer,
                                                      n_params: c_int,
                                                      param_types:
                                                          *mut GType);
    pub fn g_cclosure_marshal_BOOLEAN__BOXED_BOXED(closure: *mut GClosure,
                                                   return_value: *mut GValue,
                                                   n_param_values: guint,
                                                   param_values: *GValue,
                                                   invocation_hint: gpointer,
                                                   marshal_data: gpointer);
    pub fn g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(closure: *mut GClosure,
                                                    return_value: *mut GValue,
                                                    instance: gpointer,
                                                    args: va_list,
                                                    marshal_data: gpointer,
                                                    n_params: c_int,
                                                    param_types: *mut GType);
    pub fn g_signal_newv(signal_name: *gchar, itype: GType,
                         signal_flags: GSignalFlags,
                         class_closure: *mut GClosure,
                         accumulator: GSignalAccumulator, accu_data: gpointer,
                         c_marshaller: GSignalCMarshaller, return_type: GType,
                         n_params: guint, param_types: *mut GType) -> guint;
    pub fn g_signal_new_valist(signal_name: *gchar, itype: GType,
                               signal_flags: GSignalFlags,
                               class_closure: *mut GClosure,
                               accumulator: GSignalAccumulator,
                               accu_data: gpointer,
                               c_marshaller: GSignalCMarshaller,
                               return_type: GType, n_params: guint,
                               args: va_list) -> guint;
    pub fn g_signal_new(signal_name: *gchar, itype: GType,
                        signal_flags: GSignalFlags, class_offset: guint,
                        accumulator: GSignalAccumulator, accu_data: gpointer,
                        c_marshaller: GSignalCMarshaller, return_type: GType,
                        n_params: guint, ...) -> guint;
    pub fn g_signal_new_class_handler(signal_name: *gchar, itype: GType,
                                      signal_flags: GSignalFlags,
                                      class_handler: GCallback,
                                      accumulator: GSignalAccumulator,
                                      accu_data: gpointer,
                                      c_marshaller: GSignalCMarshaller,
                                      return_type: GType,
                                      n_params: guint, ...) -> guint;
    pub fn g_signal_set_va_marshaller(signal_id: guint, instance_type: GType,
                                      va_marshaller: GSignalCVaMarshaller);
    pub fn g_signal_emitv(instance_and_params: *GValue, signal_id: guint,
                          detail: GQuark, return_value: *mut GValue);
    pub fn g_signal_emit_valist(instance: gpointer, signal_id: guint,
                                detail: GQuark, var_args: va_list);
    pub fn g_signal_emit(instance: gpointer, signal_id: guint,
                         detail: GQuark, ...);
    pub fn g_signal_emit_by_name(instance: gpointer,
                                 detailed_signal: *gchar, ...);
    pub fn g_signal_lookup(name: *gchar, itype: GType) -> guint;
    pub fn g_signal_name(signal_id: guint) -> *gchar;
    pub fn g_signal_query(signal_id: guint, query: *mut GSignalQuery);
    pub fn g_signal_list_ids(itype: GType, n_ids: *mut guint) -> *mut guint;
    pub fn g_signal_parse_name(detailed_signal: *gchar, itype: GType,
                               signal_id_p: *mut guint, detail_p: *mut GQuark,
                               force_detail_quark: gboolean) -> gboolean;
    pub fn g_signal_get_invocation_hint(instance: gpointer) ->
     *mut GSignalInvocationHint;
    pub fn g_signal_stop_emission(instance: gpointer, signal_id: guint,
                                  detail: GQuark);
    pub fn g_signal_stop_emission_by_name(instance: gpointer,
                                          detailed_signal: *gchar);
    pub fn g_signal_add_emission_hook(signal_id: guint, detail: GQuark,
                                      hook_func: GSignalEmissionHook,
                                      hook_data: gpointer,
                                      data_destroy: GDestroyNotify) -> gulong;
    pub fn g_signal_remove_emission_hook(signal_id: guint, hook_id: gulong);
    pub fn g_signal_has_handler_pending(instance: gpointer, signal_id: guint,
                                        detail: GQuark,
                                        may_be_blocked: gboolean) -> gboolean;
    pub fn g_signal_connect_closure_by_id(instance: gpointer,
                                          signal_id: guint, detail: GQuark,
                                          closure: *mut GClosure,
                                          after: gboolean) -> gulong;
    pub fn g_signal_connect_closure(instance: gpointer,
                                    detailed_signal: *gchar,
                                    closure: *mut GClosure, after: gboolean)
     -> gulong;
    pub fn g_signal_connect_data(instance: gpointer, detailed_signal: *gchar,
                                 c_handler: GCallback, data: gpointer,
                                 destroy_data: GClosureNotify,
                                 connect_flags: GConnectFlags) -> gulong;
    pub fn g_signal_handler_block(instance: gpointer, handler_id: gulong);
    pub fn g_signal_handler_unblock(instance: gpointer, handler_id: gulong);
    pub fn g_signal_handler_disconnect(instance: gpointer,
                                       handler_id: gulong);
    pub fn g_signal_handler_is_connected(instance: gpointer,
                                         handler_id: gulong) -> gboolean;
    pub fn g_signal_handler_find(instance: gpointer, mask: GSignalMatchType,
                                 signal_id: guint, detail: GQuark,
                                 closure: *mut GClosure, func: gpointer,
                                 data: gpointer) -> gulong;
    pub fn g_signal_handlers_block_matched(instance: gpointer,
                                           mask: GSignalMatchType,
                                           signal_id: guint, detail: GQuark,
                                           closure: *mut GClosure,
                                           func: gpointer, data: gpointer) ->
     guint;
    pub fn g_signal_handlers_unblock_matched(instance: gpointer,
                                             mask: GSignalMatchType,
                                             signal_id: guint, detail: GQuark,
                                             closure: *mut GClosure,
                                             func: gpointer, data: gpointer)
     -> guint;
    pub fn g_signal_handlers_disconnect_matched(instance: gpointer,
                                                mask: GSignalMatchType,
                                                signal_id: guint,
                                                detail: GQuark,
                                                closure: *mut GClosure,
                                                func: gpointer,
                                                data: gpointer) -> guint;
    pub fn g_signal_override_class_closure(signal_id: guint,
                                           instance_type: GType,
                                           class_closure: *mut GClosure);
    pub fn g_signal_override_class_handler(signal_name: *gchar,
                                           instance_type: GType,
                                           class_handler: GCallback);
    pub fn g_signal_chain_from_overridden(instance_and_params: *GValue,
                                          return_value: *mut GValue);
    pub fn g_signal_chain_from_overridden_handler(instance: gpointer, ...);
    pub fn g_signal_accumulator_true_handled(ihint:
                                                 *mut GSignalInvocationHint,
                                             return_accu: *mut GValue,
                                             handler_return: *GValue,
                                             dummy: gpointer) -> gboolean;
    pub fn g_signal_accumulator_first_wins(ihint: *mut GSignalInvocationHint,
                                           return_accu: *mut GValue,
                                           handler_return: *GValue,
                                           dummy: gpointer) -> gboolean;
    pub fn g_signal_handlers_destroy(instance: gpointer);
    pub fn _g_signals_destroy(itype: GType);
    pub fn g_date_get_type() -> GType;
    pub fn g_strv_get_type() -> GType;
    pub fn g_gstring_get_type() -> GType;
    pub fn g_hash_table_get_type() -> GType;
    pub fn g_array_get_type() -> GType;
    pub fn g_byte_array_get_type() -> GType;
    pub fn g_ptr_array_get_type() -> GType;
    pub fn g_bytes_get_type() -> GType;
    pub fn g_variant_type_get_gtype() -> GType;
    pub fn g_regex_get_type() -> GType;
    pub fn g_match_info_get_type() -> GType;
    pub fn g_error_get_type() -> GType;
    pub fn g_date_time_get_type() -> GType;
    pub fn g_time_zone_get_type() -> GType;
    pub fn g_io_channel_get_type() -> GType;
    pub fn g_io_condition_get_type() -> GType;
    pub fn g_variant_builder_get_type() -> GType;
    pub fn g_key_file_get_type() -> GType;
    pub fn g_main_loop_get_type() -> GType;
    pub fn g_main_context_get_type() -> GType;
    pub fn g_source_get_type() -> GType;
    pub fn g_pollfd_get_type() -> GType;
    pub fn g_thread_get_type() -> GType;
    pub fn g_checksum_get_type() -> GType;
    pub fn g_markup_parse_context_get_type() -> GType;
    pub fn g_variant_get_gtype() -> GType;
    pub fn g_boxed_copy(boxed_type: GType, src_boxed: gconstpointer) ->
     gpointer;
    pub fn g_boxed_free(boxed_type: GType, boxed: gpointer);
    pub fn g_value_set_boxed(value: *mut GValue, v_boxed: gconstpointer);
    pub fn g_value_set_static_boxed(value: *mut GValue,
                                    v_boxed: gconstpointer);
    pub fn g_value_take_boxed(value: *mut GValue, v_boxed: gconstpointer);
    pub fn g_value_set_boxed_take_ownership(value: *mut GValue,
                                            v_boxed: gconstpointer);
    pub fn g_value_get_boxed(value: *GValue) -> gpointer;
    pub fn g_value_dup_boxed(value: *GValue) -> gpointer;
    pub fn g_boxed_type_register_static(name: *gchar,
                                        boxed_copy: GBoxedCopyFunc,
                                        boxed_free: GBoxedFreeFunc) -> GType;
    pub fn g_closure_get_type() -> GType;
    pub fn g_value_get_type() -> GType;
    pub fn g_initially_unowned_get_type() -> GType;
    pub fn g_object_class_install_property(oclass: *mut GObjectClass,
                                           property_id: guint,
                                           pspec: *mut GParamSpec);
    pub fn g_object_class_find_property(oclass: *mut GObjectClass,
                                        property_name: *gchar) ->
     *mut GParamSpec;
    pub fn g_object_class_list_properties(oclass: *mut GObjectClass,
                                          n_properties: *mut guint) ->
     *mut *mut GParamSpec;
    pub fn g_object_class_override_property(oclass: *mut GObjectClass,
                                            property_id: guint, name: *gchar);
    pub fn g_object_class_install_properties(oclass: *mut GObjectClass,
                                             n_pspecs: guint,
                                             pspecs: *mut *mut GParamSpec);
    pub fn g_object_interface_install_property(g_iface: gpointer,
                                               pspec: *mut GParamSpec);
    pub fn g_object_interface_find_property(g_iface: gpointer,
                                            property_name: *gchar) ->
     *mut GParamSpec;
    pub fn g_object_interface_list_properties(g_iface: gpointer,
                                              n_properties_p: *mut guint) ->
     *mut *mut GParamSpec;
    pub fn g_object_get_type() -> GType;
    pub fn g_object_new(object_type: GType, first_property_name: *gchar, ...)
     -> gpointer;
    pub fn g_object_newv(object_type: GType, n_parameters: guint,
                         parameters: *mut GParameter) -> gpointer;
    pub fn g_object_new_valist(object_type: GType,
                               first_property_name: *gchar, var_args: va_list)
     -> *mut GObject;
    pub fn g_object_set(object: gpointer, first_property_name: *gchar, ...);
    pub fn g_object_get(object: gpointer, first_property_name: *gchar, ...);
    pub fn g_object_connect(object: gpointer, signal_spec: *gchar, ...) ->
     gpointer;
    pub fn g_object_disconnect(object: gpointer, signal_spec: *gchar, ...);
    pub fn g_object_set_valist(object: *mut GObject,
                               first_property_name: *gchar,
                               var_args: va_list);
    pub fn g_object_get_valist(object: *mut GObject,
                               first_property_name: *gchar,
                               var_args: va_list);
    pub fn g_object_set_property(object: *mut GObject, property_name: *gchar,
                                 value: *GValue);
    pub fn g_object_get_property(object: *mut GObject, property_name: *gchar,
                                 value: *mut GValue);
    pub fn g_object_freeze_notify(object: *mut GObject);
    pub fn g_object_notify(object: *mut GObject, property_name: *gchar);
    pub fn g_object_notify_by_pspec(object: *mut GObject,
                                    pspec: *mut GParamSpec);
    pub fn g_object_thaw_notify(object: *mut GObject);
    pub fn g_object_is_floating(object: gpointer) -> gboolean;
    pub fn g_object_ref_sink(object: gpointer) -> gpointer;
    pub fn g_object_ref(object: gpointer) -> gpointer;
    pub fn g_object_unref(object: gpointer);
    pub fn g_object_weak_ref(object: *mut GObject, notify: GWeakNotify,
                             data: gpointer);
    pub fn g_object_weak_unref(object: *mut GObject, notify: GWeakNotify,
                               data: gpointer);
    pub fn g_object_add_weak_pointer(object: *mut GObject,
                                     weak_pointer_location: *mut gpointer);
    pub fn g_object_remove_weak_pointer(object: *mut GObject,
                                        weak_pointer_location: *mut gpointer);
    pub fn g_object_add_toggle_ref(object: *mut GObject,
                                   notify: GToggleNotify, data: gpointer);
    pub fn g_object_remove_toggle_ref(object: *mut GObject,
                                      notify: GToggleNotify, data: gpointer);
    pub fn g_object_get_qdata(object: *mut GObject, quark: GQuark) ->
     gpointer;
    pub fn g_object_set_qdata(object: *mut GObject, quark: GQuark,
                              data: gpointer);
    pub fn g_object_set_qdata_full(object: *mut GObject, quark: GQuark,
                                   data: gpointer, destroy: GDestroyNotify);
    pub fn g_object_steal_qdata(object: *mut GObject, quark: GQuark) ->
     gpointer;
    pub fn g_object_dup_qdata(object: *mut GObject, quark: GQuark,
                              dup_func: GDuplicateFunc, user_data: gpointer)
     -> gpointer;
    pub fn g_object_replace_qdata(object: *mut GObject, quark: GQuark,
                                  oldval: gpointer, newval: gpointer,
                                  destroy: GDestroyNotify,
                                  old_destroy: *mut GDestroyNotify) ->
     gboolean;
    pub fn g_object_get_data(object: *mut GObject, key: *gchar) -> gpointer;
    pub fn g_object_set_data(object: *mut GObject, key: *gchar,
                             data: gpointer);
    pub fn g_object_set_data_full(object: *mut GObject, key: *gchar,
                                  data: gpointer, destroy: GDestroyNotify);
    pub fn g_object_steal_data(object: *mut GObject, key: *gchar) -> gpointer;
    pub fn g_object_dup_data(object: *mut GObject, key: *gchar,
                             dup_func: GDuplicateFunc, user_data: gpointer) ->
     gpointer;
    pub fn g_object_replace_data(object: *mut GObject, key: *gchar,
                                 oldval: gpointer, newval: gpointer,
                                 destroy: GDestroyNotify,
                                 old_destroy: *mut GDestroyNotify) ->
     gboolean;
    pub fn g_object_watch_closure(object: *mut GObject,
                                  closure: *mut GClosure);
    pub fn g_cclosure_new_object(callback_func: GCallback,
                                 object: *mut GObject) -> *mut GClosure;
    pub fn g_cclosure_new_object_swap(callback_func: GCallback,
                                      object: *mut GObject) -> *mut GClosure;
    pub fn g_closure_new_object(sizeof_closure: guint, object: *mut GObject)
     -> *mut GClosure;
    pub fn g_value_set_object(value: *mut GValue, v_object: gpointer);
    pub fn g_value_get_object(value: *GValue) -> gpointer;
    pub fn g_value_dup_object(value: *GValue) -> gpointer;
    pub fn g_signal_connect_object(instance: gpointer,
                                   detailed_signal: *gchar,
                                   c_handler: GCallback, gobject: gpointer,
                                   connect_flags: GConnectFlags) -> gulong;
    pub fn g_object_force_floating(object: *mut GObject);
    pub fn g_object_run_dispose(object: *mut GObject);
    pub fn g_value_take_object(value: *mut GValue, v_object: gpointer);
    pub fn g_value_set_object_take_ownership(value: *mut GValue,
                                             v_object: gpointer);
    pub fn g_object_compat_control(what: gsize, data: gpointer) -> gsize;
    pub fn g_clear_object(object_ptr: *mut *mut GObject);
    pub fn g_weak_ref_init(weak_ref: *mut GWeakRef, object: gpointer);
    pub fn g_weak_ref_clear(weak_ref: *mut GWeakRef);
    pub fn g_weak_ref_get(weak_ref: *mut GWeakRef) -> gpointer;
    pub fn g_weak_ref_set(weak_ref: *mut GWeakRef, object: gpointer);
    pub fn g_binding_flags_get_type() -> GType;
    pub fn g_binding_get_type() -> GType;
    pub fn g_binding_get_flags(binding: *mut GBinding) -> GBindingFlags;
    pub fn g_binding_get_source(binding: *mut GBinding) -> *mut GObject;
    pub fn g_binding_get_target(binding: *mut GBinding) -> *mut GObject;
    pub fn g_binding_get_source_property(binding: *mut GBinding) -> *gchar;
    pub fn g_binding_get_target_property(binding: *mut GBinding) -> *gchar;
    pub fn g_binding_unbind(binding: *mut GBinding);
    pub fn g_object_bind_property(source: gpointer, source_property: *gchar,
                                  target: gpointer, target_property: *gchar,
                                  flags: GBindingFlags) -> *mut GBinding;
    pub fn g_object_bind_property_full(source: gpointer,
                                       source_property: *gchar,
                                       target: gpointer,
                                       target_property: *gchar,
                                       flags: GBindingFlags,
                                       transform_to: GBindingTransformFunc,
                                       transform_from: GBindingTransformFunc,
                                       user_data: gpointer,
                                       notify: GDestroyNotify) ->
     *mut GBinding;
    pub fn g_object_bind_property_with_closures(source: gpointer,
                                                source_property: *gchar,
                                                target: gpointer,
                                                target_property: *gchar,
                                                flags: GBindingFlags,
                                                transform_to: *mut GClosure,
                                                transform_from: *mut GClosure)
     -> *mut GBinding;
    pub fn g_enum_get_value(enum_class: *mut GEnumClass, value: gint) ->
     *mut GEnumValue;
    pub fn g_enum_get_value_by_name(enum_class: *mut GEnumClass, name: *gchar)
     -> *mut GEnumValue;
    pub fn g_enum_get_value_by_nick(enum_class: *mut GEnumClass, nick: *gchar)
     -> *mut GEnumValue;
    pub fn g_flags_get_first_value(flags_class: *mut GFlagsClass,
                                   value: guint) -> *mut GFlagsValue;
    pub fn g_flags_get_value_by_name(flags_class: *mut GFlagsClass,
                                     name: *gchar) -> *mut GFlagsValue;
    pub fn g_flags_get_value_by_nick(flags_class: *mut GFlagsClass,
                                     nick: *gchar) -> *mut GFlagsValue;
    pub fn g_value_set_enum(value: *mut GValue, v_enum: gint);
    pub fn g_value_get_enum(value: *GValue) -> gint;
    pub fn g_value_set_flags(value: *mut GValue, v_flags: guint);
    pub fn g_value_get_flags(value: *GValue) -> guint;
    pub fn g_enum_register_static(name: *gchar,
                                  const_static_values: *GEnumValue) -> GType;
    pub fn g_flags_register_static(name: *gchar,
                                   const_static_values: *GFlagsValue) ->
     GType;
    pub fn g_enum_complete_type_info(g_enum_type: GType, info: *mut GTypeInfo,
                                     const_values: *GEnumValue);
    pub fn g_flags_complete_type_info(g_flags_type: GType,
                                      info: *mut GTypeInfo,
                                      const_values: *GFlagsValue);
    pub fn g_param_spec_char(name: *gchar, nick: *gchar, blurb: *gchar,
                             minimum: gint8, maximum: gint8,
                             default_value: gint8, flags: GParamFlags) ->
     *mut GParamSpec;
    pub fn g_param_spec_uchar(name: *gchar, nick: *gchar, blurb: *gchar,
                              minimum: guint8, maximum: guint8,
                              default_value: guint8, flags: GParamFlags) ->
     *mut GParamSpec;
    pub fn g_param_spec_boolean(name: *gchar, nick: *gchar, blurb: *gchar,
                                default_value: gboolean, flags: GParamFlags)
     -> *mut GParamSpec;
    pub fn g_param_spec_int(name: *gchar, nick: *gchar, blurb: *gchar,
                            minimum: gint, maximum: gint, default_value: gint,
                            flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_uint(name: *gchar, nick: *gchar, blurb: *gchar,
                             minimum: guint, maximum: guint,
                             default_value: guint, flags: GParamFlags) ->
     *mut GParamSpec;
    pub fn g_param_spec_long(name: *gchar, nick: *gchar, blurb: *gchar,
                             minimum: glong, maximum: glong,
                             default_value: glong, flags: GParamFlags) ->
     *mut GParamSpec;
    pub fn g_param_spec_ulong(name: *gchar, nick: *gchar, blurb: *gchar,
                              minimum: gulong, maximum: gulong,
                              default_value: gulong, flags: GParamFlags) ->
     *mut GParamSpec;
    pub fn g_param_spec_int64(name: *gchar, nick: *gchar, blurb: *gchar,
                              minimum: gint64, maximum: gint64,
                              default_value: gint64, flags: GParamFlags) ->
     *mut GParamSpec;
    pub fn g_param_spec_uint64(name: *gchar, nick: *gchar, blurb: *gchar,
                               minimum: guint64, maximum: guint64,
                               default_value: guint64, flags: GParamFlags) ->
     *mut GParamSpec;
    pub fn g_param_spec_unichar(name: *gchar, nick: *gchar, blurb: *gchar,
                                default_value: gunichar, flags: GParamFlags)
     -> *mut GParamSpec;
    pub fn g_param_spec_enum(name: *gchar, nick: *gchar, blurb: *gchar,
                             enum_type: GType, default_value: gint,
                             flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_flags(name: *gchar, nick: *gchar, blurb: *gchar,
                              flags_type: GType, default_value: guint,
                              flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_float(name: *gchar, nick: *gchar, blurb: *gchar,
                              minimum: gfloat, maximum: gfloat,
                              default_value: gfloat, flags: GParamFlags) ->
     *mut GParamSpec;
    pub fn g_param_spec_double(name: *gchar, nick: *gchar, blurb: *gchar,
                               minimum: gdouble, maximum: gdouble,
                               default_value: gdouble, flags: GParamFlags) ->
     *mut GParamSpec;
    pub fn g_param_spec_string(name: *gchar, nick: *gchar, blurb: *gchar,
                               default_value: *gchar, flags: GParamFlags) ->
     *mut GParamSpec;
    pub fn g_param_spec_param(name: *gchar, nick: *gchar, blurb: *gchar,
                              param_type: GType, flags: GParamFlags) ->
     *mut GParamSpec;
    pub fn g_param_spec_boxed(name: *gchar, nick: *gchar, blurb: *gchar,
                              boxed_type: GType, flags: GParamFlags) ->
     *mut GParamSpec;
    pub fn g_param_spec_pointer(name: *gchar, nick: *gchar, blurb: *gchar,
                                flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_value_array(name: *gchar, nick: *gchar, blurb: *gchar,
                                    element_spec: *mut GParamSpec,
                                    flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_object(name: *gchar, nick: *gchar, blurb: *gchar,
                               object_type: GType, flags: GParamFlags) ->
     *mut GParamSpec;
    pub fn g_param_spec_override(name: *gchar, overridden: *mut GParamSpec) ->
     *mut GParamSpec;
    pub fn g_param_spec_gtype(name: *gchar, nick: *gchar, blurb: *gchar,
                              is_a_type: GType, flags: GParamFlags) ->
     *mut GParamSpec;
    pub fn g_param_spec_variant(name: *gchar, nick: *gchar, blurb: *gchar,
                                _type: *GVariantType,
                                default_value: *mut GVariant,
                                flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_source_set_closure(source: *mut GSource, closure: *mut GClosure);
    pub fn g_source_set_dummy_callback(source: *mut GSource);
    pub fn g_type_module_get_type() -> GType;
    pub fn g_type_module_use(module: *mut GTypeModule) -> gboolean;
    pub fn g_type_module_unuse(module: *mut GTypeModule);
    pub fn g_type_module_set_name(module: *mut GTypeModule, name: *gchar);
    pub fn g_type_module_register_type(module: *mut GTypeModule,
                                       parent_type: GType, type_name: *gchar,
                                       type_info: *GTypeInfo,
                                       flags: GTypeFlags) -> GType;
    pub fn g_type_module_add_interface(module: *mut GTypeModule,
                                       instance_type: GType,
                                       interface_type: GType,
                                       interface_info: *GInterfaceInfo);
    pub fn g_type_module_register_enum(module: *mut GTypeModule, name: *gchar,
                                       const_static_values: *GEnumValue) ->
     GType;
    pub fn g_type_module_register_flags(module: *mut GTypeModule,
                                        name: *gchar,
                                        const_static_values: *GFlagsValue) ->
     GType;
    pub fn g_type_plugin_get_type() -> GType;
    pub fn g_type_plugin_use(plugin: *mut GTypePlugin);
    pub fn g_type_plugin_unuse(plugin: *mut GTypePlugin);
    pub fn g_type_plugin_complete_type_info(plugin: *mut GTypePlugin,
                                            g_type: GType,
                                            info: *mut GTypeInfo,
                                            value_table:
                                                *mut GTypeValueTable);
    pub fn g_type_plugin_complete_interface_info(plugin: *mut GTypePlugin,
                                                 instance_type: GType,
                                                 interface_type: GType,
                                                 info: *mut GInterfaceInfo);
    pub fn g_value_array_get_type() -> GType;
    pub fn g_value_array_get_nth(value_array: *mut GValueArray, index_: guint)
     -> *mut GValue;
    pub fn g_value_array_new(n_prealloced: guint) -> *mut GValueArray;
    pub fn g_value_array_free(value_array: *mut GValueArray);
    pub fn g_value_array_copy(value_array: *GValueArray) -> *mut GValueArray;
    pub fn g_value_array_prepend(value_array: *mut GValueArray,
                                 value: *GValue) -> *mut GValueArray;
    pub fn g_value_array_append(value_array: *mut GValueArray, value: *GValue)
     -> *mut GValueArray;
    pub fn g_value_array_insert(value_array: *mut GValueArray, index_: guint,
                                value: *GValue) -> *mut GValueArray;
    pub fn g_value_array_remove(value_array: *mut GValueArray, index_: guint)
     -> *mut GValueArray;
    pub fn g_value_array_sort(value_array: *mut GValueArray,
                              compare_func: GCompareFunc) -> *mut GValueArray;
    pub fn g_value_array_sort_with_data(value_array: *mut GValueArray,
                                        compare_func: GCompareDataFunc,
                                        user_data: gpointer) ->
     *mut GValueArray;
    pub fn g_value_set_char(value: *mut GValue, v_char: gchar);
    pub fn g_value_get_char(value: *GValue) -> gchar;
    pub fn g_value_set_schar(value: *mut GValue, v_char: gint8);
    pub fn g_value_get_schar(value: *GValue) -> gint8;
    pub fn g_value_set_uchar(value: *mut GValue, v_uchar: guchar);
    pub fn g_value_get_uchar(value: *GValue) -> guchar;
    pub fn g_value_set_boolean(value: *mut GValue, v_boolean: gboolean);
    pub fn g_value_get_boolean(value: *GValue) -> gboolean;
    pub fn g_value_set_int(value: *mut GValue, v_int: gint);
    pub fn g_value_get_int(value: *GValue) -> gint;
    pub fn g_value_set_uint(value: *mut GValue, v_uint: guint);
    pub fn g_value_get_uint(value: *GValue) -> guint;
    pub fn g_value_set_long(value: *mut GValue, v_long: glong);
    pub fn g_value_get_long(value: *GValue) -> glong;
    pub fn g_value_set_ulong(value: *mut GValue, v_ulong: gulong);
    pub fn g_value_get_ulong(value: *GValue) -> gulong;
    pub fn g_value_set_int64(value: *mut GValue, v_int64: gint64);
    pub fn g_value_get_int64(value: *GValue) -> gint64;
    pub fn g_value_set_uint64(value: *mut GValue, v_uint64: guint64);
    pub fn g_value_get_uint64(value: *GValue) -> guint64;
    pub fn g_value_set_float(value: *mut GValue, v_float: gfloat);
    pub fn g_value_get_float(value: *GValue) -> gfloat;
    pub fn g_value_set_double(value: *mut GValue, v_double: gdouble);
    pub fn g_value_get_double(value: *GValue) -> gdouble;
    pub fn g_value_set_string(value: *mut GValue, v_string: *gchar);
    pub fn g_value_set_static_string(value: *mut GValue, v_string: *gchar);
    pub fn g_value_get_string(value: *GValue) -> *gchar;
    pub fn g_value_dup_string(value: *GValue) -> *mut gchar;
    pub fn g_value_set_pointer(value: *mut GValue, v_pointer: gpointer);
    pub fn g_value_get_pointer(value: *GValue) -> gpointer;
    pub fn g_gtype_get_type() -> GType;
    pub fn g_value_set_gtype(value: *mut GValue, v_gtype: GType);
    pub fn g_value_get_gtype(value: *GValue) -> GType;
    pub fn g_value_set_variant(value: *mut GValue, variant: *mut GVariant);
    pub fn g_value_take_variant(value: *mut GValue, variant: *mut GVariant);
    pub fn g_value_get_variant(value: *GValue) -> *mut GVariant;
    pub fn g_value_dup_variant(value: *GValue) -> *mut GVariant;
    pub fn g_pointer_type_register_static(name: *gchar) -> GType;
    pub fn g_strdup_value_contents(value: *GValue) -> *mut gchar;
    pub fn g_value_take_string(value: *mut GValue, v_string: *mut gchar);
    pub fn g_value_set_string_take_ownership(value: *mut GValue,
                                             v_string: *mut gchar);
    pub fn g_action_get_type() -> GType;
    pub fn g_action_get_name(action: *mut GAction) -> *gchar;
    pub fn g_action_get_parameter_type(action: *mut GAction) -> *GVariantType;
    pub fn g_action_get_state_type(action: *mut GAction) -> *GVariantType;
    pub fn g_action_get_state_hint(action: *mut GAction) -> *mut GVariant;
    pub fn g_action_get_enabled(action: *mut GAction) -> gboolean;
    pub fn g_action_get_state(action: *mut GAction) -> *mut GVariant;
    pub fn g_action_change_state(action: *mut GAction, value: *mut GVariant);
    pub fn g_action_activate(action: *mut GAction, parameter: *mut GVariant);
    pub fn g_action_name_is_valid(action_name: *gchar) -> gboolean;
    pub fn g_action_parse_detailed_name(detailed_name: *gchar,
                                        action_name: *mut *mut gchar,
                                        target_value: *mut *mut GVariant,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_action_print_detailed_name(action_name: *gchar,
                                        parameter: *mut GVariant) ->
     *mut gchar;
    pub fn g_action_group_get_type() -> GType;
    pub fn g_action_group_has_action(action_group: *mut GActionGroup,
                                     action_name: *gchar) -> gboolean;
    pub fn g_action_group_list_actions(action_group: *mut GActionGroup) ->
     *mut *mut gchar;
    pub fn g_action_group_get_action_parameter_type(action_group:
                                                        *mut GActionGroup,
                                                    action_name: *gchar) ->
     *GVariantType;
    pub fn g_action_group_get_action_state_type(action_group:
                                                    *mut GActionGroup,
                                                action_name: *gchar) ->
     *GVariantType;
    pub fn g_action_group_get_action_state_hint(action_group:
                                                    *mut GActionGroup,
                                                action_name: *gchar) ->
     *mut GVariant;
    pub fn g_action_group_get_action_enabled(action_group: *mut GActionGroup,
                                             action_name: *gchar) -> gboolean;
    pub fn g_action_group_get_action_state(action_group: *mut GActionGroup,
                                           action_name: *gchar) ->
     *mut GVariant;
    pub fn g_action_group_change_action_state(action_group: *mut GActionGroup,
                                              action_name: *gchar,
                                              value: *mut GVariant);
    pub fn g_action_group_activate_action(action_group: *mut GActionGroup,
                                          action_name: *gchar,
                                          parameter: *mut GVariant);
    pub fn g_action_group_action_added(action_group: *mut GActionGroup,
                                       action_name: *gchar);
    pub fn g_action_group_action_removed(action_group: *mut GActionGroup,
                                         action_name: *gchar);
    pub fn g_action_group_action_enabled_changed(action_group:
                                                     *mut GActionGroup,
                                                 action_name: *gchar,
                                                 enabled: gboolean);
    pub fn g_action_group_action_state_changed(action_group:
                                                   *mut GActionGroup,
                                               action_name: *gchar,
                                               state: *mut GVariant);
    pub fn g_action_group_query_action(action_group: *mut GActionGroup,
                                       action_name: *gchar,
                                       enabled: *mut gboolean,
                                       parameter_type: *mut *GVariantType,
                                       state_type: *mut *GVariantType,
                                       state_hint: *mut *mut GVariant,
                                       state: *mut *mut GVariant) -> gboolean;
    pub fn g_dbus_connection_export_action_group(connection:
                                                     *mut GDBusConnection,
                                                 object_path: *gchar,
                                                 action_group:
                                                     *mut GActionGroup,
                                                 error: *mut *mut GError) ->
     guint;
    pub fn g_dbus_connection_unexport_action_group(connection:
                                                       *mut GDBusConnection,
                                                   export_id: guint);
    pub fn g_action_map_get_type() -> GType;
    pub fn g_action_map_lookup_action(action_map: *mut GActionMap,
                                      action_name: *gchar) -> *mut GAction;
    pub fn g_action_map_add_action(action_map: *mut GActionMap,
                                   action: *mut GAction);
    pub fn g_action_map_remove_action(action_map: *mut GActionMap,
                                      action_name: *gchar);
    pub fn g_action_map_add_action_entries(action_map: *mut GActionMap,
                                           entries: *GActionEntry,
                                           n_entries: gint,
                                           user_data: gpointer);
    pub fn g_app_info_get_type() -> GType;
    pub fn g_app_info_create_from_commandline(commandline: *c_schar,
                                              application_name: *c_schar,
                                              flags: GAppInfoCreateFlags,
                                              error: *mut *mut GError) ->
     *mut GAppInfo;
    pub fn g_app_info_dup(appinfo: *mut GAppInfo) -> *mut GAppInfo;
    pub fn g_app_info_equal(appinfo1: *mut GAppInfo, appinfo2: *mut GAppInfo)
     -> gboolean;
    pub fn g_app_info_get_id(appinfo: *mut GAppInfo) -> *c_schar;
    pub fn g_app_info_get_name(appinfo: *mut GAppInfo) -> *c_schar;
    pub fn g_app_info_get_display_name(appinfo: *mut GAppInfo) -> *c_schar;
    pub fn g_app_info_get_description(appinfo: *mut GAppInfo) -> *c_schar;
    pub fn g_app_info_get_executable(appinfo: *mut GAppInfo) -> *c_schar;
    pub fn g_app_info_get_commandline(appinfo: *mut GAppInfo) -> *c_schar;
    pub fn g_app_info_get_icon(appinfo: *mut GAppInfo) -> *mut GIcon;
    pub fn g_app_info_launch(appinfo: *mut GAppInfo, files: *mut GList,
                             launch_context: *mut GAppLaunchContext,
                             error: *mut *mut GError) -> gboolean;
    pub fn g_app_info_supports_uris(appinfo: *mut GAppInfo) -> gboolean;
    pub fn g_app_info_supports_files(appinfo: *mut GAppInfo) -> gboolean;
    pub fn g_app_info_launch_uris(appinfo: *mut GAppInfo, uris: *mut GList,
                                  launch_context: *mut GAppLaunchContext,
                                  error: *mut *mut GError) -> gboolean;
    pub fn g_app_info_should_show(appinfo: *mut GAppInfo) -> gboolean;
    pub fn g_app_info_set_as_default_for_type(appinfo: *mut GAppInfo,
                                              content_type: *c_schar,
                                              error: *mut *mut GError) ->
     gboolean;
    pub fn g_app_info_set_as_default_for_extension(appinfo: *mut GAppInfo,
                                                   extension: *c_schar,
                                                   error: *mut *mut GError) ->
     gboolean;
    pub fn g_app_info_add_supports_type(appinfo: *mut GAppInfo,
                                        content_type: *c_schar,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_app_info_can_remove_supports_type(appinfo: *mut GAppInfo) ->
     gboolean;
    pub fn g_app_info_remove_supports_type(appinfo: *mut GAppInfo,
                                           content_type: *c_schar,
                                           error: *mut *mut GError) ->
     gboolean;
    pub fn g_app_info_get_supported_types(appinfo: *mut GAppInfo) ->
     *mut *c_schar;
    pub fn g_app_info_can_delete(appinfo: *mut GAppInfo) -> gboolean;
    pub fn g_app_info_delete(appinfo: *mut GAppInfo) -> gboolean;
    pub fn g_app_info_set_as_last_used_for_type(appinfo: *mut GAppInfo,
                                                content_type: *c_schar,
                                                error: *mut *mut GError) ->
     gboolean;
    pub fn g_app_info_get_all() -> *mut GList;
    pub fn g_app_info_get_all_for_type(content_type: *c_schar) -> *mut GList;
    pub fn g_app_info_get_recommended_for_type(content_type: *gchar) ->
     *mut GList;
    pub fn g_app_info_get_fallback_for_type(content_type: *gchar) ->
     *mut GList;
    pub fn g_app_info_reset_type_associations(content_type: *c_schar);
    pub fn g_app_info_get_default_for_type(content_type: *c_schar,
                                           must_support_uris: gboolean) ->
     *mut GAppInfo;
    pub fn g_app_info_get_default_for_uri_scheme(uri_scheme: *c_schar) ->
     *mut GAppInfo;
    pub fn g_app_info_launch_default_for_uri(uri: *c_schar,
                                             launch_context:
                                                 *mut GAppLaunchContext,
                                             error: *mut *mut GError) ->
     gboolean;
    pub fn g_app_launch_context_get_type() -> GType;
    pub fn g_app_launch_context_new() -> *mut GAppLaunchContext;
    pub fn g_app_launch_context_setenv(context: *mut GAppLaunchContext,
                                       variable: *c_schar, value: *c_schar);
    pub fn g_app_launch_context_unsetenv(context: *mut GAppLaunchContext,
                                         variable: *c_schar);
    pub fn g_app_launch_context_get_environment(context:
                                                    *mut GAppLaunchContext) ->
     *mut *mut c_schar;
    pub fn g_app_launch_context_get_display(context: *mut GAppLaunchContext,
                                            info: *mut GAppInfo,
                                            files: *mut GList) ->
     *mut c_schar;
    pub fn g_app_launch_context_get_startup_notify_id(context:
                                                          *mut GAppLaunchContext,
                                                      info: *mut GAppInfo,
                                                      files: *mut GList) ->
     *mut c_schar;
    pub fn g_app_launch_context_launch_failed(context: *mut GAppLaunchContext,
                                              startup_notify_id: *c_schar);
    pub fn g_application_get_type() -> GType;
    pub fn g_application_id_is_valid(application_id: *gchar) -> gboolean;
    pub fn g_application_new(application_id: *gchar, flags: GApplicationFlags)
     -> *mut GApplication;
    pub fn g_application_get_application_id(application: *mut GApplication) ->
     *gchar;
    pub fn g_application_set_application_id(application: *mut GApplication,
                                            application_id: *gchar);
    pub fn g_application_get_dbus_connection(application: *mut GApplication)
     -> *mut GDBusConnection;
    pub fn g_application_get_dbus_object_path(application: *mut GApplication)
     -> *gchar;
    pub fn g_application_get_inactivity_timeout(application:
                                                    *mut GApplication) ->
     guint;
    pub fn g_application_set_inactivity_timeout(application:
                                                    *mut GApplication,
                                                inactivity_timeout: guint);
    pub fn g_application_get_flags(application: *mut GApplication) ->
     GApplicationFlags;
    pub fn g_application_set_flags(application: *mut GApplication,
                                   flags: GApplicationFlags);
    pub fn g_application_set_action_group(application: *mut GApplication,
                                          action_group: *mut GActionGroup);
    pub fn g_application_get_is_registered(application: *mut GApplication) ->
     gboolean;
    pub fn g_application_get_is_remote(application: *mut GApplication) ->
     gboolean;
    pub fn g_application_register(application: *mut GApplication,
                                  cancellable: *mut GCancellable,
                                  error: *mut *mut GError) -> gboolean;
    pub fn g_application_hold(application: *mut GApplication);
    pub fn g_application_release(application: *mut GApplication);
    pub fn g_application_activate(application: *mut GApplication);
    pub fn g_application_open(application: *mut GApplication,
                              files: *mut *mut GFile, n_files: gint,
                              hint: *gchar);
    pub fn g_application_run(application: *mut GApplication, argc: c_int,
                             argv: *mut *mut c_schar) -> c_int;
    pub fn g_application_quit(application: *mut GApplication);
    pub fn g_application_get_default() -> *mut GApplication;
    pub fn g_application_set_default(application: *mut GApplication);
    pub fn g_application_mark_busy(application: *mut GApplication);
    pub fn g_application_unmark_busy(application: *mut GApplication);
    pub fn g_application_command_line_get_type() -> GType;
    pub fn g_application_command_line_get_arguments(cmdline:
                                                        *mut GApplicationCommandLine,
                                                    argc: *mut c_int) ->
     *mut *mut gchar;
    pub fn g_application_command_line_get_stdin(cmdline:
                                                    *mut GApplicationCommandLine)
     -> *mut GInputStream;
    pub fn g_application_command_line_get_environ(cmdline:
                                                      *mut GApplicationCommandLine)
     -> **gchar;
    pub fn g_application_command_line_getenv(cmdline:
                                                 *mut GApplicationCommandLine,
                                             name: *gchar) -> *gchar;
    pub fn g_application_command_line_get_cwd(cmdline:
                                                  *mut GApplicationCommandLine)
     -> *gchar;
    pub fn g_application_command_line_get_is_remote(cmdline:
                                                        *mut GApplicationCommandLine)
     -> gboolean;
    pub fn g_application_command_line_print(cmdline:
                                                *mut GApplicationCommandLine,
                                            format: *gchar, ...);
    pub fn g_application_command_line_printerr(cmdline:
                                                   *mut GApplicationCommandLine,
                                               format: *gchar, ...);
    pub fn g_application_command_line_get_exit_status(cmdline:
                                                          *mut GApplicationCommandLine)
     -> c_int;
    pub fn g_application_command_line_set_exit_status(cmdline:
                                                          *mut GApplicationCommandLine,
                                                      exit_status: c_int);
    pub fn g_application_command_line_get_platform_data(cmdline:
                                                            *mut GApplicationCommandLine)
     -> *mut GVariant;
    pub fn g_application_command_line_create_file_for_arg(cmdline:
                                                              *mut GApplicationCommandLine,
                                                          arg: *gchar) ->
     *mut GFile;
    pub fn g_initable_get_type() -> GType;
    pub fn g_initable_init(initable: *mut GInitable,
                           cancellable: *mut GCancellable,
                           error: *mut *mut GError) -> gboolean;
    pub fn g_initable_new(object_type: GType, cancellable: *mut GCancellable,
                          error: *mut *mut GError,
                          first_property_name: *gchar, ...) -> gpointer;
    pub fn g_initable_newv(object_type: GType, n_parameters: guint,
                           parameters: *mut GParameter,
                           cancellable: *mut GCancellable,
                           error: *mut *mut GError) -> gpointer;
    pub fn g_initable_new_valist(object_type: GType,
                                 first_property_name: *gchar,
                                 var_args: va_list,
                                 cancellable: *mut GCancellable,
                                 error: *mut *mut GError) -> *mut GObject;
    pub fn g_async_initable_get_type() -> GType;
    pub fn g_async_initable_init_async(initable: *mut GAsyncInitable,
                                       io_priority: c_int,
                                       cancellable: *mut GCancellable,
                                       callback: GAsyncReadyCallback,
                                       user_data: gpointer);
    pub fn g_async_initable_init_finish(initable: *mut GAsyncInitable,
                                        res: *mut GAsyncResult,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_async_initable_new_async(object_type: GType, io_priority: c_int,
                                      cancellable: *mut GCancellable,
                                      callback: GAsyncReadyCallback,
                                      user_data: gpointer,
                                      first_property_name: *gchar, ...);
    pub fn g_async_initable_newv_async(object_type: GType,
                                       n_parameters: guint,
                                       parameters: *mut GParameter,
                                       io_priority: c_int,
                                       cancellable: *mut GCancellable,
                                       callback: GAsyncReadyCallback,
                                       user_data: gpointer);
    pub fn g_async_initable_new_valist_async(object_type: GType,
                                             first_property_name: *gchar,
                                             var_args: va_list,
                                             io_priority: c_int,
                                             cancellable: *mut GCancellable,
                                             callback: GAsyncReadyCallback,
                                             user_data: gpointer);
    pub fn g_async_initable_new_finish(initable: *mut GAsyncInitable,
                                       res: *mut GAsyncResult,
                                       error: *mut *mut GError) ->
     *mut GObject;
    pub fn g_async_result_get_type() -> GType;
    pub fn g_async_result_get_user_data(res: *mut GAsyncResult) -> gpointer;
    pub fn g_async_result_get_source_object(res: *mut GAsyncResult) ->
     *mut GObject;
    pub fn g_async_result_legacy_propagate_error(res: *mut GAsyncResult,
                                                 error: *mut *mut GError) ->
     gboolean;
    pub fn g_async_result_is_tagged(res: *mut GAsyncResult,
                                    source_tag: gpointer) -> gboolean;
    pub fn g_input_stream_get_type() -> GType;
    pub fn g_input_stream_read(stream: *mut GInputStream, buffer: *mut c_void,
                               count: gsize, cancellable: *mut GCancellable,
                               error: *mut *mut GError) -> gssize;
    pub fn g_input_stream_read_all(stream: *mut GInputStream,
                                   buffer: *mut c_void, count: gsize,
                                   bytes_read: *mut gsize,
                                   cancellable: *mut GCancellable,
                                   error: *mut *mut GError) -> gboolean;
    pub fn g_input_stream_read_bytes(stream: *mut GInputStream, count: gsize,
                                     cancellable: *mut GCancellable,
                                     error: *mut *mut GError) -> *mut GBytes;
    pub fn g_input_stream_skip(stream: *mut GInputStream, count: gsize,
                               cancellable: *mut GCancellable,
                               error: *mut *mut GError) -> gssize;
    pub fn g_input_stream_close(stream: *mut GInputStream,
                                cancellable: *mut GCancellable,
                                error: *mut *mut GError) -> gboolean;
    pub fn g_input_stream_read_async(stream: *mut GInputStream,
                                     buffer: *mut c_void, count: gsize,
                                     io_priority: c_int,
                                     cancellable: *mut GCancellable,
                                     callback: GAsyncReadyCallback,
                                     user_data: gpointer);
    pub fn g_input_stream_read_finish(stream: *mut GInputStream,
                                      result: *mut GAsyncResult,
                                      error: *mut *mut GError) -> gssize;
    pub fn g_input_stream_read_bytes_async(stream: *mut GInputStream,
                                           count: gsize, io_priority: c_int,
                                           cancellable: *mut GCancellable,
                                           callback: GAsyncReadyCallback,
                                           user_data: gpointer);
    pub fn g_input_stream_read_bytes_finish(stream: *mut GInputStream,
                                            result: *mut GAsyncResult,
                                            error: *mut *mut GError) ->
     *mut GBytes;
    pub fn g_input_stream_skip_async(stream: *mut GInputStream, count: gsize,
                                     io_priority: c_int,
                                     cancellable: *mut GCancellable,
                                     callback: GAsyncReadyCallback,
                                     user_data: gpointer);
    pub fn g_input_stream_skip_finish(stream: *mut GInputStream,
                                      result: *mut GAsyncResult,
                                      error: *mut *mut GError) -> gssize;
    pub fn g_input_stream_close_async(stream: *mut GInputStream,
                                      io_priority: c_int,
                                      cancellable: *mut GCancellable,
                                      callback: GAsyncReadyCallback,
                                      user_data: gpointer);
    pub fn g_input_stream_close_finish(stream: *mut GInputStream,
                                       result: *mut GAsyncResult,
                                       error: *mut *mut GError) -> gboolean;
    pub fn g_input_stream_is_closed(stream: *mut GInputStream) -> gboolean;
    pub fn g_input_stream_has_pending(stream: *mut GInputStream) -> gboolean;
    pub fn g_input_stream_set_pending(stream: *mut GInputStream,
                                      error: *mut *mut GError) -> gboolean;
    pub fn g_input_stream_clear_pending(stream: *mut GInputStream);
    pub fn g_filter_input_stream_get_type() -> GType;
    pub fn g_filter_input_stream_get_base_stream(stream:
                                                     *mut GFilterInputStream)
     -> *mut GInputStream;
    pub fn g_filter_input_stream_get_close_base_stream(stream:
                                                           *mut GFilterInputStream)
     -> gboolean;
    pub fn g_filter_input_stream_set_close_base_stream(stream:
                                                           *mut GFilterInputStream,
                                                       close_base: gboolean);
    pub fn g_buffered_input_stream_get_type() -> GType;
    pub fn g_buffered_input_stream_new(base_stream: *mut GInputStream) ->
     *mut GInputStream;
    pub fn g_buffered_input_stream_new_sized(base_stream: *mut GInputStream,
                                             size: gsize) ->
     *mut GInputStream;
    pub fn g_buffered_input_stream_get_buffer_size(stream:
                                                       *mut GBufferedInputStream)
     -> gsize;
    pub fn g_buffered_input_stream_set_buffer_size(stream:
                                                       *mut GBufferedInputStream,
                                                   size: gsize);
    pub fn g_buffered_input_stream_get_available(stream:
                                                     *mut GBufferedInputStream)
     -> gsize;
    pub fn g_buffered_input_stream_peek(stream: *mut GBufferedInputStream,
                                        buffer: *mut c_void, offset: gsize,
                                        count: gsize) -> gsize;
    pub fn g_buffered_input_stream_peek_buffer(stream:
                                                   *mut GBufferedInputStream,
                                               count: *mut gsize) -> *c_void;
    pub fn g_buffered_input_stream_fill(stream: *mut GBufferedInputStream,
                                        count: gssize,
                                        cancellable: *mut GCancellable,
                                        error: *mut *mut GError) -> gssize;
    pub fn g_buffered_input_stream_fill_async(stream:
                                                  *mut GBufferedInputStream,
                                              count: gssize,
                                              io_priority: c_int,
                                              cancellable: *mut GCancellable,
                                              callback: GAsyncReadyCallback,
                                              user_data: gpointer);
    pub fn g_buffered_input_stream_fill_finish(stream:
                                                   *mut GBufferedInputStream,
                                               result: *mut GAsyncResult,
                                               error: *mut *mut GError) ->
     gssize;
    pub fn g_buffered_input_stream_read_byte(stream:
                                                 *mut GBufferedInputStream,
                                             cancellable: *mut GCancellable,
                                             error: *mut *mut GError) ->
     c_int;
    pub fn g_output_stream_get_type() -> GType;
    pub fn g_output_stream_write(stream: *mut GOutputStream, buffer: *c_void,
                                 count: gsize, cancellable: *mut GCancellable,
                                 error: *mut *mut GError) -> gssize;
    pub fn g_output_stream_write_all(stream: *mut GOutputStream,
                                     buffer: *c_void, count: gsize,
                                     bytes_written: *mut gsize,
                                     cancellable: *mut GCancellable,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_output_stream_write_bytes(stream: *mut GOutputStream,
                                       bytes: *mut GBytes,
                                       cancellable: *mut GCancellable,
                                       error: *mut *mut GError) -> gssize;
    pub fn g_output_stream_splice(stream: *mut GOutputStream,
                                  source: *mut GInputStream,
                                  flags: GOutputStreamSpliceFlags,
                                  cancellable: *mut GCancellable,
                                  error: *mut *mut GError) -> gssize;
    pub fn g_output_stream_flush(stream: *mut GOutputStream,
                                 cancellable: *mut GCancellable,
                                 error: *mut *mut GError) -> gboolean;
    pub fn g_output_stream_close(stream: *mut GOutputStream,
                                 cancellable: *mut GCancellable,
                                 error: *mut *mut GError) -> gboolean;
    pub fn g_output_stream_write_async(stream: *mut GOutputStream,
                                       buffer: *c_void, count: gsize,
                                       io_priority: c_int,
                                       cancellable: *mut GCancellable,
                                       callback: GAsyncReadyCallback,
                                       user_data: gpointer);
    pub fn g_output_stream_write_finish(stream: *mut GOutputStream,
                                        result: *mut GAsyncResult,
                                        error: *mut *mut GError) -> gssize;
    pub fn g_output_stream_write_bytes_async(stream: *mut GOutputStream,
                                             bytes: *mut GBytes,
                                             io_priority: c_int,
                                             cancellable: *mut GCancellable,
                                             callback: GAsyncReadyCallback,
                                             user_data: gpointer);
    pub fn g_output_stream_write_bytes_finish(stream: *mut GOutputStream,
                                              result: *mut GAsyncResult,
                                              error: *mut *mut GError) ->
     gssize;
    pub fn g_output_stream_splice_async(stream: *mut GOutputStream,
                                        source: *mut GInputStream,
                                        flags: GOutputStreamSpliceFlags,
                                        io_priority: c_int,
                                        cancellable: *mut GCancellable,
                                        callback: GAsyncReadyCallback,
                                        user_data: gpointer);
    pub fn g_output_stream_splice_finish(stream: *mut GOutputStream,
                                         result: *mut GAsyncResult,
                                         error: *mut *mut GError) -> gssize;
    pub fn g_output_stream_flush_async(stream: *mut GOutputStream,
                                       io_priority: c_int,
                                       cancellable: *mut GCancellable,
                                       callback: GAsyncReadyCallback,
                                       user_data: gpointer);
    pub fn g_output_stream_flush_finish(stream: *mut GOutputStream,
                                        result: *mut GAsyncResult,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_output_stream_close_async(stream: *mut GOutputStream,
                                       io_priority: c_int,
                                       cancellable: *mut GCancellable,
                                       callback: GAsyncReadyCallback,
                                       user_data: gpointer);
    pub fn g_output_stream_close_finish(stream: *mut GOutputStream,
                                        result: *mut GAsyncResult,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_output_stream_is_closed(stream: *mut GOutputStream) -> gboolean;
    pub fn g_output_stream_is_closing(stream: *mut GOutputStream) -> gboolean;
    pub fn g_output_stream_has_pending(stream: *mut GOutputStream) ->
     gboolean;
    pub fn g_output_stream_set_pending(stream: *mut GOutputStream,
                                       error: *mut *mut GError) -> gboolean;
    pub fn g_output_stream_clear_pending(stream: *mut GOutputStream);
    pub fn g_filter_output_stream_get_type() -> GType;
    pub fn g_filter_output_stream_get_base_stream(stream:
                                                      *mut GFilterOutputStream)
     -> *mut GOutputStream;
    pub fn g_filter_output_stream_get_close_base_stream(stream:
                                                            *mut GFilterOutputStream)
     -> gboolean;
    pub fn g_filter_output_stream_set_close_base_stream(stream:
                                                            *mut GFilterOutputStream,
                                                        close_base: gboolean);
    pub fn g_buffered_output_stream_get_type() -> GType;
    pub fn g_buffered_output_stream_new(base_stream: *mut GOutputStream) ->
     *mut GOutputStream;
    pub fn g_buffered_output_stream_new_sized(base_stream: *mut GOutputStream,
                                              size: gsize) ->
     *mut GOutputStream;
    pub fn g_buffered_output_stream_get_buffer_size(stream:
                                                        *mut GBufferedOutputStream)
     -> gsize;
    pub fn g_buffered_output_stream_set_buffer_size(stream:
                                                        *mut GBufferedOutputStream,
                                                    size: gsize);
    pub fn g_buffered_output_stream_get_auto_grow(stream:
                                                      *mut GBufferedOutputStream)
     -> gboolean;
    pub fn g_buffered_output_stream_set_auto_grow(stream:
                                                      *mut GBufferedOutputStream,
                                                  auto_grow: gboolean);
    pub fn g_bytes_icon_get_type() -> GType;
    pub fn g_bytes_icon_new(bytes: *mut GBytes) -> *mut GIcon;
    pub fn g_bytes_icon_get_bytes(icon: *mut GBytesIcon) -> *mut GBytes;
    pub fn g_cancellable_get_type() -> GType;
    pub fn g_cancellable_new() -> *mut GCancellable;
    pub fn g_cancellable_is_cancelled(cancellable: *mut GCancellable) ->
     gboolean;
    pub fn g_cancellable_set_error_if_cancelled(cancellable:
                                                    *mut GCancellable,
                                                error: *mut *mut GError) ->
     gboolean;
    pub fn g_cancellable_get_fd(cancellable: *mut GCancellable) -> c_int;
    pub fn g_cancellable_make_pollfd(cancellable: *mut GCancellable,
                                     pollfd: *mut GPollFD) -> gboolean;
    pub fn g_cancellable_release_fd(cancellable: *mut GCancellable);
    pub fn g_cancellable_source_new(cancellable: *mut GCancellable) ->
     *mut GSource;
    pub fn g_cancellable_get_current() -> *mut GCancellable;
    pub fn g_cancellable_push_current(cancellable: *mut GCancellable);
    pub fn g_cancellable_pop_current(cancellable: *mut GCancellable);
    pub fn g_cancellable_reset(cancellable: *mut GCancellable);
    pub fn g_cancellable_connect(cancellable: *mut GCancellable,
                                 callback: GCallback, data: gpointer,
                                 data_destroy_func: GDestroyNotify) -> gulong;
    pub fn g_cancellable_disconnect(cancellable: *mut GCancellable,
                                    handler_id: gulong);
    pub fn g_cancellable_cancel(cancellable: *mut GCancellable);
    pub fn g_converter_get_type() -> GType;
    pub fn g_converter_convert(converter: *mut GConverter, inbuf: *c_void,
                               inbuf_size: gsize, outbuf: *mut c_void,
                               outbuf_size: gsize, flags: GConverterFlags,
                               bytes_read: *mut gsize,
                               bytes_written: *mut gsize,
                               error: *mut *mut GError) -> GConverterResult;
    pub fn g_converter_reset(converter: *mut GConverter);
    pub fn g_charset_converter_get_type() -> GType;
    pub fn g_charset_converter_new(to_charset: *gchar, from_charset: *gchar,
                                   error: *mut *mut GError) ->
     *mut GCharsetConverter;
    pub fn g_charset_converter_set_use_fallback(converter:
                                                    *mut GCharsetConverter,
                                                use_fallback: gboolean);
    pub fn g_charset_converter_get_use_fallback(converter:
                                                    *mut GCharsetConverter) ->
     gboolean;
    pub fn g_charset_converter_get_num_fallbacks(converter:
                                                     *mut GCharsetConverter)
     -> guint;
    pub fn g_content_type_equals(type1: *gchar, type2: *gchar) -> gboolean;
    pub fn g_content_type_is_a(_type: *gchar, supertype: *gchar) -> gboolean;
    pub fn g_content_type_is_unknown(_type: *gchar) -> gboolean;
    pub fn g_content_type_get_description(_type: *gchar) -> *mut gchar;
    pub fn g_content_type_get_mime_type(_type: *gchar) -> *mut gchar;
    pub fn g_content_type_get_icon(_type: *gchar) -> *mut GIcon;
    pub fn g_content_type_get_symbolic_icon(_type: *gchar) -> *mut GIcon;
    pub fn g_content_type_get_generic_icon_name(_type: *gchar) -> *mut gchar;
    pub fn g_content_type_can_be_executable(_type: *gchar) -> gboolean;
    pub fn g_content_type_from_mime_type(mime_type: *gchar) -> *mut gchar;
    pub fn g_content_type_guess(filename: *gchar, data: *guchar,
                                data_size: gsize,
                                result_uncertain: *mut gboolean) ->
     *mut gchar;
    pub fn g_content_type_guess_for_tree(root: *mut GFile) -> *mut *mut gchar;
    pub fn g_content_types_get_registered() -> *mut GList;
    pub fn g_converter_input_stream_get_type() -> GType;
    pub fn g_converter_input_stream_new(base_stream: *mut GInputStream,
                                        converter: *mut GConverter) ->
     *mut GInputStream;
    pub fn g_converter_input_stream_get_converter(converter_stream:
                                                      *mut GConverterInputStream)
     -> *mut GConverter;
    pub fn g_converter_output_stream_get_type() -> GType;
    pub fn g_converter_output_stream_new(base_stream: *mut GOutputStream,
                                         converter: *mut GConverter) ->
     *mut GOutputStream;
    pub fn g_converter_output_stream_get_converter(converter_stream:
                                                       *mut GConverterOutputStream)
     -> *mut GConverter;
    pub fn access(__name: *c_schar, __type: c_int) -> c_int;
    pub fn faccessat(__fd: c_int, __file: *c_schar, __type: c_int,
                     __flag: c_int) -> c_int;
    pub fn lseek(__fd: c_int, __offset: __off_t, __whence: c_int) -> __off_t;
    pub fn close(__fd: c_int) -> c_int;
    pub fn read(__fd: c_int, __buf: *mut c_void, __nbytes: size_t) -> ssize_t;
    pub fn write(__fd: c_int, __buf: *c_void, __n: size_t) -> ssize_t;
    pub fn pread(__fd: c_int, __buf: *mut c_void, __nbytes: size_t,
                 __offset: __off_t) -> ssize_t;
    pub fn pwrite(__fd: c_int, __buf: *c_void, __n: size_t, __offset: __off_t)
     -> ssize_t;
    pub fn pipe(__pipedes: [c_int, ..2u]) -> c_int;
    pub fn alarm(__seconds: c_uint) -> c_uint;
    pub fn sleep(__seconds: c_uint) -> c_uint;
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) ->
     __useconds_t;
    pub fn usleep(__useconds: __useconds_t) -> c_int;
    pub fn pause() -> c_int;
    pub fn chown(__file: *c_schar, __owner: __uid_t, __group: __gid_t) ->
     c_int;
    pub fn fchown(__fd: c_int, __owner: __uid_t, __group: __gid_t) -> c_int;
    pub fn lchown(__file: *c_schar, __owner: __uid_t, __group: __gid_t) ->
     c_int;
    pub fn fchownat(__fd: c_int, __file: *c_schar, __owner: __uid_t,
                    __group: __gid_t, __flag: c_int) -> c_int;
    pub fn chdir(__path: *c_schar) -> c_int;
    pub fn fchdir(__fd: c_int) -> c_int;
    pub fn getcwd(__buf: *mut c_schar, __size: size_t) -> *mut c_schar;
    pub fn getwd(__buf: *mut c_schar) -> *mut c_schar;
    pub fn dup(__fd: c_int) -> c_int;
    pub fn dup2(__fd: c_int, __fd2: c_int) -> c_int;
    pub fn execve(__path: *c_schar, __argv: c_void, __envp: c_void) -> c_int;
    pub fn fexecve(__fd: c_int, __argv: c_void, __envp: c_void) -> c_int;
    pub fn execv(__path: *c_schar, __argv: c_void) -> c_int;
    pub fn execle(__path: *c_schar, __arg: *c_schar, ...) -> c_int;
    pub fn execl(__path: *c_schar, __arg: *c_schar, ...) -> c_int;
    pub fn execvp(__file: *c_schar, __argv: c_void) -> c_int;
    pub fn execlp(__file: *c_schar, __arg: *c_schar, ...) -> c_int;
    pub fn nice(__inc: c_int) -> c_int;
    pub fn _exit(__status: c_int);
    pub fn pathconf(__path: *c_schar, __name: c_int) -> c_long;
    pub fn fpathconf(__fd: c_int, __name: c_int) -> c_long;
    pub fn sysconf(__name: c_int) -> c_long;
    pub fn confstr(__name: c_int, __buf: *mut c_schar, __len: size_t) ->
     size_t;
    pub fn getpid() -> __pid_t;
    pub fn getppid() -> __pid_t;
    pub fn getpgrp() -> __pid_t;
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> c_int;
    pub fn setpgrp() -> c_int;
    pub fn setsid() -> __pid_t;
    pub fn getsid(__pid: __pid_t) -> __pid_t;
    pub fn getuid() -> __uid_t;
    pub fn geteuid() -> __uid_t;
    pub fn getgid() -> __gid_t;
    pub fn getegid() -> __gid_t;
    pub fn getgroups(__size: c_int, __list: c_void) -> c_int;
    pub fn setuid(__uid: __uid_t) -> c_int;
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> c_int;
    pub fn seteuid(__uid: __uid_t) -> c_int;
    pub fn setgid(__gid: __gid_t) -> c_int;
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> c_int;
    pub fn setegid(__gid: __gid_t) -> c_int;
    pub fn fork() -> __pid_t;
    pub fn vfork() -> __pid_t;
    pub fn ttyname(__fd: c_int) -> *mut c_schar;
    pub fn ttyname_r(__fd: c_int, __buf: *mut c_schar, __buflen: size_t) ->
     c_int;
    pub fn isatty(__fd: c_int) -> c_int;
    pub fn ttyslot() -> c_int;
    pub fn link(__from: *c_schar, __to: *c_schar) -> c_int;
    pub fn linkat(__fromfd: c_int, __from: *c_schar, __tofd: c_int,
                  __to: *c_schar, __flags: c_int) -> c_int;
    pub fn symlink(__from: *c_schar, __to: *c_schar) -> c_int;
    pub fn readlink(__path: *c_schar, __buf: *mut c_schar, __len: size_t) ->
     ssize_t;
    pub fn symlinkat(__from: *c_schar, __tofd: c_int, __to: *c_schar) ->
     c_int;
    pub fn readlinkat(__fd: c_int, __path: *c_schar, __buf: *mut c_schar,
                      __len: size_t) -> ssize_t;
    pub fn unlink(__name: *c_schar) -> c_int;
    pub fn unlinkat(__fd: c_int, __name: *c_schar, __flag: c_int) -> c_int;
    pub fn rmdir(__path: *c_schar) -> c_int;
    pub fn tcgetpgrp(__fd: c_int) -> __pid_t;
    pub fn tcsetpgrp(__fd: c_int, __pgrp_id: __pid_t) -> c_int;
    pub fn getlogin() -> *mut c_schar;
    pub fn getlogin_r(__name: *mut c_schar, __name_len: size_t) -> c_int;
    pub fn setlogin(__name: *c_schar) -> c_int;
    pub fn getopt(___argc: c_int, ___argv: **mut c_schar,
                  __shortopts: *c_schar) -> c_int;
    pub fn gethostname(__name: *mut c_schar, __len: size_t) -> c_int;
    pub fn sethostname(__name: *c_schar, __len: size_t) -> c_int;
    pub fn sethostid(__id: c_long) -> c_int;
    pub fn getdomainname(__name: *mut c_schar, __len: size_t) -> c_int;
    pub fn setdomainname(__name: *c_schar, __len: size_t) -> c_int;
    pub fn vhangup() -> c_int;
    pub fn revoke(__file: *c_schar) -> c_int;
    pub fn profil(__sample_buffer: *mut c_ushort, __size: size_t,
                  __offset: size_t, __scale: c_uint) -> c_int;
    pub fn acct(__name: *c_schar) -> c_int;
    pub fn getusershell() -> *mut c_schar;
    pub fn endusershell();
    pub fn setusershell();
    pub fn daemon(__nochdir: c_int, __noclose: c_int) -> c_int;
    pub fn chroot(__path: *c_schar) -> c_int;
    pub fn getpass(__prompt: *c_schar) -> *mut c_schar;
    pub fn fsync(__fd: c_int) -> c_int;
    pub fn gethostid() -> c_long;
    pub fn sync();
    pub fn getpagesize() -> c_int;
    pub fn getdtablesize() -> c_int;
    pub fn truncate(__file: *c_schar, __length: __off_t) -> c_int;
    pub fn ftruncate(__fd: c_int, __length: __off_t) -> c_int;
    pub fn brk(__addr: *mut c_void) -> c_int;
    pub fn sbrk(__delta: intptr_t) -> *mut c_void;
    pub fn syscall(__sysno: c_long, ...) -> c_long;
    pub fn lockf(__fd: c_int, __cmd: c_int, __len: __off_t) -> c_int;
    pub fn fdatasync(__fildes: c_int) -> c_int;
    pub fn select(__nfds: c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> c_int;
    pub fn pselect(__nfds: c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *Struct_timespec, __sigmask: *__sigset_t) ->
     c_int;
    pub fn gnu_dev_major(__dev: c_ulonglong) -> c_uint;
    pub fn gnu_dev_minor(__dev: c_ulonglong) -> c_uint;
    pub fn gnu_dev_makedev(__major: c_uint, __minor: c_uint) -> c_ulonglong;
    pub fn g_credentials_get_type() -> GType;
    pub fn g_credentials_new() -> *mut GCredentials;
    pub fn g_credentials_to_string(credentials: *mut GCredentials) ->
     *mut gchar;
    pub fn g_credentials_get_native(credentials: *mut GCredentials,
                                    native_type: GCredentialsType) ->
     gpointer;
    pub fn g_credentials_set_native(credentials: *mut GCredentials,
                                    native_type: GCredentialsType,
                                    native: gpointer);
    pub fn g_credentials_is_same_user(credentials: *mut GCredentials,
                                      other_credentials: *mut GCredentials,
                                      error: *mut *mut GError) -> gboolean;
    pub fn g_credentials_get_unix_pid(credentials: *mut GCredentials,
                                      error: *mut *mut GError) -> pid_t;
    pub fn g_credentials_get_unix_user(credentials: *mut GCredentials,
                                       error: *mut *mut GError) -> uid_t;
    pub fn g_credentials_set_unix_user(credentials: *mut GCredentials,
                                       uid: uid_t, error: *mut *mut GError) ->
     gboolean;
    pub fn g_data_input_stream_get_type() -> GType;
    pub fn g_data_input_stream_new(base_stream: *mut GInputStream) ->
     *mut GDataInputStream;
    pub fn g_data_input_stream_set_byte_order(stream: *mut GDataInputStream,
                                              order: GDataStreamByteOrder);
    pub fn g_data_input_stream_get_byte_order(stream: *mut GDataInputStream)
     -> GDataStreamByteOrder;
    pub fn g_data_input_stream_set_newline_type(stream: *mut GDataInputStream,
                                                _type:
                                                    GDataStreamNewlineType);
    pub fn g_data_input_stream_get_newline_type(stream: *mut GDataInputStream)
     -> GDataStreamNewlineType;
    pub fn g_data_input_stream_read_byte(stream: *mut GDataInputStream,
                                         cancellable: *mut GCancellable,
                                         error: *mut *mut GError) -> guchar;
    pub fn g_data_input_stream_read_int16(stream: *mut GDataInputStream,
                                          cancellable: *mut GCancellable,
                                          error: *mut *mut GError) -> gint16;
    pub fn g_data_input_stream_read_uint16(stream: *mut GDataInputStream,
                                           cancellable: *mut GCancellable,
                                           error: *mut *mut GError) ->
     guint16;
    pub fn g_data_input_stream_read_int32(stream: *mut GDataInputStream,
                                          cancellable: *mut GCancellable,
                                          error: *mut *mut GError) -> gint32;
    pub fn g_data_input_stream_read_uint32(stream: *mut GDataInputStream,
                                           cancellable: *mut GCancellable,
                                           error: *mut *mut GError) ->
     guint32;
    pub fn g_data_input_stream_read_int64(stream: *mut GDataInputStream,
                                          cancellable: *mut GCancellable,
                                          error: *mut *mut GError) -> gint64;
    pub fn g_data_input_stream_read_uint64(stream: *mut GDataInputStream,
                                           cancellable: *mut GCancellable,
                                           error: *mut *mut GError) ->
     guint64;
    pub fn g_data_input_stream_read_line(stream: *mut GDataInputStream,
                                         length: *mut gsize,
                                         cancellable: *mut GCancellable,
                                         error: *mut *mut GError) ->
     *mut c_schar;
    pub fn g_data_input_stream_read_line_utf8(stream: *mut GDataInputStream,
                                              length: *mut gsize,
                                              cancellable: *mut GCancellable,
                                              error: *mut *mut GError) ->
     *mut c_schar;
    pub fn g_data_input_stream_read_line_async(stream: *mut GDataInputStream,
                                               io_priority: gint,
                                               cancellable: *mut GCancellable,
                                               callback: GAsyncReadyCallback,
                                               user_data: gpointer);
    pub fn g_data_input_stream_read_line_finish(stream: *mut GDataInputStream,
                                                result: *mut GAsyncResult,
                                                length: *mut gsize,
                                                error: *mut *mut GError) ->
     *mut c_schar;
    pub fn g_data_input_stream_read_line_finish_utf8(stream:
                                                         *mut GDataInputStream,
                                                     result:
                                                         *mut GAsyncResult,
                                                     length: *mut gsize,
                                                     error: *mut *mut GError)
     -> *mut c_schar;
    pub fn g_data_input_stream_read_until(stream: *mut GDataInputStream,
                                          stop_chars: *gchar,
                                          length: *mut gsize,
                                          cancellable: *mut GCancellable,
                                          error: *mut *mut GError) ->
     *mut c_schar;
    pub fn g_data_input_stream_read_until_async(stream: *mut GDataInputStream,
                                                stop_chars: *gchar,
                                                io_priority: gint,
                                                cancellable:
                                                    *mut GCancellable,
                                                callback: GAsyncReadyCallback,
                                                user_data: gpointer);
    pub fn g_data_input_stream_read_until_finish(stream:
                                                     *mut GDataInputStream,
                                                 result: *mut GAsyncResult,
                                                 length: *mut gsize,
                                                 error: *mut *mut GError) ->
     *mut c_schar;
    pub fn g_data_input_stream_read_upto(stream: *mut GDataInputStream,
                                         stop_chars: *gchar,
                                         stop_chars_len: gssize,
                                         length: *mut gsize,
                                         cancellable: *mut GCancellable,
                                         error: *mut *mut GError) ->
     *mut c_schar;
    pub fn g_data_input_stream_read_upto_async(stream: *mut GDataInputStream,
                                               stop_chars: *gchar,
                                               stop_chars_len: gssize,
                                               io_priority: gint,
                                               cancellable: *mut GCancellable,
                                               callback: GAsyncReadyCallback,
                                               user_data: gpointer);
    pub fn g_data_input_stream_read_upto_finish(stream: *mut GDataInputStream,
                                                result: *mut GAsyncResult,
                                                length: *mut gsize,
                                                error: *mut *mut GError) ->
     *mut c_schar;
    pub fn g_data_output_stream_get_type() -> GType;
    pub fn g_data_output_stream_new(base_stream: *mut GOutputStream) ->
     *mut GDataOutputStream;
    pub fn g_data_output_stream_set_byte_order(stream: *mut GDataOutputStream,
                                               order: GDataStreamByteOrder);
    pub fn g_data_output_stream_get_byte_order(stream: *mut GDataOutputStream)
     -> GDataStreamByteOrder;
    pub fn g_data_output_stream_put_byte(stream: *mut GDataOutputStream,
                                         data: guchar,
                                         cancellable: *mut GCancellable,
                                         error: *mut *mut GError) -> gboolean;
    pub fn g_data_output_stream_put_int16(stream: *mut GDataOutputStream,
                                          data: gint16,
                                          cancellable: *mut GCancellable,
                                          error: *mut *mut GError) ->
     gboolean;
    pub fn g_data_output_stream_put_uint16(stream: *mut GDataOutputStream,
                                           data: guint16,
                                           cancellable: *mut GCancellable,
                                           error: *mut *mut GError) ->
     gboolean;
    pub fn g_data_output_stream_put_int32(stream: *mut GDataOutputStream,
                                          data: gint32,
                                          cancellable: *mut GCancellable,
                                          error: *mut *mut GError) ->
     gboolean;
    pub fn g_data_output_stream_put_uint32(stream: *mut GDataOutputStream,
                                           data: guint32,
                                           cancellable: *mut GCancellable,
                                           error: *mut *mut GError) ->
     gboolean;
    pub fn g_data_output_stream_put_int64(stream: *mut GDataOutputStream,
                                          data: gint64,
                                          cancellable: *mut GCancellable,
                                          error: *mut *mut GError) ->
     gboolean;
    pub fn g_data_output_stream_put_uint64(stream: *mut GDataOutputStream,
                                           data: guint64,
                                           cancellable: *mut GCancellable,
                                           error: *mut *mut GError) ->
     gboolean;
    pub fn g_data_output_stream_put_string(stream: *mut GDataOutputStream,
                                           str: *c_schar,
                                           cancellable: *mut GCancellable,
                                           error: *mut *mut GError) ->
     gboolean;
    pub fn g_dbus_address_escape_value(string: *gchar) -> *mut gchar;
    pub fn g_dbus_is_address(string: *gchar) -> gboolean;
    pub fn g_dbus_is_supported_address(string: *gchar,
                                       error: *mut *mut GError) -> gboolean;
    pub fn g_dbus_address_get_stream(address: *gchar,
                                     cancellable: *mut GCancellable,
                                     callback: GAsyncReadyCallback,
                                     user_data: gpointer);
    pub fn g_dbus_address_get_stream_finish(res: *mut GAsyncResult,
                                            out_guid: *mut *mut gchar,
                                            error: *mut *mut GError) ->
     *mut GIOStream;
    pub fn g_dbus_address_get_stream_sync(address: *gchar,
                                          out_guid: *mut *mut gchar,
                                          cancellable: *mut GCancellable,
                                          error: *mut *mut GError) ->
     *mut GIOStream;
    pub fn g_dbus_address_get_for_bus_sync(bus_type: GBusType,
                                           cancellable: *mut GCancellable,
                                           error: *mut *mut GError) ->
     *mut gchar;
    pub fn g_dbus_auth_observer_get_type() -> GType;
    pub fn g_dbus_auth_observer_new() -> *mut GDBusAuthObserver;
    pub fn g_dbus_auth_observer_authorize_authenticated_peer(observer:
                                                                 *mut GDBusAuthObserver,
                                                             stream:
                                                                 *mut GIOStream,
                                                             credentials:
                                                                 *mut GCredentials)
     -> gboolean;
    pub fn g_dbus_auth_observer_allow_mechanism(observer:
                                                    *mut GDBusAuthObserver,
                                                mechanism: *gchar) ->
     gboolean;
    pub fn g_dbus_connection_get_type() -> GType;
    pub fn g_bus_get(bus_type: GBusType, cancellable: *mut GCancellable,
                     callback: GAsyncReadyCallback, user_data: gpointer);
    pub fn g_bus_get_finish(res: *mut GAsyncResult, error: *mut *mut GError)
     -> *mut GDBusConnection;
    pub fn g_bus_get_sync(bus_type: GBusType, cancellable: *mut GCancellable,
                          error: *mut *mut GError) -> *mut GDBusConnection;
    pub fn g_dbus_connection_new(stream: *mut GIOStream, guid: *gchar,
                                 flags: GDBusConnectionFlags,
                                 observer: *mut GDBusAuthObserver,
                                 cancellable: *mut GCancellable,
                                 callback: GAsyncReadyCallback,
                                 user_data: gpointer);
    pub fn g_dbus_connection_new_finish(res: *mut GAsyncResult,
                                        error: *mut *mut GError) ->
     *mut GDBusConnection;
    pub fn g_dbus_connection_new_sync(stream: *mut GIOStream, guid: *gchar,
                                      flags: GDBusConnectionFlags,
                                      observer: *mut GDBusAuthObserver,
                                      cancellable: *mut GCancellable,
                                      error: *mut *mut GError) ->
     *mut GDBusConnection;
    pub fn g_dbus_connection_new_for_address(address: *gchar,
                                             flags: GDBusConnectionFlags,
                                             observer: *mut GDBusAuthObserver,
                                             cancellable: *mut GCancellable,
                                             callback: GAsyncReadyCallback,
                                             user_data: gpointer);
    pub fn g_dbus_connection_new_for_address_finish(res: *mut GAsyncResult,
                                                    error: *mut *mut GError)
     -> *mut GDBusConnection;
    pub fn g_dbus_connection_new_for_address_sync(address: *gchar,
                                                  flags: GDBusConnectionFlags,
                                                  observer:
                                                      *mut GDBusAuthObserver,
                                                  cancellable:
                                                      *mut GCancellable,
                                                  error: *mut *mut GError) ->
     *mut GDBusConnection;
    pub fn g_dbus_connection_start_message_processing(connection:
                                                          *mut GDBusConnection);
    pub fn g_dbus_connection_is_closed(connection: *mut GDBusConnection) ->
     gboolean;
    pub fn g_dbus_connection_get_stream(connection: *mut GDBusConnection) ->
     *mut GIOStream;
    pub fn g_dbus_connection_get_guid(connection: *mut GDBusConnection) ->
     *gchar;
    pub fn g_dbus_connection_get_unique_name(connection: *mut GDBusConnection)
     -> *gchar;
    pub fn g_dbus_connection_get_peer_credentials(connection:
                                                      *mut GDBusConnection) ->
     *mut GCredentials;
    pub fn g_dbus_connection_get_last_serial(connection: *mut GDBusConnection)
     -> guint32;
    pub fn g_dbus_connection_get_exit_on_close(connection:
                                                   *mut GDBusConnection) ->
     gboolean;
    pub fn g_dbus_connection_set_exit_on_close(connection:
                                                   *mut GDBusConnection,
                                               exit_on_close: gboolean);
    pub fn g_dbus_connection_get_capabilities(connection:
                                                  *mut GDBusConnection) ->
     GDBusCapabilityFlags;
    pub fn g_dbus_connection_close(connection: *mut GDBusConnection,
                                   cancellable: *mut GCancellable,
                                   callback: GAsyncReadyCallback,
                                   user_data: gpointer);
    pub fn g_dbus_connection_close_finish(connection: *mut GDBusConnection,
                                          res: *mut GAsyncResult,
                                          error: *mut *mut GError) ->
     gboolean;
    pub fn g_dbus_connection_close_sync(connection: *mut GDBusConnection,
                                        cancellable: *mut GCancellable,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_dbus_connection_flush(connection: *mut GDBusConnection,
                                   cancellable: *mut GCancellable,
                                   callback: GAsyncReadyCallback,
                                   user_data: gpointer);
    pub fn g_dbus_connection_flush_finish(connection: *mut GDBusConnection,
                                          res: *mut GAsyncResult,
                                          error: *mut *mut GError) ->
     gboolean;
    pub fn g_dbus_connection_flush_sync(connection: *mut GDBusConnection,
                                        cancellable: *mut GCancellable,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_dbus_connection_send_message(connection: *mut GDBusConnection,
                                          message: *mut GDBusMessage,
                                          flags: GDBusSendMessageFlags,
                                          out_serial: *mut guint32,
                                          error: *mut *mut GError) ->
     gboolean;
    pub fn g_dbus_connection_send_message_with_reply(connection:
                                                         *mut GDBusConnection,
                                                     message:
                                                         *mut GDBusMessage,
                                                     flags:
                                                         GDBusSendMessageFlags,
                                                     timeout_msec: gint,
                                                     out_serial: *mut guint32,
                                                     cancellable:
                                                         *mut GCancellable,
                                                     callback:
                                                         GAsyncReadyCallback,
                                                     user_data: gpointer);
    pub fn g_dbus_connection_send_message_with_reply_finish(connection:
                                                                *mut GDBusConnection,
                                                            res:
                                                                *mut GAsyncResult,
                                                            error:
                                                                *mut *mut GError)
     -> *mut GDBusMessage;
    pub fn g_dbus_connection_send_message_with_reply_sync(connection:
                                                              *mut GDBusConnection,
                                                          message:
                                                              *mut GDBusMessage,
                                                          flags:
                                                              GDBusSendMessageFlags,
                                                          timeout_msec: gint,
                                                          out_serial:
                                                              *mut guint32,
                                                          cancellable:
                                                              *mut GCancellable,
                                                          error:
                                                              *mut *mut GError)
     -> *mut GDBusMessage;
    pub fn g_dbus_connection_emit_signal(connection: *mut GDBusConnection,
                                         destination_bus_name: *gchar,
                                         object_path: *gchar,
                                         interface_name: *gchar,
                                         signal_name: *gchar,
                                         parameters: *mut GVariant,
                                         error: *mut *mut GError) -> gboolean;
    pub fn g_dbus_connection_call(connection: *mut GDBusConnection,
                                  bus_name: *gchar, object_path: *gchar,
                                  interface_name: *gchar, method_name: *gchar,
                                  parameters: *mut GVariant,
                                  reply_type: *GVariantType,
                                  flags: GDBusCallFlags, timeout_msec: gint,
                                  cancellable: *mut GCancellable,
                                  callback: GAsyncReadyCallback,
                                  user_data: gpointer);
    pub fn g_dbus_connection_call_finish(connection: *mut GDBusConnection,
                                         res: *mut GAsyncResult,
                                         error: *mut *mut GError) ->
     *mut GVariant;
    pub fn g_dbus_connection_call_sync(connection: *mut GDBusConnection,
                                       bus_name: *gchar, object_path: *gchar,
                                       interface_name: *gchar,
                                       method_name: *gchar,
                                       parameters: *mut GVariant,
                                       reply_type: *GVariantType,
                                       flags: GDBusCallFlags,
                                       timeout_msec: gint,
                                       cancellable: *mut GCancellable,
                                       error: *mut *mut GError) ->
     *mut GVariant;
    pub fn g_dbus_connection_call_with_unix_fd_list(connection:
                                                        *mut GDBusConnection,
                                                    bus_name: *gchar,
                                                    object_path: *gchar,
                                                    interface_name: *gchar,
                                                    method_name: *gchar,
                                                    parameters: *mut GVariant,
                                                    reply_type: *GVariantType,
                                                    flags: GDBusCallFlags,
                                                    timeout_msec: gint,
                                                    fd_list: *mut GUnixFDList,
                                                    cancellable:
                                                        *mut GCancellable,
                                                    callback:
                                                        GAsyncReadyCallback,
                                                    user_data: gpointer);
    pub fn g_dbus_connection_call_with_unix_fd_list_finish(connection:
                                                               *mut GDBusConnection,
                                                           out_fd_list:
                                                               *mut *mut GUnixFDList,
                                                           res:
                                                               *mut GAsyncResult,
                                                           error:
                                                               *mut *mut GError)
     -> *mut GVariant;
    pub fn g_dbus_connection_call_with_unix_fd_list_sync(connection:
                                                             *mut GDBusConnection,
                                                         bus_name: *gchar,
                                                         object_path: *gchar,
                                                         interface_name:
                                                             *gchar,
                                                         method_name: *gchar,
                                                         parameters:
                                                             *mut GVariant,
                                                         reply_type:
                                                             *GVariantType,
                                                         flags:
                                                             GDBusCallFlags,
                                                         timeout_msec: gint,
                                                         fd_list:
                                                             *mut GUnixFDList,
                                                         out_fd_list:
                                                             *mut *mut GUnixFDList,
                                                         cancellable:
                                                             *mut GCancellable,
                                                         error:
                                                             *mut *mut GError)
     -> *mut GVariant;
    pub fn g_dbus_connection_register_object(connection: *mut GDBusConnection,
                                             object_path: *gchar,
                                             interface_info:
                                                 *mut GDBusInterfaceInfo,
                                             vtable: *GDBusInterfaceVTable,
                                             user_data: gpointer,
                                             user_data_free_func:
                                                 GDestroyNotify,
                                             error: *mut *mut GError) ->
     guint;
    pub fn g_dbus_connection_unregister_object(connection:
                                                   *mut GDBusConnection,
                                               registration_id: guint) ->
     gboolean;
    pub fn g_dbus_connection_register_subtree(connection:
                                                  *mut GDBusConnection,
                                              object_path: *gchar,
                                              vtable: *GDBusSubtreeVTable,
                                              flags: GDBusSubtreeFlags,
                                              user_data: gpointer,
                                              user_data_free_func:
                                                  GDestroyNotify,
                                              error: *mut *mut GError) ->
     guint;
    pub fn g_dbus_connection_unregister_subtree(connection:
                                                    *mut GDBusConnection,
                                                registration_id: guint) ->
     gboolean;
    pub fn g_dbus_connection_signal_subscribe(connection:
                                                  *mut GDBusConnection,
                                              sender: *gchar,
                                              interface_name: *gchar,
                                              member: *gchar,
                                              object_path: *gchar,
                                              arg0: *gchar,
                                              flags: GDBusSignalFlags,
                                              callback: GDBusSignalCallback,
                                              user_data: gpointer,
                                              user_data_free_func:
                                                  GDestroyNotify) -> guint;
    pub fn g_dbus_connection_signal_unsubscribe(connection:
                                                    *mut GDBusConnection,
                                                subscription_id: guint);
    pub fn g_dbus_connection_add_filter(connection: *mut GDBusConnection,
                                        filter_function:
                                            GDBusMessageFilterFunction,
                                        user_data: gpointer,
                                        user_data_free_func: GDestroyNotify)
     -> guint;
    pub fn g_dbus_connection_remove_filter(connection: *mut GDBusConnection,
                                           filter_id: guint);
    pub fn g_dbus_error_quark() -> GQuark;
    pub fn g_dbus_error_is_remote_error(error: *GError) -> gboolean;
    pub fn g_dbus_error_get_remote_error(error: *GError) -> *mut gchar;
    pub fn g_dbus_error_strip_remote_error(error: *mut GError) -> gboolean;
    pub fn g_dbus_error_register_error(error_domain: GQuark, error_code: gint,
                                       dbus_error_name: *gchar) -> gboolean;
    pub fn g_dbus_error_unregister_error(error_domain: GQuark,
                                         error_code: gint,
                                         dbus_error_name: *gchar) -> gboolean;
    pub fn g_dbus_error_register_error_domain(error_domain_quark_name: *gchar,
                                              quark_volatile: *mut gsize,
                                              entries: *GDBusErrorEntry,
                                              num_entries: guint);
    pub fn g_dbus_error_new_for_dbus_error(dbus_error_name: *gchar,
                                           dbus_error_message: *gchar) ->
     *mut GError;
    pub fn g_dbus_error_set_dbus_error(error: *mut *mut GError,
                                       dbus_error_name: *gchar,
                                       dbus_error_message: *gchar,
                                       format: *gchar, ...);
    pub fn g_dbus_error_set_dbus_error_valist(error: *mut *mut GError,
                                              dbus_error_name: *gchar,
                                              dbus_error_message: *gchar,
                                              format: *gchar,
                                              var_args: va_list);
    pub fn g_dbus_error_encode_gerror(error: *GError) -> *mut gchar;
    pub fn g_dbus_annotation_info_lookup(annotations:
                                             *mut *mut GDBusAnnotationInfo,
                                         name: *gchar) -> *gchar;
    pub fn g_dbus_interface_info_lookup_method(info: *mut GDBusInterfaceInfo,
                                               name: *gchar) ->
     *mut GDBusMethodInfo;
    pub fn g_dbus_interface_info_lookup_signal(info: *mut GDBusInterfaceInfo,
                                               name: *gchar) ->
     *mut GDBusSignalInfo;
    pub fn g_dbus_interface_info_lookup_property(info:
                                                     *mut GDBusInterfaceInfo,
                                                 name: *gchar) ->
     *mut GDBusPropertyInfo;
    pub fn g_dbus_interface_info_cache_build(info: *mut GDBusInterfaceInfo);
    pub fn g_dbus_interface_info_cache_release(info: *mut GDBusInterfaceInfo);
    pub fn g_dbus_interface_info_generate_xml(info: *mut GDBusInterfaceInfo,
                                              indent: guint,
                                              string_builder: *mut GString);
    pub fn g_dbus_node_info_new_for_xml(xml_data: *gchar,
                                        error: *mut *mut GError) ->
     *mut GDBusNodeInfo;
    pub fn g_dbus_node_info_lookup_interface(info: *mut GDBusNodeInfo,
                                             name: *gchar) ->
     *mut GDBusInterfaceInfo;
    pub fn g_dbus_node_info_generate_xml(info: *mut GDBusNodeInfo,
                                         indent: guint,
                                         string_builder: *mut GString);
    pub fn g_dbus_node_info_ref(info: *mut GDBusNodeInfo) ->
     *mut GDBusNodeInfo;
    pub fn g_dbus_interface_info_ref(info: *mut GDBusInterfaceInfo) ->
     *mut GDBusInterfaceInfo;
    pub fn g_dbus_method_info_ref(info: *mut GDBusMethodInfo) ->
     *mut GDBusMethodInfo;
    pub fn g_dbus_signal_info_ref(info: *mut GDBusSignalInfo) ->
     *mut GDBusSignalInfo;
    pub fn g_dbus_property_info_ref(info: *mut GDBusPropertyInfo) ->
     *mut GDBusPropertyInfo;
    pub fn g_dbus_arg_info_ref(info: *mut GDBusArgInfo) -> *mut GDBusArgInfo;
    pub fn g_dbus_annotation_info_ref(info: *mut GDBusAnnotationInfo) ->
     *mut GDBusAnnotationInfo;
    pub fn g_dbus_node_info_unref(info: *mut GDBusNodeInfo);
    pub fn g_dbus_interface_info_unref(info: *mut GDBusInterfaceInfo);
    pub fn g_dbus_method_info_unref(info: *mut GDBusMethodInfo);
    pub fn g_dbus_signal_info_unref(info: *mut GDBusSignalInfo);
    pub fn g_dbus_property_info_unref(info: *mut GDBusPropertyInfo);
    pub fn g_dbus_arg_info_unref(info: *mut GDBusArgInfo);
    pub fn g_dbus_annotation_info_unref(info: *mut GDBusAnnotationInfo);
    pub fn g_dbus_node_info_get_type() -> GType;
    pub fn g_dbus_interface_info_get_type() -> GType;
    pub fn g_dbus_method_info_get_type() -> GType;
    pub fn g_dbus_signal_info_get_type() -> GType;
    pub fn g_dbus_property_info_get_type() -> GType;
    pub fn g_dbus_arg_info_get_type() -> GType;
    pub fn g_dbus_annotation_info_get_type() -> GType;
    pub fn g_dbus_message_get_type() -> GType;
    pub fn g_dbus_message_new() -> *mut GDBusMessage;
    pub fn g_dbus_message_new_signal(path: *gchar, interface_: *gchar,
                                     signal: *gchar) -> *mut GDBusMessage;
    pub fn g_dbus_message_new_method_call(name: *gchar, path: *gchar,
                                          interface_: *gchar, method: *gchar)
     -> *mut GDBusMessage;
    pub fn g_dbus_message_new_method_reply(method_call_message:
                                               *mut GDBusMessage) ->
     *mut GDBusMessage;
    pub fn g_dbus_message_new_method_error(method_call_message:
                                               *mut GDBusMessage,
                                           error_name: *gchar,
                                           error_message_format: *gchar, ...)
     -> *mut GDBusMessage;
    pub fn g_dbus_message_new_method_error_valist(method_call_message:
                                                      *mut GDBusMessage,
                                                  error_name: *gchar,
                                                  error_message_format:
                                                      *gchar,
                                                  var_args: va_list) ->
     *mut GDBusMessage;
    pub fn g_dbus_message_new_method_error_literal(method_call_message:
                                                       *mut GDBusMessage,
                                                   error_name: *gchar,
                                                   error_message: *gchar) ->
     *mut GDBusMessage;
    pub fn g_dbus_message_print(message: *mut GDBusMessage, indent: guint) ->
     *mut gchar;
    pub fn g_dbus_message_get_locked(message: *mut GDBusMessage) -> gboolean;
    pub fn g_dbus_message_lock(message: *mut GDBusMessage);
    pub fn g_dbus_message_copy(message: *mut GDBusMessage,
                               error: *mut *mut GError) -> *mut GDBusMessage;
    pub fn g_dbus_message_get_byte_order(message: *mut GDBusMessage) ->
     GDBusMessageByteOrder;
    pub fn g_dbus_message_set_byte_order(message: *mut GDBusMessage,
                                         byte_order: GDBusMessageByteOrder);
    pub fn g_dbus_message_get_message_type(message: *mut GDBusMessage) ->
     GDBusMessageType;
    pub fn g_dbus_message_set_message_type(message: *mut GDBusMessage,
                                           _type: GDBusMessageType);
    pub fn g_dbus_message_get_flags(message: *mut GDBusMessage) ->
     GDBusMessageFlags;
    pub fn g_dbus_message_set_flags(message: *mut GDBusMessage,
                                    flags: GDBusMessageFlags);
    pub fn g_dbus_message_get_serial(message: *mut GDBusMessage) -> guint32;
    pub fn g_dbus_message_set_serial(message: *mut GDBusMessage,
                                     serial: guint32);
    pub fn g_dbus_message_get_header(message: *mut GDBusMessage,
                                     header_field: GDBusMessageHeaderField) ->
     *mut GVariant;
    pub fn g_dbus_message_set_header(message: *mut GDBusMessage,
                                     header_field: GDBusMessageHeaderField,
                                     value: *mut GVariant);
    pub fn g_dbus_message_get_header_fields(message: *mut GDBusMessage) ->
     *mut guchar;
    pub fn g_dbus_message_get_body(message: *mut GDBusMessage) ->
     *mut GVariant;
    pub fn g_dbus_message_set_body(message: *mut GDBusMessage,
                                   body: *mut GVariant);
    pub fn g_dbus_message_get_unix_fd_list(message: *mut GDBusMessage) ->
     *mut GUnixFDList;
    pub fn g_dbus_message_set_unix_fd_list(message: *mut GDBusMessage,
                                           fd_list: *mut GUnixFDList);
    pub fn g_dbus_message_get_reply_serial(message: *mut GDBusMessage) ->
     guint32;
    pub fn g_dbus_message_set_reply_serial(message: *mut GDBusMessage,
                                           value: guint32);
    pub fn g_dbus_message_get_interface(message: *mut GDBusMessage) -> *gchar;
    pub fn g_dbus_message_set_interface(message: *mut GDBusMessage,
                                        value: *gchar);
    pub fn g_dbus_message_get_member(message: *mut GDBusMessage) -> *gchar;
    pub fn g_dbus_message_set_member(message: *mut GDBusMessage,
                                     value: *gchar);
    pub fn g_dbus_message_get_path(message: *mut GDBusMessage) -> *gchar;
    pub fn g_dbus_message_set_path(message: *mut GDBusMessage, value: *gchar);
    pub fn g_dbus_message_get_sender(message: *mut GDBusMessage) -> *gchar;
    pub fn g_dbus_message_set_sender(message: *mut GDBusMessage,
                                     value: *gchar);
    pub fn g_dbus_message_get_destination(message: *mut GDBusMessage) ->
     *gchar;
    pub fn g_dbus_message_set_destination(message: *mut GDBusMessage,
                                          value: *gchar);
    pub fn g_dbus_message_get_error_name(message: *mut GDBusMessage) ->
     *gchar;
    pub fn g_dbus_message_set_error_name(message: *mut GDBusMessage,
                                         value: *gchar);
    pub fn g_dbus_message_get_signature(message: *mut GDBusMessage) -> *gchar;
    pub fn g_dbus_message_set_signature(message: *mut GDBusMessage,
                                        value: *gchar);
    pub fn g_dbus_message_get_num_unix_fds(message: *mut GDBusMessage) ->
     guint32;
    pub fn g_dbus_message_set_num_unix_fds(message: *mut GDBusMessage,
                                           value: guint32);
    pub fn g_dbus_message_get_arg0(message: *mut GDBusMessage) -> *gchar;
    pub fn g_dbus_message_new_from_blob(blob: *mut guchar, blob_len: gsize,
                                        capabilities: GDBusCapabilityFlags,
                                        error: *mut *mut GError) ->
     *mut GDBusMessage;
    pub fn g_dbus_message_bytes_needed(blob: *mut guchar, blob_len: gsize,
                                       error: *mut *mut GError) -> gssize;
    pub fn g_dbus_message_to_blob(message: *mut GDBusMessage,
                                  out_size: *mut gsize,
                                  capabilities: GDBusCapabilityFlags,
                                  error: *mut *mut GError) -> *mut guchar;
    pub fn g_dbus_message_to_gerror(message: *mut GDBusMessage,
                                    error: *mut *mut GError) -> gboolean;
    pub fn g_dbus_method_invocation_get_type() -> GType;
    pub fn g_dbus_method_invocation_get_sender(invocation:
                                                   *mut GDBusMethodInvocation)
     -> *gchar;
    pub fn g_dbus_method_invocation_get_object_path(invocation:
                                                        *mut GDBusMethodInvocation)
     -> *gchar;
    pub fn g_dbus_method_invocation_get_interface_name(invocation:
                                                           *mut GDBusMethodInvocation)
     -> *gchar;
    pub fn g_dbus_method_invocation_get_method_name(invocation:
                                                        *mut GDBusMethodInvocation)
     -> *gchar;
    pub fn g_dbus_method_invocation_get_method_info(invocation:
                                                        *mut GDBusMethodInvocation)
     -> *GDBusMethodInfo;
    pub fn g_dbus_method_invocation_get_property_info(invocation:
                                                          *mut GDBusMethodInvocation)
     -> *GDBusPropertyInfo;
    pub fn g_dbus_method_invocation_get_connection(invocation:
                                                       *mut GDBusMethodInvocation)
     -> *mut GDBusConnection;
    pub fn g_dbus_method_invocation_get_message(invocation:
                                                    *mut GDBusMethodInvocation)
     -> *mut GDBusMessage;
    pub fn g_dbus_method_invocation_get_parameters(invocation:
                                                       *mut GDBusMethodInvocation)
     -> *mut GVariant;
    pub fn g_dbus_method_invocation_get_user_data(invocation:
                                                      *mut GDBusMethodInvocation)
     -> gpointer;
    pub fn g_dbus_method_invocation_return_value(invocation:
                                                     *mut GDBusMethodInvocation,
                                                 parameters: *mut GVariant);
    pub fn g_dbus_method_invocation_return_value_with_unix_fd_list(invocation:
                                                                       *mut GDBusMethodInvocation,
                                                                   parameters:
                                                                       *mut GVariant,
                                                                   fd_list:
                                                                       *mut GUnixFDList);
    pub fn g_dbus_method_invocation_return_error(invocation:
                                                     *mut GDBusMethodInvocation,
                                                 domain: GQuark, code: gint,
                                                 format: *gchar, ...);
    pub fn g_dbus_method_invocation_return_error_valist(invocation:
                                                            *mut GDBusMethodInvocation,
                                                        domain: GQuark,
                                                        code: gint,
                                                        format: *gchar,
                                                        var_args: va_list);
    pub fn g_dbus_method_invocation_return_error_literal(invocation:
                                                             *mut GDBusMethodInvocation,
                                                         domain: GQuark,
                                                         code: gint,
                                                         message: *gchar);
    pub fn g_dbus_method_invocation_return_gerror(invocation:
                                                      *mut GDBusMethodInvocation,
                                                  error: *GError);
    pub fn g_dbus_method_invocation_take_error(invocation:
                                                   *mut GDBusMethodInvocation,
                                               error: *mut GError);
    pub fn g_dbus_method_invocation_return_dbus_error(invocation:
                                                          *mut GDBusMethodInvocation,
                                                      error_name: *gchar,
                                                      error_message: *gchar);
    pub fn g_bus_own_name(bus_type: GBusType, name: *gchar,
                          flags: GBusNameOwnerFlags,
                          bus_acquired_handler: GBusAcquiredCallback,
                          name_acquired_handler: GBusNameAcquiredCallback,
                          name_lost_handler: GBusNameLostCallback,
                          user_data: gpointer,
                          user_data_free_func: GDestroyNotify) -> guint;
    pub fn g_bus_own_name_on_connection(connection: *mut GDBusConnection,
                                        name: *gchar,
                                        flags: GBusNameOwnerFlags,
                                        name_acquired_handler:
                                            GBusNameAcquiredCallback,
                                        name_lost_handler:
                                            GBusNameLostCallback,
                                        user_data: gpointer,
                                        user_data_free_func: GDestroyNotify)
     -> guint;
    pub fn g_bus_own_name_with_closures(bus_type: GBusType, name: *gchar,
                                        flags: GBusNameOwnerFlags,
                                        bus_acquired_closure: *mut GClosure,
                                        name_acquired_closure: *mut GClosure,
                                        name_lost_closure: *mut GClosure) ->
     guint;
    pub fn g_bus_own_name_on_connection_with_closures(connection:
                                                          *mut GDBusConnection,
                                                      name: *gchar,
                                                      flags:
                                                          GBusNameOwnerFlags,
                                                      name_acquired_closure:
                                                          *mut GClosure,
                                                      name_lost_closure:
                                                          *mut GClosure) ->
     guint;
    pub fn g_bus_unown_name(owner_id: guint);
    pub fn g_bus_watch_name(bus_type: GBusType, name: *gchar,
                            flags: GBusNameWatcherFlags,
                            name_appeared_handler: GBusNameAppearedCallback,
                            name_vanished_handler: GBusNameVanishedCallback,
                            user_data: gpointer,
                            user_data_free_func: GDestroyNotify) -> guint;
    pub fn g_bus_watch_name_on_connection(connection: *mut GDBusConnection,
                                          name: *gchar,
                                          flags: GBusNameWatcherFlags,
                                          name_appeared_handler:
                                              GBusNameAppearedCallback,
                                          name_vanished_handler:
                                              GBusNameVanishedCallback,
                                          user_data: gpointer,
                                          user_data_free_func: GDestroyNotify)
     -> guint;
    pub fn g_bus_watch_name_with_closures(bus_type: GBusType, name: *gchar,
                                          flags: GBusNameWatcherFlags,
                                          name_appeared_closure:
                                              *mut GClosure,
                                          name_vanished_closure:
                                              *mut GClosure) -> guint;
    pub fn g_bus_watch_name_on_connection_with_closures(connection:
                                                            *mut GDBusConnection,
                                                        name: *gchar,
                                                        flags:
                                                            GBusNameWatcherFlags,
                                                        name_appeared_closure:
                                                            *mut GClosure,
                                                        name_vanished_closure:
                                                            *mut GClosure) ->
     guint;
    pub fn g_bus_unwatch_name(watcher_id: guint);
    pub fn g_dbus_proxy_get_type() -> GType;
    pub fn g_dbus_proxy_new(connection: *mut GDBusConnection,
                            flags: GDBusProxyFlags,
                            info: *mut GDBusInterfaceInfo, name: *gchar,
                            object_path: *gchar, interface_name: *gchar,
                            cancellable: *mut GCancellable,
                            callback: GAsyncReadyCallback,
                            user_data: gpointer);
    pub fn g_dbus_proxy_new_finish(res: *mut GAsyncResult,
                                   error: *mut *mut GError) ->
     *mut GDBusProxy;
    pub fn g_dbus_proxy_new_sync(connection: *mut GDBusConnection,
                                 flags: GDBusProxyFlags,
                                 info: *mut GDBusInterfaceInfo, name: *gchar,
                                 object_path: *gchar, interface_name: *gchar,
                                 cancellable: *mut GCancellable,
                                 error: *mut *mut GError) -> *mut GDBusProxy;
    pub fn g_dbus_proxy_new_for_bus(bus_type: GBusType,
                                    flags: GDBusProxyFlags,
                                    info: *mut GDBusInterfaceInfo,
                                    name: *gchar, object_path: *gchar,
                                    interface_name: *gchar,
                                    cancellable: *mut GCancellable,
                                    callback: GAsyncReadyCallback,
                                    user_data: gpointer);
    pub fn g_dbus_proxy_new_for_bus_finish(res: *mut GAsyncResult,
                                           error: *mut *mut GError) ->
     *mut GDBusProxy;
    pub fn g_dbus_proxy_new_for_bus_sync(bus_type: GBusType,
                                         flags: GDBusProxyFlags,
                                         info: *mut GDBusInterfaceInfo,
                                         name: *gchar, object_path: *gchar,
                                         interface_name: *gchar,
                                         cancellable: *mut GCancellable,
                                         error: *mut *mut GError) ->
     *mut GDBusProxy;
    pub fn g_dbus_proxy_get_connection(proxy: *mut GDBusProxy) ->
     *mut GDBusConnection;
    pub fn g_dbus_proxy_get_flags(proxy: *mut GDBusProxy) -> GDBusProxyFlags;
    pub fn g_dbus_proxy_get_name(proxy: *mut GDBusProxy) -> *gchar;
    pub fn g_dbus_proxy_get_name_owner(proxy: *mut GDBusProxy) -> *mut gchar;
    pub fn g_dbus_proxy_get_object_path(proxy: *mut GDBusProxy) -> *gchar;
    pub fn g_dbus_proxy_get_interface_name(proxy: *mut GDBusProxy) -> *gchar;
    pub fn g_dbus_proxy_get_default_timeout(proxy: *mut GDBusProxy) -> gint;
    pub fn g_dbus_proxy_set_default_timeout(proxy: *mut GDBusProxy,
                                            timeout_msec: gint);
    pub fn g_dbus_proxy_get_interface_info(proxy: *mut GDBusProxy) ->
     *mut GDBusInterfaceInfo;
    pub fn g_dbus_proxy_set_interface_info(proxy: *mut GDBusProxy,
                                           info: *mut GDBusInterfaceInfo);
    pub fn g_dbus_proxy_get_cached_property(proxy: *mut GDBusProxy,
                                            property_name: *gchar) ->
     *mut GVariant;
    pub fn g_dbus_proxy_set_cached_property(proxy: *mut GDBusProxy,
                                            property_name: *gchar,
                                            value: *mut GVariant);
    pub fn g_dbus_proxy_get_cached_property_names(proxy: *mut GDBusProxy) ->
     *mut *mut gchar;
    pub fn g_dbus_proxy_call(proxy: *mut GDBusProxy, method_name: *gchar,
                             parameters: *mut GVariant, flags: GDBusCallFlags,
                             timeout_msec: gint,
                             cancellable: *mut GCancellable,
                             callback: GAsyncReadyCallback,
                             user_data: gpointer);
    pub fn g_dbus_proxy_call_finish(proxy: *mut GDBusProxy,
                                    res: *mut GAsyncResult,
                                    error: *mut *mut GError) -> *mut GVariant;
    pub fn g_dbus_proxy_call_sync(proxy: *mut GDBusProxy, method_name: *gchar,
                                  parameters: *mut GVariant,
                                  flags: GDBusCallFlags, timeout_msec: gint,
                                  cancellable: *mut GCancellable,
                                  error: *mut *mut GError) -> *mut GVariant;
    pub fn g_dbus_proxy_call_with_unix_fd_list(proxy: *mut GDBusProxy,
                                               method_name: *gchar,
                                               parameters: *mut GVariant,
                                               flags: GDBusCallFlags,
                                               timeout_msec: gint,
                                               fd_list: *mut GUnixFDList,
                                               cancellable: *mut GCancellable,
                                               callback: GAsyncReadyCallback,
                                               user_data: gpointer);
    pub fn g_dbus_proxy_call_with_unix_fd_list_finish(proxy: *mut GDBusProxy,
                                                      out_fd_list:
                                                          *mut *mut GUnixFDList,
                                                      res: *mut GAsyncResult,
                                                      error: *mut *mut GError)
     -> *mut GVariant;
    pub fn g_dbus_proxy_call_with_unix_fd_list_sync(proxy: *mut GDBusProxy,
                                                    method_name: *gchar,
                                                    parameters: *mut GVariant,
                                                    flags: GDBusCallFlags,
                                                    timeout_msec: gint,
                                                    fd_list: *mut GUnixFDList,
                                                    out_fd_list:
                                                        *mut *mut GUnixFDList,
                                                    cancellable:
                                                        *mut GCancellable,
                                                    error: *mut *mut GError)
     -> *mut GVariant;
    pub fn g_dbus_server_get_type() -> GType;
    pub fn g_dbus_server_new_sync(address: *gchar, flags: GDBusServerFlags,
                                  guid: *gchar,
                                  observer: *mut GDBusAuthObserver,
                                  cancellable: *mut GCancellable,
                                  error: *mut *mut GError) ->
     *mut GDBusServer;
    pub fn g_dbus_server_get_client_address(server: *mut GDBusServer) ->
     *gchar;
    pub fn g_dbus_server_get_guid(server: *mut GDBusServer) -> *gchar;
    pub fn g_dbus_server_get_flags(server: *mut GDBusServer) ->
     GDBusServerFlags;
    pub fn g_dbus_server_start(server: *mut GDBusServer);
    pub fn g_dbus_server_stop(server: *mut GDBusServer);
    pub fn g_dbus_server_is_active(server: *mut GDBusServer) -> gboolean;
    pub fn g_dbus_is_guid(string: *gchar) -> gboolean;
    pub fn g_dbus_generate_guid() -> *mut gchar;
    pub fn g_dbus_is_name(string: *gchar) -> gboolean;
    pub fn g_dbus_is_unique_name(string: *gchar) -> gboolean;
    pub fn g_dbus_is_member_name(string: *gchar) -> gboolean;
    pub fn g_dbus_is_interface_name(string: *gchar) -> gboolean;
    pub fn g_dbus_gvariant_to_gvalue(value: *mut GVariant,
                                     out_gvalue: *mut GValue);
    pub fn g_dbus_gvalue_to_gvariant(gvalue: *GValue, _type: *GVariantType) ->
     *mut GVariant;
    pub fn g_drive_get_type() -> GType;
    pub fn g_drive_get_name(drive: *mut GDrive) -> *mut c_schar;
    pub fn g_drive_get_icon(drive: *mut GDrive) -> *mut GIcon;
    pub fn g_drive_get_symbolic_icon(drive: *mut GDrive) -> *mut GIcon;
    pub fn g_drive_has_volumes(drive: *mut GDrive) -> gboolean;
    pub fn g_drive_get_volumes(drive: *mut GDrive) -> *mut GList;
    pub fn g_drive_is_media_removable(drive: *mut GDrive) -> gboolean;
    pub fn g_drive_has_media(drive: *mut GDrive) -> gboolean;
    pub fn g_drive_is_media_check_automatic(drive: *mut GDrive) -> gboolean;
    pub fn g_drive_can_poll_for_media(drive: *mut GDrive) -> gboolean;
    pub fn g_drive_can_eject(drive: *mut GDrive) -> gboolean;
    pub fn g_drive_eject(drive: *mut GDrive, flags: GMountUnmountFlags,
                         cancellable: *mut GCancellable,
                         callback: GAsyncReadyCallback, user_data: gpointer);
    pub fn g_drive_eject_finish(drive: *mut GDrive, result: *mut GAsyncResult,
                                error: *mut *mut GError) -> gboolean;
    pub fn g_drive_poll_for_media(drive: *mut GDrive,
                                  cancellable: *mut GCancellable,
                                  callback: GAsyncReadyCallback,
                                  user_data: gpointer);
    pub fn g_drive_poll_for_media_finish(drive: *mut GDrive,
                                         result: *mut GAsyncResult,
                                         error: *mut *mut GError) -> gboolean;
    pub fn g_drive_get_identifier(drive: *mut GDrive, kind: *c_schar) ->
     *mut c_schar;
    pub fn g_drive_enumerate_identifiers(drive: *mut GDrive) ->
     *mut *mut c_schar;
    pub fn g_drive_get_start_stop_type(drive: *mut GDrive) ->
     GDriveStartStopType;
    pub fn g_drive_can_start(drive: *mut GDrive) -> gboolean;
    pub fn g_drive_can_start_degraded(drive: *mut GDrive) -> gboolean;
    pub fn g_drive_start(drive: *mut GDrive, flags: GDriveStartFlags,
                         mount_operation: *mut GMountOperation,
                         cancellable: *mut GCancellable,
                         callback: GAsyncReadyCallback, user_data: gpointer);
    pub fn g_drive_start_finish(drive: *mut GDrive, result: *mut GAsyncResult,
                                error: *mut *mut GError) -> gboolean;
    pub fn g_drive_can_stop(drive: *mut GDrive) -> gboolean;
    pub fn g_drive_stop(drive: *mut GDrive, flags: GMountUnmountFlags,
                        mount_operation: *mut GMountOperation,
                        cancellable: *mut GCancellable,
                        callback: GAsyncReadyCallback, user_data: gpointer);
    pub fn g_drive_stop_finish(drive: *mut GDrive, result: *mut GAsyncResult,
                               error: *mut *mut GError) -> gboolean;
    pub fn g_drive_eject_with_operation(drive: *mut GDrive,
                                        flags: GMountUnmountFlags,
                                        mount_operation: *mut GMountOperation,
                                        cancellable: *mut GCancellable,
                                        callback: GAsyncReadyCallback,
                                        user_data: gpointer);
    pub fn g_drive_eject_with_operation_finish(drive: *mut GDrive,
                                               result: *mut GAsyncResult,
                                               error: *mut *mut GError) ->
     gboolean;
    pub fn g_drive_get_sort_key(drive: *mut GDrive) -> *gchar;
    pub fn g_icon_get_type() -> GType;
    pub fn g_icon_hash(icon: gconstpointer) -> guint;
    pub fn g_icon_equal(icon1: *mut GIcon, icon2: *mut GIcon) -> gboolean;
    pub fn g_icon_to_string(icon: *mut GIcon) -> *mut gchar;
    pub fn g_icon_new_for_string(str: *gchar, error: *mut *mut GError) ->
     *mut GIcon;
    pub fn g_icon_serialize(icon: *mut GIcon) -> *mut GVariant;
    pub fn g_icon_deserialize(value: *mut GVariant) -> *mut GIcon;
    pub fn g_emblem_get_type() -> GType;
    pub fn g_emblem_new(icon: *mut GIcon) -> *mut GEmblem;
    pub fn g_emblem_new_with_origin(icon: *mut GIcon, origin: GEmblemOrigin)
     -> *mut GEmblem;
    pub fn g_emblem_get_icon(emblem: *mut GEmblem) -> *mut GIcon;
    pub fn g_emblem_get_origin(emblem: *mut GEmblem) -> GEmblemOrigin;
    pub fn g_emblemed_icon_get_type() -> GType;
    pub fn g_emblemed_icon_new(icon: *mut GIcon, emblem: *mut GEmblem) ->
     *mut GIcon;
    pub fn g_emblemed_icon_get_icon(emblemed: *mut GEmblemedIcon) ->
     *mut GIcon;
    pub fn g_emblemed_icon_get_emblems(emblemed: *mut GEmblemedIcon) ->
     *mut GList;
    pub fn g_emblemed_icon_add_emblem(emblemed: *mut GEmblemedIcon,
                                      emblem: *mut GEmblem);
    pub fn g_emblemed_icon_clear_emblems(emblemed: *mut GEmblemedIcon);
    pub fn g_file_attribute_info_list_get_type() -> GType;
    pub fn g_file_attribute_info_list_new() -> *mut GFileAttributeInfoList;
    pub fn g_file_attribute_info_list_ref(list: *mut GFileAttributeInfoList)
     -> *mut GFileAttributeInfoList;
    pub fn g_file_attribute_info_list_unref(list:
                                                *mut GFileAttributeInfoList);
    pub fn g_file_attribute_info_list_dup(list: *mut GFileAttributeInfoList)
     -> *mut GFileAttributeInfoList;
    pub fn g_file_attribute_info_list_lookup(list:
                                                 *mut GFileAttributeInfoList,
                                             name: *c_schar) ->
     *GFileAttributeInfo;
    pub fn g_file_attribute_info_list_add(list: *mut GFileAttributeInfoList,
                                          name: *c_schar,
                                          _type: GFileAttributeType,
                                          flags: GFileAttributeInfoFlags);
    pub fn g_file_enumerator_get_type() -> GType;
    pub fn g_file_enumerator_next_file(enumerator: *mut GFileEnumerator,
                                       cancellable: *mut GCancellable,
                                       error: *mut *mut GError) ->
     *mut GFileInfo;
    pub fn g_file_enumerator_close(enumerator: *mut GFileEnumerator,
                                   cancellable: *mut GCancellable,
                                   error: *mut *mut GError) -> gboolean;
    pub fn g_file_enumerator_next_files_async(enumerator:
                                                  *mut GFileEnumerator,
                                              num_files: c_int,
                                              io_priority: c_int,
                                              cancellable: *mut GCancellable,
                                              callback: GAsyncReadyCallback,
                                              user_data: gpointer);
    pub fn g_file_enumerator_next_files_finish(enumerator:
                                                   *mut GFileEnumerator,
                                               result: *mut GAsyncResult,
                                               error: *mut *mut GError) ->
     *mut GList;
    pub fn g_file_enumerator_close_async(enumerator: *mut GFileEnumerator,
                                         io_priority: c_int,
                                         cancellable: *mut GCancellable,
                                         callback: GAsyncReadyCallback,
                                         user_data: gpointer);
    pub fn g_file_enumerator_close_finish(enumerator: *mut GFileEnumerator,
                                          result: *mut GAsyncResult,
                                          error: *mut *mut GError) ->
     gboolean;
    pub fn g_file_enumerator_is_closed(enumerator: *mut GFileEnumerator) ->
     gboolean;
    pub fn g_file_enumerator_has_pending(enumerator: *mut GFileEnumerator) ->
     gboolean;
    pub fn g_file_enumerator_set_pending(enumerator: *mut GFileEnumerator,
                                         pending: gboolean);
    pub fn g_file_enumerator_get_container(enumerator: *mut GFileEnumerator)
     -> *mut GFile;
    pub fn g_file_enumerator_get_child(enumerator: *mut GFileEnumerator,
                                       info: *mut GFileInfo) -> *mut GFile;
    pub fn g_file_get_type() -> GType;
    pub fn g_file_new_for_path(path: *c_schar) -> *mut GFile;
    pub fn g_file_new_for_uri(uri: *c_schar) -> *mut GFile;
    pub fn g_file_new_for_commandline_arg(arg: *c_schar) -> *mut GFile;
    pub fn g_file_new_for_commandline_arg_and_cwd(arg: *gchar, cwd: *gchar) ->
     *mut GFile;
    pub fn g_file_new_tmp(tmpl: *c_schar, iostream: *mut *mut GFileIOStream,
                          error: *mut *mut GError) -> *mut GFile;
    pub fn g_file_parse_name(parse_name: *c_schar) -> *mut GFile;
    pub fn g_file_dup(file: *mut GFile) -> *mut GFile;
    pub fn g_file_hash(file: gconstpointer) -> guint;
    pub fn g_file_equal(file1: *mut GFile, file2: *mut GFile) -> gboolean;
    pub fn g_file_get_basename(file: *mut GFile) -> *mut c_schar;
    pub fn g_file_get_path(file: *mut GFile) -> *mut c_schar;
    pub fn g_file_get_uri(file: *mut GFile) -> *mut c_schar;
    pub fn g_file_get_parse_name(file: *mut GFile) -> *mut c_schar;
    pub fn g_file_get_parent(file: *mut GFile) -> *mut GFile;
    pub fn g_file_has_parent(file: *mut GFile, parent: *mut GFile) ->
     gboolean;
    pub fn g_file_get_child(file: *mut GFile, name: *c_schar) -> *mut GFile;
    pub fn g_file_get_child_for_display_name(file: *mut GFile,
                                             display_name: *c_schar,
                                             error: *mut *mut GError) ->
     *mut GFile;
    pub fn g_file_has_prefix(file: *mut GFile, prefix: *mut GFile) ->
     gboolean;
    pub fn g_file_get_relative_path(parent: *mut GFile,
                                    descendant: *mut GFile) -> *mut c_schar;
    pub fn g_file_resolve_relative_path(file: *mut GFile,
                                        relative_path: *c_schar) ->
     *mut GFile;
    pub fn g_file_is_native(file: *mut GFile) -> gboolean;
    pub fn g_file_has_uri_scheme(file: *mut GFile, uri_scheme: *c_schar) ->
     gboolean;
    pub fn g_file_get_uri_scheme(file: *mut GFile) -> *mut c_schar;
    pub fn g_file_read(file: *mut GFile, cancellable: *mut GCancellable,
                       error: *mut *mut GError) -> *mut GFileInputStream;
    pub fn g_file_read_async(file: *mut GFile, io_priority: c_int,
                             cancellable: *mut GCancellable,
                             callback: GAsyncReadyCallback,
                             user_data: gpointer);
    pub fn g_file_read_finish(file: *mut GFile, res: *mut GAsyncResult,
                              error: *mut *mut GError) ->
     *mut GFileInputStream;
    pub fn g_file_append_to(file: *mut GFile, flags: GFileCreateFlags,
                            cancellable: *mut GCancellable,
                            error: *mut *mut GError) ->
     *mut GFileOutputStream;
    pub fn g_file_create(file: *mut GFile, flags: GFileCreateFlags,
                         cancellable: *mut GCancellable,
                         error: *mut *mut GError) -> *mut GFileOutputStream;
    pub fn g_file_replace(file: *mut GFile, etag: *c_schar,
                          make_backup: gboolean, flags: GFileCreateFlags,
                          cancellable: *mut GCancellable,
                          error: *mut *mut GError) -> *mut GFileOutputStream;
    pub fn g_file_append_to_async(file: *mut GFile, flags: GFileCreateFlags,
                                  io_priority: c_int,
                                  cancellable: *mut GCancellable,
                                  callback: GAsyncReadyCallback,
                                  user_data: gpointer);
    pub fn g_file_append_to_finish(file: *mut GFile, res: *mut GAsyncResult,
                                   error: *mut *mut GError) ->
     *mut GFileOutputStream;
    pub fn g_file_create_async(file: *mut GFile, flags: GFileCreateFlags,
                               io_priority: c_int,
                               cancellable: *mut GCancellable,
                               callback: GAsyncReadyCallback,
                               user_data: gpointer);
    pub fn g_file_create_finish(file: *mut GFile, res: *mut GAsyncResult,
                                error: *mut *mut GError) ->
     *mut GFileOutputStream;
    pub fn g_file_replace_async(file: *mut GFile, etag: *c_schar,
                                make_backup: gboolean,
                                flags: GFileCreateFlags, io_priority: c_int,
                                cancellable: *mut GCancellable,
                                callback: GAsyncReadyCallback,
                                user_data: gpointer);
    pub fn g_file_replace_finish(file: *mut GFile, res: *mut GAsyncResult,
                                 error: *mut *mut GError) ->
     *mut GFileOutputStream;
    pub fn g_file_open_readwrite(file: *mut GFile,
                                 cancellable: *mut GCancellable,
                                 error: *mut *mut GError) ->
     *mut GFileIOStream;
    pub fn g_file_open_readwrite_async(file: *mut GFile, io_priority: c_int,
                                       cancellable: *mut GCancellable,
                                       callback: GAsyncReadyCallback,
                                       user_data: gpointer);
    pub fn g_file_open_readwrite_finish(file: *mut GFile,
                                        res: *mut GAsyncResult,
                                        error: *mut *mut GError) ->
     *mut GFileIOStream;
    pub fn g_file_create_readwrite(file: *mut GFile, flags: GFileCreateFlags,
                                   cancellable: *mut GCancellable,
                                   error: *mut *mut GError) ->
     *mut GFileIOStream;
    pub fn g_file_create_readwrite_async(file: *mut GFile,
                                         flags: GFileCreateFlags,
                                         io_priority: c_int,
                                         cancellable: *mut GCancellable,
                                         callback: GAsyncReadyCallback,
                                         user_data: gpointer);
    pub fn g_file_create_readwrite_finish(file: *mut GFile,
                                          res: *mut GAsyncResult,
                                          error: *mut *mut GError) ->
     *mut GFileIOStream;
    pub fn g_file_replace_readwrite(file: *mut GFile, etag: *c_schar,
                                    make_backup: gboolean,
                                    flags: GFileCreateFlags,
                                    cancellable: *mut GCancellable,
                                    error: *mut *mut GError) ->
     *mut GFileIOStream;
    pub fn g_file_replace_readwrite_async(file: *mut GFile, etag: *c_schar,
                                          make_backup: gboolean,
                                          flags: GFileCreateFlags,
                                          io_priority: c_int,
                                          cancellable: *mut GCancellable,
                                          callback: GAsyncReadyCallback,
                                          user_data: gpointer);
    pub fn g_file_replace_readwrite_finish(file: *mut GFile,
                                           res: *mut GAsyncResult,
                                           error: *mut *mut GError) ->
     *mut GFileIOStream;
    pub fn g_file_query_exists(file: *mut GFile,
                               cancellable: *mut GCancellable) -> gboolean;
    pub fn g_file_query_file_type(file: *mut GFile,
                                  flags: GFileQueryInfoFlags,
                                  cancellable: *mut GCancellable) ->
     GFileType;
    pub fn g_file_query_info(file: *mut GFile, attributes: *c_schar,
                             flags: GFileQueryInfoFlags,
                             cancellable: *mut GCancellable,
                             error: *mut *mut GError) -> *mut GFileInfo;
    pub fn g_file_query_info_async(file: *mut GFile, attributes: *c_schar,
                                   flags: GFileQueryInfoFlags,
                                   io_priority: c_int,
                                   cancellable: *mut GCancellable,
                                   callback: GAsyncReadyCallback,
                                   user_data: gpointer);
    pub fn g_file_query_info_finish(file: *mut GFile, res: *mut GAsyncResult,
                                    error: *mut *mut GError) ->
     *mut GFileInfo;
    pub fn g_file_query_filesystem_info(file: *mut GFile,
                                        attributes: *c_schar,
                                        cancellable: *mut GCancellable,
                                        error: *mut *mut GError) ->
     *mut GFileInfo;
    pub fn g_file_query_filesystem_info_async(file: *mut GFile,
                                              attributes: *c_schar,
                                              io_priority: c_int,
                                              cancellable: *mut GCancellable,
                                              callback: GAsyncReadyCallback,
                                              user_data: gpointer);
    pub fn g_file_query_filesystem_info_finish(file: *mut GFile,
                                               res: *mut GAsyncResult,
                                               error: *mut *mut GError) ->
     *mut GFileInfo;
    pub fn g_file_find_enclosing_mount(file: *mut GFile,
                                       cancellable: *mut GCancellable,
                                       error: *mut *mut GError) ->
     *mut GMount;
    pub fn g_file_find_enclosing_mount_async(file: *mut GFile,
                                             io_priority: c_int,
                                             cancellable: *mut GCancellable,
                                             callback: GAsyncReadyCallback,
                                             user_data: gpointer);
    pub fn g_file_find_enclosing_mount_finish(file: *mut GFile,
                                              res: *mut GAsyncResult,
                                              error: *mut *mut GError) ->
     *mut GMount;
    pub fn g_file_enumerate_children(file: *mut GFile, attributes: *c_schar,
                                     flags: GFileQueryInfoFlags,
                                     cancellable: *mut GCancellable,
                                     error: *mut *mut GError) ->
     *mut GFileEnumerator;
    pub fn g_file_enumerate_children_async(file: *mut GFile,
                                           attributes: *c_schar,
                                           flags: GFileQueryInfoFlags,
                                           io_priority: c_int,
                                           cancellable: *mut GCancellable,
                                           callback: GAsyncReadyCallback,
                                           user_data: gpointer);
    pub fn g_file_enumerate_children_finish(file: *mut GFile,
                                            res: *mut GAsyncResult,
                                            error: *mut *mut GError) ->
     *mut GFileEnumerator;
    pub fn g_file_set_display_name(file: *mut GFile, display_name: *c_schar,
                                   cancellable: *mut GCancellable,
                                   error: *mut *mut GError) -> *mut GFile;
    pub fn g_file_set_display_name_async(file: *mut GFile,
                                         display_name: *c_schar,
                                         io_priority: c_int,
                                         cancellable: *mut GCancellable,
                                         callback: GAsyncReadyCallback,
                                         user_data: gpointer);
    pub fn g_file_set_display_name_finish(file: *mut GFile,
                                          res: *mut GAsyncResult,
                                          error: *mut *mut GError) ->
     *mut GFile;
    pub fn g_file_delete(file: *mut GFile, cancellable: *mut GCancellable,
                         error: *mut *mut GError) -> gboolean;
    pub fn g_file_delete_async(file: *mut GFile, io_priority: c_int,
                               cancellable: *mut GCancellable,
                               callback: GAsyncReadyCallback,
                               user_data: gpointer);
    pub fn g_file_delete_finish(file: *mut GFile, result: *mut GAsyncResult,
                                error: *mut *mut GError) -> gboolean;
    pub fn g_file_trash(file: *mut GFile, cancellable: *mut GCancellable,
                        error: *mut *mut GError) -> gboolean;
    pub fn g_file_trash_async(file: *mut GFile, io_priority: c_int,
                              cancellable: *mut GCancellable,
                              callback: GAsyncReadyCallback,
                              user_data: gpointer);
    pub fn g_file_trash_finish(file: *mut GFile, result: *mut GAsyncResult,
                               error: *mut *mut GError) -> gboolean;
    pub fn g_file_copy(source: *mut GFile, destination: *mut GFile,
                       flags: GFileCopyFlags, cancellable: *mut GCancellable,
                       progress_callback: GFileProgressCallback,
                       progress_callback_data: gpointer,
                       error: *mut *mut GError) -> gboolean;
    pub fn g_file_copy_async(source: *mut GFile, destination: *mut GFile,
                             flags: GFileCopyFlags, io_priority: c_int,
                             cancellable: *mut GCancellable,
                             progress_callback: GFileProgressCallback,
                             progress_callback_data: gpointer,
                             callback: GAsyncReadyCallback,
                             user_data: gpointer);
    pub fn g_file_copy_finish(file: *mut GFile, res: *mut GAsyncResult,
                              error: *mut *mut GError) -> gboolean;
    pub fn g_file_move(source: *mut GFile, destination: *mut GFile,
                       flags: GFileCopyFlags, cancellable: *mut GCancellable,
                       progress_callback: GFileProgressCallback,
                       progress_callback_data: gpointer,
                       error: *mut *mut GError) -> gboolean;
    pub fn g_file_make_directory(file: *mut GFile,
                                 cancellable: *mut GCancellable,
                                 error: *mut *mut GError) -> gboolean;
    pub fn g_file_make_directory_async(file: *mut GFile, io_priority: c_int,
                                       cancellable: *mut GCancellable,
                                       callback: GAsyncReadyCallback,
                                       user_data: gpointer);
    pub fn g_file_make_directory_finish(file: *mut GFile,
                                        result: *mut GAsyncResult,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_file_make_directory_with_parents(file: *mut GFile,
                                              cancellable: *mut GCancellable,
                                              error: *mut *mut GError) ->
     gboolean;
    pub fn g_file_make_symbolic_link(file: *mut GFile,
                                     symlink_value: *c_schar,
                                     cancellable: *mut GCancellable,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_file_query_settable_attributes(file: *mut GFile,
                                            cancellable: *mut GCancellable,
                                            error: *mut *mut GError) ->
     *mut GFileAttributeInfoList;
    pub fn g_file_query_writable_namespaces(file: *mut GFile,
                                            cancellable: *mut GCancellable,
                                            error: *mut *mut GError) ->
     *mut GFileAttributeInfoList;
    pub fn g_file_set_attribute(file: *mut GFile, attribute: *c_schar,
                                _type: GFileAttributeType, value_p: gpointer,
                                flags: GFileQueryInfoFlags,
                                cancellable: *mut GCancellable,
                                error: *mut *mut GError) -> gboolean;
    pub fn g_file_set_attributes_from_info(file: *mut GFile,
                                           info: *mut GFileInfo,
                                           flags: GFileQueryInfoFlags,
                                           cancellable: *mut GCancellable,
                                           error: *mut *mut GError) ->
     gboolean;
    pub fn g_file_set_attributes_async(file: *mut GFile, info: *mut GFileInfo,
                                       flags: GFileQueryInfoFlags,
                                       io_priority: c_int,
                                       cancellable: *mut GCancellable,
                                       callback: GAsyncReadyCallback,
                                       user_data: gpointer);
    pub fn g_file_set_attributes_finish(file: *mut GFile,
                                        result: *mut GAsyncResult,
                                        info: *mut *mut GFileInfo,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_file_set_attribute_string(file: *mut GFile, attribute: *c_schar,
                                       value: *c_schar,
                                       flags: GFileQueryInfoFlags,
                                       cancellable: *mut GCancellable,
                                       error: *mut *mut GError) -> gboolean;
    pub fn g_file_set_attribute_byte_string(file: *mut GFile,
                                            attribute: *c_schar,
                                            value: *c_schar,
                                            flags: GFileQueryInfoFlags,
                                            cancellable: *mut GCancellable,
                                            error: *mut *mut GError) ->
     gboolean;
    pub fn g_file_set_attribute_uint32(file: *mut GFile, attribute: *c_schar,
                                       value: guint32,
                                       flags: GFileQueryInfoFlags,
                                       cancellable: *mut GCancellable,
                                       error: *mut *mut GError) -> gboolean;
    pub fn g_file_set_attribute_int32(file: *mut GFile, attribute: *c_schar,
                                      value: gint32,
                                      flags: GFileQueryInfoFlags,
                                      cancellable: *mut GCancellable,
                                      error: *mut *mut GError) -> gboolean;
    pub fn g_file_set_attribute_uint64(file: *mut GFile, attribute: *c_schar,
                                       value: guint64,
                                       flags: GFileQueryInfoFlags,
                                       cancellable: *mut GCancellable,
                                       error: *mut *mut GError) -> gboolean;
    pub fn g_file_set_attribute_int64(file: *mut GFile, attribute: *c_schar,
                                      value: gint64,
                                      flags: GFileQueryInfoFlags,
                                      cancellable: *mut GCancellable,
                                      error: *mut *mut GError) -> gboolean;
    pub fn g_file_mount_enclosing_volume(location: *mut GFile,
                                         flags: GMountMountFlags,
                                         mount_operation:
                                             *mut GMountOperation,
                                         cancellable: *mut GCancellable,
                                         callback: GAsyncReadyCallback,
                                         user_data: gpointer);
    pub fn g_file_mount_enclosing_volume_finish(location: *mut GFile,
                                                result: *mut GAsyncResult,
                                                error: *mut *mut GError) ->
     gboolean;
    pub fn g_file_mount_mountable(file: *mut GFile, flags: GMountMountFlags,
                                  mount_operation: *mut GMountOperation,
                                  cancellable: *mut GCancellable,
                                  callback: GAsyncReadyCallback,
                                  user_data: gpointer);
    pub fn g_file_mount_mountable_finish(file: *mut GFile,
                                         result: *mut GAsyncResult,
                                         error: *mut *mut GError) ->
     *mut GFile;
    pub fn g_file_unmount_mountable(file: *mut GFile,
                                    flags: GMountUnmountFlags,
                                    cancellable: *mut GCancellable,
                                    callback: GAsyncReadyCallback,
                                    user_data: gpointer);
    pub fn g_file_unmount_mountable_finish(file: *mut GFile,
                                           result: *mut GAsyncResult,
                                           error: *mut *mut GError) ->
     gboolean;
    pub fn g_file_unmount_mountable_with_operation(file: *mut GFile,
                                                   flags: GMountUnmountFlags,
                                                   mount_operation:
                                                       *mut GMountOperation,
                                                   cancellable:
                                                       *mut GCancellable,
                                                   callback:
                                                       GAsyncReadyCallback,
                                                   user_data: gpointer);
    pub fn g_file_unmount_mountable_with_operation_finish(file: *mut GFile,
                                                          result:
                                                              *mut GAsyncResult,
                                                          error:
                                                              *mut *mut GError)
     -> gboolean;
    pub fn g_file_eject_mountable(file: *mut GFile, flags: GMountUnmountFlags,
                                  cancellable: *mut GCancellable,
                                  callback: GAsyncReadyCallback,
                                  user_data: gpointer);
    pub fn g_file_eject_mountable_finish(file: *mut GFile,
                                         result: *mut GAsyncResult,
                                         error: *mut *mut GError) -> gboolean;
    pub fn g_file_eject_mountable_with_operation(file: *mut GFile,
                                                 flags: GMountUnmountFlags,
                                                 mount_operation:
                                                     *mut GMountOperation,
                                                 cancellable:
                                                     *mut GCancellable,
                                                 callback:
                                                     GAsyncReadyCallback,
                                                 user_data: gpointer);
    pub fn g_file_eject_mountable_with_operation_finish(file: *mut GFile,
                                                        result:
                                                            *mut GAsyncResult,
                                                        error:
                                                            *mut *mut GError)
     -> gboolean;
    pub fn g_file_copy_attributes(source: *mut GFile, destination: *mut GFile,
                                  flags: GFileCopyFlags,
                                  cancellable: *mut GCancellable,
                                  error: *mut *mut GError) -> gboolean;
    pub fn g_file_monitor_directory(file: *mut GFile,
                                    flags: GFileMonitorFlags,
                                    cancellable: *mut GCancellable,
                                    error: *mut *mut GError) ->
     *mut GFileMonitor;
    pub fn g_file_monitor_file(file: *mut GFile, flags: GFileMonitorFlags,
                               cancellable: *mut GCancellable,
                               error: *mut *mut GError) -> *mut GFileMonitor;
    pub fn g_file_monitor(file: *mut GFile, flags: GFileMonitorFlags,
                          cancellable: *mut GCancellable,
                          error: *mut *mut GError) -> *mut GFileMonitor;
    pub fn g_file_measure_disk_usage(file: *mut GFile,
                                     flags: GFileMeasureFlags,
                                     cancellable: *mut GCancellable,
                                     progress_callback:
                                         GFileMeasureProgressCallback,
                                     progress_data: gpointer,
                                     disk_usage: *mut guint64,
                                     num_dirs: *mut guint64,
                                     num_files: *mut guint64,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_file_measure_disk_usage_async(file: *mut GFile,
                                           flags: GFileMeasureFlags,
                                           io_priority: gint,
                                           cancellable: *mut GCancellable,
                                           progress_callback:
                                               GFileMeasureProgressCallback,
                                           progress_data: gpointer,
                                           callback: GAsyncReadyCallback,
                                           user_data: gpointer);
    pub fn g_file_measure_disk_usage_finish(file: *mut GFile,
                                            result: *mut GAsyncResult,
                                            disk_usage: *mut guint64,
                                            num_dirs: *mut guint64,
                                            num_files: *mut guint64,
                                            error: *mut *mut GError) ->
     gboolean;
    pub fn g_file_start_mountable(file: *mut GFile, flags: GDriveStartFlags,
                                  start_operation: *mut GMountOperation,
                                  cancellable: *mut GCancellable,
                                  callback: GAsyncReadyCallback,
                                  user_data: gpointer);
    pub fn g_file_start_mountable_finish(file: *mut GFile,
                                         result: *mut GAsyncResult,
                                         error: *mut *mut GError) -> gboolean;
    pub fn g_file_stop_mountable(file: *mut GFile, flags: GMountUnmountFlags,
                                 mount_operation: *mut GMountOperation,
                                 cancellable: *mut GCancellable,
                                 callback: GAsyncReadyCallback,
                                 user_data: gpointer);
    pub fn g_file_stop_mountable_finish(file: *mut GFile,
                                        result: *mut GAsyncResult,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_file_poll_mountable(file: *mut GFile,
                                 cancellable: *mut GCancellable,
                                 callback: GAsyncReadyCallback,
                                 user_data: gpointer);
    pub fn g_file_poll_mountable_finish(file: *mut GFile,
                                        result: *mut GAsyncResult,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_file_query_default_handler(file: *mut GFile,
                                        cancellable: *mut GCancellable,
                                        error: *mut *mut GError) ->
     *mut GAppInfo;
    pub fn g_file_load_contents(file: *mut GFile,
                                cancellable: *mut GCancellable,
                                contents: *mut *mut c_schar,
                                length: *mut gsize,
                                etag_out: *mut *mut c_schar,
                                error: *mut *mut GError) -> gboolean;
    pub fn g_file_load_contents_async(file: *mut GFile,
                                      cancellable: *mut GCancellable,
                                      callback: GAsyncReadyCallback,
                                      user_data: gpointer);
    pub fn g_file_load_contents_finish(file: *mut GFile,
                                       res: *mut GAsyncResult,
                                       contents: *mut *mut c_schar,
                                       length: *mut gsize,
                                       etag_out: *mut *mut c_schar,
                                       error: *mut *mut GError) -> gboolean;
    pub fn g_file_load_partial_contents_async(file: *mut GFile,
                                              cancellable: *mut GCancellable,
                                              read_more_callback:
                                                  GFileReadMoreCallback,
                                              callback: GAsyncReadyCallback,
                                              user_data: gpointer);
    pub fn g_file_load_partial_contents_finish(file: *mut GFile,
                                               res: *mut GAsyncResult,
                                               contents: *mut *mut c_schar,
                                               length: *mut gsize,
                                               etag_out: *mut *mut c_schar,
                                               error: *mut *mut GError) ->
     gboolean;
    pub fn g_file_replace_contents(file: *mut GFile, contents: *c_schar,
                                   length: gsize, etag: *c_schar,
                                   make_backup: gboolean,
                                   flags: GFileCreateFlags,
                                   new_etag: *mut *mut c_schar,
                                   cancellable: *mut GCancellable,
                                   error: *mut *mut GError) -> gboolean;
    pub fn g_file_replace_contents_async(file: *mut GFile, contents: *c_schar,
                                         length: gsize, etag: *c_schar,
                                         make_backup: gboolean,
                                         flags: GFileCreateFlags,
                                         cancellable: *mut GCancellable,
                                         callback: GAsyncReadyCallback,
                                         user_data: gpointer);
    pub fn g_file_replace_contents_finish(file: *mut GFile,
                                          res: *mut GAsyncResult,
                                          new_etag: *mut *mut c_schar,
                                          error: *mut *mut GError) ->
     gboolean;
    pub fn g_file_supports_thread_contexts(file: *mut GFile) -> gboolean;
    pub fn g_file_icon_get_type() -> GType;
    pub fn g_file_icon_new(file: *mut GFile) -> *mut GIcon;
    pub fn g_file_icon_get_file(icon: *mut GFileIcon) -> *mut GFile;
    pub fn g_file_info_get_type() -> GType;
    pub fn g_file_info_new() -> *mut GFileInfo;
    pub fn g_file_info_dup(other: *mut GFileInfo) -> *mut GFileInfo;
    pub fn g_file_info_copy_into(src_info: *mut GFileInfo,
                                 dest_info: *mut GFileInfo);
    pub fn g_file_info_has_attribute(info: *mut GFileInfo,
                                     attribute: *c_schar) -> gboolean;
    pub fn g_file_info_has_namespace(info: *mut GFileInfo,
                                     name_space: *c_schar) -> gboolean;
    pub fn g_file_info_list_attributes(info: *mut GFileInfo,
                                       name_space: *c_schar) ->
     *mut *mut c_schar;
    pub fn g_file_info_get_attribute_data(info: *mut GFileInfo,
                                          attribute: *c_schar,
                                          _type: *mut GFileAttributeType,
                                          value_pp: *mut gpointer,
                                          status: *mut GFileAttributeStatus)
     -> gboolean;
    pub fn g_file_info_get_attribute_type(info: *mut GFileInfo,
                                          attribute: *c_schar) ->
     GFileAttributeType;
    pub fn g_file_info_remove_attribute(info: *mut GFileInfo,
                                        attribute: *c_schar);
    pub fn g_file_info_get_attribute_status(info: *mut GFileInfo,
                                            attribute: *c_schar) ->
     GFileAttributeStatus;
    pub fn g_file_info_set_attribute_status(info: *mut GFileInfo,
                                            attribute: *c_schar,
                                            status: GFileAttributeStatus) ->
     gboolean;
    pub fn g_file_info_get_attribute_as_string(info: *mut GFileInfo,
                                               attribute: *c_schar) ->
     *mut c_schar;
    pub fn g_file_info_get_attribute_string(info: *mut GFileInfo,
                                            attribute: *c_schar) -> *c_schar;
    pub fn g_file_info_get_attribute_byte_string(info: *mut GFileInfo,
                                                 attribute: *c_schar) ->
     *c_schar;
    pub fn g_file_info_get_attribute_boolean(info: *mut GFileInfo,
                                             attribute: *c_schar) -> gboolean;
    pub fn g_file_info_get_attribute_uint32(info: *mut GFileInfo,
                                            attribute: *c_schar) -> guint32;
    pub fn g_file_info_get_attribute_int32(info: *mut GFileInfo,
                                           attribute: *c_schar) -> gint32;
    pub fn g_file_info_get_attribute_uint64(info: *mut GFileInfo,
                                            attribute: *c_schar) -> guint64;
    pub fn g_file_info_get_attribute_int64(info: *mut GFileInfo,
                                           attribute: *c_schar) -> gint64;
    pub fn g_file_info_get_attribute_object(info: *mut GFileInfo,
                                            attribute: *c_schar) ->
     *mut GObject;
    pub fn g_file_info_get_attribute_stringv(info: *mut GFileInfo,
                                             attribute: *c_schar) ->
     *mut *mut c_schar;
    pub fn g_file_info_set_attribute(info: *mut GFileInfo,
                                     attribute: *c_schar,
                                     _type: GFileAttributeType,
                                     value_p: gpointer);
    pub fn g_file_info_set_attribute_string(info: *mut GFileInfo,
                                            attribute: *c_schar,
                                            attr_value: *c_schar);
    pub fn g_file_info_set_attribute_byte_string(info: *mut GFileInfo,
                                                 attribute: *c_schar,
                                                 attr_value: *c_schar);
    pub fn g_file_info_set_attribute_boolean(info: *mut GFileInfo,
                                             attribute: *c_schar,
                                             attr_value: gboolean);
    pub fn g_file_info_set_attribute_uint32(info: *mut GFileInfo,
                                            attribute: *c_schar,
                                            attr_value: guint32);
    pub fn g_file_info_set_attribute_int32(info: *mut GFileInfo,
                                           attribute: *c_schar,
                                           attr_value: gint32);
    pub fn g_file_info_set_attribute_uint64(info: *mut GFileInfo,
                                            attribute: *c_schar,
                                            attr_value: guint64);
    pub fn g_file_info_set_attribute_int64(info: *mut GFileInfo,
                                           attribute: *c_schar,
                                           attr_value: gint64);
    pub fn g_file_info_set_attribute_object(info: *mut GFileInfo,
                                            attribute: *c_schar,
                                            attr_value: *mut GObject);
    pub fn g_file_info_set_attribute_stringv(info: *mut GFileInfo,
                                             attribute: *c_schar,
                                             attr_value: *mut *mut c_schar);
    pub fn g_file_info_clear_status(info: *mut GFileInfo);
    pub fn g_file_info_get_deletion_date(info: *mut GFileInfo) ->
     *mut GDateTime;
    pub fn g_file_info_get_file_type(info: *mut GFileInfo) -> GFileType;
    pub fn g_file_info_get_is_hidden(info: *mut GFileInfo) -> gboolean;
    pub fn g_file_info_get_is_backup(info: *mut GFileInfo) -> gboolean;
    pub fn g_file_info_get_is_symlink(info: *mut GFileInfo) -> gboolean;
    pub fn g_file_info_get_name(info: *mut GFileInfo) -> *c_schar;
    pub fn g_file_info_get_display_name(info: *mut GFileInfo) -> *c_schar;
    pub fn g_file_info_get_edit_name(info: *mut GFileInfo) -> *c_schar;
    pub fn g_file_info_get_icon(info: *mut GFileInfo) -> *mut GIcon;
    pub fn g_file_info_get_symbolic_icon(info: *mut GFileInfo) -> *mut GIcon;
    pub fn g_file_info_get_content_type(info: *mut GFileInfo) -> *c_schar;
    pub fn g_file_info_get_size(info: *mut GFileInfo) -> goffset;
    pub fn g_file_info_get_modification_time(info: *mut GFileInfo,
                                             result: *mut GTimeVal);
    pub fn g_file_info_get_symlink_target(info: *mut GFileInfo) -> *c_schar;
    pub fn g_file_info_get_etag(info: *mut GFileInfo) -> *c_schar;
    pub fn g_file_info_get_sort_order(info: *mut GFileInfo) -> gint32;
    pub fn g_file_info_set_attribute_mask(info: *mut GFileInfo,
                                          mask: *mut GFileAttributeMatcher);
    pub fn g_file_info_unset_attribute_mask(info: *mut GFileInfo);
    pub fn g_file_info_set_file_type(info: *mut GFileInfo, _type: GFileType);
    pub fn g_file_info_set_is_hidden(info: *mut GFileInfo,
                                     is_hidden: gboolean);
    pub fn g_file_info_set_is_symlink(info: *mut GFileInfo,
                                      is_symlink: gboolean);
    pub fn g_file_info_set_name(info: *mut GFileInfo, name: *c_schar);
    pub fn g_file_info_set_display_name(info: *mut GFileInfo,
                                        display_name: *c_schar);
    pub fn g_file_info_set_edit_name(info: *mut GFileInfo,
                                     edit_name: *c_schar);
    pub fn g_file_info_set_icon(info: *mut GFileInfo, icon: *mut GIcon);
    pub fn g_file_info_set_symbolic_icon(info: *mut GFileInfo,
                                         icon: *mut GIcon);
    pub fn g_file_info_set_content_type(info: *mut GFileInfo,
                                        content_type: *c_schar);
    pub fn g_file_info_set_size(info: *mut GFileInfo, size: goffset);
    pub fn g_file_info_set_modification_time(info: *mut GFileInfo,
                                             mtime: *mut GTimeVal);
    pub fn g_file_info_set_symlink_target(info: *mut GFileInfo,
                                          symlink_target: *c_schar);
    pub fn g_file_info_set_sort_order(info: *mut GFileInfo,
                                      sort_order: gint32);
    pub fn g_file_attribute_matcher_get_type() -> GType;
    pub fn g_file_attribute_matcher_new(attributes: *c_schar) ->
     *mut GFileAttributeMatcher;
    pub fn g_file_attribute_matcher_ref(matcher: *mut GFileAttributeMatcher)
     -> *mut GFileAttributeMatcher;
    pub fn g_file_attribute_matcher_unref(matcher:
                                              *mut GFileAttributeMatcher);
    pub fn g_file_attribute_matcher_subtract(matcher:
                                                 *mut GFileAttributeMatcher,
                                             subtract:
                                                 *mut GFileAttributeMatcher)
     -> *mut GFileAttributeMatcher;
    pub fn g_file_attribute_matcher_matches(matcher:
                                                *mut GFileAttributeMatcher,
                                            attribute: *c_schar) -> gboolean;
    pub fn g_file_attribute_matcher_matches_only(matcher:
                                                     *mut GFileAttributeMatcher,
                                                 attribute: *c_schar) ->
     gboolean;
    pub fn g_file_attribute_matcher_enumerate_namespace(matcher:
                                                            *mut GFileAttributeMatcher,
                                                        ns: *c_schar) ->
     gboolean;
    pub fn g_file_attribute_matcher_enumerate_next(matcher:
                                                       *mut GFileAttributeMatcher)
     -> *c_schar;
    pub fn g_file_attribute_matcher_to_string(matcher:
                                                  *mut GFileAttributeMatcher)
     -> *mut c_schar;
    pub fn g_file_input_stream_get_type() -> GType;
    pub fn g_file_input_stream_query_info(stream: *mut GFileInputStream,
                                          attributes: *c_schar,
                                          cancellable: *mut GCancellable,
                                          error: *mut *mut GError) ->
     *mut GFileInfo;
    pub fn g_file_input_stream_query_info_async(stream: *mut GFileInputStream,
                                                attributes: *c_schar,
                                                io_priority: c_int,
                                                cancellable:
                                                    *mut GCancellable,
                                                callback: GAsyncReadyCallback,
                                                user_data: gpointer);
    pub fn g_file_input_stream_query_info_finish(stream:
                                                     *mut GFileInputStream,
                                                 result: *mut GAsyncResult,
                                                 error: *mut *mut GError) ->
     *mut GFileInfo;
    pub fn g_io_error_quark() -> GQuark;
    pub fn g_io_error_from_errno(err_no: gint) -> GIOErrorEnum;
    pub fn g_io_stream_get_type() -> GType;
    pub fn g_io_stream_get_input_stream(stream: *mut GIOStream) ->
     *mut GInputStream;
    pub fn g_io_stream_get_output_stream(stream: *mut GIOStream) ->
     *mut GOutputStream;
    pub fn g_io_stream_splice_async(stream1: *mut GIOStream,
                                    stream2: *mut GIOStream,
                                    flags: GIOStreamSpliceFlags,
                                    io_priority: c_int,
                                    cancellable: *mut GCancellable,
                                    callback: GAsyncReadyCallback,
                                    user_data: gpointer);
    pub fn g_io_stream_splice_finish(result: *mut GAsyncResult,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_io_stream_close(stream: *mut GIOStream,
                             cancellable: *mut GCancellable,
                             error: *mut *mut GError) -> gboolean;
    pub fn g_io_stream_close_async(stream: *mut GIOStream, io_priority: c_int,
                                   cancellable: *mut GCancellable,
                                   callback: GAsyncReadyCallback,
                                   user_data: gpointer);
    pub fn g_io_stream_close_finish(stream: *mut GIOStream,
                                    result: *mut GAsyncResult,
                                    error: *mut *mut GError) -> gboolean;
    pub fn g_io_stream_is_closed(stream: *mut GIOStream) -> gboolean;
    pub fn g_io_stream_has_pending(stream: *mut GIOStream) -> gboolean;
    pub fn g_io_stream_set_pending(stream: *mut GIOStream,
                                   error: *mut *mut GError) -> gboolean;
    pub fn g_io_stream_clear_pending(stream: *mut GIOStream);
    pub fn g_file_io_stream_get_type() -> GType;
    pub fn g_file_io_stream_query_info(stream: *mut GFileIOStream,
                                       attributes: *c_schar,
                                       cancellable: *mut GCancellable,
                                       error: *mut *mut GError) ->
     *mut GFileInfo;
    pub fn g_file_io_stream_query_info_async(stream: *mut GFileIOStream,
                                             attributes: *c_schar,
                                             io_priority: c_int,
                                             cancellable: *mut GCancellable,
                                             callback: GAsyncReadyCallback,
                                             user_data: gpointer);
    pub fn g_file_io_stream_query_info_finish(stream: *mut GFileIOStream,
                                              result: *mut GAsyncResult,
                                              error: *mut *mut GError) ->
     *mut GFileInfo;
    pub fn g_file_io_stream_get_etag(stream: *mut GFileIOStream) ->
     *mut c_schar;
    pub fn g_file_monitor_get_type() -> GType;
    pub fn g_file_monitor_cancel(monitor: *mut GFileMonitor) -> gboolean;
    pub fn g_file_monitor_is_cancelled(monitor: *mut GFileMonitor) ->
     gboolean;
    pub fn g_file_monitor_set_rate_limit(monitor: *mut GFileMonitor,
                                         limit_msecs: gint);
    pub fn g_file_monitor_emit_event(monitor: *mut GFileMonitor,
                                     child: *mut GFile,
                                     other_file: *mut GFile,
                                     event_type: GFileMonitorEvent);
    pub fn g_filename_completer_get_type() -> GType;
    pub fn g_filename_completer_new() -> *mut GFilenameCompleter;
    pub fn g_filename_completer_get_completion_suffix(completer:
                                                          *mut GFilenameCompleter,
                                                      initial_text: *c_schar)
     -> *mut c_schar;
    pub fn g_filename_completer_get_completions(completer:
                                                    *mut GFilenameCompleter,
                                                initial_text: *c_schar) ->
     *mut *mut c_schar;
    pub fn g_filename_completer_set_dirs_only(completer:
                                                  *mut GFilenameCompleter,
                                              dirs_only: gboolean);
    pub fn g_file_output_stream_get_type() -> GType;
    pub fn g_file_output_stream_query_info(stream: *mut GFileOutputStream,
                                           attributes: *c_schar,
                                           cancellable: *mut GCancellable,
                                           error: *mut *mut GError) ->
     *mut GFileInfo;
    pub fn g_file_output_stream_query_info_async(stream:
                                                     *mut GFileOutputStream,
                                                 attributes: *c_schar,
                                                 io_priority: c_int,
                                                 cancellable:
                                                     *mut GCancellable,
                                                 callback:
                                                     GAsyncReadyCallback,
                                                 user_data: gpointer);
    pub fn g_file_output_stream_query_info_finish(stream:
                                                      *mut GFileOutputStream,
                                                  result: *mut GAsyncResult,
                                                  error: *mut *mut GError) ->
     *mut GFileInfo;
    pub fn g_file_output_stream_get_etag(stream: *mut GFileOutputStream) ->
     *mut c_schar;
    pub fn g_inet_address_get_type() -> GType;
    pub fn g_inet_address_new_from_string(string: *gchar) ->
     *mut GInetAddress;
    pub fn g_inet_address_new_from_bytes(bytes: *guint8,
                                         family: GSocketFamily) ->
     *mut GInetAddress;
    pub fn g_inet_address_new_loopback(family: GSocketFamily) ->
     *mut GInetAddress;
    pub fn g_inet_address_new_any(family: GSocketFamily) -> *mut GInetAddress;
    pub fn g_inet_address_equal(address: *mut GInetAddress,
                                other_address: *mut GInetAddress) -> gboolean;
    pub fn g_inet_address_to_string(address: *mut GInetAddress) -> *mut gchar;
    pub fn g_inet_address_to_bytes(address: *mut GInetAddress) -> *guint8;
    pub fn g_inet_address_get_native_size(address: *mut GInetAddress) ->
     gsize;
    pub fn g_inet_address_get_family(address: *mut GInetAddress) ->
     GSocketFamily;
    pub fn g_inet_address_get_is_any(address: *mut GInetAddress) -> gboolean;
    pub fn g_inet_address_get_is_loopback(address: *mut GInetAddress) ->
     gboolean;
    pub fn g_inet_address_get_is_link_local(address: *mut GInetAddress) ->
     gboolean;
    pub fn g_inet_address_get_is_site_local(address: *mut GInetAddress) ->
     gboolean;
    pub fn g_inet_address_get_is_multicast(address: *mut GInetAddress) ->
     gboolean;
    pub fn g_inet_address_get_is_mc_global(address: *mut GInetAddress) ->
     gboolean;
    pub fn g_inet_address_get_is_mc_link_local(address: *mut GInetAddress) ->
     gboolean;
    pub fn g_inet_address_get_is_mc_node_local(address: *mut GInetAddress) ->
     gboolean;
    pub fn g_inet_address_get_is_mc_org_local(address: *mut GInetAddress) ->
     gboolean;
    pub fn g_inet_address_get_is_mc_site_local(address: *mut GInetAddress) ->
     gboolean;
    pub fn g_inet_address_mask_get_type() -> GType;
    pub fn g_inet_address_mask_new(addr: *mut GInetAddress, length: guint,
                                   error: *mut *mut GError) ->
     *mut GInetAddressMask;
    pub fn g_inet_address_mask_new_from_string(mask_string: *gchar,
                                               error: *mut *mut GError) ->
     *mut GInetAddressMask;
    pub fn g_inet_address_mask_to_string(mask: *mut GInetAddressMask) ->
     *mut gchar;
    pub fn g_inet_address_mask_get_family(mask: *mut GInetAddressMask) ->
     GSocketFamily;
    pub fn g_inet_address_mask_get_address(mask: *mut GInetAddressMask) ->
     *mut GInetAddress;
    pub fn g_inet_address_mask_get_length(mask: *mut GInetAddressMask) ->
     guint;
    pub fn g_inet_address_mask_matches(mask: *mut GInetAddressMask,
                                       address: *mut GInetAddress) ->
     gboolean;
    pub fn g_inet_address_mask_equal(mask: *mut GInetAddressMask,
                                     mask2: *mut GInetAddressMask) ->
     gboolean;
    pub fn g_socket_address_get_type() -> GType;
    pub fn g_socket_address_get_family(address: *mut GSocketAddress) ->
     GSocketFamily;
    pub fn g_socket_address_new_from_native(native: gpointer, len: gsize) ->
     *mut GSocketAddress;
    pub fn g_socket_address_to_native(address: *mut GSocketAddress,
                                      dest: gpointer, destlen: gsize,
                                      error: *mut *mut GError) -> gboolean;
    pub fn g_socket_address_get_native_size(address: *mut GSocketAddress) ->
     gssize;
    pub fn g_inet_socket_address_get_type() -> GType;
    pub fn g_inet_socket_address_new(address: *mut GInetAddress,
                                     port: guint16) -> *mut GSocketAddress;
    pub fn g_inet_socket_address_get_address(address: *mut GInetSocketAddress)
     -> *mut GInetAddress;
    pub fn g_inet_socket_address_get_port(address: *mut GInetSocketAddress) ->
     guint16;
    pub fn g_inet_socket_address_get_flowinfo(address:
                                                  *mut GInetSocketAddress) ->
     guint32;
    pub fn g_inet_socket_address_get_scope_id(address:
                                                  *mut GInetSocketAddress) ->
     guint32;
    pub fn g_app_info_create_flags_get_type() -> GType;
    pub fn g_converter_flags_get_type() -> GType;
    pub fn g_converter_result_get_type() -> GType;
    pub fn g_data_stream_byte_order_get_type() -> GType;
    pub fn g_data_stream_newline_type_get_type() -> GType;
    pub fn g_file_attribute_type_get_type() -> GType;
    pub fn g_file_attribute_info_flags_get_type() -> GType;
    pub fn g_file_attribute_status_get_type() -> GType;
    pub fn g_file_query_info_flags_get_type() -> GType;
    pub fn g_file_create_flags_get_type() -> GType;
    pub fn g_file_measure_flags_get_type() -> GType;
    pub fn g_mount_mount_flags_get_type() -> GType;
    pub fn g_mount_unmount_flags_get_type() -> GType;
    pub fn g_drive_start_flags_get_type() -> GType;
    pub fn g_drive_start_stop_type_get_type() -> GType;
    pub fn g_file_copy_flags_get_type() -> GType;
    pub fn g_file_monitor_flags_get_type() -> GType;
    pub fn g_file_type_get_type() -> GType;
    pub fn g_filesystem_preview_type_get_type() -> GType;
    pub fn g_file_monitor_event_get_type() -> GType;
    pub fn g_io_error_enum_get_type() -> GType;
    pub fn g_ask_password_flags_get_type() -> GType;
    pub fn g_password_save_get_type() -> GType;
    pub fn g_mount_operation_result_get_type() -> GType;
    pub fn g_output_stream_splice_flags_get_type() -> GType;
    pub fn g_io_stream_splice_flags_get_type() -> GType;
    pub fn g_emblem_origin_get_type() -> GType;
    pub fn g_resolver_error_get_type() -> GType;
    pub fn g_resolver_record_type_get_type() -> GType;
    pub fn g_resource_error_get_type() -> GType;
    pub fn g_resource_flags_get_type() -> GType;
    pub fn g_resource_lookup_flags_get_type() -> GType;
    pub fn g_socket_family_get_type() -> GType;
    pub fn g_socket_type_get_type() -> GType;
    pub fn g_socket_msg_flags_get_type() -> GType;
    pub fn g_socket_protocol_get_type() -> GType;
    pub fn g_zlib_compressor_format_get_type() -> GType;
    pub fn g_unix_socket_address_type_get_type() -> GType;
    pub fn g_bus_type_get_type() -> GType;
    pub fn g_bus_name_owner_flags_get_type() -> GType;
    pub fn g_bus_name_watcher_flags_get_type() -> GType;
    pub fn g_dbus_proxy_flags_get_type() -> GType;
    pub fn g_dbus_error_get_type() -> GType;
    pub fn g_dbus_connection_flags_get_type() -> GType;
    pub fn g_dbus_capability_flags_get_type() -> GType;
    pub fn g_dbus_call_flags_get_type() -> GType;
    pub fn g_dbus_message_type_get_type() -> GType;
    pub fn g_dbus_message_flags_get_type() -> GType;
    pub fn g_dbus_message_header_field_get_type() -> GType;
    pub fn g_dbus_property_info_flags_get_type() -> GType;
    pub fn g_dbus_subtree_flags_get_type() -> GType;
    pub fn g_dbus_server_flags_get_type() -> GType;
    pub fn g_dbus_signal_flags_get_type() -> GType;
    pub fn g_dbus_send_message_flags_get_type() -> GType;
    pub fn g_credentials_type_get_type() -> GType;
    pub fn g_dbus_message_byte_order_get_type() -> GType;
    pub fn g_application_flags_get_type() -> GType;
    pub fn g_tls_error_get_type() -> GType;
    pub fn g_tls_certificate_flags_get_type() -> GType;
    pub fn g_tls_authentication_mode_get_type() -> GType;
    pub fn g_tls_rehandshake_mode_get_type() -> GType;
    pub fn g_tls_password_flags_get_type() -> GType;
    pub fn g_tls_interaction_result_get_type() -> GType;
    pub fn g_dbus_interface_skeleton_flags_get_type() -> GType;
    pub fn g_dbus_object_manager_client_flags_get_type() -> GType;
    pub fn g_tls_database_verify_flags_get_type() -> GType;
    pub fn g_tls_database_lookup_flags_get_type() -> GType;
    pub fn g_io_module_scope_flags_get_type() -> GType;
    pub fn g_socket_client_event_get_type() -> GType;
    pub fn g_test_dbus_flags_get_type() -> GType;
    pub fn g_settings_bind_flags_get_type() -> GType;
    pub fn g_module_supported() -> gboolean;
    pub fn g_module_open(file_name: *gchar, flags: GModuleFlags) ->
     *mut GModule;
    pub fn g_module_close(module: *mut GModule) -> gboolean;
    pub fn g_module_make_resident(module: *mut GModule);
    pub fn g_module_error() -> *gchar;
    pub fn g_module_symbol(module: *mut GModule, symbol_name: *gchar,
                           symbol: *mut gpointer) -> gboolean;
    pub fn g_module_name(module: *mut GModule) -> *gchar;
    pub fn g_module_build_path(directory: *gchar, module_name: *gchar) ->
     *mut gchar;
    pub fn g_io_module_scope_new(flags: GIOModuleScopeFlags) ->
     *mut GIOModuleScope;
    pub fn g_io_module_scope_free(scope: *mut GIOModuleScope);
    pub fn g_io_module_scope_block(scope: *mut GIOModuleScope,
                                   basename: *gchar);
    pub fn g_io_module_get_type() -> GType;
    pub fn g_io_module_new(filename: *gchar) -> *mut GIOModule;
    pub fn g_io_modules_scan_all_in_directory(dirname: *c_schar);
    pub fn g_io_modules_load_all_in_directory(dirname: *gchar) -> *mut GList;
    pub fn g_io_modules_scan_all_in_directory_with_scope(dirname: *gchar,
                                                         scope:
                                                             *mut GIOModuleScope);
    pub fn g_io_modules_load_all_in_directory_with_scope(dirname: *gchar,
                                                         scope:
                                                             *mut GIOModuleScope)
     -> *mut GList;
    pub fn g_io_extension_point_register(name: *c_schar) ->
     *mut GIOExtensionPoint;
    pub fn g_io_extension_point_lookup(name: *c_schar) ->
     *mut GIOExtensionPoint;
    pub fn g_io_extension_point_set_required_type(extension_point:
                                                      *mut GIOExtensionPoint,
                                                  _type: GType);
    pub fn g_io_extension_point_get_required_type(extension_point:
                                                      *mut GIOExtensionPoint)
     -> GType;
    pub fn g_io_extension_point_get_extensions(extension_point:
                                                   *mut GIOExtensionPoint) ->
     *mut GList;
    pub fn g_io_extension_point_get_extension_by_name(extension_point:
                                                          *mut GIOExtensionPoint,
                                                      name: *c_schar) ->
     *mut GIOExtension;
    pub fn g_io_extension_point_implement(extension_point_name: *c_schar,
                                          _type: GType,
                                          extension_name: *c_schar,
                                          priority: gint) ->
     *mut GIOExtension;
    pub fn g_io_extension_get_type(extension: *mut GIOExtension) -> GType;
    pub fn g_io_extension_get_name(extension: *mut GIOExtension) -> *c_schar;
    pub fn g_io_extension_get_priority(extension: *mut GIOExtension) -> gint;
    pub fn g_io_extension_ref_class(extension: *mut GIOExtension) ->
     *mut GTypeClass;
    pub fn g_io_module_load(module: *mut GIOModule);
    pub fn g_io_module_unload(module: *mut GIOModule);
    pub fn g_io_module_query() -> *mut *mut c_schar;
    pub fn g_io_scheduler_push_job(job_func: GIOSchedulerJobFunc,
                                   user_data: gpointer,
                                   notify: GDestroyNotify, io_priority: gint,
                                   cancellable: *mut GCancellable);
    pub fn g_io_scheduler_cancel_all_jobs();
    pub fn g_io_scheduler_job_send_to_mainloop(job: *mut GIOSchedulerJob,
                                               func: GSourceFunc,
                                               user_data: gpointer,
                                               notify: GDestroyNotify) ->
     gboolean;
    pub fn g_io_scheduler_job_send_to_mainloop_async(job:
                                                         *mut GIOSchedulerJob,
                                                     func: GSourceFunc,
                                                     user_data: gpointer,
                                                     notify: GDestroyNotify);
    pub fn g_loadable_icon_get_type() -> GType;
    pub fn g_loadable_icon_load(icon: *mut GLoadableIcon, size: c_int,
                                _type: *mut *mut c_schar,
                                cancellable: *mut GCancellable,
                                error: *mut *mut GError) -> *mut GInputStream;
    pub fn g_loadable_icon_load_async(icon: *mut GLoadableIcon, size: c_int,
                                      cancellable: *mut GCancellable,
                                      callback: GAsyncReadyCallback,
                                      user_data: gpointer);
    pub fn g_loadable_icon_load_finish(icon: *mut GLoadableIcon,
                                       res: *mut GAsyncResult,
                                       _type: *mut *mut c_schar,
                                       error: *mut *mut GError) ->
     *mut GInputStream;
    pub fn g_memory_input_stream_get_type() -> GType;
    pub fn g_memory_input_stream_new() -> *mut GInputStream;
    pub fn g_memory_input_stream_new_from_data(data: *c_void, len: gssize,
                                               destroy: GDestroyNotify) ->
     *mut GInputStream;
    pub fn g_memory_input_stream_new_from_bytes(bytes: *mut GBytes) ->
     *mut GInputStream;
    pub fn g_memory_input_stream_add_data(stream: *mut GMemoryInputStream,
                                          data: *c_void, len: gssize,
                                          destroy: GDestroyNotify);
    pub fn g_memory_input_stream_add_bytes(stream: *mut GMemoryInputStream,
                                           bytes: *mut GBytes);
    pub fn g_memory_output_stream_get_type() -> GType;
    pub fn g_memory_output_stream_new(data: gpointer, size: gsize,
                                      realloc_function: GReallocFunc,
                                      destroy_function: GDestroyNotify) ->
     *mut GOutputStream;
    pub fn g_memory_output_stream_new_resizable() -> *mut GOutputStream;
    pub fn g_memory_output_stream_get_data(ostream: *mut GMemoryOutputStream)
     -> gpointer;
    pub fn g_memory_output_stream_get_size(ostream: *mut GMemoryOutputStream)
     -> gsize;
    pub fn g_memory_output_stream_get_data_size(ostream:
                                                    *mut GMemoryOutputStream)
     -> gsize;
    pub fn g_memory_output_stream_steal_data(ostream:
                                                 *mut GMemoryOutputStream) ->
     gpointer;
    pub fn g_memory_output_stream_steal_as_bytes(ostream:
                                                     *mut GMemoryOutputStream)
     -> *mut GBytes;
    pub fn g_mount_get_type() -> GType;
    pub fn g_mount_get_root(mount: *mut GMount) -> *mut GFile;
    pub fn g_mount_get_default_location(mount: *mut GMount) -> *mut GFile;
    pub fn g_mount_get_name(mount: *mut GMount) -> *mut c_schar;
    pub fn g_mount_get_icon(mount: *mut GMount) -> *mut GIcon;
    pub fn g_mount_get_symbolic_icon(mount: *mut GMount) -> *mut GIcon;
    pub fn g_mount_get_uuid(mount: *mut GMount) -> *mut c_schar;
    pub fn g_mount_get_volume(mount: *mut GMount) -> *mut GVolume;
    pub fn g_mount_get_drive(mount: *mut GMount) -> *mut GDrive;
    pub fn g_mount_can_unmount(mount: *mut GMount) -> gboolean;
    pub fn g_mount_can_eject(mount: *mut GMount) -> gboolean;
    pub fn g_mount_unmount(mount: *mut GMount, flags: GMountUnmountFlags,
                           cancellable: *mut GCancellable,
                           callback: GAsyncReadyCallback,
                           user_data: gpointer);
    pub fn g_mount_unmount_finish(mount: *mut GMount,
                                  result: *mut GAsyncResult,
                                  error: *mut *mut GError) -> gboolean;
    pub fn g_mount_eject(mount: *mut GMount, flags: GMountUnmountFlags,
                         cancellable: *mut GCancellable,
                         callback: GAsyncReadyCallback, user_data: gpointer);
    pub fn g_mount_eject_finish(mount: *mut GMount, result: *mut GAsyncResult,
                                error: *mut *mut GError) -> gboolean;
    pub fn g_mount_remount(mount: *mut GMount, flags: GMountMountFlags,
                           mount_operation: *mut GMountOperation,
                           cancellable: *mut GCancellable,
                           callback: GAsyncReadyCallback,
                           user_data: gpointer);
    pub fn g_mount_remount_finish(mount: *mut GMount,
                                  result: *mut GAsyncResult,
                                  error: *mut *mut GError) -> gboolean;
    pub fn g_mount_guess_content_type(mount: *mut GMount,
                                      force_rescan: gboolean,
                                      cancellable: *mut GCancellable,
                                      callback: GAsyncReadyCallback,
                                      user_data: gpointer);
    pub fn g_mount_guess_content_type_finish(mount: *mut GMount,
                                             result: *mut GAsyncResult,
                                             error: *mut *mut GError) ->
     *mut *mut gchar;
    pub fn g_mount_guess_content_type_sync(mount: *mut GMount,
                                           force_rescan: gboolean,
                                           cancellable: *mut GCancellable,
                                           error: *mut *mut GError) ->
     *mut *mut gchar;
    pub fn g_mount_is_shadowed(mount: *mut GMount) -> gboolean;
    pub fn g_mount_shadow(mount: *mut GMount);
    pub fn g_mount_unshadow(mount: *mut GMount);
    pub fn g_mount_unmount_with_operation(mount: *mut GMount,
                                          flags: GMountUnmountFlags,
                                          mount_operation:
                                              *mut GMountOperation,
                                          cancellable: *mut GCancellable,
                                          callback: GAsyncReadyCallback,
                                          user_data: gpointer);
    pub fn g_mount_unmount_with_operation_finish(mount: *mut GMount,
                                                 result: *mut GAsyncResult,
                                                 error: *mut *mut GError) ->
     gboolean;
    pub fn g_mount_eject_with_operation(mount: *mut GMount,
                                        flags: GMountUnmountFlags,
                                        mount_operation: *mut GMountOperation,
                                        cancellable: *mut GCancellable,
                                        callback: GAsyncReadyCallback,
                                        user_data: gpointer);
    pub fn g_mount_eject_with_operation_finish(mount: *mut GMount,
                                               result: *mut GAsyncResult,
                                               error: *mut *mut GError) ->
     gboolean;
    pub fn g_mount_get_sort_key(mount: *mut GMount) -> *gchar;
    pub fn g_mount_operation_get_type() -> GType;
    pub fn g_mount_operation_new() -> *mut GMountOperation;
    pub fn g_mount_operation_get_username(op: *mut GMountOperation) ->
     *c_schar;
    pub fn g_mount_operation_set_username(op: *mut GMountOperation,
                                          username: *c_schar);
    pub fn g_mount_operation_get_password(op: *mut GMountOperation) ->
     *c_schar;
    pub fn g_mount_operation_set_password(op: *mut GMountOperation,
                                          password: *c_schar);
    pub fn g_mount_operation_get_anonymous(op: *mut GMountOperation) ->
     gboolean;
    pub fn g_mount_operation_set_anonymous(op: *mut GMountOperation,
                                           anonymous: gboolean);
    pub fn g_mount_operation_get_domain(op: *mut GMountOperation) -> *c_schar;
    pub fn g_mount_operation_set_domain(op: *mut GMountOperation,
                                        domain: *c_schar);
    pub fn g_mount_operation_get_password_save(op: *mut GMountOperation) ->
     GPasswordSave;
    pub fn g_mount_operation_set_password_save(op: *mut GMountOperation,
                                               save: GPasswordSave);
    pub fn g_mount_operation_get_choice(op: *mut GMountOperation) -> c_int;
    pub fn g_mount_operation_set_choice(op: *mut GMountOperation,
                                        choice: c_int);
    pub fn g_mount_operation_reply(op: *mut GMountOperation,
                                   result: GMountOperationResult);
    pub fn g_volume_monitor_get_type() -> GType;
    pub fn g_volume_monitor_get() -> *mut GVolumeMonitor;
    pub fn g_volume_monitor_get_connected_drives(volume_monitor:
                                                     *mut GVolumeMonitor) ->
     *mut GList;
    pub fn g_volume_monitor_get_volumes(volume_monitor: *mut GVolumeMonitor)
     -> *mut GList;
    pub fn g_volume_monitor_get_mounts(volume_monitor: *mut GVolumeMonitor) ->
     *mut GList;
    pub fn g_volume_monitor_get_volume_for_uuid(volume_monitor:
                                                    *mut GVolumeMonitor,
                                                uuid: *c_schar) ->
     *mut GVolume;
    pub fn g_volume_monitor_get_mount_for_uuid(volume_monitor:
                                                   *mut GVolumeMonitor,
                                               uuid: *c_schar) -> *mut GMount;
    pub fn g_volume_monitor_adopt_orphan_mount(mount: *mut GMount) ->
     *mut GVolume;
    pub fn g_native_volume_monitor_get_type() -> GType;
    pub fn g_network_address_get_type() -> GType;
    pub fn g_network_address_new(hostname: *gchar, port: guint16) ->
     *mut GSocketConnectable;
    pub fn g_network_address_parse(host_and_port: *gchar,
                                   default_port: guint16,
                                   error: *mut *mut GError) ->
     *mut GSocketConnectable;
    pub fn g_network_address_parse_uri(uri: *gchar, default_port: guint16,
                                       error: *mut *mut GError) ->
     *mut GSocketConnectable;
    pub fn g_network_address_get_hostname(addr: *mut GNetworkAddress) ->
     *gchar;
    pub fn g_network_address_get_port(addr: *mut GNetworkAddress) -> guint16;
    pub fn g_network_address_get_scheme(addr: *mut GNetworkAddress) -> *gchar;
    pub fn g_network_monitor_get_type() -> GType;
    pub fn g_network_monitor_get_default() -> *mut GNetworkMonitor;
    pub fn g_network_monitor_get_network_available(monitor:
                                                       *mut GNetworkMonitor)
     -> gboolean;
    pub fn g_network_monitor_can_reach(monitor: *mut GNetworkMonitor,
                                       connectable: *mut GSocketConnectable,
                                       cancellable: *mut GCancellable,
                                       error: *mut *mut GError) -> gboolean;
    pub fn g_network_monitor_can_reach_async(monitor: *mut GNetworkMonitor,
                                             connectable:
                                                 *mut GSocketConnectable,
                                             cancellable: *mut GCancellable,
                                             callback: GAsyncReadyCallback,
                                             user_data: gpointer);
    pub fn g_network_monitor_can_reach_finish(monitor: *mut GNetworkMonitor,
                                              result: *mut GAsyncResult,
                                              error: *mut *mut GError) ->
     gboolean;
    pub fn g_network_service_get_type() -> GType;
    pub fn g_network_service_new(service: *gchar, protocol: *gchar,
                                 domain: *gchar) -> *mut GSocketConnectable;
    pub fn g_network_service_get_service(srv: *mut GNetworkService) -> *gchar;
    pub fn g_network_service_get_protocol(srv: *mut GNetworkService) ->
     *gchar;
    pub fn g_network_service_get_domain(srv: *mut GNetworkService) -> *gchar;
    pub fn g_network_service_get_scheme(srv: *mut GNetworkService) -> *gchar;
    pub fn g_network_service_set_scheme(srv: *mut GNetworkService,
                                        scheme: *gchar);
    pub fn g_permission_get_type() -> GType;
    pub fn g_permission_acquire(permission: *mut GPermission,
                                cancellable: *mut GCancellable,
                                error: *mut *mut GError) -> gboolean;
    pub fn g_permission_acquire_async(permission: *mut GPermission,
                                      cancellable: *mut GCancellable,
                                      callback: GAsyncReadyCallback,
                                      user_data: gpointer);
    pub fn g_permission_acquire_finish(permission: *mut GPermission,
                                       result: *mut GAsyncResult,
                                       error: *mut *mut GError) -> gboolean;
    pub fn g_permission_release(permission: *mut GPermission,
                                cancellable: *mut GCancellable,
                                error: *mut *mut GError) -> gboolean;
    pub fn g_permission_release_async(permission: *mut GPermission,
                                      cancellable: *mut GCancellable,
                                      callback: GAsyncReadyCallback,
                                      user_data: gpointer);
    pub fn g_permission_release_finish(permission: *mut GPermission,
                                       result: *mut GAsyncResult,
                                       error: *mut *mut GError) -> gboolean;
    pub fn g_permission_get_allowed(permission: *mut GPermission) -> gboolean;
    pub fn g_permission_get_can_acquire(permission: *mut GPermission) ->
     gboolean;
    pub fn g_permission_get_can_release(permission: *mut GPermission) ->
     gboolean;
    pub fn g_permission_impl_update(permission: *mut GPermission,
                                    allowed: gboolean, can_acquire: gboolean,
                                    can_release: gboolean);
    pub fn g_pollable_input_stream_get_type() -> GType;
    pub fn g_pollable_input_stream_can_poll(stream: *mut GPollableInputStream)
     -> gboolean;
    pub fn g_pollable_input_stream_is_readable(stream:
                                                   *mut GPollableInputStream)
     -> gboolean;
    pub fn g_pollable_input_stream_create_source(stream:
                                                     *mut GPollableInputStream,
                                                 cancellable:
                                                     *mut GCancellable) ->
     *mut GSource;
    pub fn g_pollable_input_stream_read_nonblocking(stream:
                                                        *mut GPollableInputStream,
                                                    buffer: *mut c_void,
                                                    count: gsize,
                                                    cancellable:
                                                        *mut GCancellable,
                                                    error: *mut *mut GError)
     -> gssize;
    pub fn g_pollable_output_stream_get_type() -> GType;
    pub fn g_pollable_output_stream_can_poll(stream:
                                                 *mut GPollableOutputStream)
     -> gboolean;
    pub fn g_pollable_output_stream_is_writable(stream:
                                                    *mut GPollableOutputStream)
     -> gboolean;
    pub fn g_pollable_output_stream_create_source(stream:
                                                      *mut GPollableOutputStream,
                                                  cancellable:
                                                      *mut GCancellable) ->
     *mut GSource;
    pub fn g_pollable_output_stream_write_nonblocking(stream:
                                                          *mut GPollableOutputStream,
                                                      buffer: *c_void,
                                                      count: gsize,
                                                      cancellable:
                                                          *mut GCancellable,
                                                      error: *mut *mut GError)
     -> gssize;
    pub fn g_pollable_source_new(pollable_stream: *mut GObject) ->
     *mut GSource;
    pub fn g_pollable_source_new_full(pollable_stream: gpointer,
                                      child_source: *mut GSource,
                                      cancellable: *mut GCancellable) ->
     *mut GSource;
    pub fn g_pollable_stream_read(stream: *mut GInputStream,
                                  buffer: *mut c_void, count: gsize,
                                  blocking: gboolean,
                                  cancellable: *mut GCancellable,
                                  error: *mut *mut GError) -> gssize;
    pub fn g_pollable_stream_write(stream: *mut GOutputStream,
                                   buffer: *c_void, count: gsize,
                                   blocking: gboolean,
                                   cancellable: *mut GCancellable,
                                   error: *mut *mut GError) -> gssize;
    pub fn g_pollable_stream_write_all(stream: *mut GOutputStream,
                                       buffer: *c_void, count: gsize,
                                       blocking: gboolean,
                                       bytes_written: *mut gsize,
                                       cancellable: *mut GCancellable,
                                       error: *mut *mut GError) -> gboolean;
    pub fn g_property_action_get_type() -> GType;
    pub fn g_property_action_new(name: *gchar, object: gpointer,
                                 property_name: *gchar) ->
     *mut GPropertyAction;
    pub fn g_proxy_get_type() -> GType;
    pub fn g_proxy_get_default_for_protocol(protocol: *gchar) -> *mut GProxy;
    pub fn g_proxy_connect(proxy: *mut GProxy, connection: *mut GIOStream,
                           proxy_address: *mut GProxyAddress,
                           cancellable: *mut GCancellable,
                           error: *mut *mut GError) -> *mut GIOStream;
    pub fn g_proxy_connect_async(proxy: *mut GProxy,
                                 connection: *mut GIOStream,
                                 proxy_address: *mut GProxyAddress,
                                 cancellable: *mut GCancellable,
                                 callback: GAsyncReadyCallback,
                                 user_data: gpointer);
    pub fn g_proxy_connect_finish(proxy: *mut GProxy,
                                  result: *mut GAsyncResult,
                                  error: *mut *mut GError) -> *mut GIOStream;
    pub fn g_proxy_supports_hostname(proxy: *mut GProxy) -> gboolean;
    pub fn g_proxy_address_get_type() -> GType;
    pub fn g_proxy_address_new(inetaddr: *mut GInetAddress, port: guint16,
                               protocol: *gchar, dest_hostname: *gchar,
                               dest_port: guint16, username: *gchar,
                               password: *gchar) -> *mut GSocketAddress;
    pub fn g_proxy_address_get_protocol(proxy: *mut GProxyAddress) -> *gchar;
    pub fn g_proxy_address_get_destination_protocol(proxy: *mut GProxyAddress)
     -> *gchar;
    pub fn g_proxy_address_get_destination_hostname(proxy: *mut GProxyAddress)
     -> *gchar;
    pub fn g_proxy_address_get_destination_port(proxy: *mut GProxyAddress) ->
     guint16;
    pub fn g_proxy_address_get_username(proxy: *mut GProxyAddress) -> *gchar;
    pub fn g_proxy_address_get_password(proxy: *mut GProxyAddress) -> *gchar;
    pub fn g_proxy_address_get_uri(proxy: *mut GProxyAddress) -> *gchar;
    pub fn g_socket_address_enumerator_get_type() -> GType;
    pub fn g_socket_address_enumerator_next(enumerator:
                                                *mut GSocketAddressEnumerator,
                                            cancellable: *mut GCancellable,
                                            error: *mut *mut GError) ->
     *mut GSocketAddress;
    pub fn g_socket_address_enumerator_next_async(enumerator:
                                                      *mut GSocketAddressEnumerator,
                                                  cancellable:
                                                      *mut GCancellable,
                                                  callback:
                                                      GAsyncReadyCallback,
                                                  user_data: gpointer);
    pub fn g_socket_address_enumerator_next_finish(enumerator:
                                                       *mut GSocketAddressEnumerator,
                                                   result: *mut GAsyncResult,
                                                   error: *mut *mut GError) ->
     *mut GSocketAddress;
    pub fn g_proxy_address_enumerator_get_type() -> GType;
    pub fn g_proxy_resolver_get_type() -> GType;
    pub fn g_proxy_resolver_get_default() -> *mut GProxyResolver;
    pub fn g_proxy_resolver_is_supported(resolver: *mut GProxyResolver) ->
     gboolean;
    pub fn g_proxy_resolver_lookup(resolver: *mut GProxyResolver, uri: *gchar,
                                   cancellable: *mut GCancellable,
                                   error: *mut *mut GError) ->
     *mut *mut gchar;
    pub fn g_proxy_resolver_lookup_async(resolver: *mut GProxyResolver,
                                         uri: *gchar,
                                         cancellable: *mut GCancellable,
                                         callback: GAsyncReadyCallback,
                                         user_data: gpointer);
    pub fn g_proxy_resolver_lookup_finish(resolver: *mut GProxyResolver,
                                          result: *mut GAsyncResult,
                                          error: *mut *mut GError) ->
     *mut *mut gchar;
    pub fn g_resolver_get_type() -> GType;
    pub fn g_resolver_get_default() -> *mut GResolver;
    pub fn g_resolver_set_default(resolver: *mut GResolver);
    pub fn g_resolver_lookup_by_name(resolver: *mut GResolver,
                                     hostname: *gchar,
                                     cancellable: *mut GCancellable,
                                     error: *mut *mut GError) -> *mut GList;
    pub fn g_resolver_lookup_by_name_async(resolver: *mut GResolver,
                                           hostname: *gchar,
                                           cancellable: *mut GCancellable,
                                           callback: GAsyncReadyCallback,
                                           user_data: gpointer);
    pub fn g_resolver_lookup_by_name_finish(resolver: *mut GResolver,
                                            result: *mut GAsyncResult,
                                            error: *mut *mut GError) ->
     *mut GList;
    pub fn g_resolver_free_addresses(addresses: *mut GList);
    pub fn g_resolver_lookup_by_address(resolver: *mut GResolver,
                                        address: *mut GInetAddress,
                                        cancellable: *mut GCancellable,
                                        error: *mut *mut GError) ->
     *mut gchar;
    pub fn g_resolver_lookup_by_address_async(resolver: *mut GResolver,
                                              address: *mut GInetAddress,
                                              cancellable: *mut GCancellable,
                                              callback: GAsyncReadyCallback,
                                              user_data: gpointer);
    pub fn g_resolver_lookup_by_address_finish(resolver: *mut GResolver,
                                               result: *mut GAsyncResult,
                                               error: *mut *mut GError) ->
     *mut gchar;
    pub fn g_resolver_lookup_service(resolver: *mut GResolver,
                                     service: *gchar, protocol: *gchar,
                                     domain: *gchar,
                                     cancellable: *mut GCancellable,
                                     error: *mut *mut GError) -> *mut GList;
    pub fn g_resolver_lookup_service_async(resolver: *mut GResolver,
                                           service: *gchar, protocol: *gchar,
                                           domain: *gchar,
                                           cancellable: *mut GCancellable,
                                           callback: GAsyncReadyCallback,
                                           user_data: gpointer);
    pub fn g_resolver_lookup_service_finish(resolver: *mut GResolver,
                                            result: *mut GAsyncResult,
                                            error: *mut *mut GError) ->
     *mut GList;
    pub fn g_resolver_lookup_records(resolver: *mut GResolver, rrname: *gchar,
                                     record_type: GResolverRecordType,
                                     cancellable: *mut GCancellable,
                                     error: *mut *mut GError) -> *mut GList;
    pub fn g_resolver_lookup_records_async(resolver: *mut GResolver,
                                           rrname: *gchar,
                                           record_type: GResolverRecordType,
                                           cancellable: *mut GCancellable,
                                           callback: GAsyncReadyCallback,
                                           user_data: gpointer);
    pub fn g_resolver_lookup_records_finish(resolver: *mut GResolver,
                                            result: *mut GAsyncResult,
                                            error: *mut *mut GError) ->
     *mut GList;
    pub fn g_resolver_free_targets(targets: *mut GList);
    pub fn g_resolver_error_quark() -> GQuark;
    pub fn g_resource_error_quark() -> GQuark;
    pub fn g_resource_get_type() -> GType;
    pub fn g_resource_new_from_data(data: *mut GBytes,
                                    error: *mut *mut GError) ->
     *mut GResource;
    pub fn g_resource_ref(resource: *mut GResource) -> *mut GResource;
    pub fn g_resource_unref(resource: *mut GResource);
    pub fn g_resource_load(filename: *gchar, error: *mut *mut GError) ->
     *mut GResource;
    pub fn g_resource_open_stream(resource: *mut GResource, path: *c_schar,
                                  lookup_flags: GResourceLookupFlags,
                                  error: *mut *mut GError) ->
     *mut GInputStream;
    pub fn g_resource_lookup_data(resource: *mut GResource, path: *c_schar,
                                  lookup_flags: GResourceLookupFlags,
                                  error: *mut *mut GError) -> *mut GBytes;
    pub fn g_resource_enumerate_children(resource: *mut GResource,
                                         path: *c_schar,
                                         lookup_flags: GResourceLookupFlags,
                                         error: *mut *mut GError) ->
     *mut *mut c_schar;
    pub fn g_resource_get_info(resource: *mut GResource, path: *c_schar,
                               lookup_flags: GResourceLookupFlags,
                               size: *mut gsize, flags: *mut guint32,
                               error: *mut *mut GError) -> gboolean;
    pub fn g_resources_register(resource: *mut GResource);
    pub fn g_resources_unregister(resource: *mut GResource);
    pub fn g_resources_open_stream(path: *c_schar,
                                   lookup_flags: GResourceLookupFlags,
                                   error: *mut *mut GError) ->
     *mut GInputStream;
    pub fn g_resources_lookup_data(path: *c_schar,
                                   lookup_flags: GResourceLookupFlags,
                                   error: *mut *mut GError) -> *mut GBytes;
    pub fn g_resources_enumerate_children(path: *c_schar,
                                          lookup_flags: GResourceLookupFlags,
                                          error: *mut *mut GError) ->
     *mut *mut c_schar;
    pub fn g_resources_get_info(path: *c_schar,
                                lookup_flags: GResourceLookupFlags,
                                size: *mut gsize, flags: *mut guint32,
                                error: *mut *mut GError) -> gboolean;
    pub fn g_static_resource_init(static_resource: *mut GStaticResource);
    pub fn g_static_resource_fini(static_resource: *mut GStaticResource);
    pub fn g_static_resource_get_resource(static_resource:
                                              *mut GStaticResource) ->
     *mut GResource;
    pub fn g_seekable_get_type() -> GType;
    pub fn g_seekable_tell(seekable: *mut GSeekable) -> goffset;
    pub fn g_seekable_can_seek(seekable: *mut GSeekable) -> gboolean;
    pub fn g_seekable_seek(seekable: *mut GSeekable, offset: goffset,
                           _type: GSeekType, cancellable: *mut GCancellable,
                           error: *mut *mut GError) -> gboolean;
    pub fn g_seekable_can_truncate(seekable: *mut GSeekable) -> gboolean;
    pub fn g_seekable_truncate(seekable: *mut GSeekable, offset: goffset,
                               cancellable: *mut GCancellable,
                               error: *mut *mut GError) -> gboolean;
    pub fn g_settings_schema_source_get_type() -> GType;
    pub fn g_settings_schema_source_get_default() ->
     *mut GSettingsSchemaSource;
    pub fn g_settings_schema_source_ref(source: *mut GSettingsSchemaSource) ->
     *mut GSettingsSchemaSource;
    pub fn g_settings_schema_source_unref(source: *mut GSettingsSchemaSource);
    pub fn g_settings_schema_source_new_from_directory(directory: *gchar,
                                                       parent:
                                                           *mut GSettingsSchemaSource,
                                                       trusted: gboolean,
                                                       error:
                                                           *mut *mut GError)
     -> *mut GSettingsSchemaSource;
    pub fn g_settings_schema_source_lookup(source: *mut GSettingsSchemaSource,
                                           schema_id: *gchar,
                                           recursive: gboolean) ->
     *mut GSettingsSchema;
    pub fn g_settings_schema_get_type() -> GType;
    pub fn g_settings_schema_ref(schema: *mut GSettingsSchema) ->
     *mut GSettingsSchema;
    pub fn g_settings_schema_unref(schema: *mut GSettingsSchema);
    pub fn g_settings_schema_get_id(schema: *mut GSettingsSchema) -> *gchar;
    pub fn g_settings_schema_get_path(schema: *mut GSettingsSchema) -> *gchar;
    pub fn g_settings_get_type() -> GType;
    pub fn g_settings_list_schemas() -> **gchar;
    pub fn g_settings_list_relocatable_schemas() -> **gchar;
    pub fn g_settings_new(schema_id: *gchar) -> *mut GSettings;
    pub fn g_settings_new_with_path(schema_id: *gchar, path: *gchar) ->
     *mut GSettings;
    pub fn g_settings_new_with_backend(schema_id: *gchar,
                                       backend: *mut GSettingsBackend) ->
     *mut GSettings;
    pub fn g_settings_new_with_backend_and_path(schema_id: *gchar,
                                                backend:
                                                    *mut GSettingsBackend,
                                                path: *gchar) ->
     *mut GSettings;
    pub fn g_settings_new_full(schema: *mut GSettingsSchema,
                               backend: *mut GSettingsBackend, path: *gchar)
     -> *mut GSettings;
    pub fn g_settings_list_children(settings: *mut GSettings) ->
     *mut *mut gchar;
    pub fn g_settings_list_keys(settings: *mut GSettings) -> *mut *mut gchar;
    pub fn g_settings_get_range(settings: *mut GSettings, key: *gchar) ->
     *mut GVariant;
    pub fn g_settings_range_check(settings: *mut GSettings, key: *gchar,
                                  value: *mut GVariant) -> gboolean;
    pub fn g_settings_set_value(settings: *mut GSettings, key: *gchar,
                                value: *mut GVariant) -> gboolean;
    pub fn g_settings_get_value(settings: *mut GSettings, key: *gchar) ->
     *mut GVariant;
    pub fn g_settings_set(settings: *mut GSettings, key: *gchar,
                          format: *gchar, ...) -> gboolean;
    pub fn g_settings_get(settings: *mut GSettings, key: *gchar,
                          format: *gchar, ...);
    pub fn g_settings_reset(settings: *mut GSettings, key: *gchar);
    pub fn g_settings_get_int(settings: *mut GSettings, key: *gchar) -> gint;
    pub fn g_settings_set_int(settings: *mut GSettings, key: *gchar,
                              value: gint) -> gboolean;
    pub fn g_settings_get_uint(settings: *mut GSettings, key: *gchar) ->
     guint;
    pub fn g_settings_set_uint(settings: *mut GSettings, key: *gchar,
                               value: guint) -> gboolean;
    pub fn g_settings_get_string(settings: *mut GSettings, key: *gchar) ->
     *mut gchar;
    pub fn g_settings_set_string(settings: *mut GSettings, key: *gchar,
                                 value: *gchar) -> gboolean;
    pub fn g_settings_get_boolean(settings: *mut GSettings, key: *gchar) ->
     gboolean;
    pub fn g_settings_set_boolean(settings: *mut GSettings, key: *gchar,
                                  value: gboolean) -> gboolean;
    pub fn g_settings_get_double(settings: *mut GSettings, key: *gchar) ->
     gdouble;
    pub fn g_settings_set_double(settings: *mut GSettings, key: *gchar,
                                 value: gdouble) -> gboolean;
    pub fn g_settings_get_strv(settings: *mut GSettings, key: *gchar) ->
     *mut *mut gchar;
    pub fn g_settings_set_strv(settings: *mut GSettings, key: *gchar,
                               value: **gchar) -> gboolean;
    pub fn g_settings_get_enum(settings: *mut GSettings, key: *gchar) -> gint;
    pub fn g_settings_set_enum(settings: *mut GSettings, key: *gchar,
                               value: gint) -> gboolean;
    pub fn g_settings_get_flags(settings: *mut GSettings, key: *gchar) ->
     guint;
    pub fn g_settings_set_flags(settings: *mut GSettings, key: *gchar,
                                value: guint) -> gboolean;
    pub fn g_settings_get_child(settings: *mut GSettings, name: *gchar) ->
     *mut GSettings;
    pub fn g_settings_is_writable(settings: *mut GSettings, name: *gchar) ->
     gboolean;
    pub fn g_settings_delay(settings: *mut GSettings);
    pub fn g_settings_apply(settings: *mut GSettings);
    pub fn g_settings_revert(settings: *mut GSettings);
    pub fn g_settings_get_has_unapplied(settings: *mut GSettings) -> gboolean;
    pub fn g_settings_sync();
    pub fn g_settings_bind(settings: *mut GSettings, key: *gchar,
                           object: gpointer, property: *gchar,
                           flags: GSettingsBindFlags);
    pub fn g_settings_bind_with_mapping(settings: *mut GSettings, key: *gchar,
                                        object: gpointer, property: *gchar,
                                        flags: GSettingsBindFlags,
                                        get_mapping: GSettingsBindGetMapping,
                                        set_mapping: GSettingsBindSetMapping,
                                        user_data: gpointer,
                                        destroy: GDestroyNotify);
    pub fn g_settings_bind_writable(settings: *mut GSettings, key: *gchar,
                                    object: gpointer, property: *gchar,
                                    inverted: gboolean);
    pub fn g_settings_unbind(object: gpointer, property: *gchar);
    pub fn g_settings_create_action(settings: *mut GSettings, key: *gchar) ->
     *mut GAction;
    pub fn g_settings_get_mapped(settings: *mut GSettings, key: *gchar,
                                 mapping: GSettingsGetMapping,
                                 user_data: gpointer) -> gpointer;
    pub fn g_simple_action_get_type() -> GType;
    pub fn g_simple_action_new(name: *gchar, parameter_type: *GVariantType) ->
     *mut GSimpleAction;
    pub fn g_simple_action_new_stateful(name: *gchar,
                                        parameter_type: *GVariantType,
                                        state: *mut GVariant) ->
     *mut GSimpleAction;
    pub fn g_simple_action_set_enabled(simple: *mut GSimpleAction,
                                       enabled: gboolean);
    pub fn g_simple_action_set_state(simple: *mut GSimpleAction,
                                     value: *mut GVariant);
    pub fn g_simple_action_group_get_type() -> GType;
    pub fn g_simple_action_group_new() -> *mut GSimpleActionGroup;
    pub fn g_simple_action_group_lookup(simple: *mut GSimpleActionGroup,
                                        action_name: *gchar) -> *mut GAction;
    pub fn g_simple_action_group_insert(simple: *mut GSimpleActionGroup,
                                        action: *mut GAction);
    pub fn g_simple_action_group_remove(simple: *mut GSimpleActionGroup,
                                        action_name: *gchar);
    pub fn g_simple_action_group_add_entries(simple: *mut GSimpleActionGroup,
                                             entries: *GActionEntry,
                                             n_entries: gint,
                                             user_data: gpointer);
    pub fn g_simple_async_result_get_type() -> GType;
    pub fn g_simple_async_result_new(source_object: *mut GObject,
                                     callback: GAsyncReadyCallback,
                                     user_data: gpointer,
                                     source_tag: gpointer) ->
     *mut GSimpleAsyncResult;
    pub fn g_simple_async_result_new_error(source_object: *mut GObject,
                                           callback: GAsyncReadyCallback,
                                           user_data: gpointer,
                                           domain: GQuark, code: gint,
                                           format: *c_schar, ...) ->
     *mut GSimpleAsyncResult;
    pub fn g_simple_async_result_new_from_error(source_object: *mut GObject,
                                                callback: GAsyncReadyCallback,
                                                user_data: gpointer,
                                                error: *GError) ->
     *mut GSimpleAsyncResult;
    pub fn g_simple_async_result_new_take_error(source_object: *mut GObject,
                                                callback: GAsyncReadyCallback,
                                                user_data: gpointer,
                                                error: *mut GError) ->
     *mut GSimpleAsyncResult;
    pub fn g_simple_async_result_set_op_res_gpointer(simple:
                                                         *mut GSimpleAsyncResult,
                                                     op_res: gpointer,
                                                     destroy_op_res:
                                                         GDestroyNotify);
    pub fn g_simple_async_result_get_op_res_gpointer(simple:
                                                         *mut GSimpleAsyncResult)
     -> gpointer;
    pub fn g_simple_async_result_set_op_res_gssize(simple:
                                                       *mut GSimpleAsyncResult,
                                                   op_res: gssize);
    pub fn g_simple_async_result_get_op_res_gssize(simple:
                                                       *mut GSimpleAsyncResult)
     -> gssize;
    pub fn g_simple_async_result_set_op_res_gboolean(simple:
                                                         *mut GSimpleAsyncResult,
                                                     op_res: gboolean);
    pub fn g_simple_async_result_get_op_res_gboolean(simple:
                                                         *mut GSimpleAsyncResult)
     -> gboolean;
    pub fn g_simple_async_result_set_check_cancellable(simple:
                                                           *mut GSimpleAsyncResult,
                                                       check_cancellable:
                                                           *mut GCancellable);
    pub fn g_simple_async_result_get_source_tag(simple:
                                                    *mut GSimpleAsyncResult)
     -> gpointer;
    pub fn g_simple_async_result_set_handle_cancellation(simple:
                                                             *mut GSimpleAsyncResult,
                                                         handle_cancellation:
                                                             gboolean);
    pub fn g_simple_async_result_complete(simple: *mut GSimpleAsyncResult);
    pub fn g_simple_async_result_complete_in_idle(simple:
                                                      *mut GSimpleAsyncResult);
    pub fn g_simple_async_result_run_in_thread(simple:
                                                   *mut GSimpleAsyncResult,
                                               func: GSimpleAsyncThreadFunc,
                                               io_priority: c_int,
                                               cancellable:
                                                   *mut GCancellable);
    pub fn g_simple_async_result_set_from_error(simple:
                                                    *mut GSimpleAsyncResult,
                                                error: *GError);
    pub fn g_simple_async_result_take_error(simple: *mut GSimpleAsyncResult,
                                            error: *mut GError);
    pub fn g_simple_async_result_propagate_error(simple:
                                                     *mut GSimpleAsyncResult,
                                                 dest: *mut *mut GError) ->
     gboolean;
    pub fn g_simple_async_result_set_error(simple: *mut GSimpleAsyncResult,
                                           domain: GQuark, code: gint,
                                           format: *c_schar, ...);
    pub fn g_simple_async_result_set_error_va(simple: *mut GSimpleAsyncResult,
                                              domain: GQuark, code: gint,
                                              format: *c_schar,
                                              args: va_list);
    pub fn g_simple_async_result_is_valid(result: *mut GAsyncResult,
                                          source: *mut GObject,
                                          source_tag: gpointer) -> gboolean;
    pub fn g_simple_async_report_error_in_idle(object: *mut GObject,
                                               callback: GAsyncReadyCallback,
                                               user_data: gpointer,
                                               domain: GQuark, code: gint,
                                               format: *c_schar, ...);
    pub fn g_simple_async_report_gerror_in_idle(object: *mut GObject,
                                                callback: GAsyncReadyCallback,
                                                user_data: gpointer,
                                                error: *GError);
    pub fn g_simple_async_report_take_gerror_in_idle(object: *mut GObject,
                                                     callback:
                                                         GAsyncReadyCallback,
                                                     user_data: gpointer,
                                                     error: *mut GError);
    pub fn g_simple_permission_get_type() -> GType;
    pub fn g_simple_permission_new(allowed: gboolean) -> *mut GPermission;
    pub fn g_socket_client_get_type() -> GType;
    pub fn g_socket_client_new() -> *mut GSocketClient;
    pub fn g_socket_client_get_family(client: *mut GSocketClient) ->
     GSocketFamily;
    pub fn g_socket_client_set_family(client: *mut GSocketClient,
                                      family: GSocketFamily);
    pub fn g_socket_client_get_socket_type(client: *mut GSocketClient) ->
     GSocketType;
    pub fn g_socket_client_set_socket_type(client: *mut GSocketClient,
                                           _type: GSocketType);
    pub fn g_socket_client_get_protocol(client: *mut GSocketClient) ->
     GSocketProtocol;
    pub fn g_socket_client_set_protocol(client: *mut GSocketClient,
                                        protocol: GSocketProtocol);
    pub fn g_socket_client_get_local_address(client: *mut GSocketClient) ->
     *mut GSocketAddress;
    pub fn g_socket_client_set_local_address(client: *mut GSocketClient,
                                             address: *mut GSocketAddress);
    pub fn g_socket_client_get_timeout(client: *mut GSocketClient) -> guint;
    pub fn g_socket_client_set_timeout(client: *mut GSocketClient,
                                       timeout: guint);
    pub fn g_socket_client_get_enable_proxy(client: *mut GSocketClient) ->
     gboolean;
    pub fn g_socket_client_set_enable_proxy(client: *mut GSocketClient,
                                            enable: gboolean);
    pub fn g_socket_client_get_tls(client: *mut GSocketClient) -> gboolean;
    pub fn g_socket_client_set_tls(client: *mut GSocketClient, tls: gboolean);
    pub fn g_socket_client_get_tls_validation_flags(client:
                                                        *mut GSocketClient) ->
     GTlsCertificateFlags;
    pub fn g_socket_client_set_tls_validation_flags(client:
                                                        *mut GSocketClient,
                                                    flags:
                                                        GTlsCertificateFlags);
    pub fn g_socket_client_get_proxy_resolver(client: *mut GSocketClient) ->
     *mut GProxyResolver;
    pub fn g_socket_client_set_proxy_resolver(client: *mut GSocketClient,
                                              proxy_resolver:
                                                  *mut GProxyResolver);
    pub fn g_socket_client_connect(client: *mut GSocketClient,
                                   connectable: *mut GSocketConnectable,
                                   cancellable: *mut GCancellable,
                                   error: *mut *mut GError) ->
     *mut GSocketConnection;
    pub fn g_socket_client_connect_to_host(client: *mut GSocketClient,
                                           host_and_port: *gchar,
                                           default_port: guint16,
                                           cancellable: *mut GCancellable,
                                           error: *mut *mut GError) ->
     *mut GSocketConnection;
    pub fn g_socket_client_connect_to_service(client: *mut GSocketClient,
                                              domain: *gchar, service: *gchar,
                                              cancellable: *mut GCancellable,
                                              error: *mut *mut GError) ->
     *mut GSocketConnection;
    pub fn g_socket_client_connect_to_uri(client: *mut GSocketClient,
                                          uri: *gchar, default_port: guint16,
                                          cancellable: *mut GCancellable,
                                          error: *mut *mut GError) ->
     *mut GSocketConnection;
    pub fn g_socket_client_connect_async(client: *mut GSocketClient,
                                         connectable: *mut GSocketConnectable,
                                         cancellable: *mut GCancellable,
                                         callback: GAsyncReadyCallback,
                                         user_data: gpointer);
    pub fn g_socket_client_connect_finish(client: *mut GSocketClient,
                                          result: *mut GAsyncResult,
                                          error: *mut *mut GError) ->
     *mut GSocketConnection;
    pub fn g_socket_client_connect_to_host_async(client: *mut GSocketClient,
                                                 host_and_port: *gchar,
                                                 default_port: guint16,
                                                 cancellable:
                                                     *mut GCancellable,
                                                 callback:
                                                     GAsyncReadyCallback,
                                                 user_data: gpointer);
    pub fn g_socket_client_connect_to_host_finish(client: *mut GSocketClient,
                                                  result: *mut GAsyncResult,
                                                  error: *mut *mut GError) ->
     *mut GSocketConnection;
    pub fn g_socket_client_connect_to_service_async(client:
                                                        *mut GSocketClient,
                                                    domain: *gchar,
                                                    service: *gchar,
                                                    cancellable:
                                                        *mut GCancellable,
                                                    callback:
                                                        GAsyncReadyCallback,
                                                    user_data: gpointer);
    pub fn g_socket_client_connect_to_service_finish(client:
                                                         *mut GSocketClient,
                                                     result:
                                                         *mut GAsyncResult,
                                                     error: *mut *mut GError)
     -> *mut GSocketConnection;
    pub fn g_socket_client_connect_to_uri_async(client: *mut GSocketClient,
                                                uri: *gchar,
                                                default_port: guint16,
                                                cancellable:
                                                    *mut GCancellable,
                                                callback: GAsyncReadyCallback,
                                                user_data: gpointer);
    pub fn g_socket_client_connect_to_uri_finish(client: *mut GSocketClient,
                                                 result: *mut GAsyncResult,
                                                 error: *mut *mut GError) ->
     *mut GSocketConnection;
    pub fn g_socket_client_add_application_proxy(client: *mut GSocketClient,
                                                 protocol: *gchar);
    pub fn g_socket_connectable_get_type() -> GType;
    pub fn g_socket_connectable_enumerate(connectable:
                                              *mut GSocketConnectable) ->
     *mut GSocketAddressEnumerator;
    pub fn g_socket_connectable_proxy_enumerate(connectable:
                                                    *mut GSocketConnectable)
     -> *mut GSocketAddressEnumerator;
    pub fn g_socket_get_type() -> GType;
    pub fn g_socket_new(family: GSocketFamily, _type: GSocketType,
                        protocol: GSocketProtocol, error: *mut *mut GError) ->
     *mut GSocket;
    pub fn g_socket_new_from_fd(fd: gint, error: *mut *mut GError) ->
     *mut GSocket;
    pub fn g_socket_get_fd(socket: *mut GSocket) -> c_int;
    pub fn g_socket_get_family(socket: *mut GSocket) -> GSocketFamily;
    pub fn g_socket_get_socket_type(socket: *mut GSocket) -> GSocketType;
    pub fn g_socket_get_protocol(socket: *mut GSocket) -> GSocketProtocol;
    pub fn g_socket_get_local_address(socket: *mut GSocket,
                                      error: *mut *mut GError) ->
     *mut GSocketAddress;
    pub fn g_socket_get_remote_address(socket: *mut GSocket,
                                       error: *mut *mut GError) ->
     *mut GSocketAddress;
    pub fn g_socket_set_blocking(socket: *mut GSocket, blocking: gboolean);
    pub fn g_socket_get_blocking(socket: *mut GSocket) -> gboolean;
    pub fn g_socket_set_keepalive(socket: *mut GSocket, keepalive: gboolean);
    pub fn g_socket_get_keepalive(socket: *mut GSocket) -> gboolean;
    pub fn g_socket_get_listen_backlog(socket: *mut GSocket) -> gint;
    pub fn g_socket_set_listen_backlog(socket: *mut GSocket, backlog: gint);
    pub fn g_socket_get_timeout(socket: *mut GSocket) -> guint;
    pub fn g_socket_set_timeout(socket: *mut GSocket, timeout: guint);
    pub fn g_socket_get_ttl(socket: *mut GSocket) -> guint;
    pub fn g_socket_set_ttl(socket: *mut GSocket, ttl: guint);
    pub fn g_socket_get_broadcast(socket: *mut GSocket) -> gboolean;
    pub fn g_socket_set_broadcast(socket: *mut GSocket, broadcast: gboolean);
    pub fn g_socket_get_multicast_loopback(socket: *mut GSocket) -> gboolean;
    pub fn g_socket_set_multicast_loopback(socket: *mut GSocket,
                                           loopback: gboolean);
    pub fn g_socket_get_multicast_ttl(socket: *mut GSocket) -> guint;
    pub fn g_socket_set_multicast_ttl(socket: *mut GSocket, ttl: guint);
    pub fn g_socket_is_connected(socket: *mut GSocket) -> gboolean;
    pub fn g_socket_bind(socket: *mut GSocket, address: *mut GSocketAddress,
                         allow_reuse: gboolean, error: *mut *mut GError) ->
     gboolean;
    pub fn g_socket_join_multicast_group(socket: *mut GSocket,
                                         group: *mut GInetAddress,
                                         source_specific: gboolean,
                                         iface: *gchar,
                                         error: *mut *mut GError) -> gboolean;
    pub fn g_socket_leave_multicast_group(socket: *mut GSocket,
                                          group: *mut GInetAddress,
                                          source_specific: gboolean,
                                          iface: *gchar,
                                          error: *mut *mut GError) ->
     gboolean;
    pub fn g_socket_connect(socket: *mut GSocket,
                            address: *mut GSocketAddress,
                            cancellable: *mut GCancellable,
                            error: *mut *mut GError) -> gboolean;
    pub fn g_socket_check_connect_result(socket: *mut GSocket,
                                         error: *mut *mut GError) -> gboolean;
    pub fn g_socket_get_available_bytes(socket: *mut GSocket) -> gssize;
    pub fn g_socket_condition_check(socket: *mut GSocket,
                                    condition: GIOCondition) -> GIOCondition;
    pub fn g_socket_condition_wait(socket: *mut GSocket,
                                   condition: GIOCondition,
                                   cancellable: *mut GCancellable,
                                   error: *mut *mut GError) -> gboolean;
    pub fn g_socket_condition_timed_wait(socket: *mut GSocket,
                                         condition: GIOCondition,
                                         timeout: gint64,
                                         cancellable: *mut GCancellable,
                                         error: *mut *mut GError) -> gboolean;
    pub fn g_socket_accept(socket: *mut GSocket,
                           cancellable: *mut GCancellable,
                           error: *mut *mut GError) -> *mut GSocket;
    pub fn g_socket_listen(socket: *mut GSocket, error: *mut *mut GError) ->
     gboolean;
    pub fn g_socket_receive(socket: *mut GSocket, buffer: *mut gchar,
                            size: gsize, cancellable: *mut GCancellable,
                            error: *mut *mut GError) -> gssize;
    pub fn g_socket_receive_from(socket: *mut GSocket,
                                 address: *mut *mut GSocketAddress,
                                 buffer: *mut gchar, size: gsize,
                                 cancellable: *mut GCancellable,
                                 error: *mut *mut GError) -> gssize;
    pub fn g_socket_send(socket: *mut GSocket, buffer: *gchar, size: gsize,
                         cancellable: *mut GCancellable,
                         error: *mut *mut GError) -> gssize;
    pub fn g_socket_send_to(socket: *mut GSocket,
                            address: *mut GSocketAddress, buffer: *gchar,
                            size: gsize, cancellable: *mut GCancellable,
                            error: *mut *mut GError) -> gssize;
    pub fn g_socket_receive_message(socket: *mut GSocket,
                                    address: *mut *mut GSocketAddress,
                                    vectors: *mut GInputVector,
                                    num_vectors: gint,
                                    messages:
                                        *mut *mut *mut GSocketControlMessage,
                                    num_messages: *mut gint, flags: *mut gint,
                                    cancellable: *mut GCancellable,
                                    error: *mut *mut GError) -> gssize;
    pub fn g_socket_send_message(socket: *mut GSocket,
                                 address: *mut GSocketAddress,
                                 vectors: *mut GOutputVector,
                                 num_vectors: gint,
                                 messages: *mut *mut GSocketControlMessage,
                                 num_messages: gint, flags: gint,
                                 cancellable: *mut GCancellable,
                                 error: *mut *mut GError) -> gssize;
    pub fn g_socket_close(socket: *mut GSocket, error: *mut *mut GError) ->
     gboolean;
    pub fn g_socket_shutdown(socket: *mut GSocket, shutdown_read: gboolean,
                             shutdown_write: gboolean,
                             error: *mut *mut GError) -> gboolean;
    pub fn g_socket_is_closed(socket: *mut GSocket) -> gboolean;
    pub fn g_socket_create_source(socket: *mut GSocket,
                                  condition: GIOCondition,
                                  cancellable: *mut GCancellable) ->
     *mut GSource;
    pub fn g_socket_speaks_ipv4(socket: *mut GSocket) -> gboolean;
    pub fn g_socket_get_credentials(socket: *mut GSocket,
                                    error: *mut *mut GError) ->
     *mut GCredentials;
    pub fn g_socket_receive_with_blocking(socket: *mut GSocket,
                                          buffer: *mut gchar, size: gsize,
                                          blocking: gboolean,
                                          cancellable: *mut GCancellable,
                                          error: *mut *mut GError) -> gssize;
    pub fn g_socket_send_with_blocking(socket: *mut GSocket, buffer: *gchar,
                                       size: gsize, blocking: gboolean,
                                       cancellable: *mut GCancellable,
                                       error: *mut *mut GError) -> gssize;
    pub fn g_socket_get_option(socket: *mut GSocket, level: gint,
                               optname: gint, value: *mut gint,
                               error: *mut *mut GError) -> gboolean;
    pub fn g_socket_set_option(socket: *mut GSocket, level: gint,
                               optname: gint, value: gint,
                               error: *mut *mut GError) -> gboolean;
    pub fn g_socket_connection_get_type() -> GType;
    pub fn g_socket_connection_is_connected(connection:
                                                *mut GSocketConnection) ->
     gboolean;
    pub fn g_socket_connection_connect(connection: *mut GSocketConnection,
                                       address: *mut GSocketAddress,
                                       cancellable: *mut GCancellable,
                                       error: *mut *mut GError) -> gboolean;
    pub fn g_socket_connection_connect_async(connection:
                                                 *mut GSocketConnection,
                                             address: *mut GSocketAddress,
                                             cancellable: *mut GCancellable,
                                             callback: GAsyncReadyCallback,
                                             user_data: gpointer);
    pub fn g_socket_connection_connect_finish(connection:
                                                  *mut GSocketConnection,
                                              result: *mut GAsyncResult,
                                              error: *mut *mut GError) ->
     gboolean;
    pub fn g_socket_connection_get_socket(connection: *mut GSocketConnection)
     -> *mut GSocket;
    pub fn g_socket_connection_get_local_address(connection:
                                                     *mut GSocketConnection,
                                                 error: *mut *mut GError) ->
     *mut GSocketAddress;
    pub fn g_socket_connection_get_remote_address(connection:
                                                      *mut GSocketConnection,
                                                  error: *mut *mut GError) ->
     *mut GSocketAddress;
    pub fn g_socket_connection_factory_register_type(g_type: GType,
                                                     family: GSocketFamily,
                                                     _type: GSocketType,
                                                     protocol: gint);
    pub fn g_socket_connection_factory_lookup_type(family: GSocketFamily,
                                                   _type: GSocketType,
                                                   protocol_id: gint) ->
     GType;
    pub fn g_socket_connection_factory_create_connection(socket: *mut GSocket)
     -> *mut GSocketConnection;
    pub fn g_socket_control_message_get_type() -> GType;
    pub fn g_socket_control_message_get_size(message:
                                                 *mut GSocketControlMessage)
     -> gsize;
    pub fn g_socket_control_message_get_level(message:
                                                  *mut GSocketControlMessage)
     -> c_int;
    pub fn g_socket_control_message_get_msg_type(message:
                                                     *mut GSocketControlMessage)
     -> c_int;
    pub fn g_socket_control_message_serialize(message:
                                                  *mut GSocketControlMessage,
                                              data: gpointer);
    pub fn g_socket_control_message_deserialize(level: c_int, _type: c_int,
                                                size: gsize, data: gpointer)
     -> *mut GSocketControlMessage;
    pub fn g_socket_listener_get_type() -> GType;
    pub fn g_socket_listener_new() -> *mut GSocketListener;
    pub fn g_socket_listener_set_backlog(listener: *mut GSocketListener,
                                         listen_backlog: c_int);
    pub fn g_socket_listener_add_socket(listener: *mut GSocketListener,
                                        socket: *mut GSocket,
                                        source_object: *mut GObject,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_socket_listener_add_address(listener: *mut GSocketListener,
                                         address: *mut GSocketAddress,
                                         _type: GSocketType,
                                         protocol: GSocketProtocol,
                                         source_object: *mut GObject,
                                         effective_address:
                                             *mut *mut GSocketAddress,
                                         error: *mut *mut GError) -> gboolean;
    pub fn g_socket_listener_add_inet_port(listener: *mut GSocketListener,
                                           port: guint16,
                                           source_object: *mut GObject,
                                           error: *mut *mut GError) ->
     gboolean;
    pub fn g_socket_listener_add_any_inet_port(listener: *mut GSocketListener,
                                               source_object: *mut GObject,
                                               error: *mut *mut GError) ->
     guint16;
    pub fn g_socket_listener_accept_socket(listener: *mut GSocketListener,
                                           source_object: *mut *mut GObject,
                                           cancellable: *mut GCancellable,
                                           error: *mut *mut GError) ->
     *mut GSocket;
    pub fn g_socket_listener_accept_socket_async(listener:
                                                     *mut GSocketListener,
                                                 cancellable:
                                                     *mut GCancellable,
                                                 callback:
                                                     GAsyncReadyCallback,
                                                 user_data: gpointer);
    pub fn g_socket_listener_accept_socket_finish(listener:
                                                      *mut GSocketListener,
                                                  result: *mut GAsyncResult,
                                                  source_object:
                                                      *mut *mut GObject,
                                                  error: *mut *mut GError) ->
     *mut GSocket;
    pub fn g_socket_listener_accept(listener: *mut GSocketListener,
                                    source_object: *mut *mut GObject,
                                    cancellable: *mut GCancellable,
                                    error: *mut *mut GError) ->
     *mut GSocketConnection;
    pub fn g_socket_listener_accept_async(listener: *mut GSocketListener,
                                          cancellable: *mut GCancellable,
                                          callback: GAsyncReadyCallback,
                                          user_data: gpointer);
    pub fn g_socket_listener_accept_finish(listener: *mut GSocketListener,
                                           result: *mut GAsyncResult,
                                           source_object: *mut *mut GObject,
                                           error: *mut *mut GError) ->
     *mut GSocketConnection;
    pub fn g_socket_listener_close(listener: *mut GSocketListener);
    pub fn g_socket_service_get_type() -> GType;
    pub fn g_socket_service_new() -> *mut GSocketService;
    pub fn g_socket_service_start(service: *mut GSocketService);
    pub fn g_socket_service_stop(service: *mut GSocketService);
    pub fn g_socket_service_is_active(service: *mut GSocketService) ->
     gboolean;
    pub fn g_srv_target_get_type() -> GType;
    pub fn g_srv_target_new(hostname: *gchar, port: guint16,
                            priority: guint16, weight: guint16) ->
     *mut GSrvTarget;
    pub fn g_srv_target_copy(target: *mut GSrvTarget) -> *mut GSrvTarget;
    pub fn g_srv_target_free(target: *mut GSrvTarget);
    pub fn g_srv_target_get_hostname(target: *mut GSrvTarget) -> *gchar;
    pub fn g_srv_target_get_port(target: *mut GSrvTarget) -> guint16;
    pub fn g_srv_target_get_priority(target: *mut GSrvTarget) -> guint16;
    pub fn g_srv_target_get_weight(target: *mut GSrvTarget) -> guint16;
    pub fn g_srv_target_list_sort(targets: *mut GList) -> *mut GList;
    pub fn g_simple_proxy_resolver_get_type() -> GType;
    pub fn g_simple_proxy_resolver_new(default_proxy: *gchar,
                                       ignore_hosts: *mut *mut gchar) ->
     *mut GProxyResolver;
    pub fn g_simple_proxy_resolver_set_default_proxy(resolver:
                                                         *mut GSimpleProxyResolver,
                                                     default_proxy: *gchar);
    pub fn g_simple_proxy_resolver_set_ignore_hosts(resolver:
                                                        *mut GSimpleProxyResolver,
                                                    ignore_hosts:
                                                        *mut *mut gchar);
    pub fn g_simple_proxy_resolver_set_uri_proxy(resolver:
                                                     *mut GSimpleProxyResolver,
                                                 uri_scheme: *gchar,
                                                 proxy: *gchar);
    pub fn g_task_get_type() -> GType;
    pub fn g_task_new(source_object: gpointer, cancellable: *mut GCancellable,
                      callback: GAsyncReadyCallback, callback_data: gpointer)
     -> *mut GTask;
    pub fn g_task_report_error(source_object: gpointer,
                               callback: GAsyncReadyCallback,
                               callback_data: gpointer, source_tag: gpointer,
                               error: *mut GError);
    pub fn g_task_report_new_error(source_object: gpointer,
                                   callback: GAsyncReadyCallback,
                                   callback_data: gpointer,
                                   source_tag: gpointer, domain: GQuark,
                                   code: gint, format: *c_schar, ...);
    pub fn g_task_set_task_data(task: *mut GTask, task_data: gpointer,
                                task_data_destroy: GDestroyNotify);
    pub fn g_task_set_priority(task: *mut GTask, priority: gint);
    pub fn g_task_set_check_cancellable(task: *mut GTask,
                                        check_cancellable: gboolean);
    pub fn g_task_set_source_tag(task: *mut GTask, source_tag: gpointer);
    pub fn g_task_get_source_object(task: *mut GTask) -> gpointer;
    pub fn g_task_get_task_data(task: *mut GTask) -> gpointer;
    pub fn g_task_get_priority(task: *mut GTask) -> gint;
    pub fn g_task_get_context(task: *mut GTask) -> *mut GMainContext;
    pub fn g_task_get_cancellable(task: *mut GTask) -> *mut GCancellable;
    pub fn g_task_get_check_cancellable(task: *mut GTask) -> gboolean;
    pub fn g_task_get_source_tag(task: *mut GTask) -> gpointer;
    pub fn g_task_is_valid(result: gpointer, source_object: gpointer) ->
     gboolean;
    pub fn g_task_run_in_thread(task: *mut GTask, task_func: GTaskThreadFunc);
    pub fn g_task_run_in_thread_sync(task: *mut GTask,
                                     task_func: GTaskThreadFunc);
    pub fn g_task_set_return_on_cancel(task: *mut GTask,
                                       return_on_cancel: gboolean) ->
     gboolean;
    pub fn g_task_get_return_on_cancel(task: *mut GTask) -> gboolean;
    pub fn g_task_attach_source(task: *mut GTask, source: *mut GSource,
                                callback: GSourceFunc);
    pub fn g_task_return_pointer(task: *mut GTask, result: gpointer,
                                 result_destroy: GDestroyNotify);
    pub fn g_task_return_boolean(task: *mut GTask, result: gboolean);
    pub fn g_task_return_int(task: *mut GTask, result: gssize);
    pub fn g_task_return_error(task: *mut GTask, error: *mut GError);
    pub fn g_task_return_new_error(task: *mut GTask, domain: GQuark,
                                   code: gint, format: *c_schar, ...);
    pub fn g_task_return_error_if_cancelled(task: *mut GTask) -> gboolean;
    pub fn g_task_propagate_pointer(task: *mut GTask, error: *mut *mut GError)
     -> gpointer;
    pub fn g_task_propagate_boolean(task: *mut GTask, error: *mut *mut GError)
     -> gboolean;
    pub fn g_task_propagate_int(task: *mut GTask, error: *mut *mut GError) ->
     gssize;
    pub fn g_task_had_error(task: *mut GTask) -> gboolean;
    pub fn g_tcp_connection_get_type() -> GType;
    pub fn g_tcp_connection_set_graceful_disconnect(connection:
                                                        *mut GTcpConnection,
                                                    graceful_disconnect:
                                                        gboolean);
    pub fn g_tcp_connection_get_graceful_disconnect(connection:
                                                        *mut GTcpConnection)
     -> gboolean;
    pub fn g_tcp_wrapper_connection_get_type() -> GType;
    pub fn g_tcp_wrapper_connection_new(base_io_stream: *mut GIOStream,
                                        socket: *mut GSocket) ->
     *mut GSocketConnection;
    pub fn g_tcp_wrapper_connection_get_base_io_stream(conn:
                                                           *mut GTcpWrapperConnection)
     -> *mut GIOStream;
    pub fn g_test_dbus_get_type() -> GType;
    pub fn g_test_dbus_new(flags: GTestDBusFlags) -> *mut GTestDBus;
    pub fn g_test_dbus_get_flags(_self: *mut GTestDBus) -> GTestDBusFlags;
    pub fn g_test_dbus_get_bus_address(_self: *mut GTestDBus) -> *gchar;
    pub fn g_test_dbus_add_service_dir(_self: *mut GTestDBus, path: *gchar);
    pub fn g_test_dbus_up(_self: *mut GTestDBus);
    pub fn g_test_dbus_stop(_self: *mut GTestDBus);
    pub fn g_test_dbus_down(_self: *mut GTestDBus);
    pub fn g_test_dbus_unset();
    pub fn g_themed_icon_get_type() -> GType;
    pub fn g_themed_icon_new(iconname: *c_schar) -> *mut GIcon;
    pub fn g_themed_icon_new_with_default_fallbacks(iconname: *c_schar) ->
     *mut GIcon;
    pub fn g_themed_icon_new_from_names(iconnames: *mut *mut c_schar,
                                        len: c_int) -> *mut GIcon;
    pub fn g_themed_icon_prepend_name(icon: *mut GThemedIcon,
                                      iconname: *c_schar);
    pub fn g_themed_icon_append_name(icon: *mut GThemedIcon,
                                     iconname: *c_schar);
    pub fn g_themed_icon_get_names(icon: *mut GThemedIcon) -> **gchar;
    pub fn g_threaded_socket_service_get_type() -> GType;
    pub fn g_threaded_socket_service_new(max_threads: c_int) ->
     *mut GSocketService;
    pub fn g_tls_backend_get_type() -> GType;
    pub fn g_tls_backend_get_default() -> *mut GTlsBackend;
    pub fn g_tls_backend_get_default_database(backend: *mut GTlsBackend) ->
     *mut GTlsDatabase;
    pub fn g_tls_backend_supports_tls(backend: *mut GTlsBackend) -> gboolean;
    pub fn g_tls_backend_get_certificate_type(backend: *mut GTlsBackend) ->
     GType;
    pub fn g_tls_backend_get_client_connection_type(backend: *mut GTlsBackend)
     -> GType;
    pub fn g_tls_backend_get_server_connection_type(backend: *mut GTlsBackend)
     -> GType;
    pub fn g_tls_backend_get_file_database_type(backend: *mut GTlsBackend) ->
     GType;
    pub fn g_tls_certificate_get_type() -> GType;
    pub fn g_tls_certificate_new_from_pem(data: *gchar, length: gssize,
                                          error: *mut *mut GError) ->
     *mut GTlsCertificate;
    pub fn g_tls_certificate_new_from_file(file: *gchar,
                                           error: *mut *mut GError) ->
     *mut GTlsCertificate;
    pub fn g_tls_certificate_new_from_files(cert_file: *gchar,
                                            key_file: *gchar,
                                            error: *mut *mut GError) ->
     *mut GTlsCertificate;
    pub fn g_tls_certificate_list_new_from_file(file: *gchar,
                                                error: *mut *mut GError) ->
     *mut GList;
    pub fn g_tls_certificate_get_issuer(cert: *mut GTlsCertificate) ->
     *mut GTlsCertificate;
    pub fn g_tls_certificate_verify(cert: *mut GTlsCertificate,
                                    identity: *mut GSocketConnectable,
                                    trusted_ca: *mut GTlsCertificate) ->
     GTlsCertificateFlags;
    pub fn g_tls_certificate_is_same(cert_one: *mut GTlsCertificate,
                                     cert_two: *mut GTlsCertificate) ->
     gboolean;
    pub fn g_tls_connection_get_type() -> GType;
    pub fn g_tls_connection_set_use_system_certdb(conn: *mut GTlsConnection,
                                                  use_system_certdb:
                                                      gboolean);
    pub fn g_tls_connection_get_use_system_certdb(conn: *mut GTlsConnection)
     -> gboolean;
    pub fn g_tls_connection_set_database(conn: *mut GTlsConnection,
                                         database: *mut GTlsDatabase);
    pub fn g_tls_connection_get_database(conn: *mut GTlsConnection) ->
     *mut GTlsDatabase;
    pub fn g_tls_connection_set_certificate(conn: *mut GTlsConnection,
                                            certificate:
                                                *mut GTlsCertificate);
    pub fn g_tls_connection_get_certificate(conn: *mut GTlsConnection) ->
     *mut GTlsCertificate;
    pub fn g_tls_connection_set_interaction(conn: *mut GTlsConnection,
                                            interaction:
                                                *mut GTlsInteraction);
    pub fn g_tls_connection_get_interaction(conn: *mut GTlsConnection) ->
     *mut GTlsInteraction;
    pub fn g_tls_connection_get_peer_certificate(conn: *mut GTlsConnection) ->
     *mut GTlsCertificate;
    pub fn g_tls_connection_get_peer_certificate_errors(conn:
                                                            *mut GTlsConnection)
     -> GTlsCertificateFlags;
    pub fn g_tls_connection_set_require_close_notify(conn:
                                                         *mut GTlsConnection,
                                                     require_close_notify:
                                                         gboolean);
    pub fn g_tls_connection_get_require_close_notify(conn:
                                                         *mut GTlsConnection)
     -> gboolean;
    pub fn g_tls_connection_set_rehandshake_mode(conn: *mut GTlsConnection,
                                                 mode: GTlsRehandshakeMode);
    pub fn g_tls_connection_get_rehandshake_mode(conn: *mut GTlsConnection) ->
     GTlsRehandshakeMode;
    pub fn g_tls_connection_handshake(conn: *mut GTlsConnection,
                                      cancellable: *mut GCancellable,
                                      error: *mut *mut GError) -> gboolean;
    pub fn g_tls_connection_handshake_async(conn: *mut GTlsConnection,
                                            io_priority: c_int,
                                            cancellable: *mut GCancellable,
                                            callback: GAsyncReadyCallback,
                                            user_data: gpointer);
    pub fn g_tls_connection_handshake_finish(conn: *mut GTlsConnection,
                                             result: *mut GAsyncResult,
                                             error: *mut *mut GError) ->
     gboolean;
    pub fn g_tls_error_quark() -> GQuark;
    pub fn g_tls_connection_emit_accept_certificate(conn: *mut GTlsConnection,
                                                    peer_cert:
                                                        *mut GTlsCertificate,
                                                    errors:
                                                        GTlsCertificateFlags)
     -> gboolean;
    pub fn g_tls_client_connection_get_type() -> GType;
    pub fn g_tls_client_connection_new(base_io_stream: *mut GIOStream,
                                       server_identity:
                                           *mut GSocketConnectable,
                                       error: *mut *mut GError) ->
     *mut GIOStream;
    pub fn g_tls_client_connection_get_validation_flags(conn:
                                                            *mut GTlsClientConnection)
     -> GTlsCertificateFlags;
    pub fn g_tls_client_connection_set_validation_flags(conn:
                                                            *mut GTlsClientConnection,
                                                        flags:
                                                            GTlsCertificateFlags);
    pub fn g_tls_client_connection_get_server_identity(conn:
                                                           *mut GTlsClientConnection)
     -> *mut GSocketConnectable;
    pub fn g_tls_client_connection_set_server_identity(conn:
                                                           *mut GTlsClientConnection,
                                                       identity:
                                                           *mut GSocketConnectable);
    pub fn g_tls_client_connection_get_use_ssl3(conn:
                                                    *mut GTlsClientConnection)
     -> gboolean;
    pub fn g_tls_client_connection_set_use_ssl3(conn:
                                                    *mut GTlsClientConnection,
                                                use_ssl3: gboolean);
    pub fn g_tls_client_connection_get_accepted_cas(conn:
                                                        *mut GTlsClientConnection)
     -> *mut GList;
    pub fn g_tls_database_get_type() -> GType;
    pub fn g_tls_database_verify_chain(_self: *mut GTlsDatabase,
                                       chain: *mut GTlsCertificate,
                                       purpose: *gchar,
                                       identity: *mut GSocketConnectable,
                                       interaction: *mut GTlsInteraction,
                                       flags: GTlsDatabaseVerifyFlags,
                                       cancellable: *mut GCancellable,
                                       error: *mut *mut GError) ->
     GTlsCertificateFlags;
    pub fn g_tls_database_verify_chain_async(_self: *mut GTlsDatabase,
                                             chain: *mut GTlsCertificate,
                                             purpose: *gchar,
                                             identity:
                                                 *mut GSocketConnectable,
                                             interaction:
                                                 *mut GTlsInteraction,
                                             flags: GTlsDatabaseVerifyFlags,
                                             cancellable: *mut GCancellable,
                                             callback: GAsyncReadyCallback,
                                             user_data: gpointer);
    pub fn g_tls_database_verify_chain_finish(_self: *mut GTlsDatabase,
                                              result: *mut GAsyncResult,
                                              error: *mut *mut GError) ->
     GTlsCertificateFlags;
    pub fn g_tls_database_create_certificate_handle(_self: *mut GTlsDatabase,
                                                    certificate:
                                                        *mut GTlsCertificate)
     -> *mut gchar;
    pub fn g_tls_database_lookup_certificate_for_handle(_self:
                                                            *mut GTlsDatabase,
                                                        handle: *gchar,
                                                        interaction:
                                                            *mut GTlsInteraction,
                                                        flags:
                                                            GTlsDatabaseLookupFlags,
                                                        cancellable:
                                                            *mut GCancellable,
                                                        error:
                                                            *mut *mut GError)
     -> *mut GTlsCertificate;
    pub fn g_tls_database_lookup_certificate_for_handle_async(_self:
                                                                  *mut GTlsDatabase,
                                                              handle: *gchar,
                                                              interaction:
                                                                  *mut GTlsInteraction,
                                                              flags:
                                                                  GTlsDatabaseLookupFlags,
                                                              cancellable:
                                                                  *mut GCancellable,
                                                              callback:
                                                                  GAsyncReadyCallback,
                                                              user_data:
                                                                  gpointer);
    pub fn g_tls_database_lookup_certificate_for_handle_finish(_self:
                                                                   *mut GTlsDatabase,
                                                               result:
                                                                   *mut GAsyncResult,
                                                               error:
                                                                   *mut *mut GError)
     -> *mut GTlsCertificate;
    pub fn g_tls_database_lookup_certificate_issuer(_self: *mut GTlsDatabase,
                                                    certificate:
                                                        *mut GTlsCertificate,
                                                    interaction:
                                                        *mut GTlsInteraction,
                                                    flags:
                                                        GTlsDatabaseLookupFlags,
                                                    cancellable:
                                                        *mut GCancellable,
                                                    error: *mut *mut GError)
     -> *mut GTlsCertificate;
    pub fn g_tls_database_lookup_certificate_issuer_async(_self:
                                                              *mut GTlsDatabase,
                                                          certificate:
                                                              *mut GTlsCertificate,
                                                          interaction:
                                                              *mut GTlsInteraction,
                                                          flags:
                                                              GTlsDatabaseLookupFlags,
                                                          cancellable:
                                                              *mut GCancellable,
                                                          callback:
                                                              GAsyncReadyCallback,
                                                          user_data:
                                                              gpointer);
    pub fn g_tls_database_lookup_certificate_issuer_finish(_self:
                                                               *mut GTlsDatabase,
                                                           result:
                                                               *mut GAsyncResult,
                                                           error:
                                                               *mut *mut GError)
     -> *mut GTlsCertificate;
    pub fn g_tls_database_lookup_certificates_issued_by(_self:
                                                            *mut GTlsDatabase,
                                                        issuer_raw_dn:
                                                            *mut GByteArray,
                                                        interaction:
                                                            *mut GTlsInteraction,
                                                        flags:
                                                            GTlsDatabaseLookupFlags,
                                                        cancellable:
                                                            *mut GCancellable,
                                                        error:
                                                            *mut *mut GError)
     -> *mut GList;
    pub fn g_tls_database_lookup_certificates_issued_by_async(_self:
                                                                  *mut GTlsDatabase,
                                                              issuer_raw_dn:
                                                                  *mut GByteArray,
                                                              interaction:
                                                                  *mut GTlsInteraction,
                                                              flags:
                                                                  GTlsDatabaseLookupFlags,
                                                              cancellable:
                                                                  *mut GCancellable,
                                                              callback:
                                                                  GAsyncReadyCallback,
                                                              user_data:
                                                                  gpointer);
    pub fn g_tls_database_lookup_certificates_issued_by_finish(_self:
                                                                   *mut GTlsDatabase,
                                                               result:
                                                                   *mut GAsyncResult,
                                                               error:
                                                                   *mut *mut GError)
     -> *mut GList;
    pub fn g_tls_file_database_get_type() -> GType;
    pub fn g_tls_file_database_new(anchors: *gchar, error: *mut *mut GError)
     -> *mut GTlsDatabase;
    pub fn g_tls_interaction_get_type() -> GType;
    pub fn g_tls_interaction_invoke_ask_password(interaction:
                                                     *mut GTlsInteraction,
                                                 password: *mut GTlsPassword,
                                                 cancellable:
                                                     *mut GCancellable,
                                                 error: *mut *mut GError) ->
     GTlsInteractionResult;
    pub fn g_tls_interaction_ask_password(interaction: *mut GTlsInteraction,
                                          password: *mut GTlsPassword,
                                          cancellable: *mut GCancellable,
                                          error: *mut *mut GError) ->
     GTlsInteractionResult;
    pub fn g_tls_interaction_ask_password_async(interaction:
                                                    *mut GTlsInteraction,
                                                password: *mut GTlsPassword,
                                                cancellable:
                                                    *mut GCancellable,
                                                callback: GAsyncReadyCallback,
                                                user_data: gpointer);
    pub fn g_tls_interaction_ask_password_finish(interaction:
                                                     *mut GTlsInteraction,
                                                 result: *mut GAsyncResult,
                                                 error: *mut *mut GError) ->
     GTlsInteractionResult;
    pub fn g_tls_server_connection_get_type() -> GType;
    pub fn g_tls_server_connection_new(base_io_stream: *mut GIOStream,
                                       certificate: *mut GTlsCertificate,
                                       error: *mut *mut GError) ->
     *mut GIOStream;
    pub fn g_tls_password_get_type() -> GType;
    pub fn g_tls_password_new(flags: GTlsPasswordFlags, description: *gchar)
     -> *mut GTlsPassword;
    pub fn g_tls_password_get_value(password: *mut GTlsPassword,
                                    length: *mut gsize) -> *guchar;
    pub fn g_tls_password_set_value(password: *mut GTlsPassword,
                                    value: *guchar, length: gssize);
    pub fn g_tls_password_set_value_full(password: *mut GTlsPassword,
                                         value: *mut guchar, length: gssize,
                                         destroy: GDestroyNotify);
    pub fn g_tls_password_get_flags(password: *mut GTlsPassword) ->
     GTlsPasswordFlags;
    pub fn g_tls_password_set_flags(password: *mut GTlsPassword,
                                    flags: GTlsPasswordFlags);
    pub fn g_tls_password_get_description(password: *mut GTlsPassword) ->
     *gchar;
    pub fn g_tls_password_set_description(password: *mut GTlsPassword,
                                          description: *gchar);
    pub fn g_tls_password_get_warning(password: *mut GTlsPassword) -> *gchar;
    pub fn g_tls_password_set_warning(password: *mut GTlsPassword,
                                      warning: *gchar);
    pub fn g_vfs_get_type() -> GType;
    pub fn g_vfs_is_active(vfs: *mut GVfs) -> gboolean;
    pub fn g_vfs_get_file_for_path(vfs: *mut GVfs, path: *c_schar) ->
     *mut GFile;
    pub fn g_vfs_get_file_for_uri(vfs: *mut GVfs, uri: *c_schar) ->
     *mut GFile;
    pub fn g_vfs_get_supported_uri_schemes(vfs: *mut GVfs) -> **gchar;
    pub fn g_vfs_parse_name(vfs: *mut GVfs, parse_name: *c_schar) ->
     *mut GFile;
    pub fn g_vfs_get_default() -> *mut GVfs;
    pub fn g_vfs_get_local() -> *mut GVfs;
    pub fn g_volume_get_type() -> GType;
    pub fn g_volume_get_name(volume: *mut GVolume) -> *mut c_schar;
    pub fn g_volume_get_icon(volume: *mut GVolume) -> *mut GIcon;
    pub fn g_volume_get_symbolic_icon(volume: *mut GVolume) -> *mut GIcon;
    pub fn g_volume_get_uuid(volume: *mut GVolume) -> *mut c_schar;
    pub fn g_volume_get_drive(volume: *mut GVolume) -> *mut GDrive;
    pub fn g_volume_get_mount(volume: *mut GVolume) -> *mut GMount;
    pub fn g_volume_can_mount(volume: *mut GVolume) -> gboolean;
    pub fn g_volume_can_eject(volume: *mut GVolume) -> gboolean;
    pub fn g_volume_should_automount(volume: *mut GVolume) -> gboolean;
    pub fn g_volume_mount(volume: *mut GVolume, flags: GMountMountFlags,
                          mount_operation: *mut GMountOperation,
                          cancellable: *mut GCancellable,
                          callback: GAsyncReadyCallback, user_data: gpointer);
    pub fn g_volume_mount_finish(volume: *mut GVolume,
                                 result: *mut GAsyncResult,
                                 error: *mut *mut GError) -> gboolean;
    pub fn g_volume_eject(volume: *mut GVolume, flags: GMountUnmountFlags,
                          cancellable: *mut GCancellable,
                          callback: GAsyncReadyCallback, user_data: gpointer);
    pub fn g_volume_eject_finish(volume: *mut GVolume,
                                 result: *mut GAsyncResult,
                                 error: *mut *mut GError) -> gboolean;
    pub fn g_volume_get_identifier(volume: *mut GVolume, kind: *c_schar) ->
     *mut c_schar;
    pub fn g_volume_enumerate_identifiers(volume: *mut GVolume) ->
     *mut *mut c_schar;
    pub fn g_volume_get_activation_root(volume: *mut GVolume) -> *mut GFile;
    pub fn g_volume_eject_with_operation(volume: *mut GVolume,
                                         flags: GMountUnmountFlags,
                                         mount_operation:
                                             *mut GMountOperation,
                                         cancellable: *mut GCancellable,
                                         callback: GAsyncReadyCallback,
                                         user_data: gpointer);
    pub fn g_volume_eject_with_operation_finish(volume: *mut GVolume,
                                                result: *mut GAsyncResult,
                                                error: *mut *mut GError) ->
     gboolean;
    pub fn g_volume_get_sort_key(volume: *mut GVolume) -> *gchar;
    pub fn g_zlib_compressor_get_type() -> GType;
    pub fn g_zlib_compressor_new(format: GZlibCompressorFormat, level: c_int)
     -> *mut GZlibCompressor;
    pub fn g_zlib_compressor_get_file_info(compressor: *mut GZlibCompressor)
     -> *mut GFileInfo;
    pub fn g_zlib_compressor_set_file_info(compressor: *mut GZlibCompressor,
                                           file_info: *mut GFileInfo);
    pub fn g_zlib_decompressor_get_type() -> GType;
    pub fn g_zlib_decompressor_new(format: GZlibCompressorFormat) ->
     *mut GZlibDecompressor;
    pub fn g_zlib_decompressor_get_file_info(decompressor:
                                                 *mut GZlibDecompressor) ->
     *mut GFileInfo;
    pub fn g_dbus_interface_get_type() -> GType;
    pub fn g_dbus_interface_get_info(interface_: *mut GDBusInterface) ->
     *mut GDBusInterfaceInfo;
    pub fn g_dbus_interface_get_object(interface_: *mut GDBusInterface) ->
     *mut GDBusObject;
    pub fn g_dbus_interface_set_object(interface_: *mut GDBusInterface,
                                       object: *mut GDBusObject);
    pub fn g_dbus_interface_dup_object(interface_: *mut GDBusInterface) ->
     *mut GDBusObject;
    pub fn g_dbus_interface_skeleton_get_type() -> GType;
    pub fn g_dbus_interface_skeleton_get_flags(interface_:
                                                   *mut GDBusInterfaceSkeleton)
     -> GDBusInterfaceSkeletonFlags;
    pub fn g_dbus_interface_skeleton_set_flags(interface_:
                                                   *mut GDBusInterfaceSkeleton,
                                               flags:
                                                   GDBusInterfaceSkeletonFlags);
    pub fn g_dbus_interface_skeleton_get_info(interface_:
                                                  *mut GDBusInterfaceSkeleton)
     -> *mut GDBusInterfaceInfo;
    pub fn g_dbus_interface_skeleton_get_vtable(interface_:
                                                    *mut GDBusInterfaceSkeleton)
     -> *mut GDBusInterfaceVTable;
    pub fn g_dbus_interface_skeleton_get_properties(interface_:
                                                        *mut GDBusInterfaceSkeleton)
     -> *mut GVariant;
    pub fn g_dbus_interface_skeleton_flush(interface_:
                                               *mut GDBusInterfaceSkeleton);
    pub fn g_dbus_interface_skeleton_export(interface_:
                                                *mut GDBusInterfaceSkeleton,
                                            connection: *mut GDBusConnection,
                                            object_path: *gchar,
                                            error: *mut *mut GError) ->
     gboolean;
    pub fn g_dbus_interface_skeleton_unexport(interface_:
                                                  *mut GDBusInterfaceSkeleton);
    pub fn g_dbus_interface_skeleton_unexport_from_connection(interface_:
                                                                  *mut GDBusInterfaceSkeleton,
                                                              connection:
                                                                  *mut GDBusConnection);
    pub fn g_dbus_interface_skeleton_get_connection(interface_:
                                                        *mut GDBusInterfaceSkeleton)
     -> *mut GDBusConnection;
    pub fn g_dbus_interface_skeleton_get_connections(interface_:
                                                         *mut GDBusInterfaceSkeleton)
     -> *mut GList;
    pub fn g_dbus_interface_skeleton_has_connection(interface_:
                                                        *mut GDBusInterfaceSkeleton,
                                                    connection:
                                                        *mut GDBusConnection)
     -> gboolean;
    pub fn g_dbus_interface_skeleton_get_object_path(interface_:
                                                         *mut GDBusInterfaceSkeleton)
     -> *gchar;
    pub fn g_dbus_object_get_type() -> GType;
    pub fn g_dbus_object_get_object_path(object: *mut GDBusObject) -> *gchar;
    pub fn g_dbus_object_get_interfaces(object: *mut GDBusObject) ->
     *mut GList;
    pub fn g_dbus_object_get_interface(object: *mut GDBusObject,
                                       interface_name: *gchar) ->
     *mut GDBusInterface;
    pub fn g_dbus_object_skeleton_get_type() -> GType;
    pub fn g_dbus_object_skeleton_new(object_path: *gchar) ->
     *mut GDBusObjectSkeleton;
    pub fn g_dbus_object_skeleton_flush(object: *mut GDBusObjectSkeleton);
    pub fn g_dbus_object_skeleton_add_interface(object:
                                                    *mut GDBusObjectSkeleton,
                                                interface_:
                                                    *mut GDBusInterfaceSkeleton);
    pub fn g_dbus_object_skeleton_remove_interface(object:
                                                       *mut GDBusObjectSkeleton,
                                                   interface_:
                                                       *mut GDBusInterfaceSkeleton);
    pub fn g_dbus_object_skeleton_remove_interface_by_name(object:
                                                               *mut GDBusObjectSkeleton,
                                                           interface_name:
                                                               *gchar);
    pub fn g_dbus_object_skeleton_set_object_path(object:
                                                      *mut GDBusObjectSkeleton,
                                                  object_path: *gchar);
    pub fn g_dbus_object_proxy_get_type() -> GType;
    pub fn g_dbus_object_proxy_new(connection: *mut GDBusConnection,
                                   object_path: *gchar) ->
     *mut GDBusObjectProxy;
    pub fn g_dbus_object_proxy_get_connection(proxy: *mut GDBusObjectProxy) ->
     *mut GDBusConnection;
    pub fn g_dbus_object_manager_get_type() -> GType;
    pub fn g_dbus_object_manager_get_object_path(manager:
                                                     *mut GDBusObjectManager)
     -> *gchar;
    pub fn g_dbus_object_manager_get_objects(manager: *mut GDBusObjectManager)
     -> *mut GList;
    pub fn g_dbus_object_manager_get_object(manager: *mut GDBusObjectManager,
                                            object_path: *gchar) ->
     *mut GDBusObject;
    pub fn g_dbus_object_manager_get_interface(manager:
                                                   *mut GDBusObjectManager,
                                               object_path: *gchar,
                                               interface_name: *gchar) ->
     *mut GDBusInterface;
    pub fn g_dbus_object_manager_client_get_type() -> GType;
    pub fn g_dbus_object_manager_client_new(connection: *mut GDBusConnection,
                                            flags:
                                                GDBusObjectManagerClientFlags,
                                            name: *gchar, object_path: *gchar,
                                            get_proxy_type_func:
                                                GDBusProxyTypeFunc,
                                            get_proxy_type_user_data:
                                                gpointer,
                                            get_proxy_type_destroy_notify:
                                                GDestroyNotify,
                                            cancellable: *mut GCancellable,
                                            callback: GAsyncReadyCallback,
                                            user_data: gpointer);
    pub fn g_dbus_object_manager_client_new_finish(res: *mut GAsyncResult,
                                                   error: *mut *mut GError) ->
     *mut GDBusObjectManager;
    pub fn g_dbus_object_manager_client_new_sync(connection:
                                                     *mut GDBusConnection,
                                                 flags:
                                                     GDBusObjectManagerClientFlags,
                                                 name: *gchar,
                                                 object_path: *gchar,
                                                 get_proxy_type_func:
                                                     GDBusProxyTypeFunc,
                                                 get_proxy_type_user_data:
                                                     gpointer,
                                                 get_proxy_type_destroy_notify:
                                                     GDestroyNotify,
                                                 cancellable:
                                                     *mut GCancellable,
                                                 error: *mut *mut GError) ->
     *mut GDBusObjectManager;
    pub fn g_dbus_object_manager_client_new_for_bus(bus_type: GBusType,
                                                    flags:
                                                        GDBusObjectManagerClientFlags,
                                                    name: *gchar,
                                                    object_path: *gchar,
                                                    get_proxy_type_func:
                                                        GDBusProxyTypeFunc,
                                                    get_proxy_type_user_data:
                                                        gpointer,
                                                    get_proxy_type_destroy_notify:
                                                        GDestroyNotify,
                                                    cancellable:
                                                        *mut GCancellable,
                                                    callback:
                                                        GAsyncReadyCallback,
                                                    user_data: gpointer);
    pub fn g_dbus_object_manager_client_new_for_bus_finish(res:
                                                               *mut GAsyncResult,
                                                           error:
                                                               *mut *mut GError)
     -> *mut GDBusObjectManager;
    pub fn g_dbus_object_manager_client_new_for_bus_sync(bus_type: GBusType,
                                                         flags:
                                                             GDBusObjectManagerClientFlags,
                                                         name: *gchar,
                                                         object_path: *gchar,
                                                         get_proxy_type_func:
                                                             GDBusProxyTypeFunc,
                                                         get_proxy_type_user_data:
                                                             gpointer,
                                                         get_proxy_type_destroy_notify:
                                                             GDestroyNotify,
                                                         cancellable:
                                                             *mut GCancellable,
                                                         error:
                                                             *mut *mut GError)
     -> *mut GDBusObjectManager;
    pub fn g_dbus_object_manager_client_get_connection(manager:
                                                           *mut GDBusObjectManagerClient)
     -> *mut GDBusConnection;
    pub fn g_dbus_object_manager_client_get_flags(manager:
                                                      *mut GDBusObjectManagerClient)
     -> GDBusObjectManagerClientFlags;
    pub fn g_dbus_object_manager_client_get_name(manager:
                                                     *mut GDBusObjectManagerClient)
     -> *gchar;
    pub fn g_dbus_object_manager_client_get_name_owner(manager:
                                                           *mut GDBusObjectManagerClient)
     -> *mut gchar;
    pub fn g_dbus_object_manager_server_get_type() -> GType;
    pub fn g_dbus_object_manager_server_new(object_path: *gchar) ->
     *mut GDBusObjectManagerServer;
    pub fn g_dbus_object_manager_server_get_connection(manager:
                                                           *mut GDBusObjectManagerServer)
     -> *mut GDBusConnection;
    pub fn g_dbus_object_manager_server_set_connection(manager:
                                                           *mut GDBusObjectManagerServer,
                                                       connection:
                                                           *mut GDBusConnection);
    pub fn g_dbus_object_manager_server_export(manager:
                                                   *mut GDBusObjectManagerServer,
                                               object:
                                                   *mut GDBusObjectSkeleton);
    pub fn g_dbus_object_manager_server_export_uniquely(manager:
                                                            *mut GDBusObjectManagerServer,
                                                        object:
                                                            *mut GDBusObjectSkeleton);
    pub fn g_dbus_object_manager_server_is_exported(manager:
                                                        *mut GDBusObjectManagerServer,
                                                    object:
                                                        *mut GDBusObjectSkeleton)
     -> gboolean;
    pub fn g_dbus_object_manager_server_unexport(manager:
                                                     *mut GDBusObjectManagerServer,
                                                 object_path: *gchar) ->
     gboolean;
    pub fn g_dbus_action_group_get_type() -> GType;
    pub fn g_dbus_action_group_get(connection: *mut GDBusConnection,
                                   bus_name: *gchar, object_path: *gchar) ->
     *mut GDBusActionGroup;
    pub fn g_remote_action_group_get_type() -> GType;
    pub fn g_remote_action_group_activate_action_full(remote:
                                                          *mut GRemoteActionGroup,
                                                      action_name: *gchar,
                                                      parameter:
                                                          *mut GVariant,
                                                      platform_data:
                                                          *mut GVariant);
    pub fn g_remote_action_group_change_action_state_full(remote:
                                                              *mut GRemoteActionGroup,
                                                          action_name: *gchar,
                                                          value:
                                                              *mut GVariant,
                                                          platform_data:
                                                              *mut GVariant);
    pub fn g_menu_model_get_type() -> GType;
    pub fn g_menu_model_is_mutable(model: *mut GMenuModel) -> gboolean;
    pub fn g_menu_model_get_n_items(model: *mut GMenuModel) -> gint;
    pub fn g_menu_model_iterate_item_attributes(model: *mut GMenuModel,
                                                item_index: gint) ->
     *mut GMenuAttributeIter;
    pub fn g_menu_model_get_item_attribute_value(model: *mut GMenuModel,
                                                 item_index: gint,
                                                 attribute: *gchar,
                                                 expected_type: *GVariantType)
     -> *mut GVariant;
    pub fn g_menu_model_get_item_attribute(model: *mut GMenuModel,
                                           item_index: gint,
                                           attribute: *gchar,
                                           format_string: *gchar, ...) ->
     gboolean;
    pub fn g_menu_model_iterate_item_links(model: *mut GMenuModel,
                                           item_index: gint) ->
     *mut GMenuLinkIter;
    pub fn g_menu_model_get_item_link(model: *mut GMenuModel,
                                      item_index: gint, link: *gchar) ->
     *mut GMenuModel;
    pub fn g_menu_model_items_changed(model: *mut GMenuModel, position: gint,
                                      removed: gint, added: gint);
    pub fn g_menu_attribute_iter_get_type() -> GType;
    pub fn g_menu_attribute_iter_get_next(iter: *mut GMenuAttributeIter,
                                          out_name: *mut *gchar,
                                          value: *mut *mut GVariant) ->
     gboolean;
    pub fn g_menu_attribute_iter_next(iter: *mut GMenuAttributeIter) ->
     gboolean;
    pub fn g_menu_attribute_iter_get_name(iter: *mut GMenuAttributeIter) ->
     *gchar;
    pub fn g_menu_attribute_iter_get_value(iter: *mut GMenuAttributeIter) ->
     *mut GVariant;
    pub fn g_menu_link_iter_get_type() -> GType;
    pub fn g_menu_link_iter_get_next(iter: *mut GMenuLinkIter,
                                     out_link: *mut *gchar,
                                     value: *mut *mut GMenuModel) -> gboolean;
    pub fn g_menu_link_iter_next(iter: *mut GMenuLinkIter) -> gboolean;
    pub fn g_menu_link_iter_get_name(iter: *mut GMenuLinkIter) -> *gchar;
    pub fn g_menu_link_iter_get_value(iter: *mut GMenuLinkIter) ->
     *mut GMenuModel;
    pub fn g_menu_get_type() -> GType;
    pub fn g_menu_new() -> *mut GMenu;
    pub fn g_menu_freeze(menu: *mut GMenu);
    pub fn g_menu_insert_item(menu: *mut GMenu, position: gint,
                              item: *mut GMenuItem);
    pub fn g_menu_prepend_item(menu: *mut GMenu, item: *mut GMenuItem);
    pub fn g_menu_append_item(menu: *mut GMenu, item: *mut GMenuItem);
    pub fn g_menu_remove(menu: *mut GMenu, position: gint);
    pub fn g_menu_remove_all(menu: *mut GMenu);
    pub fn g_menu_insert(menu: *mut GMenu, position: gint, label: *gchar,
                         detailed_action: *gchar);
    pub fn g_menu_prepend(menu: *mut GMenu, label: *gchar,
                          detailed_action: *gchar);
    pub fn g_menu_append(menu: *mut GMenu, label: *gchar,
                         detailed_action: *gchar);
    pub fn g_menu_insert_section(menu: *mut GMenu, position: gint,
                                 label: *gchar, section: *mut GMenuModel);
    pub fn g_menu_prepend_section(menu: *mut GMenu, label: *gchar,
                                  section: *mut GMenuModel);
    pub fn g_menu_append_section(menu: *mut GMenu, label: *gchar,
                                 section: *mut GMenuModel);
    pub fn g_menu_insert_submenu(menu: *mut GMenu, position: gint,
                                 label: *gchar, submenu: *mut GMenuModel);
    pub fn g_menu_prepend_submenu(menu: *mut GMenu, label: *gchar,
                                  submenu: *mut GMenuModel);
    pub fn g_menu_append_submenu(menu: *mut GMenu, label: *gchar,
                                 submenu: *mut GMenuModel);
    pub fn g_menu_item_get_type() -> GType;
    pub fn g_menu_item_new(label: *gchar, detailed_action: *gchar) ->
     *mut GMenuItem;
    pub fn g_menu_item_new_from_model(model: *mut GMenuModel,
                                      item_index: gint) -> *mut GMenuItem;
    pub fn g_menu_item_new_submenu(label: *gchar, submenu: *mut GMenuModel) ->
     *mut GMenuItem;
    pub fn g_menu_item_new_section(label: *gchar, section: *mut GMenuModel) ->
     *mut GMenuItem;
    pub fn g_menu_item_get_attribute_value(menu_item: *mut GMenuItem,
                                           attribute: *gchar,
                                           expected_type: *GVariantType) ->
     *mut GVariant;
    pub fn g_menu_item_get_attribute(menu_item: *mut GMenuItem,
                                     attribute: *gchar,
                                     format_string: *gchar, ...) -> gboolean;
    pub fn g_menu_item_get_link(menu_item: *mut GMenuItem, link: *gchar) ->
     *mut GMenuModel;
    pub fn g_menu_item_set_attribute_value(menu_item: *mut GMenuItem,
                                           attribute: *gchar,
                                           value: *mut GVariant);
    pub fn g_menu_item_set_attribute(menu_item: *mut GMenuItem,
                                     attribute: *gchar,
                                     format_string: *gchar, ...);
    pub fn g_menu_item_set_link(menu_item: *mut GMenuItem, link: *gchar,
                                model: *mut GMenuModel);
    pub fn g_menu_item_set_label(menu_item: *mut GMenuItem, label: *gchar);
    pub fn g_menu_item_set_submenu(menu_item: *mut GMenuItem,
                                   submenu: *mut GMenuModel);
    pub fn g_menu_item_set_section(menu_item: *mut GMenuItem,
                                   section: *mut GMenuModel);
    pub fn g_menu_item_set_action_and_target_value(menu_item: *mut GMenuItem,
                                                   action: *gchar,
                                                   target_value:
                                                       *mut GVariant);
    pub fn g_menu_item_set_action_and_target(menu_item: *mut GMenuItem,
                                             action: *gchar,
                                             format_string: *gchar, ...);
    pub fn g_menu_item_set_detailed_action(menu_item: *mut GMenuItem,
                                           detailed_action: *gchar);
    pub fn g_menu_item_set_icon(menu_item: *mut GMenuItem, icon: *mut GIcon);
    pub fn g_dbus_connection_export_menu_model(connection:
                                                   *mut GDBusConnection,
                                               object_path: *gchar,
                                               menu: *mut GMenuModel,
                                               error: *mut *mut GError) ->
     guint;
    pub fn g_dbus_connection_unexport_menu_model(connection:
                                                     *mut GDBusConnection,
                                                 export_id: guint);
    pub fn g_dbus_menu_model_get_type() -> GType;
    pub fn g_dbus_menu_model_get(connection: *mut GDBusConnection,
                                 bus_name: *gchar, object_path: *gchar) ->
     *mut GDBusMenuModel;
    pub fn pango_coverage_new() -> *mut PangoCoverage;
    pub fn pango_coverage_ref(coverage: *mut PangoCoverage) ->
     *mut PangoCoverage;
    pub fn pango_coverage_unref(coverage: *mut PangoCoverage);
    pub fn pango_coverage_copy(coverage: *mut PangoCoverage) ->
     *mut PangoCoverage;
    pub fn pango_coverage_get(coverage: *mut PangoCoverage, index_: c_int) ->
     PangoCoverageLevel;
    pub fn pango_coverage_set(coverage: *mut PangoCoverage, index_: c_int,
                              level: PangoCoverageLevel);
    pub fn pango_coverage_max(coverage: *mut PangoCoverage,
                              other: *mut PangoCoverage);
    pub fn pango_coverage_to_bytes(coverage: *mut PangoCoverage,
                                   bytes: *mut *mut guchar,
                                   n_bytes: *mut c_int);
    pub fn pango_coverage_from_bytes(bytes: *mut guchar, n_bytes: c_int) ->
     *mut PangoCoverage;
    pub fn pango_units_from_double(d: c_double) -> c_int;
    pub fn pango_units_to_double(i: c_int) -> c_double;
    pub fn pango_extents_to_pixels(inclusive: *mut PangoRectangle,
                                   nearest: *mut PangoRectangle);
    pub fn pango_matrix_get_type() -> GType;
    pub fn pango_matrix_copy(matrix: *PangoMatrix) -> *mut PangoMatrix;
    pub fn pango_matrix_free(matrix: *mut PangoMatrix);
    pub fn pango_matrix_translate(matrix: *mut PangoMatrix, tx: c_double,
                                  ty: c_double);
    pub fn pango_matrix_scale(matrix: *mut PangoMatrix, scale_x: c_double,
                              scale_y: c_double);
    pub fn pango_matrix_rotate(matrix: *mut PangoMatrix, degrees: c_double);
    pub fn pango_matrix_concat(matrix: *mut PangoMatrix,
                               new_matrix: *PangoMatrix);
    pub fn pango_matrix_transform_point(matrix: *PangoMatrix,
                                        x: *mut c_double, y: *mut c_double);
    pub fn pango_matrix_transform_distance(matrix: *PangoMatrix,
                                           dx: *mut c_double,
                                           dy: *mut c_double);
    pub fn pango_matrix_transform_rectangle(matrix: *PangoMatrix,
                                            rect: *mut PangoRectangle);
    pub fn pango_matrix_transform_pixel_rectangle(matrix: *PangoMatrix,
                                                  rect: *mut PangoRectangle);
    pub fn pango_matrix_get_font_scale_factor(matrix: *PangoMatrix) ->
     c_double;
    pub fn pango_script_for_unichar(ch: gunichar) -> PangoScript;
    pub fn pango_script_iter_new(text: *c_schar, length: c_int) ->
     *mut PangoScriptIter;
    pub fn pango_script_iter_get_range(iter: *mut PangoScriptIter,
                                       start: *mut *c_schar,
                                       end: *mut *c_schar,
                                       script: *mut PangoScript);
    pub fn pango_script_iter_next(iter: *mut PangoScriptIter) -> gboolean;
    pub fn pango_script_iter_free(iter: *mut PangoScriptIter);
    pub fn pango_language_get_type() -> GType;
    pub fn pango_language_from_string(language: *c_schar) ->
     *mut PangoLanguage;
    pub fn pango_language_to_string(language: *mut PangoLanguage) -> *c_schar;
    pub fn pango_language_get_sample_string(language: *mut PangoLanguage) ->
     *c_schar;
    pub fn pango_language_get_default() -> *mut PangoLanguage;
    pub fn pango_language_matches(language: *mut PangoLanguage,
                                  range_list: *c_schar) -> gboolean;
    pub fn pango_language_includes_script(language: *mut PangoLanguage,
                                          script: PangoScript) -> gboolean;
    pub fn pango_language_get_scripts(language: *mut PangoLanguage,
                                      num_scripts: *mut c_int) ->
     *PangoScript;
    pub fn pango_script_get_sample_language(script: PangoScript) ->
     *mut PangoLanguage;
    pub fn pango_gravity_to_rotation(gravity: PangoGravity) -> c_double;
    pub fn pango_gravity_get_for_matrix(matrix: *PangoMatrix) -> PangoGravity;
    pub fn pango_gravity_get_for_script(script: PangoScript,
                                        base_gravity: PangoGravity,
                                        hint: PangoGravityHint) ->
     PangoGravity;
    pub fn pango_gravity_get_for_script_and_width(script: PangoScript,
                                                  wide: gboolean,
                                                  base_gravity: PangoGravity,
                                                  hint: PangoGravityHint) ->
     PangoGravity;
    pub fn pango_bidi_type_for_unichar(ch: gunichar) -> PangoBidiType;
    pub fn pango_unichar_direction(ch: gunichar) -> PangoDirection;
    pub fn pango_find_base_dir(text: *gchar, length: gint) -> PangoDirection;
    pub fn pango_get_mirror_char(ch: gunichar, mirrored_ch: *mut gunichar) ->
     gboolean;
    pub fn pango_font_description_get_type() -> GType;
    pub fn pango_font_description_new() -> *mut PangoFontDescription;
    pub fn pango_font_description_copy(desc: *PangoFontDescription) ->
     *mut PangoFontDescription;
    pub fn pango_font_description_copy_static(desc: *PangoFontDescription) ->
     *mut PangoFontDescription;
    pub fn pango_font_description_hash(desc: *PangoFontDescription) -> guint;
    pub fn pango_font_description_equal(desc1: *PangoFontDescription,
                                        desc2: *PangoFontDescription) ->
     gboolean;
    pub fn pango_font_description_free(desc: *mut PangoFontDescription);
    pub fn pango_font_descriptions_free(descs: *mut *mut PangoFontDescription,
                                        n_descs: c_int);
    pub fn pango_font_description_set_family(desc: *mut PangoFontDescription,
                                             family: *c_schar);
    pub fn pango_font_description_set_family_static(desc:
                                                        *mut PangoFontDescription,
                                                    family: *c_schar);
    pub fn pango_font_description_get_family(desc: *PangoFontDescription) ->
     *c_schar;
    pub fn pango_font_description_set_style(desc: *mut PangoFontDescription,
                                            style: PangoStyle);
    pub fn pango_font_description_get_style(desc: *PangoFontDescription) ->
     PangoStyle;
    pub fn pango_font_description_set_variant(desc: *mut PangoFontDescription,
                                              variant: PangoVariant);
    pub fn pango_font_description_get_variant(desc: *PangoFontDescription) ->
     PangoVariant;
    pub fn pango_font_description_set_weight(desc: *mut PangoFontDescription,
                                             weight: PangoWeight);
    pub fn pango_font_description_get_weight(desc: *PangoFontDescription) ->
     PangoWeight;
    pub fn pango_font_description_set_stretch(desc: *mut PangoFontDescription,
                                              stretch: PangoStretch);
    pub fn pango_font_description_get_stretch(desc: *PangoFontDescription) ->
     PangoStretch;
    pub fn pango_font_description_set_size(desc: *mut PangoFontDescription,
                                           size: gint);
    pub fn pango_font_description_get_size(desc: *PangoFontDescription) ->
     gint;
    pub fn pango_font_description_set_absolute_size(desc:
                                                        *mut PangoFontDescription,
                                                    size: c_double);
    pub fn pango_font_description_get_size_is_absolute(desc:
                                                           *PangoFontDescription)
     -> gboolean;
    pub fn pango_font_description_set_gravity(desc: *mut PangoFontDescription,
                                              gravity: PangoGravity);
    pub fn pango_font_description_get_gravity(desc: *PangoFontDescription) ->
     PangoGravity;
    pub fn pango_font_description_get_set_fields(desc: *PangoFontDescription)
     -> PangoFontMask;
    pub fn pango_font_description_unset_fields(desc:
                                                   *mut PangoFontDescription,
                                               to_unset: PangoFontMask);
    pub fn pango_font_description_merge(desc: *mut PangoFontDescription,
                                        desc_to_merge: *PangoFontDescription,
                                        replace_existing: gboolean);
    pub fn pango_font_description_merge_static(desc:
                                                   *mut PangoFontDescription,
                                               desc_to_merge:
                                                   *PangoFontDescription,
                                               replace_existing: gboolean);
    pub fn pango_font_description_better_match(desc: *PangoFontDescription,
                                               old_match:
                                                   *PangoFontDescription,
                                               new_match:
                                                   *PangoFontDescription) ->
     gboolean;
    pub fn pango_font_description_from_string(str: *c_schar) ->
     *mut PangoFontDescription;
    pub fn pango_font_description_to_string(desc: *PangoFontDescription) ->
     *mut c_schar;
    pub fn pango_font_description_to_filename(desc: *PangoFontDescription) ->
     *mut c_schar;
    pub fn pango_font_metrics_get_type() -> GType;
    pub fn pango_font_metrics_ref(metrics: *mut PangoFontMetrics) ->
     *mut PangoFontMetrics;
    pub fn pango_font_metrics_unref(metrics: *mut PangoFontMetrics);
    pub fn pango_font_metrics_get_ascent(metrics: *mut PangoFontMetrics) ->
     c_int;
    pub fn pango_font_metrics_get_descent(metrics: *mut PangoFontMetrics) ->
     c_int;
    pub fn pango_font_metrics_get_approximate_char_width(metrics:
                                                             *mut PangoFontMetrics)
     -> c_int;
    pub fn pango_font_metrics_get_approximate_digit_width(metrics:
                                                              *mut PangoFontMetrics)
     -> c_int;
    pub fn pango_font_metrics_get_underline_position(metrics:
                                                         *mut PangoFontMetrics)
     -> c_int;
    pub fn pango_font_metrics_get_underline_thickness(metrics:
                                                          *mut PangoFontMetrics)
     -> c_int;
    pub fn pango_font_metrics_get_strikethrough_position(metrics:
                                                             *mut PangoFontMetrics)
     -> c_int;
    pub fn pango_font_metrics_get_strikethrough_thickness(metrics:
                                                              *mut PangoFontMetrics)
     -> c_int;
    pub fn pango_font_family_get_type() -> GType;
    pub fn pango_font_family_list_faces(family: *mut PangoFontFamily,
                                        faces: *mut *mut *mut PangoFontFace,
                                        n_faces: *mut c_int);
    pub fn pango_font_family_get_name(family: *mut PangoFontFamily) ->
     *c_schar;
    pub fn pango_font_family_is_monospace(family: *mut PangoFontFamily) ->
     gboolean;
    pub fn pango_font_face_get_type() -> GType;
    pub fn pango_font_face_describe(face: *mut PangoFontFace) ->
     *mut PangoFontDescription;
    pub fn pango_font_face_get_face_name(face: *mut PangoFontFace) ->
     *c_schar;
    pub fn pango_font_face_list_sizes(face: *mut PangoFontFace,
                                      sizes: *mut *mut c_int,
                                      n_sizes: *mut c_int);
    pub fn pango_font_face_is_synthesized(face: *mut PangoFontFace) ->
     gboolean;
    pub fn pango_font_get_type() -> GType;
    pub fn pango_font_describe(font: *mut PangoFont) ->
     *mut PangoFontDescription;
    pub fn pango_font_describe_with_absolute_size(font: *mut PangoFont) ->
     *mut PangoFontDescription;
    pub fn pango_font_get_coverage(font: *mut PangoFont,
                                   language: *mut PangoLanguage) ->
     *mut PangoCoverage;
    pub fn pango_font_find_shaper(font: *mut PangoFont,
                                  language: *mut PangoLanguage, ch: guint32)
     -> *mut PangoEngineShape;
    pub fn pango_font_get_metrics(font: *mut PangoFont,
                                  language: *mut PangoLanguage) ->
     *mut PangoFontMetrics;
    pub fn pango_font_get_glyph_extents(font: *mut PangoFont,
                                        glyph: PangoGlyph,
                                        ink_rect: *mut PangoRectangle,
                                        logical_rect: *mut PangoRectangle);
    pub fn pango_font_get_font_map(font: *mut PangoFont) -> *mut PangoFontMap;
    pub fn pango_color_get_type() -> GType;
    pub fn pango_color_copy(src: *PangoColor) -> *mut PangoColor;
    pub fn pango_color_free(color: *mut PangoColor);
    pub fn pango_color_parse(color: *mut PangoColor, spec: *c_schar) ->
     gboolean;
    pub fn pango_color_to_string(color: *PangoColor) -> *mut gchar;
    pub fn pango_attr_type_register(name: *gchar) -> PangoAttrType;
    pub fn pango_attr_type_get_name(_type: PangoAttrType) -> *c_schar;
    pub fn pango_attribute_init(attr: *mut PangoAttribute,
                                klass: *PangoAttrClass);
    pub fn pango_attribute_copy(attr: *PangoAttribute) -> *mut PangoAttribute;
    pub fn pango_attribute_destroy(attr: *mut PangoAttribute);
    pub fn pango_attribute_equal(attr1: *PangoAttribute,
                                 attr2: *PangoAttribute) -> gboolean;
    pub fn pango_attr_language_new(language: *mut PangoLanguage) ->
     *mut PangoAttribute;
    pub fn pango_attr_family_new(family: *c_schar) -> *mut PangoAttribute;
    pub fn pango_attr_foreground_new(red: guint16, green: guint16,
                                     blue: guint16) -> *mut PangoAttribute;
    pub fn pango_attr_background_new(red: guint16, green: guint16,
                                     blue: guint16) -> *mut PangoAttribute;
    pub fn pango_attr_size_new(size: c_int) -> *mut PangoAttribute;
    pub fn pango_attr_size_new_absolute(size: c_int) -> *mut PangoAttribute;
    pub fn pango_attr_style_new(style: PangoStyle) -> *mut PangoAttribute;
    pub fn pango_attr_weight_new(weight: PangoWeight) -> *mut PangoAttribute;
    pub fn pango_attr_variant_new(variant: PangoVariant) ->
     *mut PangoAttribute;
    pub fn pango_attr_stretch_new(stretch: PangoStretch) ->
     *mut PangoAttribute;
    pub fn pango_attr_font_desc_new(desc: *PangoFontDescription) ->
     *mut PangoAttribute;
    pub fn pango_attr_underline_new(underline: PangoUnderline) ->
     *mut PangoAttribute;
    pub fn pango_attr_underline_color_new(red: guint16, green: guint16,
                                          blue: guint16) ->
     *mut PangoAttribute;
    pub fn pango_attr_strikethrough_new(strikethrough: gboolean) ->
     *mut PangoAttribute;
    pub fn pango_attr_strikethrough_color_new(red: guint16, green: guint16,
                                              blue: guint16) ->
     *mut PangoAttribute;
    pub fn pango_attr_rise_new(rise: c_int) -> *mut PangoAttribute;
    pub fn pango_attr_scale_new(scale_factor: c_double) ->
     *mut PangoAttribute;
    pub fn pango_attr_fallback_new(enable_fallback: gboolean) ->
     *mut PangoAttribute;
    pub fn pango_attr_letter_spacing_new(letter_spacing: c_int) ->
     *mut PangoAttribute;
    pub fn pango_attr_shape_new(ink_rect: *PangoRectangle,
                                logical_rect: *PangoRectangle) ->
     *mut PangoAttribute;
    pub fn pango_attr_shape_new_with_data(ink_rect: *PangoRectangle,
                                          logical_rect: *PangoRectangle,
                                          data: gpointer,
                                          copy_func: PangoAttrDataCopyFunc,
                                          destroy_func: GDestroyNotify) ->
     *mut PangoAttribute;
    pub fn pango_attr_gravity_new(gravity: PangoGravity) ->
     *mut PangoAttribute;
    pub fn pango_attr_gravity_hint_new(hint: PangoGravityHint) ->
     *mut PangoAttribute;
    pub fn pango_attr_list_get_type() -> GType;
    pub fn pango_attr_list_new() -> *mut PangoAttrList;
    pub fn pango_attr_list_ref(list: *mut PangoAttrList) ->
     *mut PangoAttrList;
    pub fn pango_attr_list_unref(list: *mut PangoAttrList);
    pub fn pango_attr_list_copy(list: *mut PangoAttrList) ->
     *mut PangoAttrList;
    pub fn pango_attr_list_insert(list: *mut PangoAttrList,
                                  attr: *mut PangoAttribute);
    pub fn pango_attr_list_insert_before(list: *mut PangoAttrList,
                                         attr: *mut PangoAttribute);
    pub fn pango_attr_list_change(list: *mut PangoAttrList,
                                  attr: *mut PangoAttribute);
    pub fn pango_attr_list_splice(list: *mut PangoAttrList,
                                  other: *mut PangoAttrList, pos: gint,
                                  len: gint);
    pub fn pango_attr_list_filter(list: *mut PangoAttrList,
                                  func: PangoAttrFilterFunc, data: gpointer)
     -> *mut PangoAttrList;
    pub fn pango_attr_list_get_iterator(list: *mut PangoAttrList) ->
     *mut PangoAttrIterator;
    pub fn pango_attr_iterator_range(iterator: *mut PangoAttrIterator,
                                     start: *mut gint, end: *mut gint);
    pub fn pango_attr_iterator_next(iterator: *mut PangoAttrIterator) ->
     gboolean;
    pub fn pango_attr_iterator_copy(iterator: *mut PangoAttrIterator) ->
     *mut PangoAttrIterator;
    pub fn pango_attr_iterator_destroy(iterator: *mut PangoAttrIterator);
    pub fn pango_attr_iterator_get(iterator: *mut PangoAttrIterator,
                                   _type: PangoAttrType) ->
     *mut PangoAttribute;
    pub fn pango_attr_iterator_get_font(iterator: *mut PangoAttrIterator,
                                        desc: *mut PangoFontDescription,
                                        language: *mut *mut PangoLanguage,
                                        extra_attrs: *mut *mut GSList);
    pub fn pango_attr_iterator_get_attrs(iterator: *mut PangoAttrIterator) ->
     *mut GSList;
    pub fn pango_parse_markup(markup_text: *c_schar, length: c_int,
                              accel_marker: gunichar,
                              attr_list: *mut *mut PangoAttrList,
                              text: *mut *mut c_schar,
                              accel_char: *mut gunichar,
                              error: *mut *mut GError) -> gboolean;
    pub fn pango_markup_parser_new(accel_marker: gunichar) ->
     *mut GMarkupParseContext;
    pub fn pango_markup_parser_finish(context: *mut GMarkupParseContext,
                                      attr_list: *mut *mut PangoAttrList,
                                      text: *mut *mut c_schar,
                                      accel_char: *mut gunichar,
                                      error: *mut *mut GError) -> gboolean;
    pub fn pango_item_get_type() -> GType;
    pub fn pango_item_new() -> *mut PangoItem;
    pub fn pango_item_copy(item: *mut PangoItem) -> *mut PangoItem;
    pub fn pango_item_free(item: *mut PangoItem);
    pub fn pango_item_split(orig: *mut PangoItem, split_index: c_int,
                            split_offset: c_int) -> *mut PangoItem;
    pub fn pango_break(text: *gchar, length: c_int,
                       analysis: *mut PangoAnalysis, attrs: *mut PangoLogAttr,
                       attrs_len: c_int);
    pub fn pango_find_paragraph_boundary(text: *gchar, length: gint,
                                         paragraph_delimiter_index: *mut gint,
                                         next_paragraph_start: *mut gint);
    pub fn pango_get_log_attrs(text: *c_schar, length: c_int, level: c_int,
                               language: *mut PangoLanguage,
                               log_attrs: *mut PangoLogAttr,
                               attrs_len: c_int);
    pub fn pango_fontset_get_type() -> GType;
    pub fn pango_fontset_get_font(fontset: *mut PangoFontset, wc: guint) ->
     *mut PangoFont;
    pub fn pango_fontset_get_metrics(fontset: *mut PangoFontset) ->
     *mut PangoFontMetrics;
    pub fn pango_fontset_foreach(fontset: *mut PangoFontset,
                                 func: PangoFontsetForeachFunc,
                                 data: gpointer);
    pub fn pango_font_map_get_type() -> GType;
    pub fn pango_font_map_create_context(fontmap: *mut PangoFontMap) ->
     *mut PangoContext;
    pub fn pango_font_map_load_font(fontmap: *mut PangoFontMap,
                                    context: *mut PangoContext,
                                    desc: *PangoFontDescription) ->
     *mut PangoFont;
    pub fn pango_font_map_load_fontset(fontmap: *mut PangoFontMap,
                                       context: *mut PangoContext,
                                       desc: *PangoFontDescription,
                                       language: *mut PangoLanguage) ->
     *mut PangoFontset;
    pub fn pango_font_map_list_families(fontmap: *mut PangoFontMap,
                                        families:
                                            *mut *mut *mut PangoFontFamily,
                                        n_families: *mut c_int);
    pub fn pango_font_map_get_serial(fontmap: *mut PangoFontMap) -> guint;
    pub fn pango_font_map_changed(fontmap: *mut PangoFontMap);
    pub fn pango_context_get_type() -> GType;
    pub fn pango_context_new() -> *mut PangoContext;
    pub fn pango_context_changed(context: *mut PangoContext);
    pub fn pango_context_set_font_map(context: *mut PangoContext,
                                      font_map: *mut PangoFontMap);
    pub fn pango_context_get_font_map(context: *mut PangoContext) ->
     *mut PangoFontMap;
    pub fn pango_context_get_serial(context: *mut PangoContext) -> guint;
    pub fn pango_context_list_families(context: *mut PangoContext,
                                       families:
                                           *mut *mut *mut PangoFontFamily,
                                       n_families: *mut c_int);
    pub fn pango_context_load_font(context: *mut PangoContext,
                                   desc: *PangoFontDescription) ->
     *mut PangoFont;
    pub fn pango_context_load_fontset(context: *mut PangoContext,
                                      desc: *PangoFontDescription,
                                      language: *mut PangoLanguage) ->
     *mut PangoFontset;
    pub fn pango_context_get_metrics(context: *mut PangoContext,
                                     desc: *PangoFontDescription,
                                     language: *mut PangoLanguage) ->
     *mut PangoFontMetrics;
    pub fn pango_context_set_font_description(context: *mut PangoContext,
                                              desc: *PangoFontDescription);
    pub fn pango_context_get_font_description(context: *mut PangoContext) ->
     *mut PangoFontDescription;
    pub fn pango_context_get_language(context: *mut PangoContext) ->
     *mut PangoLanguage;
    pub fn pango_context_set_language(context: *mut PangoContext,
                                      language: *mut PangoLanguage);
    pub fn pango_context_set_base_dir(context: *mut PangoContext,
                                      direction: PangoDirection);
    pub fn pango_context_get_base_dir(context: *mut PangoContext) ->
     PangoDirection;
    pub fn pango_context_set_base_gravity(context: *mut PangoContext,
                                          gravity: PangoGravity);
    pub fn pango_context_get_base_gravity(context: *mut PangoContext) ->
     PangoGravity;
    pub fn pango_context_get_gravity(context: *mut PangoContext) ->
     PangoGravity;
    pub fn pango_context_set_gravity_hint(context: *mut PangoContext,
                                          hint: PangoGravityHint);
    pub fn pango_context_get_gravity_hint(context: *mut PangoContext) ->
     PangoGravityHint;
    pub fn pango_context_set_matrix(context: *mut PangoContext,
                                    matrix: *PangoMatrix);
    pub fn pango_context_get_matrix(context: *mut PangoContext) ->
     *PangoMatrix;
    pub fn pango_itemize(context: *mut PangoContext, text: *c_schar,
                         start_index: c_int, length: c_int,
                         attrs: *mut PangoAttrList,
                         cached_iter: *mut PangoAttrIterator) -> *mut GList;
    pub fn pango_itemize_with_base_dir(context: *mut PangoContext,
                                       base_dir: PangoDirection,
                                       text: *c_schar, start_index: c_int,
                                       length: c_int,
                                       attrs: *mut PangoAttrList,
                                       cached_iter: *mut PangoAttrIterator) ->
     *mut GList;
    pub fn pango_glyph_string_new() -> *mut PangoGlyphString;
    pub fn pango_glyph_string_set_size(string: *mut PangoGlyphString,
                                       new_len: gint);
    pub fn pango_glyph_string_get_type() -> GType;
    pub fn pango_glyph_string_copy(string: *mut PangoGlyphString) ->
     *mut PangoGlyphString;
    pub fn pango_glyph_string_free(string: *mut PangoGlyphString);
    pub fn pango_glyph_string_extents(glyphs: *mut PangoGlyphString,
                                      font: *mut PangoFont,
                                      ink_rect: *mut PangoRectangle,
                                      logical_rect: *mut PangoRectangle);
    pub fn pango_glyph_string_get_width(glyphs: *mut PangoGlyphString) ->
     c_int;
    pub fn pango_glyph_string_extents_range(glyphs: *mut PangoGlyphString,
                                            start: c_int, end: c_int,
                                            font: *mut PangoFont,
                                            ink_rect: *mut PangoRectangle,
                                            logical_rect:
                                                *mut PangoRectangle);
    pub fn pango_glyph_string_get_logical_widths(glyphs:
                                                     *mut PangoGlyphString,
                                                 text: *c_schar,
                                                 length: c_int,
                                                 embedding_level: c_int,
                                                 logical_widths: *mut c_int);
    pub fn pango_glyph_string_index_to_x(glyphs: *mut PangoGlyphString,
                                         text: *mut c_schar, length: c_int,
                                         analysis: *mut PangoAnalysis,
                                         index_: c_int, trailing: gboolean,
                                         x_pos: *mut c_int);
    pub fn pango_glyph_string_x_to_index(glyphs: *mut PangoGlyphString,
                                         text: *mut c_schar, length: c_int,
                                         analysis: *mut PangoAnalysis,
                                         x_pos: c_int, index_: *mut c_int,
                                         trailing: *mut c_int);
    pub fn pango_shape(text: *gchar, length: gint, analysis: *PangoAnalysis,
                       glyphs: *mut PangoGlyphString);
    pub fn pango_shape_full(item_text: *gchar, item_length: gint,
                            paragraph_text: *gchar, paragraph_length: gint,
                            analysis: *PangoAnalysis,
                            glyphs: *mut PangoGlyphString);
    pub fn pango_reorder_items(logical_items: *mut GList) -> *mut GList;
    pub fn pango_attr_type_get_type() -> GType;
    pub fn pango_underline_get_type() -> GType;
    pub fn pango_bidi_type_get_type() -> GType;
    pub fn pango_direction_get_type() -> GType;
    pub fn pango_coverage_level_get_type() -> GType;
    pub fn pango_style_get_type() -> GType;
    pub fn pango_variant_get_type() -> GType;
    pub fn pango_weight_get_type() -> GType;
    pub fn pango_stretch_get_type() -> GType;
    pub fn pango_font_mask_get_type() -> GType;
    pub fn pango_gravity_get_type() -> GType;
    pub fn pango_gravity_hint_get_type() -> GType;
    pub fn pango_alignment_get_type() -> GType;
    pub fn pango_wrap_mode_get_type() -> GType;
    pub fn pango_ellipsize_mode_get_type() -> GType;
    pub fn pango_render_part_get_type() -> GType;
    pub fn pango_script_get_type() -> GType;
    pub fn pango_tab_align_get_type() -> GType;
    pub fn pango_glyph_item_get_type() -> GType;
    pub fn pango_glyph_item_split(orig: *mut PangoGlyphItem, text: *c_schar,
                                  split_index: c_int) -> *mut PangoGlyphItem;
    pub fn pango_glyph_item_copy(orig: *mut PangoGlyphItem) ->
     *mut PangoGlyphItem;
    pub fn pango_glyph_item_free(glyph_item: *mut PangoGlyphItem);
    pub fn pango_glyph_item_apply_attrs(glyph_item: *mut PangoGlyphItem,
                                        text: *c_schar,
                                        list: *mut PangoAttrList) ->
     *mut GSList;
    pub fn pango_glyph_item_letter_space(glyph_item: *mut PangoGlyphItem,
                                         text: *c_schar,
                                         log_attrs: *mut PangoLogAttr,
                                         letter_spacing: c_int);
    pub fn pango_glyph_item_get_logical_widths(glyph_item:
                                                   *mut PangoGlyphItem,
                                               text: *c_schar,
                                               logical_widths: *mut c_int);
    pub fn pango_glyph_item_iter_get_type() -> GType;
    pub fn pango_glyph_item_iter_copy(orig: *mut PangoGlyphItemIter) ->
     *mut PangoGlyphItemIter;
    pub fn pango_glyph_item_iter_free(iter: *mut PangoGlyphItemIter);
    pub fn pango_glyph_item_iter_init_start(iter: *mut PangoGlyphItemIter,
                                            glyph_item: *mut PangoGlyphItem,
                                            text: *c_schar) -> gboolean;
    pub fn pango_glyph_item_iter_init_end(iter: *mut PangoGlyphItemIter,
                                          glyph_item: *mut PangoGlyphItem,
                                          text: *c_schar) -> gboolean;
    pub fn pango_glyph_item_iter_next_cluster(iter: *mut PangoGlyphItemIter)
     -> gboolean;
    pub fn pango_glyph_item_iter_prev_cluster(iter: *mut PangoGlyphItemIter)
     -> gboolean;
    pub fn pango_tab_array_new(initial_size: gint,
                               positions_in_pixels: gboolean) ->
     *mut PangoTabArray;
    pub fn pango_tab_array_new_with_positions(size: gint,
                                              positions_in_pixels: gboolean,
                                              first_alignment: PangoTabAlign,
                                              first_position: gint, ...) ->
     *mut PangoTabArray;
    pub fn pango_tab_array_get_type() -> GType;
    pub fn pango_tab_array_copy(src: *mut PangoTabArray) ->
     *mut PangoTabArray;
    pub fn pango_tab_array_free(tab_array: *mut PangoTabArray);
    pub fn pango_tab_array_get_size(tab_array: *mut PangoTabArray) -> gint;
    pub fn pango_tab_array_resize(tab_array: *mut PangoTabArray,
                                  new_size: gint);
    pub fn pango_tab_array_set_tab(tab_array: *mut PangoTabArray,
                                   tab_index: gint, alignment: PangoTabAlign,
                                   location: gint);
    pub fn pango_tab_array_get_tab(tab_array: *mut PangoTabArray,
                                   tab_index: gint,
                                   alignment: *mut PangoTabAlign,
                                   location: *mut gint);
    pub fn pango_tab_array_get_tabs(tab_array: *mut PangoTabArray,
                                    alignments: *mut *mut PangoTabAlign,
                                    locations: *mut *mut gint);
    pub fn pango_tab_array_get_positions_in_pixels(tab_array:
                                                       *mut PangoTabArray) ->
     gboolean;
    pub fn pango_layout_get_type() -> GType;
    pub fn pango_layout_new(context: *mut PangoContext) -> *mut PangoLayout;
    pub fn pango_layout_copy(src: *mut PangoLayout) -> *mut PangoLayout;
    pub fn pango_layout_get_context(layout: *mut PangoLayout) ->
     *mut PangoContext;
    pub fn pango_layout_set_attributes(layout: *mut PangoLayout,
                                       attrs: *mut PangoAttrList);
    pub fn pango_layout_get_attributes(layout: *mut PangoLayout) ->
     *mut PangoAttrList;
    pub fn pango_layout_set_text(layout: *mut PangoLayout, text: *c_schar,
                                 length: c_int);
    pub fn pango_layout_get_text(layout: *mut PangoLayout) -> *c_schar;
    pub fn pango_layout_get_character_count(layout: *mut PangoLayout) -> gint;
    pub fn pango_layout_set_markup(layout: *mut PangoLayout, markup: *c_schar,
                                   length: c_int);
    pub fn pango_layout_set_markup_with_accel(layout: *mut PangoLayout,
                                              markup: *c_schar, length: c_int,
                                              accel_marker: gunichar,
                                              accel_char: *mut gunichar);
    pub fn pango_layout_set_font_description(layout: *mut PangoLayout,
                                             desc: *PangoFontDescription);
    pub fn pango_layout_get_font_description(layout: *mut PangoLayout) ->
     *PangoFontDescription;
    pub fn pango_layout_set_width(layout: *mut PangoLayout, width: c_int);
    pub fn pango_layout_get_width(layout: *mut PangoLayout) -> c_int;
    pub fn pango_layout_set_height(layout: *mut PangoLayout, height: c_int);
    pub fn pango_layout_get_height(layout: *mut PangoLayout) -> c_int;
    pub fn pango_layout_set_wrap(layout: *mut PangoLayout,
                                 wrap: PangoWrapMode);
    pub fn pango_layout_get_wrap(layout: *mut PangoLayout) -> PangoWrapMode;
    pub fn pango_layout_is_wrapped(layout: *mut PangoLayout) -> gboolean;
    pub fn pango_layout_set_indent(layout: *mut PangoLayout, indent: c_int);
    pub fn pango_layout_get_indent(layout: *mut PangoLayout) -> c_int;
    pub fn pango_layout_set_spacing(layout: *mut PangoLayout, spacing: c_int);
    pub fn pango_layout_get_spacing(layout: *mut PangoLayout) -> c_int;
    pub fn pango_layout_set_justify(layout: *mut PangoLayout,
                                    justify: gboolean);
    pub fn pango_layout_get_justify(layout: *mut PangoLayout) -> gboolean;
    pub fn pango_layout_set_auto_dir(layout: *mut PangoLayout,
                                     auto_dir: gboolean);
    pub fn pango_layout_get_auto_dir(layout: *mut PangoLayout) -> gboolean;
    pub fn pango_layout_set_alignment(layout: *mut PangoLayout,
                                      alignment: PangoAlignment);
    pub fn pango_layout_get_alignment(layout: *mut PangoLayout) ->
     PangoAlignment;
    pub fn pango_layout_set_tabs(layout: *mut PangoLayout,
                                 tabs: *mut PangoTabArray);
    pub fn pango_layout_get_tabs(layout: *mut PangoLayout) ->
     *mut PangoTabArray;
    pub fn pango_layout_set_single_paragraph_mode(layout: *mut PangoLayout,
                                                  setting: gboolean);
    pub fn pango_layout_get_single_paragraph_mode(layout: *mut PangoLayout) ->
     gboolean;
    pub fn pango_layout_set_ellipsize(layout: *mut PangoLayout,
                                      ellipsize: PangoEllipsizeMode);
    pub fn pango_layout_get_ellipsize(layout: *mut PangoLayout) ->
     PangoEllipsizeMode;
    pub fn pango_layout_is_ellipsized(layout: *mut PangoLayout) -> gboolean;
    pub fn pango_layout_get_unknown_glyphs_count(layout: *mut PangoLayout) ->
     c_int;
    pub fn pango_layout_context_changed(layout: *mut PangoLayout);
    pub fn pango_layout_get_serial(layout: *mut PangoLayout) -> guint;
    pub fn pango_layout_get_log_attrs(layout: *mut PangoLayout,
                                      attrs: *mut *mut PangoLogAttr,
                                      n_attrs: *mut gint);
    pub fn pango_layout_get_log_attrs_readonly(layout: *mut PangoLayout,
                                               n_attrs: *mut gint) ->
     *PangoLogAttr;
    pub fn pango_layout_index_to_pos(layout: *mut PangoLayout, index_: c_int,
                                     pos: *mut PangoRectangle);
    pub fn pango_layout_index_to_line_x(layout: *mut PangoLayout,
                                        index_: c_int, trailing: gboolean,
                                        line: *mut c_int, x_pos: *mut c_int);
    pub fn pango_layout_get_cursor_pos(layout: *mut PangoLayout,
                                       index_: c_int,
                                       strong_pos: *mut PangoRectangle,
                                       weak_pos: *mut PangoRectangle);
    pub fn pango_layout_move_cursor_visually(layout: *mut PangoLayout,
                                             strong: gboolean,
                                             old_index: c_int,
                                             old_trailing: c_int,
                                             direction: c_int,
                                             new_index: *mut c_int,
                                             new_trailing: *mut c_int);
    pub fn pango_layout_xy_to_index(layout: *mut PangoLayout, x: c_int,
                                    y: c_int, index_: *mut c_int,
                                    trailing: *mut c_int) -> gboolean;
    pub fn pango_layout_get_extents(layout: *mut PangoLayout,
                                    ink_rect: *mut PangoRectangle,
                                    logical_rect: *mut PangoRectangle);
    pub fn pango_layout_get_pixel_extents(layout: *mut PangoLayout,
                                          ink_rect: *mut PangoRectangle,
                                          logical_rect: *mut PangoRectangle);
    pub fn pango_layout_get_size(layout: *mut PangoLayout, width: *mut c_int,
                                 height: *mut c_int);
    pub fn pango_layout_get_pixel_size(layout: *mut PangoLayout,
                                       width: *mut c_int, height: *mut c_int);
    pub fn pango_layout_get_baseline(layout: *mut PangoLayout) -> c_int;
    pub fn pango_layout_get_line_count(layout: *mut PangoLayout) -> c_int;
    pub fn pango_layout_get_line(layout: *mut PangoLayout, line: c_int) ->
     *mut PangoLayoutLine;
    pub fn pango_layout_get_line_readonly(layout: *mut PangoLayout,
                                          line: c_int) ->
     *mut PangoLayoutLine;
    pub fn pango_layout_get_lines(layout: *mut PangoLayout) -> *mut GSList;
    pub fn pango_layout_get_lines_readonly(layout: *mut PangoLayout) ->
     *mut GSList;
    pub fn pango_layout_line_get_type() -> GType;
    pub fn pango_layout_line_ref(line: *mut PangoLayoutLine) ->
     *mut PangoLayoutLine;
    pub fn pango_layout_line_unref(line: *mut PangoLayoutLine);
    pub fn pango_layout_line_x_to_index(line: *mut PangoLayoutLine,
                                        x_pos: c_int, index_: *mut c_int,
                                        trailing: *mut c_int) -> gboolean;
    pub fn pango_layout_line_index_to_x(line: *mut PangoLayoutLine,
                                        index_: c_int, trailing: gboolean,
                                        x_pos: *mut c_int);
    pub fn pango_layout_line_get_x_ranges(line: *mut PangoLayoutLine,
                                          start_index: c_int,
                                          end_index: c_int,
                                          ranges: *mut *mut c_int,
                                          n_ranges: *mut c_int);
    pub fn pango_layout_line_get_extents(line: *mut PangoLayoutLine,
                                         ink_rect: *mut PangoRectangle,
                                         logical_rect: *mut PangoRectangle);
    pub fn pango_layout_line_get_pixel_extents(layout_line:
                                                   *mut PangoLayoutLine,
                                               ink_rect: *mut PangoRectangle,
                                               logical_rect:
                                                   *mut PangoRectangle);
    pub fn pango_layout_iter_get_type() -> GType;
    pub fn pango_layout_get_iter(layout: *mut PangoLayout) ->
     *mut PangoLayoutIter;
    pub fn pango_layout_iter_copy(iter: *mut PangoLayoutIter) ->
     *mut PangoLayoutIter;
    pub fn pango_layout_iter_free(iter: *mut PangoLayoutIter);
    pub fn pango_layout_iter_get_index(iter: *mut PangoLayoutIter) -> c_int;
    pub fn pango_layout_iter_get_run(iter: *mut PangoLayoutIter) ->
     *mut PangoLayoutRun;
    pub fn pango_layout_iter_get_run_readonly(iter: *mut PangoLayoutIter) ->
     *mut PangoLayoutRun;
    pub fn pango_layout_iter_get_line(iter: *mut PangoLayoutIter) ->
     *mut PangoLayoutLine;
    pub fn pango_layout_iter_get_line_readonly(iter: *mut PangoLayoutIter) ->
     *mut PangoLayoutLine;
    pub fn pango_layout_iter_at_last_line(iter: *mut PangoLayoutIter) ->
     gboolean;
    pub fn pango_layout_iter_get_layout(iter: *mut PangoLayoutIter) ->
     *mut PangoLayout;
    pub fn pango_layout_iter_next_char(iter: *mut PangoLayoutIter) ->
     gboolean;
    pub fn pango_layout_iter_next_cluster(iter: *mut PangoLayoutIter) ->
     gboolean;
    pub fn pango_layout_iter_next_run(iter: *mut PangoLayoutIter) -> gboolean;
    pub fn pango_layout_iter_next_line(iter: *mut PangoLayoutIter) ->
     gboolean;
    pub fn pango_layout_iter_get_char_extents(iter: *mut PangoLayoutIter,
                                              logical_rect:
                                                  *mut PangoRectangle);
    pub fn pango_layout_iter_get_cluster_extents(iter: *mut PangoLayoutIter,
                                                 ink_rect:
                                                     *mut PangoRectangle,
                                                 logical_rect:
                                                     *mut PangoRectangle);
    pub fn pango_layout_iter_get_run_extents(iter: *mut PangoLayoutIter,
                                             ink_rect: *mut PangoRectangle,
                                             logical_rect:
                                                 *mut PangoRectangle);
    pub fn pango_layout_iter_get_line_extents(iter: *mut PangoLayoutIter,
                                              ink_rect: *mut PangoRectangle,
                                              logical_rect:
                                                  *mut PangoRectangle);
    pub fn pango_layout_iter_get_line_yrange(iter: *mut PangoLayoutIter,
                                             y0_: *mut c_int,
                                             y1_: *mut c_int);
    pub fn pango_layout_iter_get_layout_extents(iter: *mut PangoLayoutIter,
                                                ink_rect: *mut PangoRectangle,
                                                logical_rect:
                                                    *mut PangoRectangle);
    pub fn pango_layout_iter_get_baseline(iter: *mut PangoLayoutIter) ->
     c_int;
    pub fn pango_renderer_get_type() -> GType;
    pub fn pango_renderer_draw_layout(renderer: *mut PangoRenderer,
                                      layout: *mut PangoLayout, x: c_int,
                                      y: c_int);
    pub fn pango_renderer_draw_layout_line(renderer: *mut PangoRenderer,
                                           line: *mut PangoLayoutLine,
                                           x: c_int, y: c_int);
    pub fn pango_renderer_draw_glyphs(renderer: *mut PangoRenderer,
                                      font: *mut PangoFont,
                                      glyphs: *mut PangoGlyphString, x: c_int,
                                      y: c_int);
    pub fn pango_renderer_draw_glyph_item(renderer: *mut PangoRenderer,
                                          text: *c_schar,
                                          glyph_item: *mut PangoGlyphItem,
                                          x: c_int, y: c_int);
    pub fn pango_renderer_draw_rectangle(renderer: *mut PangoRenderer,
                                         part: PangoRenderPart, x: c_int,
                                         y: c_int, width: c_int,
                                         height: c_int);
    pub fn pango_renderer_draw_error_underline(renderer: *mut PangoRenderer,
                                               x: c_int, y: c_int,
                                               width: c_int, height: c_int);
    pub fn pango_renderer_draw_trapezoid(renderer: *mut PangoRenderer,
                                         part: PangoRenderPart, y1_: c_double,
                                         x11: c_double, x21: c_double,
                                         y2: c_double, x12: c_double,
                                         x22: c_double);
    pub fn pango_renderer_draw_glyph(renderer: *mut PangoRenderer,
                                     font: *mut PangoFont, glyph: PangoGlyph,
                                     x: c_double, y: c_double);
    pub fn pango_renderer_activate(renderer: *mut PangoRenderer);
    pub fn pango_renderer_deactivate(renderer: *mut PangoRenderer);
    pub fn pango_renderer_part_changed(renderer: *mut PangoRenderer,
                                       part: PangoRenderPart);
    pub fn pango_renderer_set_color(renderer: *mut PangoRenderer,
                                    part: PangoRenderPart,
                                    color: *PangoColor);
    pub fn pango_renderer_get_color(renderer: *mut PangoRenderer,
                                    part: PangoRenderPart) -> *mut PangoColor;
    pub fn pango_renderer_set_matrix(renderer: *mut PangoRenderer,
                                     matrix: *PangoMatrix);
    pub fn pango_renderer_get_matrix(renderer: *mut PangoRenderer) ->
     *PangoMatrix;
    pub fn pango_renderer_get_layout(renderer: *mut PangoRenderer) ->
     *mut PangoLayout;
    pub fn pango_renderer_get_layout_line(renderer: *mut PangoRenderer) ->
     *mut PangoLayoutLine;
    pub fn __underflow(arg1: *mut _IO_FILE) -> c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: c_int) -> c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> c_int;
    pub fn _IO_putc(__c: c_int, __fp: *mut _IO_FILE) -> c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE, arg2: *c_schar,
                       arg3: __gnuc_va_list, arg4: *mut c_int) -> c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE, arg2: *c_schar,
                        arg3: __gnuc_va_list) -> c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: c_int, arg3: __ssize_t) ->
     __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut c_void, arg3: size_t) ->
     size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t, arg3: c_int,
                       arg4: c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t, arg3: c_int) ->
     __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *c_schar) -> c_int;
    pub fn rename(__old: *c_schar, __new: *c_schar) -> c_int;
    pub fn renameat(__oldfd: c_int, __old: *c_schar, __newfd: c_int,
                    __new: *c_schar) -> c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut c_schar) -> *mut c_schar;
    pub fn tmpnam_r(__s: *mut c_schar) -> *mut c_schar;
    pub fn tempnam(__dir: *c_schar, __pfx: *c_schar) -> *mut c_schar;
    pub fn fclose(__stream: *mut FILE) -> c_int;
    pub fn fflush(__stream: *mut FILE) -> c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> c_int;
    pub fn fopen(__filename: *c_schar, __modes: *c_schar) -> *mut FILE;
    pub fn freopen(__filename: *c_schar, __modes: *c_schar,
                   __stream: *mut FILE) -> *mut FILE;
    pub fn fdopen(__fd: c_int, __modes: *c_schar) -> *mut FILE;
    pub fn fmemopen(__s: *mut c_void, __len: size_t, __modes: *c_schar) ->
     *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut c_schar, __sizeloc: *mut size_t)
     -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut c_schar);
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut c_schar, __modes: c_int,
                   __n: size_t) -> c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut c_schar,
                     __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE, __format: *c_schar, ...) -> c_int;
    pub fn printf(__format: *c_schar, ...) -> c_int;
    pub fn sprintf(__s: *mut c_schar, __format: *c_schar, ...) -> c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *c_schar, __arg: __gnuc_va_list)
     -> c_int;
    pub fn vprintf(__format: *c_schar, __arg: __gnuc_va_list) -> c_int;
    pub fn vsprintf(__s: *mut c_schar, __format: *c_schar,
                    __arg: __gnuc_va_list) -> c_int;
    pub fn snprintf(__s: *mut c_schar, __maxlen: size_t,
                    __format: *c_schar, ...) -> c_int;
    pub fn vsnprintf(__s: *mut c_schar, __maxlen: size_t, __format: *c_schar,
                     __arg: __gnuc_va_list) -> c_int;
    pub fn vdprintf(__fd: c_int, __fmt: *c_schar, __arg: __gnuc_va_list) ->
     c_int;
    pub fn dprintf(__fd: c_int, __fmt: *c_schar, ...) -> c_int;
    pub fn fscanf(__stream: *mut FILE, __format: *c_schar, ...) -> c_int;
    pub fn scanf(__format: *c_schar, ...) -> c_int;
    pub fn sscanf(__s: *c_schar, __format: *c_schar, ...) -> c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *c_schar, __arg: __gnuc_va_list)
     -> c_int;
    pub fn vscanf(__format: *c_schar, __arg: __gnuc_va_list) -> c_int;
    pub fn vsscanf(__s: *c_schar, __format: *c_schar, __arg: __gnuc_va_list)
     -> c_int;
    pub fn fgetc(__stream: *mut FILE) -> c_int;
    pub fn getc(__stream: *mut FILE) -> c_int;
    pub fn getchar() -> c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> c_int;
    pub fn getchar_unlocked() -> c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> c_int;
    pub fn fputc(__c: c_int, __stream: *mut FILE) -> c_int;
    pub fn putc(__c: c_int, __stream: *mut FILE) -> c_int;
    pub fn putchar(__c: c_int) -> c_int;
    pub fn fputc_unlocked(__c: c_int, __stream: *mut FILE) -> c_int;
    pub fn putc_unlocked(__c: c_int, __stream: *mut FILE) -> c_int;
    pub fn putchar_unlocked(__c: c_int) -> c_int;
    pub fn getw(__stream: *mut FILE) -> c_int;
    pub fn putw(__w: c_int, __stream: *mut FILE) -> c_int;
    pub fn fgets(__s: *mut c_schar, __n: c_int, __stream: *mut FILE) ->
     *mut c_schar;
    pub fn gets(__s: *mut c_schar) -> *mut c_schar;
    pub fn __getdelim(__lineptr: *mut *mut c_schar, __n: *mut size_t,
                      __delimiter: c_int, __stream: *mut FILE) -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut c_schar, __n: *mut size_t,
                    __delimiter: c_int, __stream: *mut FILE) -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut c_schar, __n: *mut size_t,
                   __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *c_schar, __stream: *mut FILE) -> c_int;
    pub fn puts(__s: *c_schar) -> c_int;
    pub fn ungetc(__c: c_int, __stream: *mut FILE) -> c_int;
    pub fn fread(__ptr: *mut c_void, __size: size_t, __n: size_t,
                 __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *c_void, __size: size_t, __n: size_t, __s: *mut FILE)
     -> size_t;
    pub fn fread_unlocked(__ptr: *mut c_void, __size: size_t, __n: size_t,
                          __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *c_void, __size: size_t, __n: size_t,
                           __stream: *mut FILE) -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: c_long, __whence: c_int) ->
     c_int;
    pub fn ftell(__stream: *mut FILE) -> c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE, __off: __off_t, __whence: c_int) ->
     c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *fpos_t) -> c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> c_int;
    pub fn ferror(__stream: *mut FILE) -> c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> c_int;
    pub fn perror(__s: *c_schar);
    pub fn fileno(__stream: *mut FILE) -> c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> c_int;
    pub fn popen(__command: *c_schar, __modes: *c_schar) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> c_int;
    pub fn ctermid(__s: *mut c_schar) -> *mut c_schar;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn pango_split_file_list(str: *c_schar) -> *mut *mut c_schar;
    pub fn pango_trim_string(str: *c_schar) -> *mut c_schar;
    pub fn pango_read_line(stream: *mut FILE, str: *mut GString) -> gint;
    pub fn pango_skip_space(pos: *mut *c_schar) -> gboolean;
    pub fn pango_scan_word(pos: *mut *c_schar, out: *mut GString) -> gboolean;
    pub fn pango_scan_string(pos: *mut *c_schar, out: *mut GString) ->
     gboolean;
    pub fn pango_scan_int(pos: *mut *c_schar, out: *mut c_int) -> gboolean;
    pub fn pango_parse_enum(_type: GType, str: *c_schar, value: *mut c_int,
                            warn: gboolean,
                            possible_values: *mut *mut c_schar) -> gboolean;
    pub fn pango_parse_style(str: *c_schar, style: *mut PangoStyle,
                             warn: gboolean) -> gboolean;
    pub fn pango_parse_variant(str: *c_schar, variant: *mut PangoVariant,
                               warn: gboolean) -> gboolean;
    pub fn pango_parse_weight(str: *c_schar, weight: *mut PangoWeight,
                              warn: gboolean) -> gboolean;
    pub fn pango_parse_stretch(str: *c_schar, stretch: *mut PangoStretch,
                               warn: gboolean) -> gboolean;
    pub fn pango_quantize_line_geometry(thickness: *mut c_int,
                                        position: *mut c_int);
    pub fn pango_log2vis_get_embedding_levels(text: *gchar, length: c_int,
                                              pbase_dir: *mut PangoDirection)
     -> *mut guint8;
    pub fn pango_is_zero_width(ch: gunichar) -> gboolean;
    pub fn pango_version() -> c_int;
    pub fn pango_version_string() -> *c_schar;
    pub fn pango_version_check(required_major: c_int, required_minor: c_int,
                               required_micro: c_int) -> *c_schar;
    pub fn cairo_version() -> c_int;
    pub fn cairo_version_string() -> *c_schar;
    pub fn cairo_create(target: *mut cairo_surface_t) -> *mut cairo_t;
    pub fn cairo_reference(cr: *mut cairo_t) -> *mut cairo_t;
    pub fn cairo_destroy(cr: *mut cairo_t);
    pub fn cairo_get_reference_count(cr: *mut cairo_t) -> c_uint;
    pub fn cairo_get_user_data(cr: *mut cairo_t, key: *cairo_user_data_key_t)
     -> *mut c_void;
    pub fn cairo_set_user_data(cr: *mut cairo_t, key: *cairo_user_data_key_t,
                               user_data: *mut c_void,
                               destroy: cairo_destroy_func_t) ->
     cairo_status_t;
    pub fn cairo_save(cr: *mut cairo_t);
    pub fn cairo_restore(cr: *mut cairo_t);
    pub fn cairo_push_group(cr: *mut cairo_t);
    pub fn cairo_push_group_with_content(cr: *mut cairo_t,
                                         content: cairo_content_t);
    pub fn cairo_pop_group(cr: *mut cairo_t) -> *mut cairo_pattern_t;
    pub fn cairo_pop_group_to_source(cr: *mut cairo_t);
    pub fn cairo_set_operator(cr: *mut cairo_t, op: cairo_operator_t);
    pub fn cairo_set_source(cr: *mut cairo_t, source: *mut cairo_pattern_t);
    pub fn cairo_set_source_rgb(cr: *mut cairo_t, red: c_double,
                                green: c_double, blue: c_double);
    pub fn cairo_set_source_rgba(cr: *mut cairo_t, red: c_double,
                                 green: c_double, blue: c_double,
                                 alpha: c_double);
    pub fn cairo_set_source_surface(cr: *mut cairo_t,
                                    surface: *mut cairo_surface_t,
                                    x: c_double, y: c_double);
    pub fn cairo_set_tolerance(cr: *mut cairo_t, tolerance: c_double);
    pub fn cairo_set_antialias(cr: *mut cairo_t,
                               antialias: cairo_antialias_t);
    pub fn cairo_set_fill_rule(cr: *mut cairo_t,
                               fill_rule: cairo_fill_rule_t);
    pub fn cairo_set_line_width(cr: *mut cairo_t, width: c_double);
    pub fn cairo_set_line_cap(cr: *mut cairo_t, line_cap: cairo_line_cap_t);
    pub fn cairo_set_line_join(cr: *mut cairo_t,
                               line_join: cairo_line_join_t);
    pub fn cairo_set_dash(cr: *mut cairo_t, dashes: *c_double,
                          num_dashes: c_int, offset: c_double);
    pub fn cairo_set_miter_limit(cr: *mut cairo_t, limit: c_double);
    pub fn cairo_translate(cr: *mut cairo_t, tx: c_double, ty: c_double);
    pub fn cairo_scale(cr: *mut cairo_t, sx: c_double, sy: c_double);
    pub fn cairo_rotate(cr: *mut cairo_t, angle: c_double);
    pub fn cairo_transform(cr: *mut cairo_t, matrix: *cairo_matrix_t);
    pub fn cairo_set_matrix(cr: *mut cairo_t, matrix: *cairo_matrix_t);
    pub fn cairo_identity_matrix(cr: *mut cairo_t);
    pub fn cairo_user_to_device(cr: *mut cairo_t, x: *mut c_double,
                                y: *mut c_double);
    pub fn cairo_user_to_device_distance(cr: *mut cairo_t, dx: *mut c_double,
                                         dy: *mut c_double);
    pub fn cairo_device_to_user(cr: *mut cairo_t, x: *mut c_double,
                                y: *mut c_double);
    pub fn cairo_device_to_user_distance(cr: *mut cairo_t, dx: *mut c_double,
                                         dy: *mut c_double);
    pub fn cairo_new_path(cr: *mut cairo_t);
    pub fn cairo_move_to(cr: *mut cairo_t, x: c_double, y: c_double);
    pub fn cairo_new_sub_path(cr: *mut cairo_t);
    pub fn cairo_line_to(cr: *mut cairo_t, x: c_double, y: c_double);
    pub fn cairo_curve_to(cr: *mut cairo_t, x1: c_double, y1: c_double,
                          x2: c_double, y2: c_double, x3: c_double,
                          y3: c_double);
    pub fn cairo_arc(cr: *mut cairo_t, xc: c_double, yc: c_double,
                     radius: c_double, angle1: c_double, angle2: c_double);
    pub fn cairo_arc_negative(cr: *mut cairo_t, xc: c_double, yc: c_double,
                              radius: c_double, angle1: c_double,
                              angle2: c_double);
    pub fn cairo_rel_move_to(cr: *mut cairo_t, dx: c_double, dy: c_double);
    pub fn cairo_rel_line_to(cr: *mut cairo_t, dx: c_double, dy: c_double);
    pub fn cairo_rel_curve_to(cr: *mut cairo_t, dx1: c_double, dy1: c_double,
                              dx2: c_double, dy2: c_double, dx3: c_double,
                              dy3: c_double);
    pub fn cairo_rectangle(cr: *mut cairo_t, x: c_double, y: c_double,
                           width: c_double, height: c_double);
    pub fn cairo_close_path(cr: *mut cairo_t);
    pub fn cairo_path_extents(cr: *mut cairo_t, x1: *mut c_double,
                              y1: *mut c_double, x2: *mut c_double,
                              y2: *mut c_double);
    pub fn cairo_paint(cr: *mut cairo_t);
    pub fn cairo_paint_with_alpha(cr: *mut cairo_t, alpha: c_double);
    pub fn cairo_mask(cr: *mut cairo_t, pattern: *mut cairo_pattern_t);
    pub fn cairo_mask_surface(cr: *mut cairo_t, surface: *mut cairo_surface_t,
                              surface_x: c_double, surface_y: c_double);
    pub fn cairo_stroke(cr: *mut cairo_t);
    pub fn cairo_stroke_preserve(cr: *mut cairo_t);
    pub fn cairo_fill(cr: *mut cairo_t);
    pub fn cairo_fill_preserve(cr: *mut cairo_t);
    pub fn cairo_copy_page(cr: *mut cairo_t);
    pub fn cairo_show_page(cr: *mut cairo_t);
    pub fn cairo_in_stroke(cr: *mut cairo_t, x: c_double, y: c_double) ->
     cairo_bool_t;
    pub fn cairo_in_fill(cr: *mut cairo_t, x: c_double, y: c_double) ->
     cairo_bool_t;
    pub fn cairo_in_clip(cr: *mut cairo_t, x: c_double, y: c_double) ->
     cairo_bool_t;
    pub fn cairo_stroke_extents(cr: *mut cairo_t, x1: *mut c_double,
                                y1: *mut c_double, x2: *mut c_double,
                                y2: *mut c_double);
    pub fn cairo_fill_extents(cr: *mut cairo_t, x1: *mut c_double,
                              y1: *mut c_double, x2: *mut c_double,
                              y2: *mut c_double);
    pub fn cairo_reset_clip(cr: *mut cairo_t);
    pub fn cairo_clip(cr: *mut cairo_t);
    pub fn cairo_clip_preserve(cr: *mut cairo_t);
    pub fn cairo_clip_extents(cr: *mut cairo_t, x1: *mut c_double,
                              y1: *mut c_double, x2: *mut c_double,
                              y2: *mut c_double);
    pub fn cairo_copy_clip_rectangle_list(cr: *mut cairo_t) ->
     *mut cairo_rectangle_list_t;
    pub fn cairo_rectangle_list_destroy(rectangle_list:
                                            *mut cairo_rectangle_list_t);
    pub fn cairo_glyph_allocate(num_glyphs: c_int) -> *mut cairo_glyph_t;
    pub fn cairo_glyph_free(glyphs: *mut cairo_glyph_t);
    pub fn cairo_text_cluster_allocate(num_clusters: c_int) ->
     *mut cairo_text_cluster_t;
    pub fn cairo_text_cluster_free(clusters: *mut cairo_text_cluster_t);
    pub fn cairo_font_options_create() -> *mut cairo_font_options_t;
    pub fn cairo_font_options_copy(original: *cairo_font_options_t) ->
     *mut cairo_font_options_t;
    pub fn cairo_font_options_destroy(options: *mut cairo_font_options_t);
    pub fn cairo_font_options_status(options: *mut cairo_font_options_t) ->
     cairo_status_t;
    pub fn cairo_font_options_merge(options: *mut cairo_font_options_t,
                                    other: *cairo_font_options_t);
    pub fn cairo_font_options_equal(options: *cairo_font_options_t,
                                    other: *cairo_font_options_t) ->
     cairo_bool_t;
    pub fn cairo_font_options_hash(options: *cairo_font_options_t) -> c_ulong;
    pub fn cairo_font_options_set_antialias(options:
                                                *mut cairo_font_options_t,
                                            antialias: cairo_antialias_t);
    pub fn cairo_font_options_get_antialias(options: *cairo_font_options_t) ->
     cairo_antialias_t;
    pub fn cairo_font_options_set_subpixel_order(options:
                                                     *mut cairo_font_options_t,
                                                 subpixel_order:
                                                     cairo_subpixel_order_t);
    pub fn cairo_font_options_get_subpixel_order(options:
                                                     *cairo_font_options_t) ->
     cairo_subpixel_order_t;
    pub fn cairo_font_options_set_hint_style(options:
                                                 *mut cairo_font_options_t,
                                             hint_style: cairo_hint_style_t);
    pub fn cairo_font_options_get_hint_style(options: *cairo_font_options_t)
     -> cairo_hint_style_t;
    pub fn cairo_font_options_set_hint_metrics(options:
                                                   *mut cairo_font_options_t,
                                               hint_metrics:
                                                   cairo_hint_metrics_t);
    pub fn cairo_font_options_get_hint_metrics(options: *cairo_font_options_t)
     -> cairo_hint_metrics_t;
    pub fn cairo_select_font_face(cr: *mut cairo_t, family: *c_schar,
                                  slant: cairo_font_slant_t,
                                  weight: cairo_font_weight_t);
    pub fn cairo_set_font_size(cr: *mut cairo_t, size: c_double);
    pub fn cairo_set_font_matrix(cr: *mut cairo_t, matrix: *cairo_matrix_t);
    pub fn cairo_get_font_matrix(cr: *mut cairo_t,
                                 matrix: *mut cairo_matrix_t);
    pub fn cairo_set_font_options(cr: *mut cairo_t,
                                  options: *cairo_font_options_t);
    pub fn cairo_get_font_options(cr: *mut cairo_t,
                                  options: *mut cairo_font_options_t);
    pub fn cairo_set_font_face(cr: *mut cairo_t,
                               font_face: *mut cairo_font_face_t);
    pub fn cairo_get_font_face(cr: *mut cairo_t) -> *mut cairo_font_face_t;
    pub fn cairo_set_scaled_font(cr: *mut cairo_t,
                                 scaled_font: *cairo_scaled_font_t);
    pub fn cairo_get_scaled_font(cr: *mut cairo_t) ->
     *mut cairo_scaled_font_t;
    pub fn cairo_show_text(cr: *mut cairo_t, utf8: *c_schar);
    pub fn cairo_show_glyphs(cr: *mut cairo_t, glyphs: *cairo_glyph_t,
                             num_glyphs: c_int);
    pub fn cairo_show_text_glyphs(cr: *mut cairo_t, utf8: *c_schar,
                                  utf8_len: c_int, glyphs: *cairo_glyph_t,
                                  num_glyphs: c_int,
                                  clusters: *cairo_text_cluster_t,
                                  num_clusters: c_int,
                                  cluster_flags: cairo_text_cluster_flags_t);
    pub fn cairo_text_path(cr: *mut cairo_t, utf8: *c_schar);
    pub fn cairo_glyph_path(cr: *mut cairo_t, glyphs: *cairo_glyph_t,
                            num_glyphs: c_int);
    pub fn cairo_text_extents(cr: *mut cairo_t, utf8: *c_schar,
                              extents: *mut cairo_text_extents_t);
    pub fn cairo_glyph_extents(cr: *mut cairo_t, glyphs: *cairo_glyph_t,
                               num_glyphs: c_int,
                               extents: *mut cairo_text_extents_t);
    pub fn cairo_font_extents(cr: *mut cairo_t,
                              extents: *mut cairo_font_extents_t);
    pub fn cairo_font_face_reference(font_face: *mut cairo_font_face_t) ->
     *mut cairo_font_face_t;
    pub fn cairo_font_face_destroy(font_face: *mut cairo_font_face_t);
    pub fn cairo_font_face_get_reference_count(font_face:
                                                   *mut cairo_font_face_t) ->
     c_uint;
    pub fn cairo_font_face_status(font_face: *mut cairo_font_face_t) ->
     cairo_status_t;
    pub fn cairo_font_face_get_type(font_face: *mut cairo_font_face_t) ->
     cairo_font_type_t;
    pub fn cairo_font_face_get_user_data(font_face: *mut cairo_font_face_t,
                                         key: *cairo_user_data_key_t) ->
     *mut c_void;
    pub fn cairo_font_face_set_user_data(font_face: *mut cairo_font_face_t,
                                         key: *cairo_user_data_key_t,
                                         user_data: *mut c_void,
                                         destroy: cairo_destroy_func_t) ->
     cairo_status_t;
    pub fn cairo_scaled_font_create(font_face: *mut cairo_font_face_t,
                                    font_matrix: *cairo_matrix_t,
                                    ctm: *cairo_matrix_t,
                                    options: *cairo_font_options_t) ->
     *mut cairo_scaled_font_t;
    pub fn cairo_scaled_font_reference(scaled_font: *mut cairo_scaled_font_t)
     -> *mut cairo_scaled_font_t;
    pub fn cairo_scaled_font_destroy(scaled_font: *mut cairo_scaled_font_t);
    pub fn cairo_scaled_font_get_reference_count(scaled_font:
                                                     *mut cairo_scaled_font_t)
     -> c_uint;
    pub fn cairo_scaled_font_status(scaled_font: *mut cairo_scaled_font_t) ->
     cairo_status_t;
    pub fn cairo_scaled_font_get_type(scaled_font: *mut cairo_scaled_font_t)
     -> cairo_font_type_t;
    pub fn cairo_scaled_font_get_user_data(scaled_font:
                                               *mut cairo_scaled_font_t,
                                           key: *cairo_user_data_key_t) ->
     *mut c_void;
    pub fn cairo_scaled_font_set_user_data(scaled_font:
                                               *mut cairo_scaled_font_t,
                                           key: *cairo_user_data_key_t,
                                           user_data: *mut c_void,
                                           destroy: cairo_destroy_func_t) ->
     cairo_status_t;
    pub fn cairo_scaled_font_extents(scaled_font: *mut cairo_scaled_font_t,
                                     extents: *mut cairo_font_extents_t);
    pub fn cairo_scaled_font_text_extents(scaled_font:
                                              *mut cairo_scaled_font_t,
                                          utf8: *c_schar,
                                          extents: *mut cairo_text_extents_t);
    pub fn cairo_scaled_font_glyph_extents(scaled_font:
                                               *mut cairo_scaled_font_t,
                                           glyphs: *cairo_glyph_t,
                                           num_glyphs: c_int,
                                           extents:
                                               *mut cairo_text_extents_t);
    pub fn cairo_scaled_font_text_to_glyphs(scaled_font:
                                                *mut cairo_scaled_font_t,
                                            x: c_double, y: c_double,
                                            utf8: *c_schar, utf8_len: c_int,
                                            glyphs: *mut *mut cairo_glyph_t,
                                            num_glyphs: *mut c_int,
                                            clusters:
                                                *mut *mut cairo_text_cluster_t,
                                            num_clusters: *mut c_int,
                                            cluster_flags:
                                                *mut cairo_text_cluster_flags_t)
     -> cairo_status_t;
    pub fn cairo_scaled_font_get_font_face(scaled_font:
                                               *mut cairo_scaled_font_t) ->
     *mut cairo_font_face_t;
    pub fn cairo_scaled_font_get_font_matrix(scaled_font:
                                                 *mut cairo_scaled_font_t,
                                             font_matrix:
                                                 *mut cairo_matrix_t);
    pub fn cairo_scaled_font_get_ctm(scaled_font: *mut cairo_scaled_font_t,
                                     ctm: *mut cairo_matrix_t);
    pub fn cairo_scaled_font_get_scale_matrix(scaled_font:
                                                  *mut cairo_scaled_font_t,
                                              scale_matrix:
                                                  *mut cairo_matrix_t);
    pub fn cairo_scaled_font_get_font_options(scaled_font:
                                                  *mut cairo_scaled_font_t,
                                              options:
                                                  *mut cairo_font_options_t);
    pub fn cairo_toy_font_face_create(family: *c_schar,
                                      slant: cairo_font_slant_t,
                                      weight: cairo_font_weight_t) ->
     *mut cairo_font_face_t;
    pub fn cairo_toy_font_face_get_family(font_face: *mut cairo_font_face_t)
     -> *c_schar;
    pub fn cairo_toy_font_face_get_slant(font_face: *mut cairo_font_face_t) ->
     cairo_font_slant_t;
    pub fn cairo_toy_font_face_get_weight(font_face: *mut cairo_font_face_t)
     -> cairo_font_weight_t;
    pub fn cairo_user_font_face_create() -> *mut cairo_font_face_t;
    pub fn cairo_user_font_face_set_init_func(font_face:
                                                  *mut cairo_font_face_t,
                                              init_func:
                                                  cairo_user_scaled_font_init_func_t);
    pub fn cairo_user_font_face_set_render_glyph_func(font_face:
                                                          *mut cairo_font_face_t,
                                                      render_glyph_func:
                                                          cairo_user_scaled_font_render_glyph_func_t);
    pub fn cairo_user_font_face_set_text_to_glyphs_func(font_face:
                                                            *mut cairo_font_face_t,
                                                        text_to_glyphs_func:
                                                            cairo_user_scaled_font_text_to_glyphs_func_t);
    pub fn cairo_user_font_face_set_unicode_to_glyph_func(font_face:
                                                              *mut cairo_font_face_t,
                                                          unicode_to_glyph_func:
                                                              cairo_user_scaled_font_unicode_to_glyph_func_t);
    pub fn cairo_user_font_face_get_init_func(font_face:
                                                  *mut cairo_font_face_t) ->
     cairo_user_scaled_font_init_func_t;
    pub fn cairo_user_font_face_get_render_glyph_func(font_face:
                                                          *mut cairo_font_face_t)
     -> cairo_user_scaled_font_render_glyph_func_t;
    pub fn cairo_user_font_face_get_text_to_glyphs_func(font_face:
                                                            *mut cairo_font_face_t)
     -> cairo_user_scaled_font_text_to_glyphs_func_t;
    pub fn cairo_user_font_face_get_unicode_to_glyph_func(font_face:
                                                              *mut cairo_font_face_t)
     -> cairo_user_scaled_font_unicode_to_glyph_func_t;
    pub fn cairo_get_operator(cr: *mut cairo_t) -> cairo_operator_t;
    pub fn cairo_get_source(cr: *mut cairo_t) -> *mut cairo_pattern_t;
    pub fn cairo_get_tolerance(cr: *mut cairo_t) -> c_double;
    pub fn cairo_get_antialias(cr: *mut cairo_t) -> cairo_antialias_t;
    pub fn cairo_has_current_point(cr: *mut cairo_t) -> cairo_bool_t;
    pub fn cairo_get_current_point(cr: *mut cairo_t, x: *mut c_double,
                                   y: *mut c_double);
    pub fn cairo_get_fill_rule(cr: *mut cairo_t) -> cairo_fill_rule_t;
    pub fn cairo_get_line_width(cr: *mut cairo_t) -> c_double;
    pub fn cairo_get_line_cap(cr: *mut cairo_t) -> cairo_line_cap_t;
    pub fn cairo_get_line_join(cr: *mut cairo_t) -> cairo_line_join_t;
    pub fn cairo_get_miter_limit(cr: *mut cairo_t) -> c_double;
    pub fn cairo_get_dash_count(cr: *mut cairo_t) -> c_int;
    pub fn cairo_get_dash(cr: *mut cairo_t, dashes: *mut c_double,
                          offset: *mut c_double);
    pub fn cairo_get_matrix(cr: *mut cairo_t, matrix: *mut cairo_matrix_t);
    pub fn cairo_get_target(cr: *mut cairo_t) -> *mut cairo_surface_t;
    pub fn cairo_get_group_target(cr: *mut cairo_t) -> *mut cairo_surface_t;
    pub fn cairo_copy_path(cr: *mut cairo_t) -> *mut cairo_path_t;
    pub fn cairo_copy_path_flat(cr: *mut cairo_t) -> *mut cairo_path_t;
    pub fn cairo_append_path(cr: *mut cairo_t, path: *cairo_path_t);
    pub fn cairo_path_destroy(path: *mut cairo_path_t);
    pub fn cairo_status(cr: *mut cairo_t) -> cairo_status_t;
    pub fn cairo_status_to_string(status: cairo_status_t) -> *c_schar;
    pub fn cairo_device_reference(device: *mut cairo_device_t) ->
     *mut cairo_device_t;
    pub fn cairo_device_get_type(device: *mut cairo_device_t) ->
     cairo_device_type_t;
    pub fn cairo_device_status(device: *mut cairo_device_t) -> cairo_status_t;
    pub fn cairo_device_acquire(device: *mut cairo_device_t) ->
     cairo_status_t;
    pub fn cairo_device_release(device: *mut cairo_device_t);
    pub fn cairo_device_flush(device: *mut cairo_device_t);
    pub fn cairo_device_finish(device: *mut cairo_device_t);
    pub fn cairo_device_destroy(device: *mut cairo_device_t);
    pub fn cairo_device_get_reference_count(device: *mut cairo_device_t) ->
     c_uint;
    pub fn cairo_device_get_user_data(device: *mut cairo_device_t,
                                      key: *cairo_user_data_key_t) ->
     *mut c_void;
    pub fn cairo_device_set_user_data(device: *mut cairo_device_t,
                                      key: *cairo_user_data_key_t,
                                      user_data: *mut c_void,
                                      destroy: cairo_destroy_func_t) ->
     cairo_status_t;
    pub fn cairo_surface_create_similar(other: *mut cairo_surface_t,
                                        content: cairo_content_t,
                                        width: c_int, height: c_int) ->
     *mut cairo_surface_t;
    pub fn cairo_surface_create_similar_image(other: *mut cairo_surface_t,
                                              format: cairo_format_t,
                                              width: c_int, height: c_int) ->
     *mut cairo_surface_t;
    pub fn cairo_surface_map_to_image(surface: *mut cairo_surface_t,
                                      extents: *cairo_rectangle_int_t) ->
     *mut cairo_surface_t;
    pub fn cairo_surface_unmap_image(surface: *mut cairo_surface_t,
                                     image: *mut cairo_surface_t);
    pub fn cairo_surface_create_for_rectangle(target: *mut cairo_surface_t,
                                              x: c_double, y: c_double,
                                              width: c_double,
                                              height: c_double) ->
     *mut cairo_surface_t;
    pub fn cairo_surface_create_observer(target: *mut cairo_surface_t,
                                         mode: cairo_surface_observer_mode_t)
     -> *mut cairo_surface_t;
    pub fn cairo_surface_observer_add_paint_callback(abstract_surface:
                                                         *mut cairo_surface_t,
                                                     func:
                                                         cairo_surface_observer_callback_t,
                                                     data: *mut c_void) ->
     cairo_status_t;
    pub fn cairo_surface_observer_add_mask_callback(abstract_surface:
                                                        *mut cairo_surface_t,
                                                    func:
                                                        cairo_surface_observer_callback_t,
                                                    data: *mut c_void) ->
     cairo_status_t;
    pub fn cairo_surface_observer_add_fill_callback(abstract_surface:
                                                        *mut cairo_surface_t,
                                                    func:
                                                        cairo_surface_observer_callback_t,
                                                    data: *mut c_void) ->
     cairo_status_t;
    pub fn cairo_surface_observer_add_stroke_callback(abstract_surface:
                                                          *mut cairo_surface_t,
                                                      func:
                                                          cairo_surface_observer_callback_t,
                                                      data: *mut c_void) ->
     cairo_status_t;
    pub fn cairo_surface_observer_add_glyphs_callback(abstract_surface:
                                                          *mut cairo_surface_t,
                                                      func:
                                                          cairo_surface_observer_callback_t,
                                                      data: *mut c_void) ->
     cairo_status_t;
    pub fn cairo_surface_observer_add_flush_callback(abstract_surface:
                                                         *mut cairo_surface_t,
                                                     func:
                                                         cairo_surface_observer_callback_t,
                                                     data: *mut c_void) ->
     cairo_status_t;
    pub fn cairo_surface_observer_add_finish_callback(abstract_surface:
                                                          *mut cairo_surface_t,
                                                      func:
                                                          cairo_surface_observer_callback_t,
                                                      data: *mut c_void) ->
     cairo_status_t;
    pub fn cairo_surface_observer_print(surface: *mut cairo_surface_t,
                                        write_func: cairo_write_func_t,
                                        closure: *mut c_void) ->
     cairo_status_t;
    pub fn cairo_surface_observer_elapsed(surface: *mut cairo_surface_t) ->
     c_double;
    pub fn cairo_device_observer_print(device: *mut cairo_device_t,
                                       write_func: cairo_write_func_t,
                                       closure: *mut c_void) ->
     cairo_status_t;
    pub fn cairo_device_observer_elapsed(device: *mut cairo_device_t) ->
     c_double;
    pub fn cairo_device_observer_paint_elapsed(device: *mut cairo_device_t) ->
     c_double;
    pub fn cairo_device_observer_mask_elapsed(device: *mut cairo_device_t) ->
     c_double;
    pub fn cairo_device_observer_fill_elapsed(device: *mut cairo_device_t) ->
     c_double;
    pub fn cairo_device_observer_stroke_elapsed(device: *mut cairo_device_t)
     -> c_double;
    pub fn cairo_device_observer_glyphs_elapsed(device: *mut cairo_device_t)
     -> c_double;
    pub fn cairo_surface_reference(surface: *mut cairo_surface_t) ->
     *mut cairo_surface_t;
    pub fn cairo_surface_finish(surface: *mut cairo_surface_t);
    pub fn cairo_surface_destroy(surface: *mut cairo_surface_t);
    pub fn cairo_surface_get_device(surface: *mut cairo_surface_t) ->
     *mut cairo_device_t;
    pub fn cairo_surface_get_reference_count(surface: *mut cairo_surface_t) ->
     c_uint;
    pub fn cairo_surface_status(surface: *mut cairo_surface_t) ->
     cairo_status_t;
    pub fn cairo_surface_get_type(surface: *mut cairo_surface_t) ->
     cairo_surface_type_t;
    pub fn cairo_surface_get_content(surface: *mut cairo_surface_t) ->
     cairo_content_t;
    pub fn cairo_surface_write_to_png(surface: *mut cairo_surface_t,
                                      filename: *c_schar) -> cairo_status_t;
    pub fn cairo_surface_write_to_png_stream(surface: *mut cairo_surface_t,
                                             write_func: cairo_write_func_t,
                                             closure: *mut c_void) ->
     cairo_status_t;
    pub fn cairo_surface_get_user_data(surface: *mut cairo_surface_t,
                                       key: *cairo_user_data_key_t) ->
     *mut c_void;
    pub fn cairo_surface_set_user_data(surface: *mut cairo_surface_t,
                                       key: *cairo_user_data_key_t,
                                       user_data: *mut c_void,
                                       destroy: cairo_destroy_func_t) ->
     cairo_status_t;
    pub fn cairo_surface_get_mime_data(surface: *mut cairo_surface_t,
                                       mime_type: *c_schar,
                                       data: *mut *c_uchar,
                                       length: *mut c_ulong);
    pub fn cairo_surface_set_mime_data(surface: *mut cairo_surface_t,
                                       mime_type: *c_schar, data: *c_uchar,
                                       length: c_ulong,
                                       destroy: cairo_destroy_func_t,
                                       closure: *mut c_void) ->
     cairo_status_t;
    pub fn cairo_surface_supports_mime_type(surface: *mut cairo_surface_t,
                                            mime_type: *c_schar) ->
     cairo_bool_t;
    pub fn cairo_surface_get_font_options(surface: *mut cairo_surface_t,
                                          options: *mut cairo_font_options_t);
    pub fn cairo_surface_flush(surface: *mut cairo_surface_t);
    pub fn cairo_surface_mark_dirty(surface: *mut cairo_surface_t);
    pub fn cairo_surface_mark_dirty_rectangle(surface: *mut cairo_surface_t,
                                              x: c_int, y: c_int,
                                              width: c_int, height: c_int);
    pub fn cairo_surface_set_device_offset(surface: *mut cairo_surface_t,
                                           x_offset: c_double,
                                           y_offset: c_double);
    pub fn cairo_surface_get_device_offset(surface: *mut cairo_surface_t,
                                           x_offset: *mut c_double,
                                           y_offset: *mut c_double);
    pub fn cairo_surface_set_fallback_resolution(surface:
                                                     *mut cairo_surface_t,
                                                 x_pixels_per_inch: c_double,
                                                 y_pixels_per_inch: c_double);
    pub fn cairo_surface_get_fallback_resolution(surface:
                                                     *mut cairo_surface_t,
                                                 x_pixels_per_inch:
                                                     *mut c_double,
                                                 y_pixels_per_inch:
                                                     *mut c_double);
    pub fn cairo_surface_copy_page(surface: *mut cairo_surface_t);
    pub fn cairo_surface_show_page(surface: *mut cairo_surface_t);
    pub fn cairo_surface_has_show_text_glyphs(surface: *mut cairo_surface_t)
     -> cairo_bool_t;
    pub fn cairo_image_surface_create(format: cairo_format_t, width: c_int,
                                      height: c_int) -> *mut cairo_surface_t;
    pub fn cairo_format_stride_for_width(format: cairo_format_t, width: c_int)
     -> c_int;
    pub fn cairo_image_surface_create_for_data(data: *mut c_uchar,
                                               format: cairo_format_t,
                                               width: c_int, height: c_int,
                                               stride: c_int) ->
     *mut cairo_surface_t;
    pub fn cairo_image_surface_get_data(surface: *mut cairo_surface_t) ->
     *mut c_uchar;
    pub fn cairo_image_surface_get_format(surface: *mut cairo_surface_t) ->
     cairo_format_t;
    pub fn cairo_image_surface_get_width(surface: *mut cairo_surface_t) ->
     c_int;
    pub fn cairo_image_surface_get_height(surface: *mut cairo_surface_t) ->
     c_int;
    pub fn cairo_image_surface_get_stride(surface: *mut cairo_surface_t) ->
     c_int;
    pub fn cairo_image_surface_create_from_png(filename: *c_schar) ->
     *mut cairo_surface_t;
    pub fn cairo_image_surface_create_from_png_stream(read_func:
                                                          cairo_read_func_t,
                                                      closure: *mut c_void) ->
     *mut cairo_surface_t;
    pub fn cairo_recording_surface_create(content: cairo_content_t,
                                          extents: *cairo_rectangle_t) ->
     *mut cairo_surface_t;
    pub fn cairo_recording_surface_ink_extents(surface: *mut cairo_surface_t,
                                               x0: *mut c_double,
                                               y0: *mut c_double,
                                               width: *mut c_double,
                                               height: *mut c_double);
    pub fn cairo_recording_surface_get_extents(surface: *mut cairo_surface_t,
                                               extents:
                                                   *mut cairo_rectangle_t) ->
     cairo_bool_t;
    pub fn cairo_pattern_create_raster_source(user_data: *mut c_void,
                                              content: cairo_content_t,
                                              width: c_int, height: c_int) ->
     *mut cairo_pattern_t;
    pub fn cairo_raster_source_pattern_set_callback_data(pattern:
                                                             *mut cairo_pattern_t,
                                                         data: *mut c_void);
    pub fn cairo_raster_source_pattern_get_callback_data(pattern:
                                                             *mut cairo_pattern_t)
     -> *mut c_void;
    pub fn cairo_raster_source_pattern_set_acquire(pattern:
                                                       *mut cairo_pattern_t,
                                                   acquire:
                                                       cairo_raster_source_acquire_func_t,
                                                   release:
                                                       cairo_raster_source_release_func_t);
    pub fn cairo_raster_source_pattern_get_acquire(pattern:
                                                       *mut cairo_pattern_t,
                                                   acquire:
                                                       *mut cairo_raster_source_acquire_func_t,
                                                   release:
                                                       *mut cairo_raster_source_release_func_t);
    pub fn cairo_raster_source_pattern_set_snapshot(pattern:
                                                        *mut cairo_pattern_t,
                                                    snapshot:
                                                        cairo_raster_source_snapshot_func_t);
    pub fn cairo_raster_source_pattern_get_snapshot(pattern:
                                                        *mut cairo_pattern_t)
     -> cairo_raster_source_snapshot_func_t;
    pub fn cairo_raster_source_pattern_set_copy(pattern: *mut cairo_pattern_t,
                                                copy:
                                                    cairo_raster_source_copy_func_t);
    pub fn cairo_raster_source_pattern_get_copy(pattern: *mut cairo_pattern_t)
     -> cairo_raster_source_copy_func_t;
    pub fn cairo_raster_source_pattern_set_finish(pattern:
                                                      *mut cairo_pattern_t,
                                                  finish:
                                                      cairo_raster_source_finish_func_t);
    pub fn cairo_raster_source_pattern_get_finish(pattern:
                                                      *mut cairo_pattern_t) ->
     cairo_raster_source_finish_func_t;
    pub fn cairo_pattern_create_rgb(red: c_double, green: c_double,
                                    blue: c_double) -> *mut cairo_pattern_t;
    pub fn cairo_pattern_create_rgba(red: c_double, green: c_double,
                                     blue: c_double, alpha: c_double) ->
     *mut cairo_pattern_t;
    pub fn cairo_pattern_create_for_surface(surface: *mut cairo_surface_t) ->
     *mut cairo_pattern_t;
    pub fn cairo_pattern_create_linear(x0: c_double, y0: c_double,
                                       x1: c_double, y1: c_double) ->
     *mut cairo_pattern_t;
    pub fn cairo_pattern_create_radial(cx0: c_double, cy0: c_double,
                                       radius0: c_double, cx1: c_double,
                                       cy1: c_double, radius1: c_double) ->
     *mut cairo_pattern_t;
    pub fn cairo_pattern_create_mesh() -> *mut cairo_pattern_t;
    pub fn cairo_pattern_reference(pattern: *mut cairo_pattern_t) ->
     *mut cairo_pattern_t;
    pub fn cairo_pattern_destroy(pattern: *mut cairo_pattern_t);
    pub fn cairo_pattern_get_reference_count(pattern: *mut cairo_pattern_t) ->
     c_uint;
    pub fn cairo_pattern_status(pattern: *mut cairo_pattern_t) ->
     cairo_status_t;
    pub fn cairo_pattern_get_user_data(pattern: *mut cairo_pattern_t,
                                       key: *cairo_user_data_key_t) ->
     *mut c_void;
    pub fn cairo_pattern_set_user_data(pattern: *mut cairo_pattern_t,
                                       key: *cairo_user_data_key_t,
                                       user_data: *mut c_void,
                                       destroy: cairo_destroy_func_t) ->
     cairo_status_t;
    pub fn cairo_pattern_get_type(pattern: *mut cairo_pattern_t) ->
     cairo_pattern_type_t;
    pub fn cairo_pattern_add_color_stop_rgb(pattern: *mut cairo_pattern_t,
                                            offset: c_double, red: c_double,
                                            green: c_double, blue: c_double);
    pub fn cairo_pattern_add_color_stop_rgba(pattern: *mut cairo_pattern_t,
                                             offset: c_double, red: c_double,
                                             green: c_double, blue: c_double,
                                             alpha: c_double);
    pub fn cairo_mesh_pattern_begin_patch(pattern: *mut cairo_pattern_t);
    pub fn cairo_mesh_pattern_end_patch(pattern: *mut cairo_pattern_t);
    pub fn cairo_mesh_pattern_curve_to(pattern: *mut cairo_pattern_t,
                                       x1: c_double, y1: c_double,
                                       x2: c_double, y2: c_double,
                                       x3: c_double, y3: c_double);
    pub fn cairo_mesh_pattern_line_to(pattern: *mut cairo_pattern_t,
                                      x: c_double, y: c_double);
    pub fn cairo_mesh_pattern_move_to(pattern: *mut cairo_pattern_t,
                                      x: c_double, y: c_double);
    pub fn cairo_mesh_pattern_set_control_point(pattern: *mut cairo_pattern_t,
                                                point_num: c_uint,
                                                x: c_double, y: c_double);
    pub fn cairo_mesh_pattern_set_corner_color_rgb(pattern:
                                                       *mut cairo_pattern_t,
                                                   corner_num: c_uint,
                                                   red: c_double,
                                                   green: c_double,
                                                   blue: c_double);
    pub fn cairo_mesh_pattern_set_corner_color_rgba(pattern:
                                                        *mut cairo_pattern_t,
                                                    corner_num: c_uint,
                                                    red: c_double,
                                                    green: c_double,
                                                    blue: c_double,
                                                    alpha: c_double);
    pub fn cairo_pattern_set_matrix(pattern: *mut cairo_pattern_t,
                                    matrix: *cairo_matrix_t);
    pub fn cairo_pattern_get_matrix(pattern: *mut cairo_pattern_t,
                                    matrix: *mut cairo_matrix_t);
    pub fn cairo_pattern_set_extend(pattern: *mut cairo_pattern_t,
                                    extend: cairo_extend_t);
    pub fn cairo_pattern_get_extend(pattern: *mut cairo_pattern_t) ->
     cairo_extend_t;
    pub fn cairo_pattern_set_filter(pattern: *mut cairo_pattern_t,
                                    filter: cairo_filter_t);
    pub fn cairo_pattern_get_filter(pattern: *mut cairo_pattern_t) ->
     cairo_filter_t;
    pub fn cairo_pattern_get_rgba(pattern: *mut cairo_pattern_t,
                                  red: *mut c_double, green: *mut c_double,
                                  blue: *mut c_double, alpha: *mut c_double)
     -> cairo_status_t;
    pub fn cairo_pattern_get_surface(pattern: *mut cairo_pattern_t,
                                     surface: *mut *mut cairo_surface_t) ->
     cairo_status_t;
    pub fn cairo_pattern_get_color_stop_rgba(pattern: *mut cairo_pattern_t,
                                             index: c_int,
                                             offset: *mut c_double,
                                             red: *mut c_double,
                                             green: *mut c_double,
                                             blue: *mut c_double,
                                             alpha: *mut c_double) ->
     cairo_status_t;
    pub fn cairo_pattern_get_color_stop_count(pattern: *mut cairo_pattern_t,
                                              count: *mut c_int) ->
     cairo_status_t;
    pub fn cairo_pattern_get_linear_points(pattern: *mut cairo_pattern_t,
                                           x0: *mut c_double,
                                           y0: *mut c_double,
                                           x1: *mut c_double,
                                           y1: *mut c_double) ->
     cairo_status_t;
    pub fn cairo_pattern_get_radial_circles(pattern: *mut cairo_pattern_t,
                                            x0: *mut c_double,
                                            y0: *mut c_double,
                                            r0: *mut c_double,
                                            x1: *mut c_double,
                                            y1: *mut c_double,
                                            r1: *mut c_double) ->
     cairo_status_t;
    pub fn cairo_mesh_pattern_get_patch_count(pattern: *mut cairo_pattern_t,
                                              count: *mut c_uint) ->
     cairo_status_t;
    pub fn cairo_mesh_pattern_get_path(pattern: *mut cairo_pattern_t,
                                       patch_num: c_uint) ->
     *mut cairo_path_t;
    pub fn cairo_mesh_pattern_get_corner_color_rgba(pattern:
                                                        *mut cairo_pattern_t,
                                                    patch_num: c_uint,
                                                    corner_num: c_uint,
                                                    red: *mut c_double,
                                                    green: *mut c_double,
                                                    blue: *mut c_double,
                                                    alpha: *mut c_double) ->
     cairo_status_t;
    pub fn cairo_mesh_pattern_get_control_point(pattern: *mut cairo_pattern_t,
                                                patch_num: c_uint,
                                                point_num: c_uint,
                                                x: *mut c_double,
                                                y: *mut c_double) ->
     cairo_status_t;
    pub fn cairo_matrix_init(matrix: *mut cairo_matrix_t, xx: c_double,
                             yx: c_double, xy: c_double, yy: c_double,
                             x0: c_double, y0: c_double);
    pub fn cairo_matrix_init_identity(matrix: *mut cairo_matrix_t);
    pub fn cairo_matrix_init_translate(matrix: *mut cairo_matrix_t,
                                       tx: c_double, ty: c_double);
    pub fn cairo_matrix_init_scale(matrix: *mut cairo_matrix_t, sx: c_double,
                                   sy: c_double);
    pub fn cairo_matrix_init_rotate(matrix: *mut cairo_matrix_t,
                                    radians: c_double);
    pub fn cairo_matrix_translate(matrix: *mut cairo_matrix_t, tx: c_double,
                                  ty: c_double);
    pub fn cairo_matrix_scale(matrix: *mut cairo_matrix_t, sx: c_double,
                              sy: c_double);
    pub fn cairo_matrix_rotate(matrix: *mut cairo_matrix_t,
                               radians: c_double);
    pub fn cairo_matrix_invert(matrix: *mut cairo_matrix_t) -> cairo_status_t;
    pub fn cairo_matrix_multiply(result: *mut cairo_matrix_t,
                                 a: *cairo_matrix_t, b: *cairo_matrix_t);
    pub fn cairo_matrix_transform_distance(matrix: *cairo_matrix_t,
                                           dx: *mut c_double,
                                           dy: *mut c_double);
    pub fn cairo_matrix_transform_point(matrix: *cairo_matrix_t,
                                        x: *mut c_double, y: *mut c_double);
    pub fn cairo_region_create() -> *mut cairo_region_t;
    pub fn cairo_region_create_rectangle(rectangle: *cairo_rectangle_int_t) ->
     *mut cairo_region_t;
    pub fn cairo_region_create_rectangles(rects: *cairo_rectangle_int_t,
                                          count: c_int) ->
     *mut cairo_region_t;
    pub fn cairo_region_copy(original: *cairo_region_t) ->
     *mut cairo_region_t;
    pub fn cairo_region_reference(region: *mut cairo_region_t) ->
     *mut cairo_region_t;
    pub fn cairo_region_destroy(region: *mut cairo_region_t);
    pub fn cairo_region_equal(a: *cairo_region_t, b: *cairo_region_t) ->
     cairo_bool_t;
    pub fn cairo_region_status(region: *cairo_region_t) -> cairo_status_t;
    pub fn cairo_region_get_extents(region: *cairo_region_t,
                                    extents: *mut cairo_rectangle_int_t);
    pub fn cairo_region_num_rectangles(region: *cairo_region_t) -> c_int;
    pub fn cairo_region_get_rectangle(region: *cairo_region_t, nth: c_int,
                                      rectangle: *mut cairo_rectangle_int_t);
    pub fn cairo_region_is_empty(region: *cairo_region_t) -> cairo_bool_t;
    pub fn cairo_region_contains_rectangle(region: *cairo_region_t,
                                           rectangle: *cairo_rectangle_int_t)
     -> cairo_region_overlap_t;
    pub fn cairo_region_contains_point(region: *cairo_region_t, x: c_int,
                                       y: c_int) -> cairo_bool_t;
    pub fn cairo_region_translate(region: *mut cairo_region_t, dx: c_int,
                                  dy: c_int);
    pub fn cairo_region_subtract(dst: *mut cairo_region_t,
                                 other: *cairo_region_t) -> cairo_status_t;
    pub fn cairo_region_subtract_rectangle(dst: *mut cairo_region_t,
                                           rectangle: *cairo_rectangle_int_t)
     -> cairo_status_t;
    pub fn cairo_region_intersect(dst: *mut cairo_region_t,
                                  other: *cairo_region_t) -> cairo_status_t;
    pub fn cairo_region_intersect_rectangle(dst: *mut cairo_region_t,
                                            rectangle: *cairo_rectangle_int_t)
     -> cairo_status_t;
    pub fn cairo_region_union(dst: *mut cairo_region_t,
                              other: *cairo_region_t) -> cairo_status_t;
    pub fn cairo_region_union_rectangle(dst: *mut cairo_region_t,
                                        rectangle: *cairo_rectangle_int_t) ->
     cairo_status_t;
    pub fn cairo_region_xor(dst: *mut cairo_region_t, other: *cairo_region_t)
     -> cairo_status_t;
    pub fn cairo_region_xor_rectangle(dst: *mut cairo_region_t,
                                      rectangle: *cairo_rectangle_int_t) ->
     cairo_status_t;
    pub fn cairo_debug_reset_static_data();
    pub fn gdk_color_get_type() -> GType;
    pub fn gdk_color_copy(color: *GdkColor) -> *mut GdkColor;
    pub fn gdk_color_free(color: *mut GdkColor);
    pub fn gdk_color_hash(color: *GdkColor) -> guint;
    pub fn gdk_color_equal(colora: *GdkColor, colorb: *GdkColor) -> gboolean;
    pub fn gdk_color_parse(spec: *gchar, color: *mut GdkColor) -> gboolean;
    pub fn gdk_color_to_string(color: *GdkColor) -> *mut gchar;
    pub fn gdk_device_get_type() -> GType;
    pub fn gdk_device_get_name(device: *mut GdkDevice) -> *gchar;
    pub fn gdk_device_get_has_cursor(device: *mut GdkDevice) -> gboolean;
    pub fn gdk_device_get_source(device: *mut GdkDevice) -> GdkInputSource;
    pub fn gdk_device_get_mode(device: *mut GdkDevice) -> GdkInputMode;
    pub fn gdk_device_set_mode(device: *mut GdkDevice, mode: GdkInputMode) ->
     gboolean;
    pub fn gdk_device_get_n_keys(device: *mut GdkDevice) -> gint;
    pub fn gdk_device_get_key(device: *mut GdkDevice, index_: guint,
                              keyval: *mut guint,
                              modifiers: *mut GdkModifierType) -> gboolean;
    pub fn gdk_device_set_key(device: *mut GdkDevice, index_: guint,
                              keyval: guint, modifiers: GdkModifierType);
    pub fn gdk_device_get_axis_use(device: *mut GdkDevice, index_: guint) ->
     GdkAxisUse;
    pub fn gdk_device_set_axis_use(device: *mut GdkDevice, index_: guint,
                                   _use: GdkAxisUse);
    pub fn gdk_device_get_state(device: *mut GdkDevice,
                                window: *mut GdkWindow, axes: *mut gdouble,
                                mask: *mut GdkModifierType);
    pub fn gdk_device_get_position(device: *mut GdkDevice,
                                   screen: *mut *mut GdkScreen, x: *mut gint,
                                   y: *mut gint);
    pub fn gdk_device_get_window_at_position(device: *mut GdkDevice,
                                             win_x: *mut gint,
                                             win_y: *mut gint) ->
     *mut GdkWindow;
    pub fn gdk_device_get_position_double(device: *mut GdkDevice,
                                          screen: *mut *mut GdkScreen,
                                          x: *mut gdouble, y: *mut gdouble);
    pub fn gdk_device_get_window_at_position_double(device: *mut GdkDevice,
                                                    win_x: *mut gdouble,
                                                    win_y: *mut gdouble) ->
     *mut GdkWindow;
    pub fn gdk_device_get_history(device: *mut GdkDevice,
                                  window: *mut GdkWindow, start: guint32,
                                  stop: guint32,
                                  events: *mut *mut *mut GdkTimeCoord,
                                  n_events: *mut gint) -> gboolean;
    pub fn gdk_device_free_history(events: *mut *mut GdkTimeCoord,
                                   n_events: gint);
    pub fn gdk_device_get_n_axes(device: *mut GdkDevice) -> gint;
    pub fn gdk_device_list_axes(device: *mut GdkDevice) -> *mut GList;
    pub fn gdk_device_get_axis_value(device: *mut GdkDevice,
                                     axes: *mut gdouble, axis_label: GdkAtom,
                                     value: *mut gdouble) -> gboolean;
    pub fn gdk_device_get_axis(device: *mut GdkDevice, axes: *mut gdouble,
                               _use: GdkAxisUse, value: *mut gdouble) ->
     gboolean;
    pub fn gdk_device_get_display(device: *mut GdkDevice) -> *mut GdkDisplay;
    pub fn gdk_device_get_associated_device(device: *mut GdkDevice) ->
     *mut GdkDevice;
    pub fn gdk_device_list_slave_devices(device: *mut GdkDevice) ->
     *mut GList;
    pub fn gdk_device_get_device_type(device: *mut GdkDevice) ->
     GdkDeviceType;
    pub fn gdk_device_grab(device: *mut GdkDevice, window: *mut GdkWindow,
                           grab_ownership: GdkGrabOwnership,
                           owner_events: gboolean, event_mask: GdkEventMask,
                           cursor: *mut GdkCursor, time_: guint32) ->
     GdkGrabStatus;
    pub fn gdk_device_ungrab(device: *mut GdkDevice, time_: guint32);
    pub fn gdk_device_warp(device: *mut GdkDevice, screen: *mut GdkScreen,
                           x: gint, y: gint);
    pub fn gdk_device_grab_info_libgtk_only(display: *mut GdkDisplay,
                                            device: *mut GdkDevice,
                                            grab_window: *mut *mut GdkWindow,
                                            owner_events: *mut gboolean) ->
     gboolean;
    pub fn gdk_drag_context_get_type() -> GType;
    pub fn gdk_drag_context_set_device(context: *mut GdkDragContext,
                                       device: *mut GdkDevice);
    pub fn gdk_drag_context_get_device(context: *mut GdkDragContext) ->
     *mut GdkDevice;
    pub fn gdk_drag_context_list_targets(context: *mut GdkDragContext) ->
     *mut GList;
    pub fn gdk_drag_context_get_actions(context: *mut GdkDragContext) ->
     GdkDragAction;
    pub fn gdk_drag_context_get_suggested_action(context: *mut GdkDragContext)
     -> GdkDragAction;
    pub fn gdk_drag_context_get_selected_action(context: *mut GdkDragContext)
     -> GdkDragAction;
    pub fn gdk_drag_context_get_source_window(context: *mut GdkDragContext) ->
     *mut GdkWindow;
    pub fn gdk_drag_context_get_dest_window(context: *mut GdkDragContext) ->
     *mut GdkWindow;
    pub fn gdk_drag_context_get_protocol(context: *mut GdkDragContext) ->
     GdkDragProtocol;
    pub fn gdk_drag_status(context: *mut GdkDragContext,
                           action: GdkDragAction, time_: guint32);
    pub fn gdk_drop_reply(context: *mut GdkDragContext, accepted: gboolean,
                          time_: guint32);
    pub fn gdk_drop_finish(context: *mut GdkDragContext, success: gboolean,
                           time_: guint32);
    pub fn gdk_drag_get_selection(context: *mut GdkDragContext) -> GdkAtom;
    pub fn gdk_drag_begin(window: *mut GdkWindow, targets: *mut GList) ->
     *mut GdkDragContext;
    pub fn gdk_drag_begin_for_device(window: *mut GdkWindow,
                                     device: *mut GdkDevice,
                                     targets: *mut GList) ->
     *mut GdkDragContext;
    pub fn gdk_drag_find_window_for_screen(context: *mut GdkDragContext,
                                           drag_window: *mut GdkWindow,
                                           screen: *mut GdkScreen,
                                           x_root: gint, y_root: gint,
                                           dest_window: *mut *mut GdkWindow,
                                           protocol: *mut GdkDragProtocol);
    pub fn gdk_drag_motion(context: *mut GdkDragContext,
                           dest_window: *mut GdkWindow,
                           protocol: GdkDragProtocol, x_root: gint,
                           y_root: gint, suggested_action: GdkDragAction,
                           possible_actions: GdkDragAction, time_: guint32) ->
     gboolean;
    pub fn gdk_drag_drop(context: *mut GdkDragContext, time_: guint32);
    pub fn gdk_drag_abort(context: *mut GdkDragContext, time_: guint32);
    pub fn gdk_drag_drop_succeeded(context: *mut GdkDragContext) -> gboolean;
    pub fn gdk_event_get_type() -> GType;
    pub fn gdk_events_pending() -> gboolean;
    pub fn gdk_event_get() -> *mut GdkEvent;
    pub fn gdk_event_peek() -> *mut GdkEvent;
    pub fn gdk_event_put(event: *GdkEvent);
    pub fn gdk_event_new(_type: GdkEventType) -> *mut GdkEvent;
    pub fn gdk_event_copy(event: *GdkEvent) -> *mut GdkEvent;
    pub fn gdk_event_free(event: *mut GdkEvent);
    pub fn gdk_event_get_window(event: *GdkEvent) -> *mut GdkWindow;
    pub fn gdk_event_get_time(event: *GdkEvent) -> guint32;
    pub fn gdk_event_get_state(event: *GdkEvent, state: *mut GdkModifierType)
     -> gboolean;
    pub fn gdk_event_get_coords(event: *GdkEvent, x_win: *mut gdouble,
                                y_win: *mut gdouble) -> gboolean;
    pub fn gdk_event_get_root_coords(event: *GdkEvent, x_root: *mut gdouble,
                                     y_root: *mut gdouble) -> gboolean;
    pub fn gdk_event_get_button(event: *GdkEvent, button: *mut guint) ->
     gboolean;
    pub fn gdk_event_get_click_count(event: *GdkEvent,
                                     click_count: *mut guint) -> gboolean;
    pub fn gdk_event_get_keyval(event: *GdkEvent, keyval: *mut guint) ->
     gboolean;
    pub fn gdk_event_get_keycode(event: *GdkEvent, keycode: *mut guint16) ->
     gboolean;
    pub fn gdk_event_get_scroll_direction(event: *GdkEvent,
                                          direction: *mut GdkScrollDirection)
     -> gboolean;
    pub fn gdk_event_get_scroll_deltas(event: *GdkEvent,
                                       delta_x: *mut gdouble,
                                       delta_y: *mut gdouble) -> gboolean;
    pub fn gdk_event_get_axis(event: *GdkEvent, axis_use: GdkAxisUse,
                              value: *mut gdouble) -> gboolean;
    pub fn gdk_event_set_device(event: *mut GdkEvent, device: *mut GdkDevice);
    pub fn gdk_event_get_device(event: *GdkEvent) -> *mut GdkDevice;
    pub fn gdk_event_set_source_device(event: *mut GdkEvent,
                                       device: *mut GdkDevice);
    pub fn gdk_event_get_source_device(event: *GdkEvent) -> *mut GdkDevice;
    pub fn gdk_event_request_motions(event: *GdkEventMotion);
    pub fn gdk_event_triggers_context_menu(event: *GdkEvent) -> gboolean;
    pub fn gdk_events_get_distance(event1: *mut GdkEvent,
                                   event2: *mut GdkEvent,
                                   distance: *mut gdouble) -> gboolean;
    pub fn gdk_events_get_angle(event1: *mut GdkEvent, event2: *mut GdkEvent,
                                angle: *mut gdouble) -> gboolean;
    pub fn gdk_events_get_center(event1: *mut GdkEvent, event2: *mut GdkEvent,
                                 x: *mut gdouble, y: *mut gdouble) ->
     gboolean;
    pub fn gdk_event_handler_set(func: GdkEventFunc, data: gpointer,
                                 notify: GDestroyNotify);
    pub fn gdk_event_set_screen(event: *mut GdkEvent, screen: *mut GdkScreen);
    pub fn gdk_event_get_screen(event: *GdkEvent) -> *mut GdkScreen;
    pub fn gdk_event_get_event_sequence(event: *GdkEvent) ->
     *mut GdkEventSequence;
    pub fn gdk_event_get_event_type(event: *GdkEvent) -> GdkEventType;
    pub fn gdk_set_show_events(show_events: gboolean);
    pub fn gdk_get_show_events() -> gboolean;
    pub fn gdk_setting_get(name: *gchar, value: *mut GValue) -> gboolean;
    pub fn gdk_device_manager_get_type() -> GType;
    pub fn gdk_device_manager_get_display(device_manager:
                                              *mut GdkDeviceManager) ->
     *mut GdkDisplay;
    pub fn gdk_device_manager_list_devices(device_manager:
                                               *mut GdkDeviceManager,
                                           _type: GdkDeviceType) ->
     *mut GList;
    pub fn gdk_device_manager_get_client_pointer(device_manager:
                                                     *mut GdkDeviceManager) ->
     *mut GdkDevice;
    pub fn gdk_display_get_type() -> GType;
    pub fn gdk_display_open(display_name: *gchar) -> *mut GdkDisplay;
    pub fn gdk_display_get_name(display: *mut GdkDisplay) -> *gchar;
    pub fn gdk_display_get_n_screens(display: *mut GdkDisplay) -> gint;
    pub fn gdk_display_get_screen(display: *mut GdkDisplay, screen_num: gint)
     -> *mut GdkScreen;
    pub fn gdk_display_get_default_screen(display: *mut GdkDisplay) ->
     *mut GdkScreen;
    pub fn gdk_display_pointer_ungrab(display: *mut GdkDisplay,
                                      time_: guint32);
    pub fn gdk_display_keyboard_ungrab(display: *mut GdkDisplay,
                                       time_: guint32);
    pub fn gdk_display_pointer_is_grabbed(display: *mut GdkDisplay) ->
     gboolean;
    pub fn gdk_display_device_is_grabbed(display: *mut GdkDisplay,
                                         device: *mut GdkDevice) -> gboolean;
    pub fn gdk_display_beep(display: *mut GdkDisplay);
    pub fn gdk_display_sync(display: *mut GdkDisplay);
    pub fn gdk_display_flush(display: *mut GdkDisplay);
    pub fn gdk_display_close(display: *mut GdkDisplay);
    pub fn gdk_display_is_closed(display: *mut GdkDisplay) -> gboolean;
    pub fn gdk_display_list_devices(display: *mut GdkDisplay) -> *mut GList;
    pub fn gdk_display_get_event(display: *mut GdkDisplay) -> *mut GdkEvent;
    pub fn gdk_display_peek_event(display: *mut GdkDisplay) -> *mut GdkEvent;
    pub fn gdk_display_put_event(display: *mut GdkDisplay, event: *GdkEvent);
    pub fn gdk_display_has_pending(display: *mut GdkDisplay) -> gboolean;
    pub fn gdk_display_set_double_click_time(display: *mut GdkDisplay,
                                             msec: guint);
    pub fn gdk_display_set_double_click_distance(display: *mut GdkDisplay,
                                                 distance: guint);
    pub fn gdk_display_get_default() -> *mut GdkDisplay;
    pub fn gdk_display_get_pointer(display: *mut GdkDisplay,
                                   screen: *mut *mut GdkScreen, x: *mut gint,
                                   y: *mut gint, mask: *mut GdkModifierType);
    pub fn gdk_display_get_window_at_pointer(display: *mut GdkDisplay,
                                             win_x: *mut gint,
                                             win_y: *mut gint) ->
     *mut GdkWindow;
    pub fn gdk_display_warp_pointer(display: *mut GdkDisplay,
                                    screen: *mut GdkScreen, x: gint, y: gint);
    pub fn gdk_display_open_default_libgtk_only() -> *mut GdkDisplay;
    pub fn gdk_display_supports_cursor_alpha(display: *mut GdkDisplay) ->
     gboolean;
    pub fn gdk_display_supports_cursor_color(display: *mut GdkDisplay) ->
     gboolean;
    pub fn gdk_display_get_default_cursor_size(display: *mut GdkDisplay) ->
     guint;
    pub fn gdk_display_get_maximal_cursor_size(display: *mut GdkDisplay,
                                               width: *mut guint,
                                               height: *mut guint);
    pub fn gdk_display_get_default_group(display: *mut GdkDisplay) ->
     *mut GdkWindow;
    pub fn gdk_display_supports_selection_notification(display:
                                                           *mut GdkDisplay) ->
     gboolean;
    pub fn gdk_display_request_selection_notification(display:
                                                          *mut GdkDisplay,
                                                      selection: GdkAtom) ->
     gboolean;
    pub fn gdk_display_supports_clipboard_persistence(display:
                                                          *mut GdkDisplay) ->
     gboolean;
    pub fn gdk_display_store_clipboard(display: *mut GdkDisplay,
                                       clipboard_window: *mut GdkWindow,
                                       time_: guint32, targets: *GdkAtom,
                                       n_targets: gint);
    pub fn gdk_display_supports_shapes(display: *mut GdkDisplay) -> gboolean;
    pub fn gdk_display_supports_input_shapes(display: *mut GdkDisplay) ->
     gboolean;
    pub fn gdk_display_supports_composite(display: *mut GdkDisplay) ->
     gboolean;
    pub fn gdk_display_notify_startup_complete(display: *mut GdkDisplay,
                                               startup_id: *gchar);
    pub fn gdk_display_get_device_manager(display: *mut GdkDisplay) ->
     *mut GdkDeviceManager;
    pub fn gdk_display_get_app_launch_context(display: *mut GdkDisplay) ->
     *mut GdkAppLaunchContext;
    pub fn gdk_screen_get_type() -> GType;
    pub fn gdk_screen_get_system_visual(screen: *mut GdkScreen) ->
     *mut GdkVisual;
    pub fn gdk_screen_get_rgba_visual(screen: *mut GdkScreen) ->
     *mut GdkVisual;
    pub fn gdk_screen_is_composited(screen: *mut GdkScreen) -> gboolean;
    pub fn gdk_screen_get_root_window(screen: *mut GdkScreen) ->
     *mut GdkWindow;
    pub fn gdk_screen_get_display(screen: *mut GdkScreen) -> *mut GdkDisplay;
    pub fn gdk_screen_get_number(screen: *mut GdkScreen) -> gint;
    pub fn gdk_screen_get_width(screen: *mut GdkScreen) -> gint;
    pub fn gdk_screen_get_height(screen: *mut GdkScreen) -> gint;
    pub fn gdk_screen_get_width_mm(screen: *mut GdkScreen) -> gint;
    pub fn gdk_screen_get_height_mm(screen: *mut GdkScreen) -> gint;
    pub fn gdk_screen_list_visuals(screen: *mut GdkScreen) -> *mut GList;
    pub fn gdk_screen_get_toplevel_windows(screen: *mut GdkScreen) ->
     *mut GList;
    pub fn gdk_screen_make_display_name(screen: *mut GdkScreen) -> *mut gchar;
    pub fn gdk_screen_get_n_monitors(screen: *mut GdkScreen) -> gint;
    pub fn gdk_screen_get_primary_monitor(screen: *mut GdkScreen) -> gint;
    pub fn gdk_screen_get_monitor_geometry(screen: *mut GdkScreen,
                                           monitor_num: gint,
                                           dest: *mut GdkRectangle);
    pub fn gdk_screen_get_monitor_workarea(screen: *mut GdkScreen,
                                           monitor_num: gint,
                                           dest: *mut GdkRectangle);
    pub fn gdk_screen_get_monitor_at_point(screen: *mut GdkScreen, x: gint,
                                           y: gint) -> gint;
    pub fn gdk_screen_get_monitor_at_window(screen: *mut GdkScreen,
                                            window: *mut GdkWindow) -> gint;
    pub fn gdk_screen_get_monitor_width_mm(screen: *mut GdkScreen,
                                           monitor_num: gint) -> gint;
    pub fn gdk_screen_get_monitor_height_mm(screen: *mut GdkScreen,
                                            monitor_num: gint) -> gint;
    pub fn gdk_screen_get_monitor_plug_name(screen: *mut GdkScreen,
                                            monitor_num: gint) -> *mut gchar;
    pub fn gdk_screen_get_monitor_scale_factor(screen: *mut GdkScreen,
                                               monitor_num: gint) -> gint;
    pub fn gdk_screen_get_default() -> *mut GdkScreen;
    pub fn gdk_screen_get_setting(screen: *mut GdkScreen, name: *gchar,
                                  value: *mut GValue) -> gboolean;
    pub fn gdk_screen_set_font_options(screen: *mut GdkScreen,
                                       options: *cairo_font_options_t);
    pub fn gdk_screen_get_font_options(screen: *mut GdkScreen) ->
     *cairo_font_options_t;
    pub fn gdk_screen_set_resolution(screen: *mut GdkScreen, dpi: gdouble);
    pub fn gdk_screen_get_resolution(screen: *mut GdkScreen) -> gdouble;
    pub fn gdk_screen_get_active_window(screen: *mut GdkScreen) ->
     *mut GdkWindow;
    pub fn gdk_screen_get_window_stack(screen: *mut GdkScreen) -> *mut GList;
    pub fn gdk_app_launch_context_get_type() -> GType;
    pub fn gdk_app_launch_context_new() -> *mut GdkAppLaunchContext;
    pub fn gdk_app_launch_context_set_display(context:
                                                  *mut GdkAppLaunchContext,
                                              display: *mut GdkDisplay);
    pub fn gdk_app_launch_context_set_screen(context:
                                                 *mut GdkAppLaunchContext,
                                             screen: *mut GdkScreen);
    pub fn gdk_app_launch_context_set_desktop(context:
                                                  *mut GdkAppLaunchContext,
                                              desktop: gint);
    pub fn gdk_app_launch_context_set_timestamp(context:
                                                    *mut GdkAppLaunchContext,
                                                timestamp: guint32);
    pub fn gdk_app_launch_context_set_icon(context: *mut GdkAppLaunchContext,
                                           icon: *mut GIcon);
    pub fn gdk_app_launch_context_set_icon_name(context:
                                                    *mut GdkAppLaunchContext,
                                                icon_name: *c_schar);
    pub fn gdk_rgba_get_type() -> GType;
    pub fn gdk_rgba_copy(rgba: *GdkRGBA) -> *mut GdkRGBA;
    pub fn gdk_rgba_free(rgba: *mut GdkRGBA);
    pub fn gdk_rgba_hash(p: gconstpointer) -> guint;
    pub fn gdk_rgba_equal(p1: gconstpointer, p2: gconstpointer) -> gboolean;
    pub fn gdk_rgba_parse(rgba: *mut GdkRGBA, spec: *gchar) -> gboolean;
    pub fn gdk_rgba_to_string(rgba: *GdkRGBA) -> *mut gchar;
    pub fn gdk_pixbuf_error_quark() -> GQuark;
    pub fn gdk_pixbuf_get_type() -> GType;
    pub fn gdk_pixbuf_ref(pixbuf: *mut GdkPixbuf) -> *mut GdkPixbuf;
    pub fn gdk_pixbuf_unref(pixbuf: *mut GdkPixbuf);
    pub fn gdk_pixbuf_get_colorspace(pixbuf: *GdkPixbuf) -> GdkColorspace;
    pub fn gdk_pixbuf_get_n_channels(pixbuf: *GdkPixbuf) -> c_int;
    pub fn gdk_pixbuf_get_has_alpha(pixbuf: *GdkPixbuf) -> gboolean;
    pub fn gdk_pixbuf_get_bits_per_sample(pixbuf: *GdkPixbuf) -> c_int;
    pub fn gdk_pixbuf_get_pixels(pixbuf: *GdkPixbuf) -> *mut guchar;
    pub fn gdk_pixbuf_get_width(pixbuf: *GdkPixbuf) -> c_int;
    pub fn gdk_pixbuf_get_height(pixbuf: *GdkPixbuf) -> c_int;
    pub fn gdk_pixbuf_get_rowstride(pixbuf: *GdkPixbuf) -> c_int;
    pub fn gdk_pixbuf_get_byte_length(pixbuf: *GdkPixbuf) -> gsize;
    pub fn gdk_pixbuf_get_pixels_with_length(pixbuf: *GdkPixbuf,
                                             length: *mut guint) ->
     *mut guchar;
    pub fn gdk_pixbuf_new(colorspace: GdkColorspace, has_alpha: gboolean,
                          bits_per_sample: c_int, width: c_int, height: c_int)
     -> *mut GdkPixbuf;
    pub fn gdk_pixbuf_copy(pixbuf: *GdkPixbuf) -> *mut GdkPixbuf;
    pub fn gdk_pixbuf_new_subpixbuf(src_pixbuf: *mut GdkPixbuf, src_x: c_int,
                                    src_y: c_int, width: c_int, height: c_int)
     -> *mut GdkPixbuf;
    pub fn gdk_pixbuf_new_from_file(filename: *c_schar,
                                    error: *mut *mut GError) ->
     *mut GdkPixbuf;
    pub fn gdk_pixbuf_new_from_file_at_size(filename: *c_schar, width: c_int,
                                            height: c_int,
                                            error: *mut *mut GError) ->
     *mut GdkPixbuf;
    pub fn gdk_pixbuf_new_from_file_at_scale(filename: *c_schar, width: c_int,
                                             height: c_int,
                                             preserve_aspect_ratio: gboolean,
                                             error: *mut *mut GError) ->
     *mut GdkPixbuf;
    pub fn gdk_pixbuf_new_from_resource(resource_path: *c_schar,
                                        error: *mut *mut GError) ->
     *mut GdkPixbuf;
    pub fn gdk_pixbuf_new_from_resource_at_scale(resource_path: *c_schar,
                                                 width: c_int, height: c_int,
                                                 preserve_aspect_ratio:
                                                     gboolean,
                                                 error: *mut *mut GError) ->
     *mut GdkPixbuf;
    pub fn gdk_pixbuf_new_from_data(data: *guchar, colorspace: GdkColorspace,
                                    has_alpha: gboolean,
                                    bits_per_sample: c_int, width: c_int,
                                    height: c_int, rowstride: c_int,
                                    destroy_fn: GdkPixbufDestroyNotify,
                                    destroy_fn_data: gpointer) ->
     *mut GdkPixbuf;
    pub fn gdk_pixbuf_new_from_xpm_data(data: *mut *c_schar) ->
     *mut GdkPixbuf;
    pub fn gdk_pixbuf_new_from_inline(data_length: gint, data: *guint8,
                                      copy_pixels: gboolean,
                                      error: *mut *mut GError) ->
     *mut GdkPixbuf;
    pub fn gdk_pixbuf_fill(pixbuf: *mut GdkPixbuf, pixel: guint32);
    pub fn gdk_pixbuf_save(pixbuf: *mut GdkPixbuf, filename: *c_schar,
                           _type: *c_schar, error: *mut *mut GError, ...) ->
     gboolean;
    pub fn gdk_pixbuf_savev(pixbuf: *mut GdkPixbuf, filename: *c_schar,
                            _type: *c_schar, option_keys: *mut *mut c_schar,
                            option_values: *mut *mut c_schar,
                            error: *mut *mut GError) -> gboolean;
    pub fn gdk_pixbuf_save_to_callback(pixbuf: *mut GdkPixbuf,
                                       save_func: GdkPixbufSaveFunc,
                                       user_data: gpointer, _type: *c_schar,
                                       error: *mut *mut GError, ...) ->
     gboolean;
    pub fn gdk_pixbuf_save_to_callbackv(pixbuf: *mut GdkPixbuf,
                                        save_func: GdkPixbufSaveFunc,
                                        user_data: gpointer, _type: *c_schar,
                                        option_keys: *mut *mut c_schar,
                                        option_values: *mut *mut c_schar,
                                        error: *mut *mut GError) -> gboolean;
    pub fn gdk_pixbuf_save_to_buffer(pixbuf: *mut GdkPixbuf,
                                     buffer: *mut *mut gchar,
                                     buffer_size: *mut gsize, _type: *c_schar,
                                     error: *mut *mut GError, ...) ->
     gboolean;
    pub fn gdk_pixbuf_save_to_bufferv(pixbuf: *mut GdkPixbuf,
                                      buffer: *mut *mut gchar,
                                      buffer_size: *mut gsize,
                                      _type: *c_schar,
                                      option_keys: *mut *mut c_schar,
                                      option_values: *mut *mut c_schar,
                                      error: *mut *mut GError) -> gboolean;
    pub fn gdk_pixbuf_new_from_stream(stream: *mut GInputStream,
                                      cancellable: *mut GCancellable,
                                      error: *mut *mut GError) ->
     *mut GdkPixbuf;
    pub fn gdk_pixbuf_new_from_stream_async(stream: *mut GInputStream,
                                            cancellable: *mut GCancellable,
                                            callback: GAsyncReadyCallback,
                                            user_data: gpointer);
    pub fn gdk_pixbuf_new_from_stream_finish(async_result: *mut GAsyncResult,
                                             error: *mut *mut GError) ->
     *mut GdkPixbuf;
    pub fn gdk_pixbuf_new_from_stream_at_scale(stream: *mut GInputStream,
                                               width: gint, height: gint,
                                               preserve_aspect_ratio:
                                                   gboolean,
                                               cancellable: *mut GCancellable,
                                               error: *mut *mut GError) ->
     *mut GdkPixbuf;
    pub fn gdk_pixbuf_new_from_stream_at_scale_async(stream:
                                                         *mut GInputStream,
                                                     width: gint,
                                                     height: gint,
                                                     preserve_aspect_ratio:
                                                         gboolean,
                                                     cancellable:
                                                         *mut GCancellable,
                                                     callback:
                                                         GAsyncReadyCallback,
                                                     user_data: gpointer);
    pub fn gdk_pixbuf_save_to_stream(pixbuf: *mut GdkPixbuf,
                                     stream: *mut GOutputStream,
                                     _type: *c_schar,
                                     cancellable: *mut GCancellable,
                                     error: *mut *mut GError, ...) ->
     gboolean;
    pub fn gdk_pixbuf_save_to_stream_async(pixbuf: *mut GdkPixbuf,
                                           stream: *mut GOutputStream,
                                           _type: *gchar,
                                           cancellable: *mut GCancellable,
                                           callback: GAsyncReadyCallback,
                                           user_data: gpointer, ...);
    pub fn gdk_pixbuf_save_to_stream_finish(async_result: *mut GAsyncResult,
                                            error: *mut *mut GError) ->
     gboolean;
    pub fn gdk_pixbuf_add_alpha(pixbuf: *GdkPixbuf,
                                substitute_color: gboolean, r: guchar,
                                g: guchar, b: guchar) -> *mut GdkPixbuf;
    pub fn gdk_pixbuf_copy_area(src_pixbuf: *GdkPixbuf, src_x: c_int,
                                src_y: c_int, width: c_int, height: c_int,
                                dest_pixbuf: *mut GdkPixbuf, dest_x: c_int,
                                dest_y: c_int);
    pub fn gdk_pixbuf_saturate_and_pixelate(src: *GdkPixbuf,
                                            dest: *mut GdkPixbuf,
                                            saturation: gfloat,
                                            pixelate: gboolean);
    pub fn gdk_pixbuf_apply_embedded_orientation(src: *mut GdkPixbuf) ->
     *mut GdkPixbuf;
    pub fn gdk_pixbuf_get_option(pixbuf: *mut GdkPixbuf, key: *gchar) ->
     *gchar;
    pub fn gdk_pixbuf_scale(src: *GdkPixbuf, dest: *mut GdkPixbuf,
                            dest_x: c_int, dest_y: c_int, dest_width: c_int,
                            dest_height: c_int, offset_x: c_double,
                            offset_y: c_double, scale_x: c_double,
                            scale_y: c_double, interp_type: GdkInterpType);
    pub fn gdk_pixbuf_composite(src: *GdkPixbuf, dest: *mut GdkPixbuf,
                                dest_x: c_int, dest_y: c_int,
                                dest_width: c_int, dest_height: c_int,
                                offset_x: c_double, offset_y: c_double,
                                scale_x: c_double, scale_y: c_double,
                                interp_type: GdkInterpType,
                                overall_alpha: c_int);
    pub fn gdk_pixbuf_composite_color(src: *GdkPixbuf, dest: *mut GdkPixbuf,
                                      dest_x: c_int, dest_y: c_int,
                                      dest_width: c_int, dest_height: c_int,
                                      offset_x: c_double, offset_y: c_double,
                                      scale_x: c_double, scale_y: c_double,
                                      interp_type: GdkInterpType,
                                      overall_alpha: c_int, check_x: c_int,
                                      check_y: c_int, check_size: c_int,
                                      color1: guint32, color2: guint32);
    pub fn gdk_pixbuf_scale_simple(src: *GdkPixbuf, dest_width: c_int,
                                   dest_height: c_int,
                                   interp_type: GdkInterpType) ->
     *mut GdkPixbuf;
    pub fn gdk_pixbuf_composite_color_simple(src: *GdkPixbuf,
                                             dest_width: c_int,
                                             dest_height: c_int,
                                             interp_type: GdkInterpType,
                                             overall_alpha: c_int,
                                             check_size: c_int,
                                             color1: guint32, color2: guint32)
     -> *mut GdkPixbuf;
    pub fn gdk_pixbuf_rotate_simple(src: *GdkPixbuf, angle: GdkPixbufRotation)
     -> *mut GdkPixbuf;
    pub fn gdk_pixbuf_flip(src: *GdkPixbuf, horizontal: gboolean) ->
     *mut GdkPixbuf;
    pub fn gdk_pixbuf_animation_get_type() -> GType;
    pub fn gdk_pixbuf_animation_new_from_file(filename: *c_schar,
                                              error: *mut *mut GError) ->
     *mut GdkPixbufAnimation;
    pub fn gdk_pixbuf_animation_new_from_stream(stream: *mut GInputStream,
                                                cancellable:
                                                    *mut GCancellable,
                                                error: *mut *mut GError) ->
     *mut GdkPixbufAnimation;
    pub fn gdk_pixbuf_animation_new_from_stream_async(stream:
                                                          *mut GInputStream,
                                                      cancellable:
                                                          *mut GCancellable,
                                                      callback:
                                                          GAsyncReadyCallback,
                                                      user_data: gpointer);
    pub fn gdk_pixbuf_animation_new_from_stream_finish(async_result:
                                                           *mut GAsyncResult,
                                                       error:
                                                           *mut *mut GError)
     -> *mut GdkPixbufAnimation;
    pub fn gdk_pixbuf_animation_new_from_resource(resource_path: *c_schar,
                                                  error: *mut *mut GError) ->
     *mut GdkPixbufAnimation;
    pub fn gdk_pixbuf_animation_ref(animation: *mut GdkPixbufAnimation) ->
     *mut GdkPixbufAnimation;
    pub fn gdk_pixbuf_animation_unref(animation: *mut GdkPixbufAnimation);
    pub fn gdk_pixbuf_animation_get_width(animation: *mut GdkPixbufAnimation)
     -> c_int;
    pub fn gdk_pixbuf_animation_get_height(animation: *mut GdkPixbufAnimation)
     -> c_int;
    pub fn gdk_pixbuf_animation_is_static_image(animation:
                                                    *mut GdkPixbufAnimation)
     -> gboolean;
    pub fn gdk_pixbuf_animation_get_static_image(animation:
                                                     *mut GdkPixbufAnimation)
     -> *mut GdkPixbuf;
    pub fn gdk_pixbuf_animation_get_iter(animation: *mut GdkPixbufAnimation,
                                         start_time: *GTimeVal) ->
     *mut GdkPixbufAnimationIter;
    pub fn gdk_pixbuf_animation_iter_get_type() -> GType;
    pub fn gdk_pixbuf_animation_iter_get_delay_time(iter:
                                                        *mut GdkPixbufAnimationIter)
     -> c_int;
    pub fn gdk_pixbuf_animation_iter_get_pixbuf(iter:
                                                    *mut GdkPixbufAnimationIter)
     -> *mut GdkPixbuf;
    pub fn gdk_pixbuf_animation_iter_on_currently_loading_frame(iter:
                                                                    *mut GdkPixbufAnimationIter)
     -> gboolean;
    pub fn gdk_pixbuf_animation_iter_advance(iter:
                                                 *mut GdkPixbufAnimationIter,
                                             current_time: *GTimeVal) ->
     gboolean;
    pub fn gdk_pixbuf_simple_anim_get_type() -> GType;
    pub fn gdk_pixbuf_simple_anim_iter_get_type() -> GType;
    pub fn gdk_pixbuf_simple_anim_new(width: gint, height: gint, rate: gfloat)
     -> *mut GdkPixbufSimpleAnim;
    pub fn gdk_pixbuf_simple_anim_add_frame(animation:
                                                *mut GdkPixbufSimpleAnim,
                                            pixbuf: *mut GdkPixbuf);
    pub fn gdk_pixbuf_simple_anim_set_loop(animation:
                                               *mut GdkPixbufSimpleAnim,
                                           _loop: gboolean);
    pub fn gdk_pixbuf_simple_anim_get_loop(animation:
                                               *mut GdkPixbufSimpleAnim) ->
     gboolean;
    pub fn gdk_pixbuf_format_get_type() -> GType;
    pub fn gdk_pixbuf_get_formats() -> *mut GSList;
    pub fn gdk_pixbuf_format_get_name(format: *mut GdkPixbufFormat) ->
     *mut gchar;
    pub fn gdk_pixbuf_format_get_description(format: *mut GdkPixbufFormat) ->
     *mut gchar;
    pub fn gdk_pixbuf_format_get_mime_types(format: *mut GdkPixbufFormat) ->
     *mut *mut gchar;
    pub fn gdk_pixbuf_format_get_extensions(format: *mut GdkPixbufFormat) ->
     *mut *mut gchar;
    pub fn gdk_pixbuf_format_is_writable(format: *mut GdkPixbufFormat) ->
     gboolean;
    pub fn gdk_pixbuf_format_is_scalable(format: *mut GdkPixbufFormat) ->
     gboolean;
    pub fn gdk_pixbuf_format_is_disabled(format: *mut GdkPixbufFormat) ->
     gboolean;
    pub fn gdk_pixbuf_format_set_disabled(format: *mut GdkPixbufFormat,
                                          disabled: gboolean);
    pub fn gdk_pixbuf_format_get_license(format: *mut GdkPixbufFormat) ->
     *mut gchar;
    pub fn gdk_pixbuf_get_file_info(filename: *gchar, width: *mut gint,
                                    height: *mut gint) ->
     *mut GdkPixbufFormat;
    pub fn gdk_pixbuf_format_copy(format: *GdkPixbufFormat) ->
     *mut GdkPixbufFormat;
    pub fn gdk_pixbuf_format_free(format: *mut GdkPixbufFormat);
    pub fn gdk_pixbuf_loader_get_type() -> GType;
    pub fn gdk_pixbuf_loader_new() -> *mut GdkPixbufLoader;
    pub fn gdk_pixbuf_loader_new_with_type(image_type: *c_schar,
                                           error: *mut *mut GError) ->
     *mut GdkPixbufLoader;
    pub fn gdk_pixbuf_loader_new_with_mime_type(mime_type: *c_schar,
                                                error: *mut *mut GError) ->
     *mut GdkPixbufLoader;
    pub fn gdk_pixbuf_loader_set_size(loader: *mut GdkPixbufLoader,
                                      width: c_int, height: c_int);
    pub fn gdk_pixbuf_loader_write(loader: *mut GdkPixbufLoader, buf: *guchar,
                                   count: gsize, error: *mut *mut GError) ->
     gboolean;
    pub fn gdk_pixbuf_loader_write_bytes(loader: *mut GdkPixbufLoader,
                                         buffer: *mut GBytes,
                                         error: *mut *mut GError) -> gboolean;
    pub fn gdk_pixbuf_loader_get_pixbuf(loader: *mut GdkPixbufLoader) ->
     *mut GdkPixbuf;
    pub fn gdk_pixbuf_loader_get_animation(loader: *mut GdkPixbufLoader) ->
     *mut GdkPixbufAnimation;
    pub fn gdk_pixbuf_loader_close(loader: *mut GdkPixbufLoader,
                                   error: *mut *mut GError) -> gboolean;
    pub fn gdk_pixbuf_loader_get_format(loader: *mut GdkPixbufLoader) ->
     *mut GdkPixbufFormat;
    pub fn gdk_pixbuf_alpha_mode_get_type() -> GType;
    pub fn gdk_colorspace_get_type() -> GType;
    pub fn gdk_pixbuf_error_get_type() -> GType;
    pub fn gdk_interp_type_get_type() -> GType;
    pub fn gdk_pixbuf_rotation_get_type() -> GType;
    pub fn gdk_pixbuf_get_from_window(window: *mut GdkWindow, src_x: gint,
                                      src_y: gint, width: gint, height: gint)
     -> *mut GdkPixbuf;
    pub fn gdk_pixbuf_get_from_surface(surface: *mut cairo_surface_t,
                                       src_x: gint, src_y: gint, width: gint,
                                       height: gint) -> *mut GdkPixbuf;
    pub fn pango_cairo_font_map_get_type() -> GType;
    pub fn pango_cairo_font_map_new() -> *mut PangoFontMap;
    pub fn pango_cairo_font_map_new_for_font_type(fonttype: cairo_font_type_t)
     -> *mut PangoFontMap;
    pub fn pango_cairo_font_map_get_default() -> *mut PangoFontMap;
    pub fn pango_cairo_font_map_set_default(fontmap: *mut PangoCairoFontMap);
    pub fn pango_cairo_font_map_get_font_type(fontmap: *mut PangoCairoFontMap)
     -> cairo_font_type_t;
    pub fn pango_cairo_font_map_set_resolution(fontmap:
                                                   *mut PangoCairoFontMap,
                                               dpi: c_double);
    pub fn pango_cairo_font_map_get_resolution(fontmap:
                                                   *mut PangoCairoFontMap) ->
     c_double;
    pub fn pango_cairo_font_map_create_context(fontmap:
                                                   *mut PangoCairoFontMap) ->
     *mut PangoContext;
    pub fn pango_cairo_font_get_type() -> GType;
    pub fn pango_cairo_font_get_scaled_font(font: *mut PangoCairoFont) ->
     *mut cairo_scaled_font_t;
    pub fn pango_cairo_update_context(cr: *mut cairo_t,
                                      context: *mut PangoContext);
    pub fn pango_cairo_context_set_font_options(context: *mut PangoContext,
                                                options:
                                                    *cairo_font_options_t);
    pub fn pango_cairo_context_get_font_options(context: *mut PangoContext) ->
     *cairo_font_options_t;
    pub fn pango_cairo_context_set_resolution(context: *mut PangoContext,
                                              dpi: c_double);
    pub fn pango_cairo_context_get_resolution(context: *mut PangoContext) ->
     c_double;
    pub fn pango_cairo_context_set_shape_renderer(context: *mut PangoContext,
                                                  func:
                                                      PangoCairoShapeRendererFunc,
                                                  data: gpointer,
                                                  dnotify: GDestroyNotify);
    pub fn pango_cairo_context_get_shape_renderer(context: *mut PangoContext,
                                                  data: *mut gpointer) ->
     PangoCairoShapeRendererFunc;
    pub fn pango_cairo_create_context(cr: *mut cairo_t) -> *mut PangoContext;
    pub fn pango_cairo_create_layout(cr: *mut cairo_t) -> *mut PangoLayout;
    pub fn pango_cairo_update_layout(cr: *mut cairo_t,
                                     layout: *mut PangoLayout);
    pub fn pango_cairo_show_glyph_string(cr: *mut cairo_t,
                                         font: *mut PangoFont,
                                         glyphs: *mut PangoGlyphString);
    pub fn pango_cairo_show_glyph_item(cr: *mut cairo_t, text: *c_schar,
                                       glyph_item: *mut PangoGlyphItem);
    pub fn pango_cairo_show_layout_line(cr: *mut cairo_t,
                                        line: *mut PangoLayoutLine);
    pub fn pango_cairo_show_layout(cr: *mut cairo_t,
                                   layout: *mut PangoLayout);
    pub fn pango_cairo_show_error_underline(cr: *mut cairo_t, x: c_double,
                                            y: c_double, width: c_double,
                                            height: c_double);
    pub fn pango_cairo_glyph_string_path(cr: *mut cairo_t,
                                         font: *mut PangoFont,
                                         glyphs: *mut PangoGlyphString);
    pub fn pango_cairo_layout_line_path(cr: *mut cairo_t,
                                        line: *mut PangoLayoutLine);
    pub fn pango_cairo_layout_path(cr: *mut cairo_t,
                                   layout: *mut PangoLayout);
    pub fn pango_cairo_error_underline_path(cr: *mut cairo_t, x: c_double,
                                            y: c_double, width: c_double,
                                            height: c_double);
    pub fn gdk_cairo_create(window: *mut GdkWindow) -> *mut cairo_t;
    pub fn gdk_cairo_get_clip_rectangle(cr: *mut cairo_t,
                                        rect: *mut GdkRectangle) -> gboolean;
    pub fn gdk_cairo_set_source_rgba(cr: *mut cairo_t, rgba: *GdkRGBA);
    pub fn gdk_cairo_set_source_pixbuf(cr: *mut cairo_t, pixbuf: *GdkPixbuf,
                                       pixbuf_x: gdouble, pixbuf_y: gdouble);
    pub fn gdk_cairo_set_source_window(cr: *mut cairo_t,
                                       window: *mut GdkWindow, x: gdouble,
                                       y: gdouble);
    pub fn gdk_cairo_rectangle(cr: *mut cairo_t, rectangle: *GdkRectangle);
    pub fn gdk_cairo_region(cr: *mut cairo_t, region: *cairo_region_t);
    pub fn gdk_cairo_region_create_from_surface(surface: *mut cairo_surface_t)
     -> *mut cairo_region_t;
    pub fn gdk_cairo_set_source_color(cr: *mut cairo_t, color: *GdkColor);
    pub fn gdk_cairo_surface_create_from_pixbuf(pixbuf: *GdkPixbuf,
                                                scale: c_int,
                                                for_window: *mut GdkWindow) ->
     *mut cairo_surface_t;
    pub fn gdk_cursor_get_type() -> GType;
    pub fn gdk_cursor_new_for_display(display: *mut GdkDisplay,
                                      cursor_type: GdkCursorType) ->
     *mut GdkCursor;
    pub fn gdk_cursor_new(cursor_type: GdkCursorType) -> *mut GdkCursor;
    pub fn gdk_cursor_new_from_pixbuf(display: *mut GdkDisplay,
                                      pixbuf: *mut GdkPixbuf, x: gint,
                                      y: gint) -> *mut GdkCursor;
    pub fn gdk_cursor_new_from_surface(display: *mut GdkDisplay,
                                       surface: *mut cairo_surface_t,
                                       x: gdouble, y: gdouble) ->
     *mut GdkCursor;
    pub fn gdk_cursor_new_from_name(display: *mut GdkDisplay, name: *gchar) ->
     *mut GdkCursor;
    pub fn gdk_cursor_get_display(cursor: *mut GdkCursor) -> *mut GdkDisplay;
    pub fn gdk_cursor_ref(cursor: *mut GdkCursor) -> *mut GdkCursor;
    pub fn gdk_cursor_unref(cursor: *mut GdkCursor);
    pub fn gdk_cursor_get_image(cursor: *mut GdkCursor) -> *mut GdkPixbuf;
    pub fn gdk_cursor_get_surface(cursor: *mut GdkCursor, x_hot: *mut gdouble,
                                  y_hot: *mut gdouble) ->
     *mut cairo_surface_t;
    pub fn gdk_cursor_get_cursor_type(cursor: *mut GdkCursor) ->
     GdkCursorType;
    pub fn gdk_display_manager_get_type() -> GType;
    pub fn gdk_display_manager_get() -> *mut GdkDisplayManager;
    pub fn gdk_display_manager_get_default_display(manager:
                                                       *mut GdkDisplayManager)
     -> *mut GdkDisplay;
    pub fn gdk_display_manager_set_default_display(manager:
                                                       *mut GdkDisplayManager,
                                                   display: *mut GdkDisplay);
    pub fn gdk_display_manager_list_displays(manager: *mut GdkDisplayManager)
     -> *mut GSList;
    pub fn gdk_display_manager_open_display(manager: *mut GdkDisplayManager,
                                            name: *gchar) -> *mut GdkDisplay;
    pub fn gdk_cursor_type_get_type() -> GType;
    pub fn gdk_input_source_get_type() -> GType;
    pub fn gdk_input_mode_get_type() -> GType;
    pub fn gdk_axis_use_get_type() -> GType;
    pub fn gdk_device_type_get_type() -> GType;
    pub fn gdk_drag_action_get_type() -> GType;
    pub fn gdk_drag_protocol_get_type() -> GType;
    pub fn gdk_filter_return_get_type() -> GType;
    pub fn gdk_event_type_get_type() -> GType;
    pub fn gdk_visibility_state_get_type() -> GType;
    pub fn gdk_scroll_direction_get_type() -> GType;
    pub fn gdk_notify_type_get_type() -> GType;
    pub fn gdk_crossing_mode_get_type() -> GType;
    pub fn gdk_property_state_get_type() -> GType;
    pub fn gdk_window_state_get_type() -> GType;
    pub fn gdk_setting_action_get_type() -> GType;
    pub fn gdk_owner_change_get_type() -> GType;
    pub fn gdk_frame_clock_phase_get_type() -> GType;
    pub fn gdk_prop_mode_get_type() -> GType;
    pub fn gdk_byte_order_get_type() -> GType;
    pub fn gdk_modifier_type_get_type() -> GType;
    pub fn gdk_modifier_intent_get_type() -> GType;
    pub fn gdk_status_get_type() -> GType;
    pub fn gdk_grab_status_get_type() -> GType;
    pub fn gdk_grab_ownership_get_type() -> GType;
    pub fn gdk_event_mask_get_type() -> GType;
    pub fn gdk_visual_type_get_type() -> GType;
    pub fn gdk_window_window_class_get_type() -> GType;
    pub fn gdk_window_type_get_type() -> GType;
    pub fn gdk_window_attributes_type_get_type() -> GType;
    pub fn gdk_window_hints_get_type() -> GType;
    pub fn gdk_window_type_hint_get_type() -> GType;
    pub fn gdk_wm_decoration_get_type() -> GType;
    pub fn gdk_wm_function_get_type() -> GType;
    pub fn gdk_gravity_get_type() -> GType;
    pub fn gdk_window_edge_get_type() -> GType;
    pub fn gdk_fullscreen_mode_get_type() -> GType;
    pub fn gdk_frame_timings_get_type() -> GType;
    pub fn gdk_frame_timings_ref(timings: *mut GdkFrameTimings) ->
     *mut GdkFrameTimings;
    pub fn gdk_frame_timings_unref(timings: *mut GdkFrameTimings);
    pub fn gdk_frame_timings_get_frame_counter(timings: *mut GdkFrameTimings)
     -> gint64;
    pub fn gdk_frame_timings_get_complete(timings: *mut GdkFrameTimings) ->
     gboolean;
    pub fn gdk_frame_timings_get_frame_time(timings: *mut GdkFrameTimings) ->
     gint64;
    pub fn gdk_frame_timings_get_presentation_time(timings:
                                                       *mut GdkFrameTimings)
     -> gint64;
    pub fn gdk_frame_timings_get_refresh_interval(timings:
                                                      *mut GdkFrameTimings) ->
     gint64;
    pub fn gdk_frame_timings_get_predicted_presentation_time(timings:
                                                                 *mut GdkFrameTimings)
     -> gint64;
    pub fn gdk_frame_clock_get_type() -> GType;
    pub fn gdk_frame_clock_get_frame_time(frame_clock: *mut GdkFrameClock) ->
     gint64;
    pub fn gdk_frame_clock_request_phase(frame_clock: *mut GdkFrameClock,
                                         phase: GdkFrameClockPhase);
    pub fn gdk_frame_clock_begin_updating(frame_clock: *mut GdkFrameClock);
    pub fn gdk_frame_clock_end_updating(frame_clock: *mut GdkFrameClock);
    pub fn gdk_frame_clock_get_frame_counter(frame_clock: *mut GdkFrameClock)
     -> gint64;
    pub fn gdk_frame_clock_get_history_start(frame_clock: *mut GdkFrameClock)
     -> gint64;
    pub fn gdk_frame_clock_get_timings(frame_clock: *mut GdkFrameClock,
                                       frame_counter: gint64) ->
     *mut GdkFrameTimings;
    pub fn gdk_frame_clock_get_current_timings(frame_clock:
                                                   *mut GdkFrameClock) ->
     *mut GdkFrameTimings;
    pub fn gdk_frame_clock_get_refresh_info(frame_clock: *mut GdkFrameClock,
                                            base_time: gint64,
                                            refresh_interval_return:
                                                *mut gint64,
                                            presentation_time_return:
                                                *mut gint64);
    pub fn gdk_keymap_get_type() -> GType;
    pub fn gdk_keymap_get_default() -> *mut GdkKeymap;
    pub fn gdk_keymap_get_for_display(display: *mut GdkDisplay) ->
     *mut GdkKeymap;
    pub fn gdk_keymap_lookup_key(keymap: *mut GdkKeymap, key: *GdkKeymapKey)
     -> guint;
    pub fn gdk_keymap_translate_keyboard_state(keymap: *mut GdkKeymap,
                                               hardware_keycode: guint,
                                               state: GdkModifierType,
                                               group: gint,
                                               keyval: *mut guint,
                                               effective_group: *mut gint,
                                               level: *mut gint,
                                               consumed_modifiers:
                                                   *mut GdkModifierType) ->
     gboolean;
    pub fn gdk_keymap_get_entries_for_keyval(keymap: *mut GdkKeymap,
                                             keyval: guint,
                                             keys: *mut *mut GdkKeymapKey,
                                             n_keys: *mut gint) -> gboolean;
    pub fn gdk_keymap_get_entries_for_keycode(keymap: *mut GdkKeymap,
                                              hardware_keycode: guint,
                                              keys: *mut *mut GdkKeymapKey,
                                              keyvals: *mut *mut guint,
                                              n_entries: *mut gint) ->
     gboolean;
    pub fn gdk_keymap_get_direction(keymap: *mut GdkKeymap) -> PangoDirection;
    pub fn gdk_keymap_have_bidi_layouts(keymap: *mut GdkKeymap) -> gboolean;
    pub fn gdk_keymap_get_caps_lock_state(keymap: *mut GdkKeymap) -> gboolean;
    pub fn gdk_keymap_get_num_lock_state(keymap: *mut GdkKeymap) -> gboolean;
    pub fn gdk_keymap_get_modifier_state(keymap: *mut GdkKeymap) -> guint;
    pub fn gdk_keymap_add_virtual_modifiers(keymap: *mut GdkKeymap,
                                            state: *mut GdkModifierType);
    pub fn gdk_keymap_map_virtual_modifiers(keymap: *mut GdkKeymap,
                                            state: *mut GdkModifierType) ->
     gboolean;
    pub fn gdk_keymap_get_modifier_mask(keymap: *mut GdkKeymap,
                                        intent: GdkModifierIntent) ->
     GdkModifierType;
    pub fn gdk_keyval_name(keyval: guint) -> *mut gchar;
    pub fn gdk_keyval_from_name(keyval_name: *gchar) -> guint;
    pub fn gdk_keyval_convert_case(symbol: guint, lower: *mut guint,
                                   upper: *mut guint);
    pub fn gdk_keyval_to_upper(keyval: guint) -> guint;
    pub fn gdk_keyval_to_lower(keyval: guint) -> guint;
    pub fn gdk_keyval_is_upper(keyval: guint) -> gboolean;
    pub fn gdk_keyval_is_lower(keyval: guint) -> gboolean;
    pub fn gdk_keyval_to_unicode(keyval: guint) -> guint32;
    pub fn gdk_unicode_to_keyval(wc: guint32) -> guint;
    pub fn gdk_parse_args(argc: *mut gint, argv: *mut *mut *mut gchar);
    pub fn gdk_init(argc: *mut gint, argv: *mut *mut *mut gchar);
    pub fn gdk_init_check(argc: *mut gint, argv: *mut *mut *mut gchar) ->
     gboolean;
    pub fn gdk_add_option_entries_libgtk_only(group: *mut GOptionGroup);
    pub fn gdk_pre_parse_libgtk_only();
    pub fn gdk_get_program_class() -> *gchar;
    pub fn gdk_set_program_class(program_class: *gchar);
    pub fn gdk_notify_startup_complete();
    pub fn gdk_notify_startup_complete_with_id(startup_id: *gchar);
    pub fn gdk_error_trap_push();
    pub fn gdk_error_trap_pop() -> gint;
    pub fn gdk_error_trap_pop_ignored();
    pub fn gdk_get_display_arg_name() -> *gchar;
    pub fn gdk_get_display() -> *mut gchar;
    pub fn gdk_pointer_grab(window: *mut GdkWindow, owner_events: gboolean,
                            event_mask: GdkEventMask,
                            confine_to: *mut GdkWindow,
                            cursor: *mut GdkCursor, time_: guint32) ->
     GdkGrabStatus;
    pub fn gdk_keyboard_grab(window: *mut GdkWindow, owner_events: gboolean,
                             time_: guint32) -> GdkGrabStatus;
    pub fn gdk_pointer_ungrab(time_: guint32);
    pub fn gdk_keyboard_ungrab(time_: guint32);
    pub fn gdk_pointer_is_grabbed() -> gboolean;
    pub fn gdk_screen_width() -> gint;
    pub fn gdk_screen_height() -> gint;
    pub fn gdk_screen_width_mm() -> gint;
    pub fn gdk_screen_height_mm() -> gint;
    pub fn gdk_set_double_click_time(msec: guint);
    pub fn gdk_beep();
    pub fn gdk_flush();
    pub fn gdk_disable_multidevice();
    pub fn gdk_set_allowed_backends(backends: *gchar);
    pub fn gdk_pango_context_get_for_screen(screen: *mut GdkScreen) ->
     *mut PangoContext;
    pub fn gdk_pango_context_get() -> *mut PangoContext;
    pub fn gdk_pango_layout_line_get_clip_region(line: *mut PangoLayoutLine,
                                                 x_origin: gint,
                                                 y_origin: gint,
                                                 index_ranges: *gint,
                                                 n_ranges: gint) ->
     *mut cairo_region_t;
    pub fn gdk_pango_layout_get_clip_region(layout: *mut PangoLayout,
                                            x_origin: gint, y_origin: gint,
                                            index_ranges: *gint,
                                            n_ranges: gint) ->
     *mut cairo_region_t;
    pub fn gdk_atom_intern(atom_name: *gchar, only_if_exists: gboolean) ->
     GdkAtom;
    pub fn gdk_atom_intern_static_string(atom_name: *gchar) -> GdkAtom;
    pub fn gdk_atom_name(atom: GdkAtom) -> *mut gchar;
    pub fn gdk_property_get(window: *mut GdkWindow, property: GdkAtom,
                            _type: GdkAtom, offset: gulong, length: gulong,
                            pdelete: gint, actual_property_type: *mut GdkAtom,
                            actual_format: *mut gint,
                            actual_length: *mut gint, data: *mut *mut guchar)
     -> gboolean;
    pub fn gdk_property_change(window: *mut GdkWindow, property: GdkAtom,
                               _type: GdkAtom, format: gint,
                               mode: GdkPropMode, data: *guchar,
                               nelements: gint);
    pub fn gdk_property_delete(window: *mut GdkWindow, property: GdkAtom);
    pub fn gdk_text_property_to_utf8_list_for_display(display:
                                                          *mut GdkDisplay,
                                                      encoding: GdkAtom,
                                                      format: gint,
                                                      text: *guchar,
                                                      length: gint,
                                                      list:
                                                          *mut *mut *mut gchar)
     -> gint;
    pub fn gdk_utf8_to_string_target(str: *gchar) -> *mut gchar;
    pub fn gdk_rectangle_intersect(src1: *GdkRectangle, src2: *GdkRectangle,
                                   dest: *mut GdkRectangle) -> gboolean;
    pub fn gdk_rectangle_union(src1: *GdkRectangle, src2: *GdkRectangle,
                               dest: *mut GdkRectangle);
    pub fn gdk_rectangle_get_type() -> GType;
    pub fn gdk_selection_owner_set(owner: *mut GdkWindow, selection: GdkAtom,
                                   time_: guint32, send_event: gboolean) ->
     gboolean;
    pub fn gdk_selection_owner_get(selection: GdkAtom) -> *mut GdkWindow;
    pub fn gdk_selection_owner_set_for_display(display: *mut GdkDisplay,
                                               owner: *mut GdkWindow,
                                               selection: GdkAtom,
                                               time_: guint32,
                                               send_event: gboolean) ->
     gboolean;
    pub fn gdk_selection_owner_get_for_display(display: *mut GdkDisplay,
                                               selection: GdkAtom) ->
     *mut GdkWindow;
    pub fn gdk_selection_convert(requestor: *mut GdkWindow,
                                 selection: GdkAtom, target: GdkAtom,
                                 time_: guint32);
    pub fn gdk_selection_property_get(requestor: *mut GdkWindow,
                                      data: *mut *mut guchar,
                                      prop_type: *mut GdkAtom,
                                      prop_format: *mut gint) -> gint;
    pub fn gdk_selection_send_notify(requestor: *mut GdkWindow,
                                     selection: GdkAtom, target: GdkAtom,
                                     property: GdkAtom, time_: guint32);
    pub fn gdk_selection_send_notify_for_display(display: *mut GdkDisplay,
                                                 requestor: *mut GdkWindow,
                                                 selection: GdkAtom,
                                                 target: GdkAtom,
                                                 property: GdkAtom,
                                                 time_: guint32);
    pub fn gdk_window_get_type() -> GType;
    pub fn gdk_window_new(parent: *mut GdkWindow,
                          attributes: *mut GdkWindowAttr,
                          attributes_mask: gint) -> *mut GdkWindow;
    pub fn gdk_window_destroy(window: *mut GdkWindow);
    pub fn gdk_window_get_window_type(window: *mut GdkWindow) ->
     GdkWindowType;
    pub fn gdk_window_is_destroyed(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_get_visual(window: *mut GdkWindow) -> *mut GdkVisual;
    pub fn gdk_window_get_screen(window: *mut GdkWindow) -> *mut GdkScreen;
    pub fn gdk_window_get_display(window: *mut GdkWindow) -> *mut GdkDisplay;
    pub fn gdk_window_at_pointer(win_x: *mut gint, win_y: *mut gint) ->
     *mut GdkWindow;
    pub fn gdk_window_show(window: *mut GdkWindow);
    pub fn gdk_window_hide(window: *mut GdkWindow);
    pub fn gdk_window_withdraw(window: *mut GdkWindow);
    pub fn gdk_window_show_unraised(window: *mut GdkWindow);
    pub fn gdk_window_move(window: *mut GdkWindow, x: gint, y: gint);
    pub fn gdk_window_resize(window: *mut GdkWindow, width: gint,
                             height: gint);
    pub fn gdk_window_move_resize(window: *mut GdkWindow, x: gint, y: gint,
                                  width: gint, height: gint);
    pub fn gdk_window_reparent(window: *mut GdkWindow,
                               new_parent: *mut GdkWindow, x: gint, y: gint);
    pub fn gdk_window_raise(window: *mut GdkWindow);
    pub fn gdk_window_lower(window: *mut GdkWindow);
    pub fn gdk_window_restack(window: *mut GdkWindow, sibling: *mut GdkWindow,
                              above: gboolean);
    pub fn gdk_window_focus(window: *mut GdkWindow, timestamp: guint32);
    pub fn gdk_window_set_user_data(window: *mut GdkWindow,
                                    user_data: gpointer);
    pub fn gdk_window_set_override_redirect(window: *mut GdkWindow,
                                            override_redirect: gboolean);
    pub fn gdk_window_get_accept_focus(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_set_accept_focus(window: *mut GdkWindow,
                                       accept_focus: gboolean);
    pub fn gdk_window_get_focus_on_map(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_set_focus_on_map(window: *mut GdkWindow,
                                       focus_on_map: gboolean);
    pub fn gdk_window_add_filter(window: *mut GdkWindow,
                                 function: GdkFilterFunc, data: gpointer);
    pub fn gdk_window_remove_filter(window: *mut GdkWindow,
                                    function: GdkFilterFunc, data: gpointer);
    pub fn gdk_window_scroll(window: *mut GdkWindow, dx: gint, dy: gint);
    pub fn gdk_window_move_region(window: *mut GdkWindow,
                                  region: *cairo_region_t, dx: gint,
                                  dy: gint);
    pub fn gdk_window_ensure_native(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_shape_combine_region(window: *mut GdkWindow,
                                           shape_region: *cairo_region_t,
                                           offset_x: gint, offset_y: gint);
    pub fn gdk_window_set_child_shapes(window: *mut GdkWindow);
    pub fn gdk_window_get_composited(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_set_composited(window: *mut GdkWindow,
                                     composited: gboolean);
    pub fn gdk_window_merge_child_shapes(window: *mut GdkWindow);
    pub fn gdk_window_input_shape_combine_region(window: *mut GdkWindow,
                                                 shape_region:
                                                     *cairo_region_t,
                                                 offset_x: gint,
                                                 offset_y: gint);
    pub fn gdk_window_set_child_input_shapes(window: *mut GdkWindow);
    pub fn gdk_window_merge_child_input_shapes(window: *mut GdkWindow);
    pub fn gdk_window_is_visible(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_is_viewable(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_is_input_only(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_is_shaped(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_get_state(window: *mut GdkWindow) -> GdkWindowState;
    pub fn gdk_window_set_static_gravities(window: *mut GdkWindow,
                                           use_static: gboolean) -> gboolean;
    pub fn gdk_window_set_invalidate_handler(window: *mut GdkWindow,
                                             handler:
                                                 GdkWindowInvalidateHandlerFunc);
    pub fn gdk_window_has_native(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_set_type_hint(window: *mut GdkWindow,
                                    hint: GdkWindowTypeHint);
    pub fn gdk_window_get_type_hint(window: *mut GdkWindow) ->
     GdkWindowTypeHint;
    pub fn gdk_window_get_modal_hint(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_set_modal_hint(window: *mut GdkWindow, modal: gboolean);
    pub fn gdk_window_set_skip_taskbar_hint(window: *mut GdkWindow,
                                            skips_taskbar: gboolean);
    pub fn gdk_window_set_skip_pager_hint(window: *mut GdkWindow,
                                          skips_pager: gboolean);
    pub fn gdk_window_set_urgency_hint(window: *mut GdkWindow,
                                       urgent: gboolean);
    pub fn gdk_window_set_geometry_hints(window: *mut GdkWindow,
                                         geometry: *GdkGeometry,
                                         geom_mask: GdkWindowHints);
    pub fn gdk_window_get_clip_region(window: *mut GdkWindow) ->
     *mut cairo_region_t;
    pub fn gdk_window_get_visible_region(window: *mut GdkWindow) ->
     *mut cairo_region_t;
    pub fn gdk_window_begin_paint_rect(window: *mut GdkWindow,
                                       rectangle: *GdkRectangle);
    pub fn gdk_window_begin_paint_region(window: *mut GdkWindow,
                                         region: *cairo_region_t);
    pub fn gdk_window_end_paint(window: *mut GdkWindow);
    pub fn gdk_window_flush(window: *mut GdkWindow);
    pub fn gdk_window_set_title(window: *mut GdkWindow, title: *gchar);
    pub fn gdk_window_set_role(window: *mut GdkWindow, role: *gchar);
    pub fn gdk_window_set_startup_id(window: *mut GdkWindow,
                                     startup_id: *gchar);
    pub fn gdk_window_set_transient_for(window: *mut GdkWindow,
                                        parent: *mut GdkWindow);
    pub fn gdk_window_set_background(window: *mut GdkWindow,
                                     color: *GdkColor);
    pub fn gdk_window_set_background_rgba(window: *mut GdkWindow,
                                          rgba: *GdkRGBA);
    pub fn gdk_window_set_background_pattern(window: *mut GdkWindow,
                                             pattern: *mut cairo_pattern_t);
    pub fn gdk_window_get_background_pattern(window: *mut GdkWindow) ->
     *mut cairo_pattern_t;
    pub fn gdk_window_set_cursor(window: *mut GdkWindow,
                                 cursor: *mut GdkCursor);
    pub fn gdk_window_get_cursor(window: *mut GdkWindow) -> *mut GdkCursor;
    pub fn gdk_window_set_device_cursor(window: *mut GdkWindow,
                                        device: *mut GdkDevice,
                                        cursor: *mut GdkCursor);
    pub fn gdk_window_get_device_cursor(window: *mut GdkWindow,
                                        device: *mut GdkDevice) ->
     *mut GdkCursor;
    pub fn gdk_window_get_user_data(window: *mut GdkWindow,
                                    data: *mut gpointer);
    pub fn gdk_window_get_geometry(window: *mut GdkWindow, x: *mut gint,
                                   y: *mut gint, width: *mut gint,
                                   height: *mut gint);
    pub fn gdk_window_get_width(window: *mut GdkWindow) -> c_int;
    pub fn gdk_window_get_height(window: *mut GdkWindow) -> c_int;
    pub fn gdk_window_get_position(window: *mut GdkWindow, x: *mut gint,
                                   y: *mut gint);
    pub fn gdk_window_get_origin(window: *mut GdkWindow, x: *mut gint,
                                 y: *mut gint) -> gint;
    pub fn gdk_window_get_root_coords(window: *mut GdkWindow, x: gint,
                                      y: gint, root_x: *mut gint,
                                      root_y: *mut gint);
    pub fn gdk_window_coords_to_parent(window: *mut GdkWindow, x: gdouble,
                                       y: gdouble, parent_x: *mut gdouble,
                                       parent_y: *mut gdouble);
    pub fn gdk_window_coords_from_parent(window: *mut GdkWindow,
                                         parent_x: gdouble, parent_y: gdouble,
                                         x: *mut gdouble, y: *mut gdouble);
    pub fn gdk_window_get_root_origin(window: *mut GdkWindow, x: *mut gint,
                                      y: *mut gint);
    pub fn gdk_window_get_frame_extents(window: *mut GdkWindow,
                                        rect: *mut GdkRectangle);
    pub fn gdk_window_get_scale_factor(window: *mut GdkWindow) -> gint;
    pub fn gdk_window_get_pointer(window: *mut GdkWindow, x: *mut gint,
                                  y: *mut gint, mask: *mut GdkModifierType) ->
     *mut GdkWindow;
    pub fn gdk_window_get_device_position(window: *mut GdkWindow,
                                          device: *mut GdkDevice,
                                          x: *mut gint, y: *mut gint,
                                          mask: *mut GdkModifierType) ->
     *mut GdkWindow;
    pub fn gdk_window_get_device_position_double(window: *mut GdkWindow,
                                                 device: *mut GdkDevice,
                                                 x: *mut gdouble,
                                                 y: *mut gdouble,
                                                 mask: *mut GdkModifierType)
     -> *mut GdkWindow;
    pub fn gdk_window_get_parent(window: *mut GdkWindow) -> *mut GdkWindow;
    pub fn gdk_window_get_toplevel(window: *mut GdkWindow) -> *mut GdkWindow;
    pub fn gdk_window_get_effective_parent(window: *mut GdkWindow) ->
     *mut GdkWindow;
    pub fn gdk_window_get_effective_toplevel(window: *mut GdkWindow) ->
     *mut GdkWindow;
    pub fn gdk_window_get_children(window: *mut GdkWindow) -> *mut GList;
    pub fn gdk_window_peek_children(window: *mut GdkWindow) -> *mut GList;
    pub fn gdk_window_get_children_with_user_data(window: *mut GdkWindow,
                                                  user_data: gpointer) ->
     *mut GList;
    pub fn gdk_window_get_events(window: *mut GdkWindow) -> GdkEventMask;
    pub fn gdk_window_set_events(window: *mut GdkWindow,
                                 event_mask: GdkEventMask);
    pub fn gdk_window_set_device_events(window: *mut GdkWindow,
                                        device: *mut GdkDevice,
                                        event_mask: GdkEventMask);
    pub fn gdk_window_get_device_events(window: *mut GdkWindow,
                                        device: *mut GdkDevice) ->
     GdkEventMask;
    pub fn gdk_window_set_source_events(window: *mut GdkWindow,
                                        source: GdkInputSource,
                                        event_mask: GdkEventMask);
    pub fn gdk_window_get_source_events(window: *mut GdkWindow,
                                        source: GdkInputSource) ->
     GdkEventMask;
    pub fn gdk_window_set_icon_list(window: *mut GdkWindow,
                                    pixbufs: *mut GList);
    pub fn gdk_window_set_icon_name(window: *mut GdkWindow, name: *gchar);
    pub fn gdk_window_set_group(window: *mut GdkWindow,
                                leader: *mut GdkWindow);
    pub fn gdk_window_get_group(window: *mut GdkWindow) -> *mut GdkWindow;
    pub fn gdk_window_set_decorations(window: *mut GdkWindow,
                                      decorations: GdkWMDecoration);
    pub fn gdk_window_get_decorations(window: *mut GdkWindow,
                                      decorations: *mut GdkWMDecoration) ->
     gboolean;
    pub fn gdk_window_set_functions(window: *mut GdkWindow,
                                    functions: GdkWMFunction);
    pub fn gdk_window_create_similar_surface(window: *mut GdkWindow,
                                             content: cairo_content_t,
                                             width: c_int, height: c_int) ->
     *mut cairo_surface_t;
    pub fn gdk_window_create_similar_image_surface(window: *mut GdkWindow,
                                                   format: cairo_format_t,
                                                   width: c_int,
                                                   height: c_int,
                                                   scale: c_int) ->
     *mut cairo_surface_t;
    pub fn gdk_window_beep(window: *mut GdkWindow);
    pub fn gdk_window_iconify(window: *mut GdkWindow);
    pub fn gdk_window_deiconify(window: *mut GdkWindow);
    pub fn gdk_window_stick(window: *mut GdkWindow);
    pub fn gdk_window_unstick(window: *mut GdkWindow);
    pub fn gdk_window_maximize(window: *mut GdkWindow);
    pub fn gdk_window_unmaximize(window: *mut GdkWindow);
    pub fn gdk_window_fullscreen(window: *mut GdkWindow);
    pub fn gdk_window_set_fullscreen_mode(window: *mut GdkWindow,
                                          mode: GdkFullscreenMode);
    pub fn gdk_window_get_fullscreen_mode(window: *mut GdkWindow) ->
     GdkFullscreenMode;
    pub fn gdk_window_unfullscreen(window: *mut GdkWindow);
    pub fn gdk_window_set_keep_above(window: *mut GdkWindow,
                                     setting: gboolean);
    pub fn gdk_window_set_keep_below(window: *mut GdkWindow,
                                     setting: gboolean);
    pub fn gdk_window_set_opacity(window: *mut GdkWindow, opacity: gdouble);
    pub fn gdk_window_register_dnd(window: *mut GdkWindow);
    pub fn gdk_window_get_drag_protocol(window: *mut GdkWindow,
                                        target: *mut *mut GdkWindow) ->
     GdkDragProtocol;
    pub fn gdk_window_begin_resize_drag(window: *mut GdkWindow,
                                        edge: GdkWindowEdge, button: gint,
                                        root_x: gint, root_y: gint,
                                        timestamp: guint32);
    pub fn gdk_window_begin_resize_drag_for_device(window: *mut GdkWindow,
                                                   edge: GdkWindowEdge,
                                                   device: *mut GdkDevice,
                                                   button: gint, root_x: gint,
                                                   root_y: gint,
                                                   timestamp: guint32);
    pub fn gdk_window_begin_move_drag(window: *mut GdkWindow, button: gint,
                                      root_x: gint, root_y: gint,
                                      timestamp: guint32);
    pub fn gdk_window_begin_move_drag_for_device(window: *mut GdkWindow,
                                                 device: *mut GdkDevice,
                                                 button: gint, root_x: gint,
                                                 root_y: gint,
                                                 timestamp: guint32);
    pub fn gdk_window_invalidate_rect(window: *mut GdkWindow,
                                      rect: *GdkRectangle,
                                      invalidate_children: gboolean);
    pub fn gdk_window_invalidate_region(window: *mut GdkWindow,
                                        region: *cairo_region_t,
                                        invalidate_children: gboolean);
    pub fn gdk_window_invalidate_maybe_recurse(window: *mut GdkWindow,
                                               region: *cairo_region_t,
                                               child_func: GdkWindowChildFunc,
                                               user_data: gpointer);
    pub fn gdk_window_get_update_area(window: *mut GdkWindow) ->
     *mut cairo_region_t;
    pub fn gdk_window_freeze_updates(window: *mut GdkWindow);
    pub fn gdk_window_thaw_updates(window: *mut GdkWindow);
    pub fn gdk_window_freeze_toplevel_updates_libgtk_only(window:
                                                              *mut GdkWindow);
    pub fn gdk_window_thaw_toplevel_updates_libgtk_only(window:
                                                            *mut GdkWindow);
    pub fn gdk_window_process_all_updates();
    pub fn gdk_window_process_updates(window: *mut GdkWindow,
                                      update_children: gboolean);
    pub fn gdk_window_set_debug_updates(setting: gboolean);
    pub fn gdk_window_constrain_size(geometry: *mut GdkGeometry, flags: guint,
                                     width: gint, height: gint,
                                     new_width: *mut gint,
                                     new_height: *mut gint);
    pub fn gdk_window_enable_synchronized_configure(window: *mut GdkWindow);
    pub fn gdk_window_configure_finished(window: *mut GdkWindow);
    pub fn gdk_get_default_root_window() -> *mut GdkWindow;
    pub fn gdk_offscreen_window_get_surface(window: *mut GdkWindow) ->
     *mut cairo_surface_t;
    pub fn gdk_offscreen_window_set_embedder(window: *mut GdkWindow,
                                             embedder: *mut GdkWindow);
    pub fn gdk_offscreen_window_get_embedder(window: *mut GdkWindow) ->
     *mut GdkWindow;
    pub fn gdk_window_geometry_changed(window: *mut GdkWindow);
    pub fn gdk_window_set_support_multidevice(window: *mut GdkWindow,
                                              support_multidevice: gboolean);
    pub fn gdk_window_get_support_multidevice(window: *mut GdkWindow) ->
     gboolean;
    pub fn gdk_window_get_frame_clock(window: *mut GdkWindow) ->
     *mut GdkFrameClock;
    pub fn gdk_window_set_opaque_region(window: *mut GdkWindow,
                                        region: *mut cairo_region_t);
    pub fn gdk_test_render_sync(window: *mut GdkWindow);
    pub fn gdk_test_simulate_key(window: *mut GdkWindow, x: gint, y: gint,
                                 keyval: guint, modifiers: GdkModifierType,
                                 key_pressrelease: GdkEventType) -> gboolean;
    pub fn gdk_test_simulate_button(window: *mut GdkWindow, x: gint, y: gint,
                                    button: guint, modifiers: GdkModifierType,
                                    button_pressrelease: GdkEventType) ->
     gboolean;
    pub fn gdk_threads_init();
    pub fn gdk_threads_enter();
    pub fn gdk_threads_leave();
    pub fn gdk_threads_set_lock_functions(enter_fn: GCallback,
                                          leave_fn: GCallback);
    pub fn gdk_threads_add_idle_full(priority: gint, function: GSourceFunc,
                                     data: gpointer, notify: GDestroyNotify)
     -> guint;
    pub fn gdk_threads_add_idle(function: GSourceFunc, data: gpointer) ->
     guint;
    pub fn gdk_threads_add_timeout_full(priority: gint, interval: guint,
                                        function: GSourceFunc, data: gpointer,
                                        notify: GDestroyNotify) -> guint;
    pub fn gdk_threads_add_timeout(interval: guint, function: GSourceFunc,
                                   data: gpointer) -> guint;
    pub fn gdk_threads_add_timeout_seconds_full(priority: gint,
                                                interval: guint,
                                                function: GSourceFunc,
                                                data: gpointer,
                                                notify: GDestroyNotify) ->
     guint;
    pub fn gdk_threads_add_timeout_seconds(interval: guint,
                                           function: GSourceFunc,
                                           data: gpointer) -> guint;
    pub fn gdk_visual_get_type() -> GType;
    pub fn gdk_visual_get_best_depth() -> gint;
    pub fn gdk_visual_get_best_type() -> GdkVisualType;
    pub fn gdk_visual_get_system() -> *mut GdkVisual;
    pub fn gdk_visual_get_best() -> *mut GdkVisual;
    pub fn gdk_visual_get_best_with_depth(depth: gint) -> *mut GdkVisual;
    pub fn gdk_visual_get_best_with_type(visual_type: GdkVisualType) ->
     *mut GdkVisual;
    pub fn gdk_visual_get_best_with_both(depth: gint,
                                         visual_type: GdkVisualType) ->
     *mut GdkVisual;
    pub fn gdk_query_depths(depths: *mut *mut gint, count: *mut gint);
    pub fn gdk_query_visual_types(visual_types: *mut *mut GdkVisualType,
                                  count: *mut gint);
    pub fn gdk_list_visuals() -> *mut GList;
    pub fn gdk_visual_get_screen(visual: *mut GdkVisual) -> *mut GdkScreen;
    pub fn gdk_visual_get_visual_type(visual: *mut GdkVisual) ->
     GdkVisualType;
    pub fn gdk_visual_get_depth(visual: *mut GdkVisual) -> gint;
    pub fn gdk_visual_get_byte_order(visual: *mut GdkVisual) -> GdkByteOrder;
    pub fn gdk_visual_get_colormap_size(visual: *mut GdkVisual) -> gint;
    pub fn gdk_visual_get_bits_per_rgb(visual: *mut GdkVisual) -> gint;
    pub fn gdk_visual_get_red_pixel_details(visual: *mut GdkVisual,
                                            mask: *mut guint32,
                                            shift: *mut gint,
                                            precision: *mut gint);
    pub fn gdk_visual_get_green_pixel_details(visual: *mut GdkVisual,
                                              mask: *mut guint32,
                                              shift: *mut gint,
                                              precision: *mut gint);
    pub fn gdk_visual_get_blue_pixel_details(visual: *mut GdkVisual,
                                             mask: *mut guint32,
                                             shift: *mut gint,
                                             precision: *mut gint);
    pub fn gtk_accel_group_get_type() -> GType;
    pub fn gtk_accel_group_new() -> *mut GtkAccelGroup;
    pub fn gtk_accel_group_get_is_locked(accel_group: *mut GtkAccelGroup) ->
     gboolean;
    pub fn gtk_accel_group_get_modifier_mask(accel_group: *mut GtkAccelGroup)
     -> GdkModifierType;
    pub fn gtk_accel_group_lock(accel_group: *mut GtkAccelGroup);
    pub fn gtk_accel_group_unlock(accel_group: *mut GtkAccelGroup);
    pub fn gtk_accel_group_connect(accel_group: *mut GtkAccelGroup,
                                   accel_key: guint,
                                   accel_mods: GdkModifierType,
                                   accel_flags: GtkAccelFlags,
                                   closure: *mut GClosure);
    pub fn gtk_accel_group_connect_by_path(accel_group: *mut GtkAccelGroup,
                                           accel_path: *gchar,
                                           closure: *mut GClosure);
    pub fn gtk_accel_group_disconnect(accel_group: *mut GtkAccelGroup,
                                      closure: *mut GClosure) -> gboolean;
    pub fn gtk_accel_group_disconnect_key(accel_group: *mut GtkAccelGroup,
                                          accel_key: guint,
                                          accel_mods: GdkModifierType) ->
     gboolean;
    pub fn gtk_accel_group_activate(accel_group: *mut GtkAccelGroup,
                                    accel_quark: GQuark,
                                    acceleratable: *mut GObject,
                                    accel_key: guint,
                                    accel_mods: GdkModifierType) -> gboolean;
    pub fn _gtk_accel_group_attach(accel_group: *mut GtkAccelGroup,
                                   object: *mut GObject);
    pub fn _gtk_accel_group_detach(accel_group: *mut GtkAccelGroup,
                                   object: *mut GObject);
    pub fn gtk_accel_groups_activate(object: *mut GObject, accel_key: guint,
                                     accel_mods: GdkModifierType) -> gboolean;
    pub fn gtk_accel_groups_from_object(object: *mut GObject) -> *mut GSList;
    pub fn gtk_accel_group_find(accel_group: *mut GtkAccelGroup,
                                find_func: GtkAccelGroupFindFunc,
                                data: gpointer) -> *mut GtkAccelKey;
    pub fn gtk_accel_group_from_accel_closure(closure: *mut GClosure) ->
     *mut GtkAccelGroup;
    pub fn gtk_accelerator_valid(keyval: guint, modifiers: GdkModifierType) ->
     gboolean;
    pub fn gtk_accelerator_parse(accelerator: *gchar,
                                 accelerator_key: *mut guint,
                                 accelerator_mods: *mut GdkModifierType);
    pub fn gtk_accelerator_parse_with_keycode(accelerator: *gchar,
                                              accelerator_key: *mut guint,
                                              accelerator_codes:
                                                  *mut *mut guint,
                                              accelerator_mods:
                                                  *mut GdkModifierType);
    pub fn gtk_accelerator_name(accelerator_key: guint,
                                accelerator_mods: GdkModifierType) ->
     *mut gchar;
    pub fn gtk_accelerator_name_with_keycode(display: *mut GdkDisplay,
                                             accelerator_key: guint,
                                             keycode: guint,
                                             accelerator_mods:
                                                 GdkModifierType) ->
     *mut gchar;
    pub fn gtk_accelerator_get_label(accelerator_key: guint,
                                     accelerator_mods: GdkModifierType) ->
     *mut gchar;
    pub fn gtk_accelerator_get_label_with_keycode(display: *mut GdkDisplay,
                                                  accelerator_key: guint,
                                                  keycode: guint,
                                                  accelerator_mods:
                                                      GdkModifierType) ->
     *mut gchar;
    pub fn gtk_accelerator_set_default_mod_mask(default_mod_mask:
                                                    GdkModifierType);
    pub fn gtk_accelerator_get_default_mod_mask() -> GdkModifierType;
    pub fn gtk_accel_group_query(accel_group: *mut GtkAccelGroup,
                                 accel_key: guint,
                                 accel_mods: GdkModifierType,
                                 n_entries: *mut guint) ->
     *mut GtkAccelGroupEntry;
    pub fn _gtk_accel_group_reconnect(accel_group: *mut GtkAccelGroup,
                                      accel_path_quark: GQuark);
    pub fn _gtk_accel_group_get_accelerables(accel_group: *mut GtkAccelGroup)
     -> *mut GSList;
    pub fn gtk_border_get_type() -> GType;
    pub fn gtk_border_new() -> *mut GtkBorder;
    pub fn gtk_border_copy(border_: *GtkBorder) -> *mut GtkBorder;
    pub fn gtk_border_free(border_: *mut GtkBorder);
    pub fn atk_state_type_register(name: *gchar) -> AtkStateType;
    pub fn atk_state_type_get_name(_type: AtkStateType) -> *gchar;
    pub fn atk_state_type_for_name(name: *gchar) -> AtkStateType;
    pub fn atk_object_get_type() -> GType;
    pub fn atk_implementor_get_type() -> GType;
    pub fn atk_implementor_ref_accessible(implementor: *mut AtkImplementor) ->
     *mut AtkObject;
    pub fn atk_object_get_name(accessible: *mut AtkObject) -> *gchar;
    pub fn atk_object_get_description(accessible: *mut AtkObject) -> *gchar;
    pub fn atk_object_get_parent(accessible: *mut AtkObject) ->
     *mut AtkObject;
    pub fn atk_object_get_n_accessible_children(accessible: *mut AtkObject) ->
     gint;
    pub fn atk_object_ref_accessible_child(accessible: *mut AtkObject,
                                           i: gint) -> *mut AtkObject;
    pub fn atk_object_ref_relation_set(accessible: *mut AtkObject) ->
     *mut AtkRelationSet;
    pub fn atk_object_get_role(accessible: *mut AtkObject) -> AtkRole;
    pub fn atk_object_get_layer(accessible: *mut AtkObject) -> AtkLayer;
    pub fn atk_object_get_mdi_zorder(accessible: *mut AtkObject) -> gint;
    pub fn atk_object_get_attributes(accessible: *mut AtkObject) ->
     *mut AtkAttributeSet;
    pub fn atk_object_ref_state_set(accessible: *mut AtkObject) ->
     *mut AtkStateSet;
    pub fn atk_object_get_index_in_parent(accessible: *mut AtkObject) -> gint;
    pub fn atk_object_set_name(accessible: *mut AtkObject, name: *gchar);
    pub fn atk_object_set_description(accessible: *mut AtkObject,
                                      description: *gchar);
    pub fn atk_object_set_parent(accessible: *mut AtkObject,
                                 parent: *mut AtkObject);
    pub fn atk_object_set_role(accessible: *mut AtkObject, role: AtkRole);
    pub fn atk_object_connect_property_change_handler(accessible:
                                                          *mut AtkObject,
                                                      handler:
                                                          *mut AtkPropertyChangeHandler)
     -> guint;
    pub fn atk_object_remove_property_change_handler(accessible:
                                                         *mut AtkObject,
                                                     handler_id: guint);
    pub fn atk_object_notify_state_change(accessible: *mut AtkObject,
                                          state: AtkState, value: gboolean);
    pub fn atk_object_initialize(accessible: *mut AtkObject, data: gpointer);
    pub fn atk_role_get_name(role: AtkRole) -> *gchar;
    pub fn atk_role_for_name(name: *gchar) -> AtkRole;
    pub fn atk_object_add_relationship(object: *mut AtkObject,
                                       relationship: AtkRelationType,
                                       target: *mut AtkObject) -> gboolean;
    pub fn atk_object_remove_relationship(object: *mut AtkObject,
                                          relationship: AtkRelationType,
                                          target: *mut AtkObject) -> gboolean;
    pub fn atk_role_get_localized_name(role: AtkRole) -> *gchar;
    pub fn atk_role_register(name: *gchar) -> AtkRole;
    pub fn atk_object_get_object_locale(accessible: *mut AtkObject) -> *gchar;
    pub fn atk_action_get_type() -> GType;
    pub fn atk_action_do_action(action: *mut AtkAction, i: gint) -> gboolean;
    pub fn atk_action_get_n_actions(action: *mut AtkAction) -> gint;
    pub fn atk_action_get_description(action: *mut AtkAction, i: gint) ->
     *gchar;
    pub fn atk_action_get_name(action: *mut AtkAction, i: gint) -> *gchar;
    pub fn atk_action_get_keybinding(action: *mut AtkAction, i: gint) ->
     *gchar;
    pub fn atk_action_set_description(action: *mut AtkAction, i: gint,
                                      desc: *gchar) -> gboolean;
    pub fn atk_action_get_localized_name(action: *mut AtkAction, i: gint) ->
     *gchar;
    pub fn atk_util_get_type() -> GType;
    pub fn atk_add_focus_tracker(focus_tracker: AtkEventListener) -> guint;
    pub fn atk_remove_focus_tracker(tracker_id: guint);
    pub fn atk_focus_tracker_init(init: AtkEventListenerInit);
    pub fn atk_focus_tracker_notify(object: *mut AtkObject);
    pub fn atk_add_global_event_listener(listener: GSignalEmissionHook,
                                         event_type: *gchar) -> guint;
    pub fn atk_remove_global_event_listener(listener_id: guint);
    pub fn atk_add_key_event_listener(listener: AtkKeySnoopFunc,
                                      data: gpointer) -> guint;
    pub fn atk_remove_key_event_listener(listener_id: guint);
    pub fn atk_get_root() -> *mut AtkObject;
    pub fn atk_get_focus_object() -> *mut AtkObject;
    pub fn atk_get_toolkit_name() -> *gchar;
    pub fn atk_get_toolkit_version() -> *gchar;
    pub fn atk_get_version() -> *gchar;
    pub fn atk_rectangle_get_type() -> GType;
    pub fn atk_component_get_type() -> GType;
    pub fn atk_component_add_focus_handler(component: *mut AtkComponent,
                                           handler: AtkFocusHandler) -> guint;
    pub fn atk_component_contains(component: *mut AtkComponent, x: gint,
                                  y: gint, coord_type: AtkCoordType) ->
     gboolean;
    pub fn atk_component_ref_accessible_at_point(component: *mut AtkComponent,
                                                 x: gint, y: gint,
                                                 coord_type: AtkCoordType) ->
     *mut AtkObject;
    pub fn atk_component_get_extents(component: *mut AtkComponent,
                                     x: *mut gint, y: *mut gint,
                                     width: *mut gint, height: *mut gint,
                                     coord_type: AtkCoordType);
    pub fn atk_component_get_position(component: *mut AtkComponent,
                                      x: *mut gint, y: *mut gint,
                                      coord_type: AtkCoordType);
    pub fn atk_component_get_size(component: *mut AtkComponent,
                                  width: *mut gint, height: *mut gint);
    pub fn atk_component_get_layer(component: *mut AtkComponent) -> AtkLayer;
    pub fn atk_component_get_mdi_zorder(component: *mut AtkComponent) -> gint;
    pub fn atk_component_grab_focus(component: *mut AtkComponent) -> gboolean;
    pub fn atk_component_remove_focus_handler(component: *mut AtkComponent,
                                              handler_id: guint);
    pub fn atk_component_set_extents(component: *mut AtkComponent, x: gint,
                                     y: gint, width: gint, height: gint,
                                     coord_type: AtkCoordType) -> gboolean;
    pub fn atk_component_set_position(component: *mut AtkComponent, x: gint,
                                      y: gint, coord_type: AtkCoordType) ->
     gboolean;
    pub fn atk_component_set_size(component: *mut AtkComponent, width: gint,
                                  height: gint) -> gboolean;
    pub fn atk_component_get_alpha(component: *mut AtkComponent) -> gdouble;
    pub fn atk_document_get_type() -> GType;
    pub fn atk_document_get_document_type(document: *mut AtkDocument) ->
     *gchar;
    pub fn atk_document_get_document(document: *mut AtkDocument) -> gpointer;
    pub fn atk_document_get_locale(document: *mut AtkDocument) -> *gchar;
    pub fn atk_document_get_attributes(document: *mut AtkDocument) ->
     *mut AtkAttributeSet;
    pub fn atk_document_get_attribute_value(document: *mut AtkDocument,
                                            attribute_name: *gchar) -> *gchar;
    pub fn atk_document_set_attribute_value(document: *mut AtkDocument,
                                            attribute_name: *gchar,
                                            attribute_value: *gchar) ->
     gboolean;
    pub fn atk_text_attribute_register(name: *gchar) -> AtkTextAttribute;
    pub fn atk_text_range_get_type() -> GType;
    pub fn atk_text_get_type() -> GType;
    pub fn atk_text_get_text(text: *mut AtkText, start_offset: gint,
                             end_offset: gint) -> *mut gchar;
    pub fn atk_text_get_character_at_offset(text: *mut AtkText, offset: gint)
     -> gunichar;
    pub fn atk_text_get_text_after_offset(text: *mut AtkText, offset: gint,
                                          boundary_type: AtkTextBoundary,
                                          start_offset: *mut gint,
                                          end_offset: *mut gint) ->
     *mut gchar;
    pub fn atk_text_get_text_at_offset(text: *mut AtkText, offset: gint,
                                       boundary_type: AtkTextBoundary,
                                       start_offset: *mut gint,
                                       end_offset: *mut gint) -> *mut gchar;
    pub fn atk_text_get_text_before_offset(text: *mut AtkText, offset: gint,
                                           boundary_type: AtkTextBoundary,
                                           start_offset: *mut gint,
                                           end_offset: *mut gint) ->
     *mut gchar;
    pub fn atk_text_get_string_at_offset(text: *mut AtkText, offset: gint,
                                         granularity: AtkTextGranularity,
                                         start_offset: *mut gint,
                                         end_offset: *mut gint) -> *mut gchar;
    pub fn atk_text_get_caret_offset(text: *mut AtkText) -> gint;
    pub fn atk_text_get_character_extents(text: *mut AtkText, offset: gint,
                                          x: *mut gint, y: *mut gint,
                                          width: *mut gint, height: *mut gint,
                                          coords: AtkCoordType);
    pub fn atk_text_get_run_attributes(text: *mut AtkText, offset: gint,
                                       start_offset: *mut gint,
                                       end_offset: *mut gint) ->
     *mut AtkAttributeSet;
    pub fn atk_text_get_default_attributes(text: *mut AtkText) ->
     *mut AtkAttributeSet;
    pub fn atk_text_get_character_count(text: *mut AtkText) -> gint;
    pub fn atk_text_get_offset_at_point(text: *mut AtkText, x: gint, y: gint,
                                        coords: AtkCoordType) -> gint;
    pub fn atk_text_get_n_selections(text: *mut AtkText) -> gint;
    pub fn atk_text_get_selection(text: *mut AtkText, selection_num: gint,
                                  start_offset: *mut gint,
                                  end_offset: *mut gint) -> *mut gchar;
    pub fn atk_text_add_selection(text: *mut AtkText, start_offset: gint,
                                  end_offset: gint) -> gboolean;
    pub fn atk_text_remove_selection(text: *mut AtkText, selection_num: gint)
     -> gboolean;
    pub fn atk_text_set_selection(text: *mut AtkText, selection_num: gint,
                                  start_offset: gint, end_offset: gint) ->
     gboolean;
    pub fn atk_text_set_caret_offset(text: *mut AtkText, offset: gint) ->
     gboolean;
    pub fn atk_text_get_range_extents(text: *mut AtkText, start_offset: gint,
                                      end_offset: gint,
                                      coord_type: AtkCoordType,
                                      rect: *mut AtkTextRectangle);
    pub fn atk_text_get_bounded_ranges(text: *mut AtkText,
                                       rect: *mut AtkTextRectangle,
                                       coord_type: AtkCoordType,
                                       x_clip_type: AtkTextClipType,
                                       y_clip_type: AtkTextClipType) ->
     *mut *mut AtkTextRange;
    pub fn atk_text_free_ranges(ranges: *mut *mut AtkTextRange);
    pub fn atk_attribute_set_free(attrib_set: *mut AtkAttributeSet);
    pub fn atk_text_attribute_get_name(attr: AtkTextAttribute) -> *gchar;
    pub fn atk_text_attribute_for_name(name: *gchar) -> AtkTextAttribute;
    pub fn atk_text_attribute_get_value(attr: AtkTextAttribute, index_: gint)
     -> *gchar;
    pub fn atk_editable_text_get_type() -> GType;
    pub fn atk_editable_text_set_run_attributes(text: *mut AtkEditableText,
                                                attrib_set:
                                                    *mut AtkAttributeSet,
                                                start_offset: gint,
                                                end_offset: gint) -> gboolean;
    pub fn atk_editable_text_set_text_contents(text: *mut AtkEditableText,
                                               string: *gchar);
    pub fn atk_editable_text_insert_text(text: *mut AtkEditableText,
                                         string: *gchar, length: gint,
                                         position: *mut gint);
    pub fn atk_editable_text_copy_text(text: *mut AtkEditableText,
                                       start_pos: gint, end_pos: gint);
    pub fn atk_editable_text_cut_text(text: *mut AtkEditableText,
                                      start_pos: gint, end_pos: gint);
    pub fn atk_editable_text_delete_text(text: *mut AtkEditableText,
                                         start_pos: gint, end_pos: gint);
    pub fn atk_editable_text_paste_text(text: *mut AtkEditableText,
                                        position: gint);
    pub fn atk_gobject_accessible_get_type() -> GType;
    pub fn atk_gobject_accessible_for_object(obj: *mut GObject) ->
     *mut AtkObject;
    pub fn atk_gobject_accessible_get_object(obj: *mut AtkGObjectAccessible)
     -> *mut GObject;
    pub fn atk_hyperlink_get_type() -> GType;
    pub fn atk_hyperlink_get_uri(link_: *mut AtkHyperlink, i: gint) ->
     *mut gchar;
    pub fn atk_hyperlink_get_object(link_: *mut AtkHyperlink, i: gint) ->
     *mut AtkObject;
    pub fn atk_hyperlink_get_end_index(link_: *mut AtkHyperlink) -> gint;
    pub fn atk_hyperlink_get_start_index(link_: *mut AtkHyperlink) -> gint;
    pub fn atk_hyperlink_is_valid(link_: *mut AtkHyperlink) -> gboolean;
    pub fn atk_hyperlink_is_inline(link_: *mut AtkHyperlink) -> gboolean;
    pub fn atk_hyperlink_get_n_anchors(link_: *mut AtkHyperlink) -> gint;
    pub fn atk_hyperlink_is_selected_link(link_: *mut AtkHyperlink) ->
     gboolean;
    pub fn atk_hyperlink_impl_get_type() -> GType;
    pub fn atk_hyperlink_impl_get_hyperlink(_impl: *mut AtkHyperlinkImpl) ->
     *mut AtkHyperlink;
    pub fn atk_hypertext_get_type() -> GType;
    pub fn atk_hypertext_get_link(hypertext: *mut AtkHypertext,
                                  link_index: gint) -> *mut AtkHyperlink;
    pub fn atk_hypertext_get_n_links(hypertext: *mut AtkHypertext) -> gint;
    pub fn atk_hypertext_get_link_index(hypertext: *mut AtkHypertext,
                                        char_index: gint) -> gint;
    pub fn atk_image_get_type() -> GType;
    pub fn atk_image_get_image_description(image: *mut AtkImage) -> *gchar;
    pub fn atk_image_get_image_size(image: *mut AtkImage, width: *mut gint,
                                    height: *mut gint);
    pub fn atk_image_set_image_description(image: *mut AtkImage,
                                           description: *gchar) -> gboolean;
    pub fn atk_image_get_image_position(image: *mut AtkImage, x: *mut gint,
                                        y: *mut gint,
                                        coord_type: AtkCoordType);
    pub fn atk_image_get_image_locale(image: *mut AtkImage) -> *gchar;
    pub fn atk_no_op_object_get_type() -> GType;
    pub fn atk_no_op_object_new(obj: *mut GObject) -> *mut AtkObject;
    pub fn atk_object_factory_get_type() -> GType;
    pub fn atk_object_factory_create_accessible(factory:
                                                    *mut AtkObjectFactory,
                                                obj: *mut GObject) ->
     *mut AtkObject;
    pub fn atk_object_factory_invalidate(factory: *mut AtkObjectFactory);
    pub fn atk_object_factory_get_accessible_type(factory:
                                                      *mut AtkObjectFactory)
     -> GType;
    pub fn atk_no_op_object_factory_get_type() -> GType;
    pub fn atk_no_op_object_factory_new() -> *mut AtkObjectFactory;
    pub fn atk_plug_get_type() -> GType;
    pub fn atk_plug_new() -> *mut AtkObject;
    pub fn atk_plug_get_id(plug: *mut AtkPlug) -> *mut gchar;
    pub fn atk_registry_get_type() -> GType;
    pub fn atk_registry_set_factory_type(registry: *mut AtkRegistry,
                                         _type: GType, factory_type: GType);
    pub fn atk_registry_get_factory_type(registry: *mut AtkRegistry,
                                         _type: GType) -> GType;
    pub fn atk_registry_get_factory(registry: *mut AtkRegistry, _type: GType)
     -> *mut AtkObjectFactory;
    pub fn atk_get_default_registry() -> *mut AtkRegistry;
    pub fn atk_relation_get_type() -> GType;
    pub fn atk_relation_type_register(name: *gchar) -> AtkRelationType;
    pub fn atk_relation_type_get_name(_type: AtkRelationType) -> *gchar;
    pub fn atk_relation_type_for_name(name: *gchar) -> AtkRelationType;
    pub fn atk_relation_new(targets: *mut *mut AtkObject, n_targets: gint,
                            relationship: AtkRelationType) ->
     *mut AtkRelation;
    pub fn atk_relation_get_relation_type(relation: *mut AtkRelation) ->
     AtkRelationType;
    pub fn atk_relation_get_target(relation: *mut AtkRelation) ->
     *mut GPtrArray;
    pub fn atk_relation_add_target(relation: *mut AtkRelation,
                                   target: *mut AtkObject);
    pub fn atk_relation_remove_target(relation: *mut AtkRelation,
                                      target: *mut AtkObject) -> gboolean;
    pub fn atk_relation_set_get_type() -> GType;
    pub fn atk_relation_set_new() -> *mut AtkRelationSet;
    pub fn atk_relation_set_contains(set: *mut AtkRelationSet,
                                     relationship: AtkRelationType) ->
     gboolean;
    pub fn atk_relation_set_contains_target(set: *mut AtkRelationSet,
                                            relationship: AtkRelationType,
                                            target: *mut AtkObject) ->
     gboolean;
    pub fn atk_relation_set_remove(set: *mut AtkRelationSet,
                                   relation: *mut AtkRelation);
    pub fn atk_relation_set_add(set: *mut AtkRelationSet,
                                relation: *mut AtkRelation);
    pub fn atk_relation_set_get_n_relations(set: *mut AtkRelationSet) -> gint;
    pub fn atk_relation_set_get_relation(set: *mut AtkRelationSet, i: gint) ->
     *mut AtkRelation;
    pub fn atk_relation_set_get_relation_by_type(set: *mut AtkRelationSet,
                                                 relationship:
                                                     AtkRelationType) ->
     *mut AtkRelation;
    pub fn atk_relation_set_add_relation_by_type(set: *mut AtkRelationSet,
                                                 relationship:
                                                     AtkRelationType,
                                                 target: *mut AtkObject);
    pub fn atk_selection_get_type() -> GType;
    pub fn atk_selection_add_selection(selection: *mut AtkSelection, i: gint)
     -> gboolean;
    pub fn atk_selection_clear_selection(selection: *mut AtkSelection) ->
     gboolean;
    pub fn atk_selection_ref_selection(selection: *mut AtkSelection, i: gint)
     -> *mut AtkObject;
    pub fn atk_selection_get_selection_count(selection: *mut AtkSelection) ->
     gint;
    pub fn atk_selection_is_child_selected(selection: *mut AtkSelection,
                                           i: gint) -> gboolean;
    pub fn atk_selection_remove_selection(selection: *mut AtkSelection,
                                          i: gint) -> gboolean;
    pub fn atk_selection_select_all_selection(selection: *mut AtkSelection) ->
     gboolean;
    pub fn atk_socket_get_type() -> GType;
    pub fn atk_socket_new() -> *mut AtkObject;
    pub fn atk_socket_embed(obj: *mut AtkSocket, plug_id: *mut gchar);
    pub fn atk_socket_is_occupied(obj: *mut AtkSocket) -> gboolean;
    pub fn atk_state_set_get_type() -> GType;
    pub fn atk_state_set_new() -> *mut AtkStateSet;
    pub fn atk_state_set_is_empty(set: *mut AtkStateSet) -> gboolean;
    pub fn atk_state_set_add_state(set: *mut AtkStateSet, _type: AtkStateType)
     -> gboolean;
    pub fn atk_state_set_add_states(set: *mut AtkStateSet,
                                    types: *mut AtkStateType, n_types: gint);
    pub fn atk_state_set_clear_states(set: *mut AtkStateSet);
    pub fn atk_state_set_contains_state(set: *mut AtkStateSet,
                                        _type: AtkStateType) -> gboolean;
    pub fn atk_state_set_contains_states(set: *mut AtkStateSet,
                                         types: *mut AtkStateType,
                                         n_types: gint) -> gboolean;
    pub fn atk_state_set_remove_state(set: *mut AtkStateSet,
                                      _type: AtkStateType) -> gboolean;
    pub fn atk_state_set_and_sets(set: *mut AtkStateSet,
                                  compare_set: *mut AtkStateSet) ->
     *mut AtkStateSet;
    pub fn atk_state_set_or_sets(set: *mut AtkStateSet,
                                 compare_set: *mut AtkStateSet) ->
     *mut AtkStateSet;
    pub fn atk_state_set_xor_sets(set: *mut AtkStateSet,
                                  compare_set: *mut AtkStateSet) ->
     *mut AtkStateSet;
    pub fn atk_streamable_content_get_type() -> GType;
    pub fn atk_streamable_content_get_n_mime_types(streamable:
                                                       *mut AtkStreamableContent)
     -> gint;
    pub fn atk_streamable_content_get_mime_type(streamable:
                                                    *mut AtkStreamableContent,
                                                i: gint) -> *gchar;
    pub fn atk_streamable_content_get_stream(streamable:
                                                 *mut AtkStreamableContent,
                                             mime_type: *gchar) ->
     *mut GIOChannel;
    pub fn atk_streamable_content_get_uri(streamable:
                                              *mut AtkStreamableContent,
                                          mime_type: *gchar) -> *gchar;
    pub fn atk_table_get_type() -> GType;
    pub fn atk_table_ref_at(table: *mut AtkTable, row: gint, column: gint) ->
     *mut AtkObject;
    pub fn atk_table_get_index_at(table: *mut AtkTable, row: gint,
                                  column: gint) -> gint;
    pub fn atk_table_get_column_at_index(table: *mut AtkTable, index_: gint)
     -> gint;
    pub fn atk_table_get_row_at_index(table: *mut AtkTable, index_: gint) ->
     gint;
    pub fn atk_table_get_n_columns(table: *mut AtkTable) -> gint;
    pub fn atk_table_get_n_rows(table: *mut AtkTable) -> gint;
    pub fn atk_table_get_column_extent_at(table: *mut AtkTable, row: gint,
                                          column: gint) -> gint;
    pub fn atk_table_get_row_extent_at(table: *mut AtkTable, row: gint,
                                       column: gint) -> gint;
    pub fn atk_table_get_caption(table: *mut AtkTable) -> *mut AtkObject;
    pub fn atk_table_get_column_description(table: *mut AtkTable,
                                            column: gint) -> *gchar;
    pub fn atk_table_get_column_header(table: *mut AtkTable, column: gint) ->
     *mut AtkObject;
    pub fn atk_table_get_row_description(table: *mut AtkTable, row: gint) ->
     *gchar;
    pub fn atk_table_get_row_header(table: *mut AtkTable, row: gint) ->
     *mut AtkObject;
    pub fn atk_table_get_summary(table: *mut AtkTable) -> *mut AtkObject;
    pub fn atk_table_set_caption(table: *mut AtkTable,
                                 caption: *mut AtkObject);
    pub fn atk_table_set_column_description(table: *mut AtkTable,
                                            column: gint,
                                            description: *gchar);
    pub fn atk_table_set_column_header(table: *mut AtkTable, column: gint,
                                       header: *mut AtkObject);
    pub fn atk_table_set_row_description(table: *mut AtkTable, row: gint,
                                         description: *gchar);
    pub fn atk_table_set_row_header(table: *mut AtkTable, row: gint,
                                    header: *mut AtkObject);
    pub fn atk_table_set_summary(table: *mut AtkTable,
                                 accessible: *mut AtkObject);
    pub fn atk_table_get_selected_columns(table: *mut AtkTable,
                                          selected: *mut *mut gint) -> gint;
    pub fn atk_table_get_selected_rows(table: *mut AtkTable,
                                       selected: *mut *mut gint) -> gint;
    pub fn atk_table_is_column_selected(table: *mut AtkTable, column: gint) ->
     gboolean;
    pub fn atk_table_is_row_selected(table: *mut AtkTable, row: gint) ->
     gboolean;
    pub fn atk_table_is_selected(table: *mut AtkTable, row: gint,
                                 column: gint) -> gboolean;
    pub fn atk_table_add_row_selection(table: *mut AtkTable, row: gint) ->
     gboolean;
    pub fn atk_table_remove_row_selection(table: *mut AtkTable, row: gint) ->
     gboolean;
    pub fn atk_table_add_column_selection(table: *mut AtkTable, column: gint)
     -> gboolean;
    pub fn atk_table_remove_column_selection(table: *mut AtkTable,
                                             column: gint) -> gboolean;
    pub fn atk_misc_get_type() -> GType;
    pub fn atk_misc_threads_enter(misc: *mut AtkMisc);
    pub fn atk_misc_threads_leave(misc: *mut AtkMisc);
    pub fn atk_misc_get_instance() -> *AtkMisc;
    pub fn atk_value_get_type() -> GType;
    pub fn atk_value_get_current_value(obj: *mut AtkValue,
                                       value: *mut GValue);
    pub fn atk_value_get_maximum_value(obj: *mut AtkValue,
                                       value: *mut GValue);
    pub fn atk_value_get_minimum_value(obj: *mut AtkValue,
                                       value: *mut GValue);
    pub fn atk_value_set_current_value(obj: *mut AtkValue, value: *GValue) ->
     gboolean;
    pub fn atk_value_get_minimum_increment(obj: *mut AtkValue,
                                           value: *mut GValue);
    pub fn atk_get_major_version() -> guint;
    pub fn atk_get_minor_version() -> guint;
    pub fn atk_get_micro_version() -> guint;
    pub fn atk_get_binary_age() -> guint;
    pub fn atk_get_interface_age() -> guint;
    pub fn atk_window_get_type() -> GType;
    pub fn gtk_widget_get_type() -> GType;
    pub fn gtk_widget_new(_type: GType, first_property_name: *gchar, ...) ->
     *mut GtkWidget;
    pub fn gtk_widget_destroy(widget: *mut GtkWidget);
    pub fn gtk_widget_destroyed(widget: *mut GtkWidget,
                                widget_pointer: *mut *mut GtkWidget);
    pub fn gtk_widget_unparent(widget: *mut GtkWidget);
    pub fn gtk_widget_show(widget: *mut GtkWidget);
    pub fn gtk_widget_hide(widget: *mut GtkWidget);
    pub fn gtk_widget_show_now(widget: *mut GtkWidget);
    pub fn gtk_widget_show_all(widget: *mut GtkWidget);
    pub fn gtk_widget_set_no_show_all(widget: *mut GtkWidget,
                                      no_show_all: gboolean);
    pub fn gtk_widget_get_no_show_all(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_map(widget: *mut GtkWidget);
    pub fn gtk_widget_unmap(widget: *mut GtkWidget);
    pub fn gtk_widget_realize(widget: *mut GtkWidget);
    pub fn gtk_widget_unrealize(widget: *mut GtkWidget);
    pub fn gtk_widget_draw(widget: *mut GtkWidget, cr: *mut cairo_t);
    pub fn gtk_widget_queue_draw(widget: *mut GtkWidget);
    pub fn gtk_widget_queue_draw_area(widget: *mut GtkWidget, x: gint,
                                      y: gint, width: gint, height: gint);
    pub fn gtk_widget_queue_draw_region(widget: *mut GtkWidget,
                                        region: *cairo_region_t);
    pub fn gtk_widget_queue_resize(widget: *mut GtkWidget);
    pub fn gtk_widget_queue_resize_no_redraw(widget: *mut GtkWidget);
    pub fn gtk_widget_get_frame_clock(widget: *mut GtkWidget) ->
     *mut GdkFrameClock;
    pub fn gtk_widget_size_request(widget: *mut GtkWidget,
                                   requisition: *mut GtkRequisition);
    pub fn gtk_widget_size_allocate(widget: *mut GtkWidget,
                                    allocation: *mut GtkAllocation);
    pub fn gtk_widget_size_allocate_with_baseline(widget: *mut GtkWidget,
                                                  allocation:
                                                      *mut GtkAllocation,
                                                  baseline: gint);
    pub fn gtk_widget_get_request_mode(widget: *mut GtkWidget) ->
     GtkSizeRequestMode;
    pub fn gtk_widget_get_preferred_width(widget: *mut GtkWidget,
                                          minimum_width: *mut gint,
                                          natural_width: *mut gint);
    pub fn gtk_widget_get_preferred_height_for_width(widget: *mut GtkWidget,
                                                     width: gint,
                                                     minimum_height:
                                                         *mut gint,
                                                     natural_height:
                                                         *mut gint);
    pub fn gtk_widget_get_preferred_height(widget: *mut GtkWidget,
                                           minimum_height: *mut gint,
                                           natural_height: *mut gint);
    pub fn gtk_widget_get_preferred_width_for_height(widget: *mut GtkWidget,
                                                     height: gint,
                                                     minimum_width: *mut gint,
                                                     natural_width:
                                                         *mut gint);
    pub fn gtk_widget_get_preferred_height_and_baseline_for_width(widget:
                                                                      *mut GtkWidget,
                                                                  width: gint,
                                                                  minimum_height:
                                                                      *mut gint,
                                                                  natural_height:
                                                                      *mut gint,
                                                                  minimum_baseline:
                                                                      *mut gint,
                                                                  natural_baseline:
                                                                      *mut gint);
    pub fn gtk_widget_get_preferred_size(widget: *mut GtkWidget,
                                         minimum_size: *mut GtkRequisition,
                                         natural_size: *mut GtkRequisition);
    pub fn gtk_widget_get_child_requisition(widget: *mut GtkWidget,
                                            requisition: *mut GtkRequisition);
    pub fn gtk_widget_add_accelerator(widget: *mut GtkWidget,
                                      accel_signal: *gchar,
                                      accel_group: *mut GtkAccelGroup,
                                      accel_key: guint,
                                      accel_mods: GdkModifierType,
                                      accel_flags: GtkAccelFlags);
    pub fn gtk_widget_remove_accelerator(widget: *mut GtkWidget,
                                         accel_group: *mut GtkAccelGroup,
                                         accel_key: guint,
                                         accel_mods: GdkModifierType) ->
     gboolean;
    pub fn gtk_widget_set_accel_path(widget: *mut GtkWidget,
                                     accel_path: *gchar,
                                     accel_group: *mut GtkAccelGroup);
    pub fn gtk_widget_list_accel_closures(widget: *mut GtkWidget) ->
     *mut GList;
    pub fn gtk_widget_can_activate_accel(widget: *mut GtkWidget,
                                         signal_id: guint) -> gboolean;
    pub fn gtk_widget_mnemonic_activate(widget: *mut GtkWidget,
                                        group_cycling: gboolean) -> gboolean;
    pub fn gtk_widget_event(widget: *mut GtkWidget, event: *mut GdkEvent) ->
     gboolean;
    pub fn gtk_widget_send_expose(widget: *mut GtkWidget,
                                  event: *mut GdkEvent) -> gint;
    pub fn gtk_widget_send_focus_change(widget: *mut GtkWidget,
                                        event: *mut GdkEvent) -> gboolean;
    pub fn gtk_widget_activate(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_reparent(widget: *mut GtkWidget,
                               new_parent: *mut GtkWidget);
    pub fn gtk_widget_intersect(widget: *mut GtkWidget, area: *GdkRectangle,
                                intersection: *mut GdkRectangle) -> gboolean;
    pub fn gtk_widget_region_intersect(widget: *mut GtkWidget,
                                       region: *cairo_region_t) ->
     *mut cairo_region_t;
    pub fn gtk_widget_freeze_child_notify(widget: *mut GtkWidget);
    pub fn gtk_widget_child_notify(widget: *mut GtkWidget,
                                   child_property: *gchar);
    pub fn gtk_widget_thaw_child_notify(widget: *mut GtkWidget);
    pub fn gtk_widget_set_can_focus(widget: *mut GtkWidget,
                                    can_focus: gboolean);
    pub fn gtk_widget_get_can_focus(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_has_focus(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_is_focus(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_has_visible_focus(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_grab_focus(widget: *mut GtkWidget);
    pub fn gtk_widget_set_can_default(widget: *mut GtkWidget,
                                      can_default: gboolean);
    pub fn gtk_widget_get_can_default(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_has_default(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_grab_default(widget: *mut GtkWidget);
    pub fn gtk_widget_set_receives_default(widget: *mut GtkWidget,
                                           receives_default: gboolean);
    pub fn gtk_widget_get_receives_default(widget: *mut GtkWidget) ->
     gboolean;
    pub fn gtk_widget_has_grab(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_device_is_shadowed(widget: *mut GtkWidget,
                                         device: *mut GdkDevice) -> gboolean;
    pub fn gtk_widget_set_name(widget: *mut GtkWidget, name: *gchar);
    pub fn gtk_widget_get_name(widget: *mut GtkWidget) -> *gchar;
    pub fn gtk_widget_set_state(widget: *mut GtkWidget, state: GtkStateType);
    pub fn gtk_widget_get_state(widget: *mut GtkWidget) -> GtkStateType;
    pub fn gtk_widget_set_state_flags(widget: *mut GtkWidget,
                                      flags: GtkStateFlags, clear: gboolean);
    pub fn gtk_widget_unset_state_flags(widget: *mut GtkWidget,
                                        flags: GtkStateFlags);
    pub fn gtk_widget_get_state_flags(widget: *mut GtkWidget) ->
     GtkStateFlags;
    pub fn gtk_widget_set_sensitive(widget: *mut GtkWidget,
                                    sensitive: gboolean);
    pub fn gtk_widget_get_sensitive(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_is_sensitive(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_set_visible(widget: *mut GtkWidget, visible: gboolean);
    pub fn gtk_widget_get_visible(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_is_visible(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_set_has_window(widget: *mut GtkWidget,
                                     has_window: gboolean);
    pub fn gtk_widget_get_has_window(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_is_toplevel(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_is_drawable(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_set_realized(widget: *mut GtkWidget,
                                   realized: gboolean);
    pub fn gtk_widget_get_realized(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_set_mapped(widget: *mut GtkWidget, mapped: gboolean);
    pub fn gtk_widget_get_mapped(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_set_app_paintable(widget: *mut GtkWidget,
                                        app_paintable: gboolean);
    pub fn gtk_widget_get_app_paintable(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_set_double_buffered(widget: *mut GtkWidget,
                                          double_buffered: gboolean);
    pub fn gtk_widget_get_double_buffered(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_set_redraw_on_allocate(widget: *mut GtkWidget,
                                             redraw_on_allocate: gboolean);
    pub fn gtk_widget_set_parent(widget: *mut GtkWidget,
                                 parent: *mut GtkWidget);
    pub fn gtk_widget_get_parent(widget: *mut GtkWidget) -> *mut GtkWidget;
    pub fn gtk_widget_set_parent_window(widget: *mut GtkWidget,
                                        parent_window: *mut GdkWindow);
    pub fn gtk_widget_get_parent_window(widget: *mut GtkWidget) ->
     *mut GdkWindow;
    pub fn gtk_widget_set_child_visible(widget: *mut GtkWidget,
                                        is_visible: gboolean);
    pub fn gtk_widget_get_child_visible(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_set_window(widget: *mut GtkWidget,
                                 window: *mut GdkWindow);
    pub fn gtk_widget_get_window(widget: *mut GtkWidget) -> *mut GdkWindow;
    pub fn gtk_widget_register_window(widget: *mut GtkWidget,
                                      window: *mut GdkWindow);
    pub fn gtk_widget_unregister_window(widget: *mut GtkWidget,
                                        window: *mut GdkWindow);
    pub fn gtk_widget_get_allocated_width(widget: *mut GtkWidget) -> c_int;
    pub fn gtk_widget_get_allocated_height(widget: *mut GtkWidget) -> c_int;
    pub fn gtk_widget_get_allocated_baseline(widget: *mut GtkWidget) -> c_int;
    pub fn gtk_widget_get_allocation(widget: *mut GtkWidget,
                                     allocation: *mut GtkAllocation);
    pub fn gtk_widget_set_allocation(widget: *mut GtkWidget,
                                     allocation: *GtkAllocation);
    pub fn gtk_widget_get_requisition(widget: *mut GtkWidget,
                                      requisition: *mut GtkRequisition);
    pub fn gtk_widget_child_focus(widget: *mut GtkWidget,
                                  direction: GtkDirectionType) -> gboolean;
    pub fn gtk_widget_keynav_failed(widget: *mut GtkWidget,
                                    direction: GtkDirectionType) -> gboolean;
    pub fn gtk_widget_error_bell(widget: *mut GtkWidget);
    pub fn gtk_widget_set_size_request(widget: *mut GtkWidget, width: gint,
                                       height: gint);
    pub fn gtk_widget_get_size_request(widget: *mut GtkWidget,
                                       width: *mut gint, height: *mut gint);
    pub fn gtk_widget_set_events(widget: *mut GtkWidget, events: gint);
    pub fn gtk_widget_add_events(widget: *mut GtkWidget, events: gint);
    pub fn gtk_widget_set_device_events(widget: *mut GtkWidget,
                                        device: *mut GdkDevice,
                                        events: GdkEventMask);
    pub fn gtk_widget_add_device_events(widget: *mut GtkWidget,
                                        device: *mut GdkDevice,
                                        events: GdkEventMask);
    pub fn gtk_widget_set_opacity(widget: *mut GtkWidget, opacity: c_double);
    pub fn gtk_widget_get_opacity(widget: *mut GtkWidget) -> c_double;
    pub fn gtk_widget_set_device_enabled(widget: *mut GtkWidget,
                                         device: *mut GdkDevice,
                                         enabled: gboolean);
    pub fn gtk_widget_get_device_enabled(widget: *mut GtkWidget,
                                         device: *mut GdkDevice) -> gboolean;
    pub fn gtk_widget_get_toplevel(widget: *mut GtkWidget) -> *mut GtkWidget;
    pub fn gtk_widget_get_ancestor(widget: *mut GtkWidget, widget_type: GType)
     -> *mut GtkWidget;
    pub fn gtk_widget_get_visual(widget: *mut GtkWidget) -> *mut GdkVisual;
    pub fn gtk_widget_set_visual(widget: *mut GtkWidget,
                                 visual: *mut GdkVisual);
    pub fn gtk_widget_get_screen(widget: *mut GtkWidget) -> *mut GdkScreen;
    pub fn gtk_widget_has_screen(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_get_scale_factor(widget: *mut GtkWidget) -> gint;
    pub fn gtk_widget_get_display(widget: *mut GtkWidget) -> *mut GdkDisplay;
    pub fn gtk_widget_get_root_window(widget: *mut GtkWidget) ->
     *mut GdkWindow;
    pub fn gtk_widget_get_settings(widget: *mut GtkWidget) ->
     *mut GtkSettings;
    pub fn gtk_widget_get_clipboard(widget: *mut GtkWidget,
                                    selection: GdkAtom) -> *mut GtkClipboard;
    pub fn gtk_widget_get_hexpand(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_set_hexpand(widget: *mut GtkWidget, expand: gboolean);
    pub fn gtk_widget_get_hexpand_set(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_set_hexpand_set(widget: *mut GtkWidget, set: gboolean);
    pub fn gtk_widget_get_vexpand(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_set_vexpand(widget: *mut GtkWidget, expand: gboolean);
    pub fn gtk_widget_get_vexpand_set(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_set_vexpand_set(widget: *mut GtkWidget, set: gboolean);
    pub fn gtk_widget_queue_compute_expand(widget: *mut GtkWidget);
    pub fn gtk_widget_compute_expand(widget: *mut GtkWidget,
                                     orientation: GtkOrientation) -> gboolean;
    pub fn gtk_widget_get_support_multidevice(widget: *mut GtkWidget) ->
     gboolean;
    pub fn gtk_widget_set_support_multidevice(widget: *mut GtkWidget,
                                              support_multidevice: gboolean);
    pub fn gtk_widget_class_set_accessible_type(widget_class:
                                                    *mut GtkWidgetClass,
                                                _type: GType);
    pub fn gtk_widget_class_set_accessible_role(widget_class:
                                                    *mut GtkWidgetClass,
                                                role: AtkRole);
    pub fn gtk_widget_get_accessible(widget: *mut GtkWidget) ->
     *mut AtkObject;
    pub fn gtk_widget_get_halign(widget: *mut GtkWidget) -> GtkAlign;
    pub fn gtk_widget_set_halign(widget: *mut GtkWidget, align: GtkAlign);
    pub fn gtk_widget_get_valign(widget: *mut GtkWidget) -> GtkAlign;
    pub fn gtk_widget_get_valign_with_baseline(widget: *mut GtkWidget) ->
     GtkAlign;
    pub fn gtk_widget_set_valign(widget: *mut GtkWidget, align: GtkAlign);
    pub fn gtk_widget_get_margin_left(widget: *mut GtkWidget) -> gint;
    pub fn gtk_widget_set_margin_left(widget: *mut GtkWidget, margin: gint);
    pub fn gtk_widget_get_margin_right(widget: *mut GtkWidget) -> gint;
    pub fn gtk_widget_set_margin_right(widget: *mut GtkWidget, margin: gint);
    pub fn gtk_widget_get_margin_top(widget: *mut GtkWidget) -> gint;
    pub fn gtk_widget_set_margin_top(widget: *mut GtkWidget, margin: gint);
    pub fn gtk_widget_get_margin_bottom(widget: *mut GtkWidget) -> gint;
    pub fn gtk_widget_set_margin_bottom(widget: *mut GtkWidget, margin: gint);
    pub fn gtk_widget_get_events(widget: *mut GtkWidget) -> gint;
    pub fn gtk_widget_get_device_events(widget: *mut GtkWidget,
                                        device: *mut GdkDevice) ->
     GdkEventMask;
    pub fn gtk_widget_get_pointer(widget: *mut GtkWidget, x: *mut gint,
                                  y: *mut gint);
    pub fn gtk_widget_is_ancestor(widget: *mut GtkWidget,
                                  ancestor: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_translate_coordinates(src_widget: *mut GtkWidget,
                                            dest_widget: *mut GtkWidget,
                                            src_x: gint, src_y: gint,
                                            dest_x: *mut gint,
                                            dest_y: *mut gint) -> gboolean;
    pub fn gtk_widget_hide_on_delete(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_override_color(widget: *mut GtkWidget,
                                     state: GtkStateFlags, color: *GdkRGBA);
    pub fn gtk_widget_override_background_color(widget: *mut GtkWidget,
                                                state: GtkStateFlags,
                                                color: *GdkRGBA);
    pub fn gtk_widget_override_font(widget: *mut GtkWidget,
                                    font_desc: *PangoFontDescription);
    pub fn gtk_widget_override_symbolic_color(widget: *mut GtkWidget,
                                              name: *gchar, color: *GdkRGBA);
    pub fn gtk_widget_override_cursor(widget: *mut GtkWidget,
                                      cursor: *GdkRGBA,
                                      secondary_cursor: *GdkRGBA);
    pub fn gtk_widget_reset_style(widget: *mut GtkWidget);
    pub fn gtk_widget_create_pango_context(widget: *mut GtkWidget) ->
     *mut PangoContext;
    pub fn gtk_widget_get_pango_context(widget: *mut GtkWidget) ->
     *mut PangoContext;
    pub fn gtk_widget_create_pango_layout(widget: *mut GtkWidget,
                                          text: *gchar) -> *mut PangoLayout;
    pub fn gtk_widget_render_icon_pixbuf(widget: *mut GtkWidget,
                                         stock_id: *gchar, size: GtkIconSize)
     -> *mut GdkPixbuf;
    pub fn gtk_widget_set_composite_name(widget: *mut GtkWidget,
                                         name: *gchar);
    pub fn gtk_widget_get_composite_name(widget: *mut GtkWidget) ->
     *mut gchar;
    pub fn gtk_widget_push_composite_child();
    pub fn gtk_widget_pop_composite_child();
    pub fn gtk_widget_class_install_style_property(klass: *mut GtkWidgetClass,
                                                   pspec: *mut GParamSpec);
    pub fn gtk_widget_class_install_style_property_parser(klass:
                                                              *mut GtkWidgetClass,
                                                          pspec:
                                                              *mut GParamSpec,
                                                          parser:
                                                              GtkRcPropertyParser);
    pub fn gtk_widget_class_find_style_property(klass: *mut GtkWidgetClass,
                                                property_name: *gchar) ->
     *mut GParamSpec;
    pub fn gtk_widget_class_list_style_properties(klass: *mut GtkWidgetClass,
                                                  n_properties: *mut guint) ->
     *mut *mut GParamSpec;
    pub fn gtk_widget_style_get_property(widget: *mut GtkWidget,
                                         property_name: *gchar,
                                         value: *mut GValue);
    pub fn gtk_widget_style_get_valist(widget: *mut GtkWidget,
                                       first_property_name: *gchar,
                                       var_args: va_list);
    pub fn gtk_widget_style_get(widget: *mut GtkWidget,
                                first_property_name: *gchar, ...);
    pub fn gtk_widget_set_direction(widget: *mut GtkWidget,
                                    dir: GtkTextDirection);
    pub fn gtk_widget_get_direction(widget: *mut GtkWidget) ->
     GtkTextDirection;
    pub fn gtk_widget_set_default_direction(dir: GtkTextDirection);
    pub fn gtk_widget_get_default_direction() -> GtkTextDirection;
    pub fn gtk_widget_is_composited(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_shape_combine_region(widget: *mut GtkWidget,
                                           region: *mut cairo_region_t);
    pub fn gtk_widget_input_shape_combine_region(widget: *mut GtkWidget,
                                                 region: *mut cairo_region_t);
    pub fn gtk_widget_list_mnemonic_labels(widget: *mut GtkWidget) ->
     *mut GList;
    pub fn gtk_widget_add_mnemonic_label(widget: *mut GtkWidget,
                                         label: *mut GtkWidget);
    pub fn gtk_widget_remove_mnemonic_label(widget: *mut GtkWidget,
                                            label: *mut GtkWidget);
    pub fn gtk_widget_set_tooltip_window(widget: *mut GtkWidget,
                                         custom_window: *mut GtkWindow);
    pub fn gtk_widget_get_tooltip_window(widget: *mut GtkWidget) ->
     *mut GtkWindow;
    pub fn gtk_widget_trigger_tooltip_query(widget: *mut GtkWidget);
    pub fn gtk_widget_set_tooltip_text(widget: *mut GtkWidget, text: *gchar);
    pub fn gtk_widget_get_tooltip_text(widget: *mut GtkWidget) -> *mut gchar;
    pub fn gtk_widget_set_tooltip_markup(widget: *mut GtkWidget,
                                         markup: *gchar);
    pub fn gtk_widget_get_tooltip_markup(widget: *mut GtkWidget) ->
     *mut gchar;
    pub fn gtk_widget_set_has_tooltip(widget: *mut GtkWidget,
                                      has_tooltip: gboolean);
    pub fn gtk_widget_get_has_tooltip(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_cairo_should_draw_window(cr: *mut cairo_t,
                                        window: *mut GdkWindow) -> gboolean;
    pub fn gtk_cairo_transform_to_window(cr: *mut cairo_t,
                                         widget: *mut GtkWidget,
                                         window: *mut GdkWindow);
    pub fn gtk_requisition_get_type() -> GType;
    pub fn gtk_requisition_new() -> *mut GtkRequisition;
    pub fn gtk_requisition_copy(requisition: *GtkRequisition) ->
     *mut GtkRequisition;
    pub fn gtk_requisition_free(requisition: *mut GtkRequisition);
    pub fn gtk_widget_in_destruction(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_get_style_context(widget: *mut GtkWidget) ->
     *mut GtkStyleContext;
    pub fn gtk_widget_get_path(widget: *mut GtkWidget) -> *mut GtkWidgetPath;
    pub fn gtk_widget_get_modifier_mask(widget: *mut GtkWidget,
                                        intent: GdkModifierIntent) ->
     GdkModifierType;
    pub fn gtk_widget_insert_action_group(widget: *mut GtkWidget,
                                          name: *gchar,
                                          group: *mut GActionGroup);
    pub fn gtk_widget_add_tick_callback(widget: *mut GtkWidget,
                                        callback: GtkTickCallback,
                                        user_data: gpointer,
                                        notify: GDestroyNotify) -> guint;
    pub fn gtk_widget_remove_tick_callback(widget: *mut GtkWidget, id: guint);
    pub fn gtk_widget_init_template(widget: *mut GtkWidget);
    pub fn gtk_widget_get_template_child(widget: *mut GtkWidget,
                                         widget_type: GType, name: *gchar) ->
     *mut GObject;
    pub fn gtk_widget_class_set_template(widget_class: *mut GtkWidgetClass,
                                         template_bytes: *mut GBytes);
    pub fn gtk_widget_class_set_template_from_resource(widget_class:
                                                           *mut GtkWidgetClass,
                                                       resource_name: *gchar);
    pub fn gtk_widget_class_bind_template_callback_full(widget_class:
                                                            *mut GtkWidgetClass,
                                                        callback_name: *gchar,
                                                        callback_symbol:
                                                            GCallback);
    pub fn gtk_widget_class_set_connect_func(widget_class:
                                                 *mut GtkWidgetClass,
                                             connect_func:
                                                 GtkBuilderConnectFunc,
                                             connect_data: gpointer,
                                             connect_data_destroy:
                                                 GDestroyNotify);
    pub fn gtk_widget_class_bind_template_child_full(widget_class:
                                                         *mut GtkWidgetClass,
                                                     name: *gchar,
                                                     internal_child: gboolean,
                                                     struct_offset: gssize);
    pub fn gtk_application_get_type() -> GType;
    pub fn gtk_application_new(application_id: *gchar,
                               flags: GApplicationFlags) ->
     *mut GtkApplication;
    pub fn gtk_application_add_window(application: *mut GtkApplication,
                                      window: *mut GtkWindow);
    pub fn gtk_application_remove_window(application: *mut GtkApplication,
                                         window: *mut GtkWindow);
    pub fn gtk_application_get_windows(application: *mut GtkApplication) ->
     *mut GList;
    pub fn gtk_application_get_app_menu(application: *mut GtkApplication) ->
     *mut GMenuModel;
    pub fn gtk_application_set_app_menu(application: *mut GtkApplication,
                                        app_menu: *mut GMenuModel);
    pub fn gtk_application_get_menubar(application: *mut GtkApplication) ->
     *mut GMenuModel;
    pub fn gtk_application_set_menubar(application: *mut GtkApplication,
                                       menubar: *mut GMenuModel);
    pub fn gtk_application_add_accelerator(application: *mut GtkApplication,
                                           accelerator: *gchar,
                                           action_name: *gchar,
                                           parameter: *mut GVariant);
    pub fn gtk_application_remove_accelerator(application:
                                                  *mut GtkApplication,
                                              action_name: *gchar,
                                              parameter: *mut GVariant);
    pub fn gtk_application_inhibit(application: *mut GtkApplication,
                                   window: *mut GtkWindow,
                                   flags: GtkApplicationInhibitFlags,
                                   reason: *gchar) -> guint;
    pub fn gtk_application_uninhibit(application: *mut GtkApplication,
                                     cookie: guint);
    pub fn gtk_application_is_inhibited(application: *mut GtkApplication,
                                        flags: GtkApplicationInhibitFlags) ->
     gboolean;
    pub fn gtk_application_get_window_by_id(application: *mut GtkApplication,
                                            id: guint) -> *mut GtkWindow;
    pub fn gtk_application_get_active_window(application: *mut GtkApplication)
     -> *mut GtkWindow;
    pub fn gtk_container_get_type() -> GType;
    pub fn gtk_container_set_border_width(container: *mut GtkContainer,
                                          border_width: guint);
    pub fn gtk_container_get_border_width(container: *mut GtkContainer) ->
     guint;
    pub fn gtk_container_add(container: *mut GtkContainer,
                             widget: *mut GtkWidget);
    pub fn gtk_container_remove(container: *mut GtkContainer,
                                widget: *mut GtkWidget);
    pub fn gtk_container_set_resize_mode(container: *mut GtkContainer,
                                         resize_mode: GtkResizeMode);
    pub fn gtk_container_get_resize_mode(container: *mut GtkContainer) ->
     GtkResizeMode;
    pub fn gtk_container_check_resize(container: *mut GtkContainer);
    pub fn gtk_container_foreach(container: *mut GtkContainer,
                                 callback: GtkCallback,
                                 callback_data: gpointer);
    pub fn gtk_container_get_children(container: *mut GtkContainer) ->
     *mut GList;
    pub fn gtk_container_propagate_draw(container: *mut GtkContainer,
                                        child: *mut GtkWidget,
                                        cr: *mut cairo_t);
    pub fn gtk_container_set_focus_chain(container: *mut GtkContainer,
                                         focusable_widgets: *mut GList);
    pub fn gtk_container_get_focus_chain(container: *mut GtkContainer,
                                         focusable_widgets: *mut *mut GList)
     -> gboolean;
    pub fn gtk_container_unset_focus_chain(container: *mut GtkContainer);
    pub fn gtk_container_set_reallocate_redraws(container: *mut GtkContainer,
                                                needs_redraws: gboolean);
    pub fn gtk_container_set_focus_child(container: *mut GtkContainer,
                                         child: *mut GtkWidget);
    pub fn gtk_container_get_focus_child(container: *mut GtkContainer) ->
     *mut GtkWidget;
    pub fn gtk_container_set_focus_vadjustment(container: *mut GtkContainer,
                                               adjustment:
                                                   *mut GtkAdjustment);
    pub fn gtk_container_get_focus_vadjustment(container: *mut GtkContainer)
     -> *mut GtkAdjustment;
    pub fn gtk_container_set_focus_hadjustment(container: *mut GtkContainer,
                                               adjustment:
                                                   *mut GtkAdjustment);
    pub fn gtk_container_get_focus_hadjustment(container: *mut GtkContainer)
     -> *mut GtkAdjustment;
    pub fn gtk_container_resize_children(container: *mut GtkContainer);
    pub fn gtk_container_child_type(container: *mut GtkContainer) -> GType;
    pub fn gtk_container_class_install_child_property(cclass:
                                                          *mut GtkContainerClass,
                                                      property_id: guint,
                                                      pspec: *mut GParamSpec);
    pub fn gtk_container_class_find_child_property(cclass: *mut GObjectClass,
                                                   property_name: *gchar) ->
     *mut GParamSpec;
    pub fn gtk_container_class_list_child_properties(cclass:
                                                         *mut GObjectClass,
                                                     n_properties: *mut guint)
     -> *mut *mut GParamSpec;
    pub fn gtk_container_add_with_properties(container: *mut GtkContainer,
                                             widget: *mut GtkWidget,
                                             first_prop_name: *gchar, ...);
    pub fn gtk_container_child_set(container: *mut GtkContainer,
                                   child: *mut GtkWidget,
                                   first_prop_name: *gchar, ...);
    pub fn gtk_container_child_get(container: *mut GtkContainer,
                                   child: *mut GtkWidget,
                                   first_prop_name: *gchar, ...);
    pub fn gtk_container_child_set_valist(container: *mut GtkContainer,
                                          child: *mut GtkWidget,
                                          first_property_name: *gchar,
                                          var_args: va_list);
    pub fn gtk_container_child_get_valist(container: *mut GtkContainer,
                                          child: *mut GtkWidget,
                                          first_property_name: *gchar,
                                          var_args: va_list);
    pub fn gtk_container_child_set_property(container: *mut GtkContainer,
                                            child: *mut GtkWidget,
                                            property_name: *gchar,
                                            value: *GValue);
    pub fn gtk_container_child_get_property(container: *mut GtkContainer,
                                            child: *mut GtkWidget,
                                            property_name: *gchar,
                                            value: *mut GValue);
    pub fn gtk_container_child_notify(container: *mut GtkContainer,
                                      child: *mut GtkWidget,
                                      child_property: *gchar);
    pub fn gtk_container_forall(container: *mut GtkContainer,
                                callback: GtkCallback,
                                callback_data: gpointer);
    pub fn gtk_container_class_handle_border_width(klass:
                                                       *mut GtkContainerClass);
    pub fn gtk_container_get_path_for_child(container: *mut GtkContainer,
                                            child: *mut GtkWidget) ->
     *mut GtkWidgetPath;
    pub fn gtk_bin_get_type() -> GType;
    pub fn gtk_bin_get_child(bin: *mut GtkBin) -> *mut GtkWidget;
    pub fn _gtk_bin_set_child(bin: *mut GtkBin, widget: *mut GtkWidget);
    pub fn gtk_window_get_type() -> GType;
    pub fn gtk_window_new(_type: GtkWindowType) -> *mut GtkWidget;
    pub fn gtk_window_set_title(window: *mut GtkWindow, title: *gchar);
    pub fn gtk_window_get_title(window: *mut GtkWindow) -> *gchar;
    pub fn gtk_window_set_wmclass(window: *mut GtkWindow,
                                  wmclass_name: *gchar,
                                  wmclass_class: *gchar);
    pub fn gtk_window_set_role(window: *mut GtkWindow, role: *gchar);
    pub fn gtk_window_set_startup_id(window: *mut GtkWindow,
                                     startup_id: *gchar);
    pub fn gtk_window_get_role(window: *mut GtkWindow) -> *gchar;
    pub fn gtk_window_add_accel_group(window: *mut GtkWindow,
                                      accel_group: *mut GtkAccelGroup);
    pub fn gtk_window_remove_accel_group(window: *mut GtkWindow,
                                         accel_group: *mut GtkAccelGroup);
    pub fn gtk_window_set_position(window: *mut GtkWindow,
                                   position: GtkWindowPosition);
    pub fn gtk_window_activate_focus(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_set_focus(window: *mut GtkWindow,
                                focus: *mut GtkWidget);
    pub fn gtk_window_get_focus(window: *mut GtkWindow) -> *mut GtkWidget;
    pub fn gtk_window_set_default(window: *mut GtkWindow,
                                  default_widget: *mut GtkWidget);
    pub fn gtk_window_get_default_widget(window: *mut GtkWindow) ->
     *mut GtkWidget;
    pub fn gtk_window_activate_default(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_set_transient_for(window: *mut GtkWindow,
                                        parent: *mut GtkWindow);
    pub fn gtk_window_get_transient_for(window: *mut GtkWindow) ->
     *mut GtkWindow;
    pub fn gtk_window_set_attached_to(window: *mut GtkWindow,
                                      attach_widget: *mut GtkWidget);
    pub fn gtk_window_get_attached_to(window: *mut GtkWindow) ->
     *mut GtkWidget;
    pub fn gtk_window_set_opacity(window: *mut GtkWindow, opacity: gdouble);
    pub fn gtk_window_get_opacity(window: *mut GtkWindow) -> gdouble;
    pub fn gtk_window_set_type_hint(window: *mut GtkWindow,
                                    hint: GdkWindowTypeHint);
    pub fn gtk_window_get_type_hint(window: *mut GtkWindow) ->
     GdkWindowTypeHint;
    pub fn gtk_window_set_skip_taskbar_hint(window: *mut GtkWindow,
                                            setting: gboolean);
    pub fn gtk_window_get_skip_taskbar_hint(window: *mut GtkWindow) ->
     gboolean;
    pub fn gtk_window_set_skip_pager_hint(window: *mut GtkWindow,
                                          setting: gboolean);
    pub fn gtk_window_get_skip_pager_hint(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_set_urgency_hint(window: *mut GtkWindow,
                                       setting: gboolean);
    pub fn gtk_window_get_urgency_hint(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_set_accept_focus(window: *mut GtkWindow,
                                       setting: gboolean);
    pub fn gtk_window_get_accept_focus(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_set_focus_on_map(window: *mut GtkWindow,
                                       setting: gboolean);
    pub fn gtk_window_get_focus_on_map(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_set_destroy_with_parent(window: *mut GtkWindow,
                                              setting: gboolean);
    pub fn gtk_window_get_destroy_with_parent(window: *mut GtkWindow) ->
     gboolean;
    pub fn gtk_window_set_hide_titlebar_when_maximized(window: *mut GtkWindow,
                                                       setting: gboolean);
    pub fn gtk_window_get_hide_titlebar_when_maximized(window: *mut GtkWindow)
     -> gboolean;
    pub fn gtk_window_set_mnemonics_visible(window: *mut GtkWindow,
                                            setting: gboolean);
    pub fn gtk_window_get_mnemonics_visible(window: *mut GtkWindow) ->
     gboolean;
    pub fn gtk_window_set_focus_visible(window: *mut GtkWindow,
                                        setting: gboolean);
    pub fn gtk_window_get_focus_visible(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_set_resizable(window: *mut GtkWindow,
                                    resizable: gboolean);
    pub fn gtk_window_get_resizable(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_set_gravity(window: *mut GtkWindow,
                                  gravity: GdkGravity);
    pub fn gtk_window_get_gravity(window: *mut GtkWindow) -> GdkGravity;
    pub fn gtk_window_set_geometry_hints(window: *mut GtkWindow,
                                         geometry_widget: *mut GtkWidget,
                                         geometry: *mut GdkGeometry,
                                         geom_mask: GdkWindowHints);
    pub fn gtk_window_set_screen(window: *mut GtkWindow,
                                 screen: *mut GdkScreen);
    pub fn gtk_window_get_screen(window: *mut GtkWindow) -> *mut GdkScreen;
    pub fn gtk_window_is_active(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_has_toplevel_focus(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_set_decorated(window: *mut GtkWindow,
                                    setting: gboolean);
    pub fn gtk_window_get_decorated(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_set_deletable(window: *mut GtkWindow,
                                    setting: gboolean);
    pub fn gtk_window_get_deletable(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_set_icon_list(window: *mut GtkWindow, list: *mut GList);
    pub fn gtk_window_get_icon_list(window: *mut GtkWindow) -> *mut GList;
    pub fn gtk_window_set_icon(window: *mut GtkWindow, icon: *mut GdkPixbuf);
    pub fn gtk_window_set_icon_name(window: *mut GtkWindow, name: *gchar);
    pub fn gtk_window_set_icon_from_file(window: *mut GtkWindow,
                                         filename: *gchar,
                                         err: *mut *mut GError) -> gboolean;
    pub fn gtk_window_get_icon(window: *mut GtkWindow) -> *mut GdkPixbuf;
    pub fn gtk_window_get_icon_name(window: *mut GtkWindow) -> *gchar;
    pub fn gtk_window_set_default_icon_list(list: *mut GList);
    pub fn gtk_window_get_default_icon_list() -> *mut GList;
    pub fn gtk_window_set_default_icon(icon: *mut GdkPixbuf);
    pub fn gtk_window_set_default_icon_name(name: *gchar);
    pub fn gtk_window_get_default_icon_name() -> *gchar;
    pub fn gtk_window_set_default_icon_from_file(filename: *gchar,
                                                 err: *mut *mut GError) ->
     gboolean;
    pub fn gtk_window_set_auto_startup_notification(setting: gboolean);
    pub fn gtk_window_set_modal(window: *mut GtkWindow, modal: gboolean);
    pub fn gtk_window_get_modal(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_list_toplevels() -> *mut GList;
    pub fn gtk_window_set_has_user_ref_count(window: *mut GtkWindow,
                                             setting: gboolean);
    pub fn gtk_window_add_mnemonic(window: *mut GtkWindow, keyval: guint,
                                   target: *mut GtkWidget);
    pub fn gtk_window_remove_mnemonic(window: *mut GtkWindow, keyval: guint,
                                      target: *mut GtkWidget);
    pub fn gtk_window_mnemonic_activate(window: *mut GtkWindow, keyval: guint,
                                        modifier: GdkModifierType) ->
     gboolean;
    pub fn gtk_window_set_mnemonic_modifier(window: *mut GtkWindow,
                                            modifier: GdkModifierType);
    pub fn gtk_window_get_mnemonic_modifier(window: *mut GtkWindow) ->
     GdkModifierType;
    pub fn gtk_window_activate_key(window: *mut GtkWindow,
                                   event: *mut GdkEventKey) -> gboolean;
    pub fn gtk_window_propagate_key_event(window: *mut GtkWindow,
                                          event: *mut GdkEventKey) ->
     gboolean;
    pub fn gtk_window_present(window: *mut GtkWindow);
    pub fn gtk_window_present_with_time(window: *mut GtkWindow,
                                        timestamp: guint32);
    pub fn gtk_window_iconify(window: *mut GtkWindow);
    pub fn gtk_window_deiconify(window: *mut GtkWindow);
    pub fn gtk_window_stick(window: *mut GtkWindow);
    pub fn gtk_window_unstick(window: *mut GtkWindow);
    pub fn gtk_window_maximize(window: *mut GtkWindow);
    pub fn gtk_window_unmaximize(window: *mut GtkWindow);
    pub fn gtk_window_fullscreen(window: *mut GtkWindow);
    pub fn gtk_window_unfullscreen(window: *mut GtkWindow);
    pub fn gtk_window_close(window: *mut GtkWindow);
    pub fn gtk_window_set_keep_above(window: *mut GtkWindow,
                                     setting: gboolean);
    pub fn gtk_window_set_keep_below(window: *mut GtkWindow,
                                     setting: gboolean);
    pub fn gtk_window_begin_resize_drag(window: *mut GtkWindow,
                                        edge: GdkWindowEdge, button: gint,
                                        root_x: gint, root_y: gint,
                                        timestamp: guint32);
    pub fn gtk_window_begin_move_drag(window: *mut GtkWindow, button: gint,
                                      root_x: gint, root_y: gint,
                                      timestamp: guint32);
    pub fn gtk_window_set_default_size(window: *mut GtkWindow, width: gint,
                                       height: gint);
    pub fn gtk_window_get_default_size(window: *mut GtkWindow,
                                       width: *mut gint, height: *mut gint);
    pub fn gtk_window_resize(window: *mut GtkWindow, width: gint,
                             height: gint);
    pub fn gtk_window_get_size(window: *mut GtkWindow, width: *mut gint,
                               height: *mut gint);
    pub fn gtk_window_move(window: *mut GtkWindow, x: gint, y: gint);
    pub fn gtk_window_get_position(window: *mut GtkWindow, root_x: *mut gint,
                                   root_y: *mut gint);
    pub fn gtk_window_parse_geometry(window: *mut GtkWindow, geometry: *gchar)
     -> gboolean;
    pub fn gtk_window_set_default_geometry(window: *mut GtkWindow,
                                           width: gint, height: gint);
    pub fn gtk_window_resize_to_geometry(window: *mut GtkWindow, width: gint,
                                         height: gint);
    pub fn gtk_window_get_group(window: *mut GtkWindow) ->
     *mut GtkWindowGroup;
    pub fn gtk_window_has_group(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_reshow_with_initial_size(window: *mut GtkWindow);
    pub fn gtk_window_get_window_type(window: *mut GtkWindow) ->
     GtkWindowType;
    pub fn gtk_window_group_get_type() -> GType;
    pub fn gtk_window_group_new() -> *mut GtkWindowGroup;
    pub fn gtk_window_group_add_window(window_group: *mut GtkWindowGroup,
                                       window: *mut GtkWindow);
    pub fn gtk_window_group_remove_window(window_group: *mut GtkWindowGroup,
                                          window: *mut GtkWindow);
    pub fn gtk_window_group_list_windows(window_group: *mut GtkWindowGroup) ->
     *mut GList;
    pub fn gtk_window_group_get_current_grab(window_group:
                                                 *mut GtkWindowGroup) ->
     *mut GtkWidget;
    pub fn gtk_window_group_get_current_device_grab(window_group:
                                                        *mut GtkWindowGroup,
                                                    device: *mut GdkDevice) ->
     *mut GtkWidget;
    pub fn gtk_window_get_application(window: *mut GtkWindow) ->
     *mut GtkApplication;
    pub fn gtk_window_set_application(window: *mut GtkWindow,
                                      application: *mut GtkApplication);
    pub fn gtk_window_set_has_resize_grip(window: *mut GtkWindow,
                                          value: gboolean);
    pub fn gtk_window_get_has_resize_grip(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_resize_grip_is_visible(window: *mut GtkWindow) ->
     gboolean;
    pub fn gtk_window_get_resize_grip_area(window: *mut GtkWindow,
                                           rect: *mut GdkRectangle) ->
     gboolean;
    pub fn gtk_window_set_titlebar(window: *mut GtkWindow,
                                   titlebar: *mut GtkWidget);
    pub fn gtk_dialog_get_type() -> GType;
    pub fn gtk_dialog_new() -> *mut GtkWidget;
    pub fn gtk_dialog_new_with_buttons(title: *gchar, parent: *mut GtkWindow,
                                       flags: GtkDialogFlags,
                                       first_button_text: *gchar, ...) ->
     *mut GtkWidget;
    pub fn gtk_dialog_add_action_widget(dialog: *mut GtkDialog,
                                        child: *mut GtkWidget,
                                        response_id: gint);
    pub fn gtk_dialog_add_button(dialog: *mut GtkDialog, button_text: *gchar,
                                 response_id: gint) -> *mut GtkWidget;
    pub fn gtk_dialog_add_buttons(dialog: *mut GtkDialog,
                                  first_button_text: *gchar, ...);
    pub fn gtk_dialog_set_response_sensitive(dialog: *mut GtkDialog,
                                             response_id: gint,
                                             setting: gboolean);
    pub fn gtk_dialog_set_default_response(dialog: *mut GtkDialog,
                                           response_id: gint);
    pub fn gtk_dialog_get_widget_for_response(dialog: *mut GtkDialog,
                                              response_id: gint) ->
     *mut GtkWidget;
    pub fn gtk_dialog_get_response_for_widget(dialog: *mut GtkDialog,
                                              widget: *mut GtkWidget) -> gint;
    pub fn gtk_alternative_dialog_button_order(screen: *mut GdkScreen) ->
     gboolean;
    pub fn gtk_dialog_set_alternative_button_order(dialog: *mut GtkDialog,
                                                   first_response_id:
                                                       gint, ...);
    pub fn gtk_dialog_set_alternative_button_order_from_array(dialog:
                                                                  *mut GtkDialog,
                                                              n_params: gint,
                                                              new_order:
                                                                  *mut gint);
    pub fn gtk_dialog_response(dialog: *mut GtkDialog, response_id: gint);
    pub fn gtk_dialog_run(dialog: *mut GtkDialog) -> gint;
    pub fn gtk_dialog_get_action_area(dialog: *mut GtkDialog) ->
     *mut GtkWidget;
    pub fn gtk_dialog_get_content_area(dialog: *mut GtkDialog) ->
     *mut GtkWidget;
    pub fn gtk_about_dialog_get_type() -> GType;
    pub fn gtk_about_dialog_new() -> *mut GtkWidget;
    pub fn gtk_show_about_dialog(parent: *mut GtkWindow,
                                 first_property_name: *gchar, ...);
    pub fn gtk_about_dialog_get_program_name(about: *mut GtkAboutDialog) ->
     *gchar;
    pub fn gtk_about_dialog_set_program_name(about: *mut GtkAboutDialog,
                                             name: *gchar);
    pub fn gtk_about_dialog_get_version(about: *mut GtkAboutDialog) -> *gchar;
    pub fn gtk_about_dialog_set_version(about: *mut GtkAboutDialog,
                                        version: *gchar);
    pub fn gtk_about_dialog_get_copyright(about: *mut GtkAboutDialog) ->
     *gchar;
    pub fn gtk_about_dialog_set_copyright(about: *mut GtkAboutDialog,
                                          copyright: *gchar);
    pub fn gtk_about_dialog_get_comments(about: *mut GtkAboutDialog) ->
     *gchar;
    pub fn gtk_about_dialog_set_comments(about: *mut GtkAboutDialog,
                                         comments: *gchar);
    pub fn gtk_about_dialog_get_license(about: *mut GtkAboutDialog) -> *gchar;
    pub fn gtk_about_dialog_set_license(about: *mut GtkAboutDialog,
                                        license: *gchar);
    pub fn gtk_about_dialog_set_license_type(about: *mut GtkAboutDialog,
                                             license_type: GtkLicense);
    pub fn gtk_about_dialog_get_license_type(about: *mut GtkAboutDialog) ->
     GtkLicense;
    pub fn gtk_about_dialog_get_wrap_license(about: *mut GtkAboutDialog) ->
     gboolean;
    pub fn gtk_about_dialog_set_wrap_license(about: *mut GtkAboutDialog,
                                             wrap_license: gboolean);
    pub fn gtk_about_dialog_get_website(about: *mut GtkAboutDialog) -> *gchar;
    pub fn gtk_about_dialog_set_website(about: *mut GtkAboutDialog,
                                        website: *gchar);
    pub fn gtk_about_dialog_get_website_label(about: *mut GtkAboutDialog) ->
     *gchar;
    pub fn gtk_about_dialog_set_website_label(about: *mut GtkAboutDialog,
                                              website_label: *gchar);
    pub fn gtk_about_dialog_get_authors(about: *mut GtkAboutDialog) ->
     **gchar;
    pub fn gtk_about_dialog_set_authors(about: *mut GtkAboutDialog,
                                        authors: *mut *gchar);
    pub fn gtk_about_dialog_get_documenters(about: *mut GtkAboutDialog) ->
     **gchar;
    pub fn gtk_about_dialog_set_documenters(about: *mut GtkAboutDialog,
                                            documenters: *mut *gchar);
    pub fn gtk_about_dialog_get_artists(about: *mut GtkAboutDialog) ->
     **gchar;
    pub fn gtk_about_dialog_set_artists(about: *mut GtkAboutDialog,
                                        artists: *mut *gchar);
    pub fn gtk_about_dialog_get_translator_credits(about: *mut GtkAboutDialog)
     -> *gchar;
    pub fn gtk_about_dialog_set_translator_credits(about: *mut GtkAboutDialog,
                                                   translator_credits:
                                                       *gchar);
    pub fn gtk_about_dialog_get_logo(about: *mut GtkAboutDialog) ->
     *mut GdkPixbuf;
    pub fn gtk_about_dialog_set_logo(about: *mut GtkAboutDialog,
                                     logo: *mut GdkPixbuf);
    pub fn gtk_about_dialog_get_logo_icon_name(about: *mut GtkAboutDialog) ->
     *gchar;
    pub fn gtk_about_dialog_set_logo_icon_name(about: *mut GtkAboutDialog,
                                               icon_name: *gchar);
    pub fn gtk_about_dialog_add_credit_section(about: *mut GtkAboutDialog,
                                               section_name: *gchar,
                                               people: *mut *gchar);
    pub fn gtk_misc_get_type() -> GType;
    pub fn gtk_misc_set_alignment(misc: *mut GtkMisc, xalign: gfloat,
                                  yalign: gfloat);
    pub fn gtk_misc_get_alignment(misc: *mut GtkMisc, xalign: *mut gfloat,
                                  yalign: *mut gfloat);
    pub fn gtk_misc_set_padding(misc: *mut GtkMisc, xpad: gint, ypad: gint);
    pub fn gtk_misc_get_padding(misc: *mut GtkMisc, xpad: *mut gint,
                                ypad: *mut gint);
    pub fn _gtk_misc_get_padding_and_border(misc: *mut GtkMisc,
                                            border: *mut GtkBorder);
    pub fn gtk_menu_shell_get_type() -> GType;
    pub fn gtk_menu_shell_append(menu_shell: *mut GtkMenuShell,
                                 child: *mut GtkWidget);
    pub fn gtk_menu_shell_prepend(menu_shell: *mut GtkMenuShell,
                                  child: *mut GtkWidget);
    pub fn gtk_menu_shell_insert(menu_shell: *mut GtkMenuShell,
                                 child: *mut GtkWidget, position: gint);
    pub fn gtk_menu_shell_deactivate(menu_shell: *mut GtkMenuShell);
    pub fn gtk_menu_shell_select_item(menu_shell: *mut GtkMenuShell,
                                      menu_item: *mut GtkWidget);
    pub fn gtk_menu_shell_deselect(menu_shell: *mut GtkMenuShell);
    pub fn gtk_menu_shell_activate_item(menu_shell: *mut GtkMenuShell,
                                        menu_item: *mut GtkWidget,
                                        force_deactivate: gboolean);
    pub fn gtk_menu_shell_select_first(menu_shell: *mut GtkMenuShell,
                                       search_sensitive: gboolean);
    pub fn gtk_menu_shell_cancel(menu_shell: *mut GtkMenuShell);
    pub fn gtk_menu_shell_get_take_focus(menu_shell: *mut GtkMenuShell) ->
     gboolean;
    pub fn gtk_menu_shell_set_take_focus(menu_shell: *mut GtkMenuShell,
                                         take_focus: gboolean);
    pub fn gtk_menu_shell_get_selected_item(menu_shell: *mut GtkMenuShell) ->
     *mut GtkWidget;
    pub fn gtk_menu_shell_get_parent_shell(menu_shell: *mut GtkMenuShell) ->
     *mut GtkWidget;
    pub fn gtk_menu_shell_bind_model(menu_shell: *mut GtkMenuShell,
                                     model: *mut GMenuModel,
                                     action_namespace: *gchar,
                                     with_separators: gboolean);
    pub fn gtk_menu_get_type() -> GType;
    pub fn gtk_menu_new() -> *mut GtkWidget;
    pub fn gtk_menu_new_from_model(model: *mut GMenuModel) -> *mut GtkWidget;
    pub fn gtk_menu_popup(menu: *mut GtkMenu,
                          parent_menu_shell: *mut GtkWidget,
                          parent_menu_item: *mut GtkWidget,
                          func: GtkMenuPositionFunc, data: gpointer,
                          button: guint, activate_time: guint32);
    pub fn gtk_menu_popup_for_device(menu: *mut GtkMenu,
                                     device: *mut GdkDevice,
                                     parent_menu_shell: *mut GtkWidget,
                                     parent_menu_item: *mut GtkWidget,
                                     func: GtkMenuPositionFunc,
                                     data: gpointer, destroy: GDestroyNotify,
                                     button: guint, activate_time: guint32);
    pub fn gtk_menu_reposition(menu: *mut GtkMenu);
    pub fn gtk_menu_popdown(menu: *mut GtkMenu);
    pub fn gtk_menu_get_active(menu: *mut GtkMenu) -> *mut GtkWidget;
    pub fn gtk_menu_set_active(menu: *mut GtkMenu, index: guint);
    pub fn gtk_menu_set_accel_group(menu: *mut GtkMenu,
                                    accel_group: *mut GtkAccelGroup);
    pub fn gtk_menu_get_accel_group(menu: *mut GtkMenu) -> *mut GtkAccelGroup;
    pub fn gtk_menu_set_accel_path(menu: *mut GtkMenu, accel_path: *gchar);
    pub fn gtk_menu_get_accel_path(menu: *mut GtkMenu) -> *gchar;
    pub fn gtk_menu_attach_to_widget(menu: *mut GtkMenu,
                                     attach_widget: *mut GtkWidget,
                                     detacher: GtkMenuDetachFunc);
    pub fn gtk_menu_detach(menu: *mut GtkMenu);
    pub fn gtk_menu_get_attach_widget(menu: *mut GtkMenu) -> *mut GtkWidget;
    pub fn gtk_menu_set_tearoff_state(menu: *mut GtkMenu, torn_off: gboolean);
    pub fn gtk_menu_get_tearoff_state(menu: *mut GtkMenu) -> gboolean;
    pub fn gtk_menu_set_title(menu: *mut GtkMenu, title: *gchar);
    pub fn gtk_menu_get_title(menu: *mut GtkMenu) -> *gchar;
    pub fn gtk_menu_reorder_child(menu: *mut GtkMenu, child: *mut GtkWidget,
                                  position: gint);
    pub fn gtk_menu_set_screen(menu: *mut GtkMenu, screen: *mut GdkScreen);
    pub fn gtk_menu_attach(menu: *mut GtkMenu, child: *mut GtkWidget,
                           left_attach: guint, right_attach: guint,
                           top_attach: guint, bottom_attach: guint);
    pub fn gtk_menu_set_monitor(menu: *mut GtkMenu, monitor_num: gint);
    pub fn gtk_menu_get_monitor(menu: *mut GtkMenu) -> gint;
    pub fn gtk_menu_get_for_attach_widget(widget: *mut GtkWidget) ->
     *mut GList;
    pub fn gtk_menu_set_reserve_toggle_size(menu: *mut GtkMenu,
                                            reserve_toggle_size: gboolean);
    pub fn gtk_menu_get_reserve_toggle_size(menu: *mut GtkMenu) -> gboolean;
    pub fn gtk_label_get_type() -> GType;
    pub fn gtk_label_new(str: *gchar) -> *mut GtkWidget;
    pub fn gtk_label_new_with_mnemonic(str: *gchar) -> *mut GtkWidget;
    pub fn gtk_label_set_text(label: *mut GtkLabel, str: *gchar);
    pub fn gtk_label_get_text(label: *mut GtkLabel) -> *gchar;
    pub fn gtk_label_set_attributes(label: *mut GtkLabel,
                                    attrs: *mut PangoAttrList);
    pub fn gtk_label_get_attributes(label: *mut GtkLabel) ->
     *mut PangoAttrList;
    pub fn gtk_label_set_label(label: *mut GtkLabel, str: *gchar);
    pub fn gtk_label_get_label(label: *mut GtkLabel) -> *gchar;
    pub fn gtk_label_set_markup(label: *mut GtkLabel, str: *gchar);
    pub fn gtk_label_set_use_markup(label: *mut GtkLabel, setting: gboolean);
    pub fn gtk_label_get_use_markup(label: *mut GtkLabel) -> gboolean;
    pub fn gtk_label_set_use_underline(label: *mut GtkLabel,
                                       setting: gboolean);
    pub fn gtk_label_get_use_underline(label: *mut GtkLabel) -> gboolean;
    pub fn gtk_label_set_markup_with_mnemonic(label: *mut GtkLabel,
                                              str: *gchar);
    pub fn gtk_label_get_mnemonic_keyval(label: *mut GtkLabel) -> guint;
    pub fn gtk_label_set_mnemonic_widget(label: *mut GtkLabel,
                                         widget: *mut GtkWidget);
    pub fn gtk_label_get_mnemonic_widget(label: *mut GtkLabel) ->
     *mut GtkWidget;
    pub fn gtk_label_set_text_with_mnemonic(label: *mut GtkLabel,
                                            str: *gchar);
    pub fn gtk_label_set_justify(label: *mut GtkLabel,
                                 jtype: GtkJustification);
    pub fn gtk_label_get_justify(label: *mut GtkLabel) -> GtkJustification;
    pub fn gtk_label_set_ellipsize(label: *mut GtkLabel,
                                   mode: PangoEllipsizeMode);
    pub fn gtk_label_get_ellipsize(label: *mut GtkLabel) ->
     PangoEllipsizeMode;
    pub fn gtk_label_set_width_chars(label: *mut GtkLabel, n_chars: gint);
    pub fn gtk_label_get_width_chars(label: *mut GtkLabel) -> gint;
    pub fn gtk_label_set_max_width_chars(label: *mut GtkLabel, n_chars: gint);
    pub fn gtk_label_get_max_width_chars(label: *mut GtkLabel) -> gint;
    pub fn gtk_label_set_lines(label: *mut GtkLabel, lines: gint);
    pub fn gtk_label_get_lines(label: *mut GtkLabel) -> gint;
    pub fn gtk_label_set_pattern(label: *mut GtkLabel, pattern: *gchar);
    pub fn gtk_label_set_line_wrap(label: *mut GtkLabel, wrap: gboolean);
    pub fn gtk_label_get_line_wrap(label: *mut GtkLabel) -> gboolean;
    pub fn gtk_label_set_line_wrap_mode(label: *mut GtkLabel,
                                        wrap_mode: PangoWrapMode);
    pub fn gtk_label_get_line_wrap_mode(label: *mut GtkLabel) ->
     PangoWrapMode;
    pub fn gtk_label_set_selectable(label: *mut GtkLabel, setting: gboolean);
    pub fn gtk_label_get_selectable(label: *mut GtkLabel) -> gboolean;
    pub fn gtk_label_set_angle(label: *mut GtkLabel, angle: gdouble);
    pub fn gtk_label_get_angle(label: *mut GtkLabel) -> gdouble;
    pub fn gtk_label_select_region(label: *mut GtkLabel, start_offset: gint,
                                   end_offset: gint);
    pub fn gtk_label_get_selection_bounds(label: *mut GtkLabel,
                                          start: *mut gint, end: *mut gint) ->
     gboolean;
    pub fn gtk_label_get_layout(label: *mut GtkLabel) -> *mut PangoLayout;
    pub fn gtk_label_get_layout_offsets(label: *mut GtkLabel, x: *mut gint,
                                        y: *mut gint);
    pub fn gtk_label_set_single_line_mode(label: *mut GtkLabel,
                                          single_line_mode: gboolean);
    pub fn gtk_label_get_single_line_mode(label: *mut GtkLabel) -> gboolean;
    pub fn gtk_label_get_current_uri(label: *mut GtkLabel) -> *gchar;
    pub fn gtk_label_set_track_visited_links(label: *mut GtkLabel,
                                             track_links: gboolean);
    pub fn gtk_label_get_track_visited_links(label: *mut GtkLabel) ->
     gboolean;
    pub fn _gtk_label_mnemonics_visible_apply_recursively(widget:
                                                              *mut GtkWidget,
                                                          mnemonics_visible:
                                                              gboolean);
    pub fn _gtk_label_get_cursor_position(label: *mut GtkLabel) -> gint;
    pub fn _gtk_label_get_selection_bound(label: *mut GtkLabel) -> gint;
    pub fn gtk_accel_label_get_type() -> GType;
    pub fn gtk_accel_label_new(string: *gchar) -> *mut GtkWidget;
    pub fn gtk_accel_label_get_accel_widget(accel_label: *mut GtkAccelLabel)
     -> *mut GtkWidget;
    pub fn gtk_accel_label_get_accel_width(accel_label: *mut GtkAccelLabel) ->
     guint;
    pub fn gtk_accel_label_set_accel_widget(accel_label: *mut GtkAccelLabel,
                                            accel_widget: *mut GtkWidget);
    pub fn gtk_accel_label_set_accel_closure(accel_label: *mut GtkAccelLabel,
                                             accel_closure: *mut GClosure);
    pub fn gtk_accel_label_refetch(accel_label: *mut GtkAccelLabel) ->
     gboolean;
    pub fn gtk_accel_label_set_accel(accel_label: *mut GtkAccelLabel,
                                     accelerator_key: guint,
                                     accelerator_mods: GdkModifierType);
    pub fn _gtk_accel_label_class_get_accelerator_label(klass:
                                                            *mut GtkAccelLabelClass,
                                                        accelerator_key:
                                                            guint,
                                                        accelerator_mods:
                                                            GdkModifierType)
     -> *mut gchar;
    pub fn gtk_accel_map_add_entry(accel_path: *gchar, accel_key: guint,
                                   accel_mods: GdkModifierType);
    pub fn gtk_accel_map_lookup_entry(accel_path: *gchar,
                                      key: *mut GtkAccelKey) -> gboolean;
    pub fn gtk_accel_map_change_entry(accel_path: *gchar, accel_key: guint,
                                      accel_mods: GdkModifierType,
                                      replace: gboolean) -> gboolean;
    pub fn gtk_accel_map_load(file_name: *gchar);
    pub fn gtk_accel_map_save(file_name: *gchar);
    pub fn gtk_accel_map_foreach(data: gpointer,
                                 foreach_func: GtkAccelMapForeach);
    pub fn gtk_accel_map_load_fd(fd: gint);
    pub fn gtk_accel_map_load_scanner(scanner: *mut GScanner);
    pub fn gtk_accel_map_save_fd(fd: gint);
    pub fn gtk_accel_map_lock_path(accel_path: *gchar);
    pub fn gtk_accel_map_unlock_path(accel_path: *gchar);
    pub fn gtk_accel_map_add_filter(filter_pattern: *gchar);
    pub fn gtk_accel_map_foreach_unfiltered(data: gpointer,
                                            foreach_func: GtkAccelMapForeach);
    pub fn gtk_accel_map_get_type() -> GType;
    pub fn gtk_accel_map_get() -> *mut GtkAccelMap;
    pub fn gtk_accessible_get_type() -> GType;
    pub fn gtk_accessible_set_widget(accessible: *mut GtkAccessible,
                                     widget: *mut GtkWidget);
    pub fn gtk_accessible_get_widget(accessible: *mut GtkAccessible) ->
     *mut GtkWidget;
    pub fn gtk_accessible_connect_widget_destroyed(accessible:
                                                       *mut GtkAccessible);
    pub fn gtk_actionable_get_type() -> GType;
    pub fn gtk_actionable_get_action_name(actionable: *mut GtkActionable) ->
     *gchar;
    pub fn gtk_actionable_set_action_name(actionable: *mut GtkActionable,
                                          action_name: *gchar);
    pub fn gtk_actionable_get_action_target_value(actionable:
                                                      *mut GtkActionable) ->
     *mut GVariant;
    pub fn gtk_actionable_set_action_target_value(actionable:
                                                      *mut GtkActionable,
                                                  target_value:
                                                      *mut GVariant);
    pub fn gtk_actionable_set_action_target(actionable: *mut GtkActionable,
                                            format_string: *gchar, ...);
    pub fn gtk_actionable_set_detailed_action_name(actionable:
                                                       *mut GtkActionable,
                                                   detailed_action_name:
                                                       *gchar);
    pub fn gtk_adjustment_get_type() -> GType;
    pub fn gtk_adjustment_new(value: gdouble, lower: gdouble, upper: gdouble,
                              step_increment: gdouble,
                              page_increment: gdouble, page_size: gdouble) ->
     *mut GtkAdjustment;
    pub fn gtk_adjustment_changed(adjustment: *mut GtkAdjustment);
    pub fn gtk_adjustment_value_changed(adjustment: *mut GtkAdjustment);
    pub fn gtk_adjustment_clamp_page(adjustment: *mut GtkAdjustment,
                                     lower: gdouble, upper: gdouble);
    pub fn gtk_adjustment_get_value(adjustment: *mut GtkAdjustment) ->
     gdouble;
    pub fn gtk_adjustment_set_value(adjustment: *mut GtkAdjustment,
                                    value: gdouble);
    pub fn gtk_adjustment_get_lower(adjustment: *mut GtkAdjustment) ->
     gdouble;
    pub fn gtk_adjustment_set_lower(adjustment: *mut GtkAdjustment,
                                    lower: gdouble);
    pub fn gtk_adjustment_get_upper(adjustment: *mut GtkAdjustment) ->
     gdouble;
    pub fn gtk_adjustment_set_upper(adjustment: *mut GtkAdjustment,
                                    upper: gdouble);
    pub fn gtk_adjustment_get_step_increment(adjustment: *mut GtkAdjustment)
     -> gdouble;
    pub fn gtk_adjustment_set_step_increment(adjustment: *mut GtkAdjustment,
                                             step_increment: gdouble);
    pub fn gtk_adjustment_get_page_increment(adjustment: *mut GtkAdjustment)
     -> gdouble;
    pub fn gtk_adjustment_set_page_increment(adjustment: *mut GtkAdjustment,
                                             page_increment: gdouble);
    pub fn gtk_adjustment_get_page_size(adjustment: *mut GtkAdjustment) ->
     gdouble;
    pub fn gtk_adjustment_set_page_size(adjustment: *mut GtkAdjustment,
                                        page_size: gdouble);
    pub fn gtk_adjustment_configure(adjustment: *mut GtkAdjustment,
                                    value: gdouble, lower: gdouble,
                                    upper: gdouble, step_increment: gdouble,
                                    page_increment: gdouble,
                                    page_size: gdouble);
    pub fn gtk_adjustment_get_minimum_increment(adjustment:
                                                    *mut GtkAdjustment) ->
     gdouble;
    pub fn gtk_alignment_get_type() -> GType;
    pub fn gtk_alignment_new(xalign: gfloat, yalign: gfloat, xscale: gfloat,
                             yscale: gfloat) -> *mut GtkWidget;
    pub fn gtk_alignment_set(alignment: *mut GtkAlignment, xalign: gfloat,
                             yalign: gfloat, xscale: gfloat, yscale: gfloat);
    pub fn gtk_alignment_set_padding(alignment: *mut GtkAlignment,
                                     padding_top: guint,
                                     padding_bottom: guint,
                                     padding_left: guint,
                                     padding_right: guint);
    pub fn gtk_alignment_get_padding(alignment: *mut GtkAlignment,
                                     padding_top: *mut guint,
                                     padding_bottom: *mut guint,
                                     padding_left: *mut guint,
                                     padding_right: *mut guint);
    pub fn gtk_app_chooser_get_type() -> GType;
    pub fn gtk_app_chooser_get_app_info(_self: *mut GtkAppChooser) ->
     *mut GAppInfo;
    pub fn gtk_app_chooser_get_content_type(_self: *mut GtkAppChooser) ->
     *mut gchar;
    pub fn gtk_app_chooser_refresh(_self: *mut GtkAppChooser);
    pub fn gtk_app_chooser_dialog_get_type() -> GType;
    pub fn gtk_app_chooser_dialog_new(parent: *mut GtkWindow,
                                      flags: GtkDialogFlags, file: *mut GFile)
     -> *mut GtkWidget;
    pub fn gtk_app_chooser_dialog_new_for_content_type(parent: *mut GtkWindow,
                                                       flags: GtkDialogFlags,
                                                       content_type: *gchar)
     -> *mut GtkWidget;
    pub fn gtk_app_chooser_dialog_get_widget(_self: *mut GtkAppChooserDialog)
     -> *mut GtkWidget;
    pub fn gtk_app_chooser_dialog_set_heading(_self: *mut GtkAppChooserDialog,
                                              heading: *gchar);
    pub fn gtk_app_chooser_dialog_get_heading(_self: *mut GtkAppChooserDialog)
     -> *gchar;
    pub fn gtk_box_get_type() -> GType;
    pub fn gtk_box_new(orientation: GtkOrientation, spacing: gint) ->
     *mut GtkWidget;
    pub fn gtk_box_pack_start(box: *mut GtkBox, child: *mut GtkWidget,
                              expand: gboolean, fill: gboolean,
                              padding: guint);
    pub fn gtk_box_pack_end(box: *mut GtkBox, child: *mut GtkWidget,
                            expand: gboolean, fill: gboolean, padding: guint);
    pub fn gtk_box_set_homogeneous(box: *mut GtkBox, homogeneous: gboolean);
    pub fn gtk_box_get_homogeneous(box: *mut GtkBox) -> gboolean;
    pub fn gtk_box_set_spacing(box: *mut GtkBox, spacing: gint);
    pub fn gtk_box_get_spacing(box: *mut GtkBox) -> gint;
    pub fn gtk_box_set_baseline_position(box: *mut GtkBox,
                                         position: GtkBaselinePosition);
    pub fn gtk_box_get_baseline_position(box: *mut GtkBox) ->
     GtkBaselinePosition;
    pub fn gtk_box_reorder_child(box: *mut GtkBox, child: *mut GtkWidget,
                                 position: gint);
    pub fn gtk_box_query_child_packing(box: *mut GtkBox,
                                       child: *mut GtkWidget,
                                       expand: *mut gboolean,
                                       fill: *mut gboolean,
                                       padding: *mut guint,
                                       pack_type: *mut GtkPackType);
    pub fn gtk_box_set_child_packing(box: *mut GtkBox, child: *mut GtkWidget,
                                     expand: gboolean, fill: gboolean,
                                     padding: guint, pack_type: GtkPackType);
    pub fn gtk_app_chooser_widget_get_type() -> GType;
    pub fn gtk_app_chooser_widget_new(content_type: *gchar) -> *mut GtkWidget;
    pub fn gtk_app_chooser_widget_set_show_default(_self:
                                                       *mut GtkAppChooserWidget,
                                                   setting: gboolean);
    pub fn gtk_app_chooser_widget_get_show_default(_self:
                                                       *mut GtkAppChooserWidget)
     -> gboolean;
    pub fn gtk_app_chooser_widget_set_show_recommended(_self:
                                                           *mut GtkAppChooserWidget,
                                                       setting: gboolean);
    pub fn gtk_app_chooser_widget_get_show_recommended(_self:
                                                           *mut GtkAppChooserWidget)
     -> gboolean;
    pub fn gtk_app_chooser_widget_set_show_fallback(_self:
                                                        *mut GtkAppChooserWidget,
                                                    setting: gboolean);
    pub fn gtk_app_chooser_widget_get_show_fallback(_self:
                                                        *mut GtkAppChooserWidget)
     -> gboolean;
    pub fn gtk_app_chooser_widget_set_show_other(_self:
                                                     *mut GtkAppChooserWidget,
                                                 setting: gboolean);
    pub fn gtk_app_chooser_widget_get_show_other(_self:
                                                     *mut GtkAppChooserWidget)
     -> gboolean;
    pub fn gtk_app_chooser_widget_set_show_all(_self:
                                                   *mut GtkAppChooserWidget,
                                               setting: gboolean);
    pub fn gtk_app_chooser_widget_get_show_all(_self:
                                                   *mut GtkAppChooserWidget)
     -> gboolean;
    pub fn gtk_app_chooser_widget_set_default_text(_self:
                                                       *mut GtkAppChooserWidget,
                                                   text: *gchar);
    pub fn gtk_app_chooser_widget_get_default_text(_self:
                                                       *mut GtkAppChooserWidget)
     -> *gchar;
    pub fn gtk_tree_path_new() -> *mut GtkTreePath;
    pub fn gtk_tree_path_new_from_string(path: *gchar) -> *mut GtkTreePath;
    pub fn gtk_tree_path_new_from_indices(first_index: gint, ...) ->
     *mut GtkTreePath;
    pub fn gtk_tree_path_to_string(path: *mut GtkTreePath) -> *mut gchar;
    pub fn gtk_tree_path_new_first() -> *mut GtkTreePath;
    pub fn gtk_tree_path_append_index(path: *mut GtkTreePath, index_: gint);
    pub fn gtk_tree_path_prepend_index(path: *mut GtkTreePath, index_: gint);
    pub fn gtk_tree_path_get_depth(path: *mut GtkTreePath) -> gint;
    pub fn gtk_tree_path_get_indices(path: *mut GtkTreePath) -> *mut gint;
    pub fn gtk_tree_path_get_indices_with_depth(path: *mut GtkTreePath,
                                                depth: *mut gint) ->
     *mut gint;
    pub fn gtk_tree_path_free(path: *mut GtkTreePath);
    pub fn gtk_tree_path_copy(path: *GtkTreePath) -> *mut GtkTreePath;
    pub fn gtk_tree_path_get_type() -> GType;
    pub fn gtk_tree_path_compare(a: *GtkTreePath, b: *GtkTreePath) -> gint;
    pub fn gtk_tree_path_next(path: *mut GtkTreePath);
    pub fn gtk_tree_path_prev(path: *mut GtkTreePath) -> gboolean;
    pub fn gtk_tree_path_up(path: *mut GtkTreePath) -> gboolean;
    pub fn gtk_tree_path_down(path: *mut GtkTreePath);
    pub fn gtk_tree_path_is_ancestor(path: *mut GtkTreePath,
                                     descendant: *mut GtkTreePath) ->
     gboolean;
    pub fn gtk_tree_path_is_descendant(path: *mut GtkTreePath,
                                       ancestor: *mut GtkTreePath) ->
     gboolean;
    pub fn gtk_tree_row_reference_get_type() -> GType;
    pub fn gtk_tree_row_reference_new(model: *mut GtkTreeModel,
                                      path: *mut GtkTreePath) ->
     *mut GtkTreeRowReference;
    pub fn gtk_tree_row_reference_new_proxy(proxy: *mut GObject,
                                            model: *mut GtkTreeModel,
                                            path: *mut GtkTreePath) ->
     *mut GtkTreeRowReference;
    pub fn gtk_tree_row_reference_get_path(reference:
                                               *mut GtkTreeRowReference) ->
     *mut GtkTreePath;
    pub fn gtk_tree_row_reference_get_model(reference:
                                                *mut GtkTreeRowReference) ->
     *mut GtkTreeModel;
    pub fn gtk_tree_row_reference_valid(reference: *mut GtkTreeRowReference)
     -> gboolean;
    pub fn gtk_tree_row_reference_copy(reference: *mut GtkTreeRowReference) ->
     *mut GtkTreeRowReference;
    pub fn gtk_tree_row_reference_free(reference: *mut GtkTreeRowReference);
    pub fn gtk_tree_row_reference_inserted(proxy: *mut GObject,
                                           path: *mut GtkTreePath);
    pub fn gtk_tree_row_reference_deleted(proxy: *mut GObject,
                                          path: *mut GtkTreePath);
    pub fn gtk_tree_row_reference_reordered(proxy: *mut GObject,
                                            path: *mut GtkTreePath,
                                            iter: *mut GtkTreeIter,
                                            new_order: *mut gint);
    pub fn gtk_tree_iter_copy(iter: *mut GtkTreeIter) -> *mut GtkTreeIter;
    pub fn gtk_tree_iter_free(iter: *mut GtkTreeIter);
    pub fn gtk_tree_iter_get_type() -> GType;
    pub fn gtk_tree_model_get_type() -> GType;
    pub fn gtk_tree_model_get_flags(tree_model: *mut GtkTreeModel) ->
     GtkTreeModelFlags;
    pub fn gtk_tree_model_get_n_columns(tree_model: *mut GtkTreeModel) ->
     gint;
    pub fn gtk_tree_model_get_column_type(tree_model: *mut GtkTreeModel,
                                          index_: gint) -> GType;
    pub fn gtk_tree_model_get_iter(tree_model: *mut GtkTreeModel,
                                   iter: *mut GtkTreeIter,
                                   path: *mut GtkTreePath) -> gboolean;
    pub fn gtk_tree_model_get_iter_from_string(tree_model: *mut GtkTreeModel,
                                               iter: *mut GtkTreeIter,
                                               path_string: *gchar) ->
     gboolean;
    pub fn gtk_tree_model_get_string_from_iter(tree_model: *mut GtkTreeModel,
                                               iter: *mut GtkTreeIter) ->
     *mut gchar;
    pub fn gtk_tree_model_get_iter_first(tree_model: *mut GtkTreeModel,
                                         iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_model_get_path(tree_model: *mut GtkTreeModel,
                                   iter: *mut GtkTreeIter) ->
     *mut GtkTreePath;
    pub fn gtk_tree_model_get_value(tree_model: *mut GtkTreeModel,
                                    iter: *mut GtkTreeIter, column: gint,
                                    value: *mut GValue);
    pub fn gtk_tree_model_iter_previous(tree_model: *mut GtkTreeModel,
                                        iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_model_iter_next(tree_model: *mut GtkTreeModel,
                                    iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_model_iter_children(tree_model: *mut GtkTreeModel,
                                        iter: *mut GtkTreeIter,
                                        parent: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_model_iter_has_child(tree_model: *mut GtkTreeModel,
                                         iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_model_iter_n_children(tree_model: *mut GtkTreeModel,
                                          iter: *mut GtkTreeIter) -> gint;
    pub fn gtk_tree_model_iter_nth_child(tree_model: *mut GtkTreeModel,
                                         iter: *mut GtkTreeIter,
                                         parent: *mut GtkTreeIter, n: gint) ->
     gboolean;
    pub fn gtk_tree_model_iter_parent(tree_model: *mut GtkTreeModel,
                                      iter: *mut GtkTreeIter,
                                      child: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_model_ref_node(tree_model: *mut GtkTreeModel,
                                   iter: *mut GtkTreeIter);
    pub fn gtk_tree_model_unref_node(tree_model: *mut GtkTreeModel,
                                     iter: *mut GtkTreeIter);
    pub fn gtk_tree_model_get(tree_model: *mut GtkTreeModel,
                              iter: *mut GtkTreeIter, ...);
    pub fn gtk_tree_model_get_valist(tree_model: *mut GtkTreeModel,
                                     iter: *mut GtkTreeIter,
                                     var_args: va_list);
    pub fn gtk_tree_model_foreach(model: *mut GtkTreeModel,
                                  func: GtkTreeModelForeachFunc,
                                  user_data: gpointer);
    pub fn gtk_tree_model_row_changed(tree_model: *mut GtkTreeModel,
                                      path: *mut GtkTreePath,
                                      iter: *mut GtkTreeIter);
    pub fn gtk_tree_model_row_inserted(tree_model: *mut GtkTreeModel,
                                       path: *mut GtkTreePath,
                                       iter: *mut GtkTreeIter);
    pub fn gtk_tree_model_row_has_child_toggled(tree_model: *mut GtkTreeModel,
                                                path: *mut GtkTreePath,
                                                iter: *mut GtkTreeIter);
    pub fn gtk_tree_model_row_deleted(tree_model: *mut GtkTreeModel,
                                      path: *mut GtkTreePath);
    pub fn gtk_tree_model_rows_reordered(tree_model: *mut GtkTreeModel,
                                         path: *mut GtkTreePath,
                                         iter: *mut GtkTreeIter,
                                         new_order: *mut gint);
    pub fn gtk_tree_model_rows_reordered_with_length(tree_model:
                                                         *mut GtkTreeModel,
                                                     path: *mut GtkTreePath,
                                                     iter: *mut GtkTreeIter,
                                                     new_order: *mut gint,
                                                     length: gint);
    pub fn gtk_cell_editable_get_type() -> GType;
    pub fn gtk_cell_editable_start_editing(cell_editable:
                                               *mut GtkCellEditable,
                                           event: *mut GdkEvent);
    pub fn gtk_cell_editable_editing_done(cell_editable:
                                              *mut GtkCellEditable);
    pub fn gtk_cell_editable_remove_widget(cell_editable:
                                               *mut GtkCellEditable);
    pub fn gtk_cell_renderer_get_type() -> GType;
    pub fn gtk_cell_renderer_get_request_mode(cell: *mut GtkCellRenderer) ->
     GtkSizeRequestMode;
    pub fn gtk_cell_renderer_get_preferred_width(cell: *mut GtkCellRenderer,
                                                 widget: *mut GtkWidget,
                                                 minimum_size: *mut gint,
                                                 natural_size: *mut gint);
    pub fn gtk_cell_renderer_get_preferred_height_for_width(cell:
                                                                *mut GtkCellRenderer,
                                                            widget:
                                                                *mut GtkWidget,
                                                            width: gint,
                                                            minimum_height:
                                                                *mut gint,
                                                            natural_height:
                                                                *mut gint);
    pub fn gtk_cell_renderer_get_preferred_height(cell: *mut GtkCellRenderer,
                                                  widget: *mut GtkWidget,
                                                  minimum_size: *mut gint,
                                                  natural_size: *mut gint);
    pub fn gtk_cell_renderer_get_preferred_width_for_height(cell:
                                                                *mut GtkCellRenderer,
                                                            widget:
                                                                *mut GtkWidget,
                                                            height: gint,
                                                            minimum_width:
                                                                *mut gint,
                                                            natural_width:
                                                                *mut gint);
    pub fn gtk_cell_renderer_get_preferred_size(cell: *mut GtkCellRenderer,
                                                widget: *mut GtkWidget,
                                                minimum_size:
                                                    *mut GtkRequisition,
                                                natural_size:
                                                    *mut GtkRequisition);
    pub fn gtk_cell_renderer_get_aligned_area(cell: *mut GtkCellRenderer,
                                              widget: *mut GtkWidget,
                                              flags: GtkCellRendererState,
                                              cell_area: *GdkRectangle,
                                              aligned_area:
                                                  *mut GdkRectangle);
    pub fn gtk_cell_renderer_get_size(cell: *mut GtkCellRenderer,
                                      widget: *mut GtkWidget,
                                      cell_area: *GdkRectangle,
                                      x_offset: *mut gint,
                                      y_offset: *mut gint, width: *mut gint,
                                      height: *mut gint);
    pub fn gtk_cell_renderer_render(cell: *mut GtkCellRenderer,
                                    cr: *mut cairo_t, widget: *mut GtkWidget,
                                    background_area: *GdkRectangle,
                                    cell_area: *GdkRectangle,
                                    flags: GtkCellRendererState);
    pub fn gtk_cell_renderer_activate(cell: *mut GtkCellRenderer,
                                      event: *mut GdkEvent,
                                      widget: *mut GtkWidget, path: *gchar,
                                      background_area: *GdkRectangle,
                                      cell_area: *GdkRectangle,
                                      flags: GtkCellRendererState) ->
     gboolean;
    pub fn gtk_cell_renderer_start_editing(cell: *mut GtkCellRenderer,
                                           event: *mut GdkEvent,
                                           widget: *mut GtkWidget,
                                           path: *gchar,
                                           background_area: *GdkRectangle,
                                           cell_area: *GdkRectangle,
                                           flags: GtkCellRendererState) ->
     *mut GtkCellEditable;
    pub fn gtk_cell_renderer_set_fixed_size(cell: *mut GtkCellRenderer,
                                            width: gint, height: gint);
    pub fn gtk_cell_renderer_get_fixed_size(cell: *mut GtkCellRenderer,
                                            width: *mut gint,
                                            height: *mut gint);
    pub fn gtk_cell_renderer_set_alignment(cell: *mut GtkCellRenderer,
                                           xalign: gfloat, yalign: gfloat);
    pub fn gtk_cell_renderer_get_alignment(cell: *mut GtkCellRenderer,
                                           xalign: *mut gfloat,
                                           yalign: *mut gfloat);
    pub fn gtk_cell_renderer_set_padding(cell: *mut GtkCellRenderer,
                                         xpad: gint, ypad: gint);
    pub fn gtk_cell_renderer_get_padding(cell: *mut GtkCellRenderer,
                                         xpad: *mut gint, ypad: *mut gint);
    pub fn gtk_cell_renderer_set_visible(cell: *mut GtkCellRenderer,
                                         visible: gboolean);
    pub fn gtk_cell_renderer_get_visible(cell: *mut GtkCellRenderer) ->
     gboolean;
    pub fn gtk_cell_renderer_set_sensitive(cell: *mut GtkCellRenderer,
                                           sensitive: gboolean);
    pub fn gtk_cell_renderer_get_sensitive(cell: *mut GtkCellRenderer) ->
     gboolean;
    pub fn gtk_cell_renderer_is_activatable(cell: *mut GtkCellRenderer) ->
     gboolean;
    pub fn gtk_cell_renderer_stop_editing(cell: *mut GtkCellRenderer,
                                          canceled: gboolean);
    pub fn _gtk_cell_renderer_calc_offset(cell: *mut GtkCellRenderer,
                                          cell_area: *GdkRectangle,
                                          direction: GtkTextDirection,
                                          width: gint, height: gint,
                                          x_offset: *mut gint,
                                          y_offset: *mut gint);
    pub fn gtk_cell_renderer_get_state(cell: *mut GtkCellRenderer,
                                       widget: *mut GtkWidget,
                                       cell_state: GtkCellRendererState) ->
     GtkStateFlags;
    pub fn gtk_cell_renderer_class_set_accessible_type(renderer_class:
                                                           *mut GtkCellRendererClass,
                                                       _type: GType);
    pub fn _gtk_cell_renderer_get_accessible_type(renderer:
                                                      *mut GtkCellRenderer) ->
     GType;
    pub fn gtk_tree_sortable_get_type() -> GType;
    pub fn gtk_tree_sortable_sort_column_changed(sortable:
                                                     *mut GtkTreeSortable);
    pub fn gtk_tree_sortable_get_sort_column_id(sortable:
                                                    *mut GtkTreeSortable,
                                                sort_column_id: *mut gint,
                                                order: *mut GtkSortType) ->
     gboolean;
    pub fn gtk_tree_sortable_set_sort_column_id(sortable:
                                                    *mut GtkTreeSortable,
                                                sort_column_id: gint,
                                                order: GtkSortType);
    pub fn gtk_tree_sortable_set_sort_func(sortable: *mut GtkTreeSortable,
                                           sort_column_id: gint,
                                           sort_func: GtkTreeIterCompareFunc,
                                           user_data: gpointer,
                                           destroy: GDestroyNotify);
    pub fn gtk_tree_sortable_set_default_sort_func(sortable:
                                                       *mut GtkTreeSortable,
                                                   sort_func:
                                                       GtkTreeIterCompareFunc,
                                                   user_data: gpointer,
                                                   destroy: GDestroyNotify);
    pub fn gtk_tree_sortable_has_default_sort_func(sortable:
                                                       *mut GtkTreeSortable)
     -> gboolean;
    pub fn gtk_cell_area_get_type() -> GType;
    pub fn gtk_cell_area_add(area: *mut GtkCellArea,
                             renderer: *mut GtkCellRenderer);
    pub fn gtk_cell_area_remove(area: *mut GtkCellArea,
                                renderer: *mut GtkCellRenderer);
    pub fn gtk_cell_area_has_renderer(area: *mut GtkCellArea,
                                      renderer: *mut GtkCellRenderer) ->
     gboolean;
    pub fn gtk_cell_area_foreach(area: *mut GtkCellArea,
                                 callback: GtkCellCallback,
                                 callback_data: gpointer);
    pub fn gtk_cell_area_foreach_alloc(area: *mut GtkCellArea,
                                       context: *mut GtkCellAreaContext,
                                       widget: *mut GtkWidget,
                                       cell_area: *GdkRectangle,
                                       background_area: *GdkRectangle,
                                       callback: GtkCellAllocCallback,
                                       callback_data: gpointer);
    pub fn gtk_cell_area_event(area: *mut GtkCellArea,
                               context: *mut GtkCellAreaContext,
                               widget: *mut GtkWidget, event: *mut GdkEvent,
                               cell_area: *GdkRectangle,
                               flags: GtkCellRendererState) -> gint;
    pub fn gtk_cell_area_render(area: *mut GtkCellArea,
                                context: *mut GtkCellAreaContext,
                                widget: *mut GtkWidget, cr: *mut cairo_t,
                                background_area: *GdkRectangle,
                                cell_area: *GdkRectangle,
                                flags: GtkCellRendererState,
                                paint_focus: gboolean);
    pub fn gtk_cell_area_get_cell_allocation(area: *mut GtkCellArea,
                                             context: *mut GtkCellAreaContext,
                                             widget: *mut GtkWidget,
                                             renderer: *mut GtkCellRenderer,
                                             cell_area: *GdkRectangle,
                                             allocation: *mut GdkRectangle);
    pub fn gtk_cell_area_get_cell_at_position(area: *mut GtkCellArea,
                                              context:
                                                  *mut GtkCellAreaContext,
                                              widget: *mut GtkWidget,
                                              cell_area: *GdkRectangle,
                                              x: gint, y: gint,
                                              alloc_area: *mut GdkRectangle)
     -> *mut GtkCellRenderer;
    pub fn gtk_cell_area_create_context(area: *mut GtkCellArea) ->
     *mut GtkCellAreaContext;
    pub fn gtk_cell_area_copy_context(area: *mut GtkCellArea,
                                      context: *mut GtkCellAreaContext) ->
     *mut GtkCellAreaContext;
    pub fn gtk_cell_area_get_request_mode(area: *mut GtkCellArea) ->
     GtkSizeRequestMode;
    pub fn gtk_cell_area_get_preferred_width(area: *mut GtkCellArea,
                                             context: *mut GtkCellAreaContext,
                                             widget: *mut GtkWidget,
                                             minimum_width: *mut gint,
                                             natural_width: *mut gint);
    pub fn gtk_cell_area_get_preferred_height_for_width(area:
                                                            *mut GtkCellArea,
                                                        context:
                                                            *mut GtkCellAreaContext,
                                                        widget:
                                                            *mut GtkWidget,
                                                        width: gint,
                                                        minimum_height:
                                                            *mut gint,
                                                        natural_height:
                                                            *mut gint);
    pub fn gtk_cell_area_get_preferred_height(area: *mut GtkCellArea,
                                              context:
                                                  *mut GtkCellAreaContext,
                                              widget: *mut GtkWidget,
                                              minimum_height: *mut gint,
                                              natural_height: *mut gint);
    pub fn gtk_cell_area_get_preferred_width_for_height(area:
                                                            *mut GtkCellArea,
                                                        context:
                                                            *mut GtkCellAreaContext,
                                                        widget:
                                                            *mut GtkWidget,
                                                        height: gint,
                                                        minimum_width:
                                                            *mut gint,
                                                        natural_width:
                                                            *mut gint);
    pub fn gtk_cell_area_get_current_path_string(area: *mut GtkCellArea) ->
     *gchar;
    pub fn gtk_cell_area_apply_attributes(area: *mut GtkCellArea,
                                          tree_model: *mut GtkTreeModel,
                                          iter: *mut GtkTreeIter,
                                          is_expander: gboolean,
                                          is_expanded: gboolean);
    pub fn gtk_cell_area_attribute_connect(area: *mut GtkCellArea,
                                           renderer: *mut GtkCellRenderer,
                                           attribute: *gchar, column: gint);
    pub fn gtk_cell_area_attribute_disconnect(area: *mut GtkCellArea,
                                              renderer: *mut GtkCellRenderer,
                                              attribute: *gchar);
    pub fn gtk_cell_area_class_install_cell_property(aclass:
                                                         *mut GtkCellAreaClass,
                                                     property_id: guint,
                                                     pspec: *mut GParamSpec);
    pub fn gtk_cell_area_class_find_cell_property(aclass:
                                                      *mut GtkCellAreaClass,
                                                  property_name: *gchar) ->
     *mut GParamSpec;
    pub fn gtk_cell_area_class_list_cell_properties(aclass:
                                                        *mut GtkCellAreaClass,
                                                    n_properties: *mut guint)
     -> *mut *mut GParamSpec;
    pub fn gtk_cell_area_add_with_properties(area: *mut GtkCellArea,
                                             renderer: *mut GtkCellRenderer,
                                             first_prop_name: *gchar, ...);
    pub fn gtk_cell_area_cell_set(area: *mut GtkCellArea,
                                  renderer: *mut GtkCellRenderer,
                                  first_prop_name: *gchar, ...);
    pub fn gtk_cell_area_cell_get(area: *mut GtkCellArea,
                                  renderer: *mut GtkCellRenderer,
                                  first_prop_name: *gchar, ...);
    pub fn gtk_cell_area_cell_set_valist(area: *mut GtkCellArea,
                                         renderer: *mut GtkCellRenderer,
                                         first_property_name: *gchar,
                                         var_args: va_list);
    pub fn gtk_cell_area_cell_get_valist(area: *mut GtkCellArea,
                                         renderer: *mut GtkCellRenderer,
                                         first_property_name: *gchar,
                                         var_args: va_list);
    pub fn gtk_cell_area_cell_set_property(area: *mut GtkCellArea,
                                           renderer: *mut GtkCellRenderer,
                                           property_name: *gchar,
                                           value: *GValue);
    pub fn gtk_cell_area_cell_get_property(area: *mut GtkCellArea,
                                           renderer: *mut GtkCellRenderer,
                                           property_name: *gchar,
                                           value: *mut GValue);
    pub fn gtk_cell_area_is_activatable(area: *mut GtkCellArea) -> gboolean;
    pub fn gtk_cell_area_activate(area: *mut GtkCellArea,
                                  context: *mut GtkCellAreaContext,
                                  widget: *mut GtkWidget,
                                  cell_area: *GdkRectangle,
                                  flags: GtkCellRendererState,
                                  edit_only: gboolean) -> gboolean;
    pub fn gtk_cell_area_focus(area: *mut GtkCellArea,
                               direction: GtkDirectionType) -> gboolean;
    pub fn gtk_cell_area_set_focus_cell(area: *mut GtkCellArea,
                                        renderer: *mut GtkCellRenderer);
    pub fn gtk_cell_area_get_focus_cell(area: *mut GtkCellArea) ->
     *mut GtkCellRenderer;
    pub fn gtk_cell_area_add_focus_sibling(area: *mut GtkCellArea,
                                           renderer: *mut GtkCellRenderer,
                                           sibling: *mut GtkCellRenderer);
    pub fn gtk_cell_area_remove_focus_sibling(area: *mut GtkCellArea,
                                              renderer: *mut GtkCellRenderer,
                                              sibling: *mut GtkCellRenderer);
    pub fn gtk_cell_area_is_focus_sibling(area: *mut GtkCellArea,
                                          renderer: *mut GtkCellRenderer,
                                          sibling: *mut GtkCellRenderer) ->
     gboolean;
    pub fn gtk_cell_area_get_focus_siblings(area: *mut GtkCellArea,
                                            renderer: *mut GtkCellRenderer) ->
     *GList;
    pub fn gtk_cell_area_get_focus_from_sibling(area: *mut GtkCellArea,
                                                renderer:
                                                    *mut GtkCellRenderer) ->
     *mut GtkCellRenderer;
    pub fn gtk_cell_area_get_edited_cell(area: *mut GtkCellArea) ->
     *mut GtkCellRenderer;
    pub fn gtk_cell_area_get_edit_widget(area: *mut GtkCellArea) ->
     *mut GtkCellEditable;
    pub fn gtk_cell_area_activate_cell(area: *mut GtkCellArea,
                                       widget: *mut GtkWidget,
                                       renderer: *mut GtkCellRenderer,
                                       event: *mut GdkEvent,
                                       cell_area: *GdkRectangle,
                                       flags: GtkCellRendererState) ->
     gboolean;
    pub fn gtk_cell_area_stop_editing(area: *mut GtkCellArea,
                                      canceled: gboolean);
    pub fn gtk_cell_area_inner_cell_area(area: *mut GtkCellArea,
                                         widget: *mut GtkWidget,
                                         cell_area: *GdkRectangle,
                                         inner_area: *mut GdkRectangle);
    pub fn gtk_cell_area_request_renderer(area: *mut GtkCellArea,
                                          renderer: *mut GtkCellRenderer,
                                          orientation: GtkOrientation,
                                          widget: *mut GtkWidget,
                                          for_size: gint,
                                          minimum_size: *mut gint,
                                          natural_size: *mut gint);
    pub fn _gtk_cell_area_set_cell_data_func_with_proxy(area:
                                                            *mut GtkCellArea,
                                                        cell:
                                                            *mut GtkCellRenderer,
                                                        func: GFunc,
                                                        func_data: gpointer,
                                                        destroy:
                                                            GDestroyNotify,
                                                        proxy: gpointer);
    pub fn gtk_tree_view_column_get_type() -> GType;
    pub fn gtk_tree_view_column_new() -> *mut GtkTreeViewColumn;
    pub fn gtk_tree_view_column_new_with_area(area: *mut GtkCellArea) ->
     *mut GtkTreeViewColumn;
    pub fn gtk_tree_view_column_new_with_attributes(title: *gchar,
                                                    cell:
                                                        *mut GtkCellRenderer, ...)
     -> *mut GtkTreeViewColumn;
    pub fn gtk_tree_view_column_pack_start(tree_column:
                                               *mut GtkTreeViewColumn,
                                           cell: *mut GtkCellRenderer,
                                           expand: gboolean);
    pub fn gtk_tree_view_column_pack_end(tree_column: *mut GtkTreeViewColumn,
                                         cell: *mut GtkCellRenderer,
                                         expand: gboolean);
    pub fn gtk_tree_view_column_clear(tree_column: *mut GtkTreeViewColumn);
    pub fn gtk_tree_view_column_add_attribute(tree_column:
                                                  *mut GtkTreeViewColumn,
                                              cell_renderer:
                                                  *mut GtkCellRenderer,
                                              attribute: *gchar,
                                              column: gint);
    pub fn gtk_tree_view_column_set_attributes(tree_column:
                                                   *mut GtkTreeViewColumn,
                                               cell_renderer:
                                                   *mut GtkCellRenderer, ...);
    pub fn gtk_tree_view_column_set_cell_data_func(tree_column:
                                                       *mut GtkTreeViewColumn,
                                                   cell_renderer:
                                                       *mut GtkCellRenderer,
                                                   func: GtkTreeCellDataFunc,
                                                   func_data: gpointer,
                                                   destroy: GDestroyNotify);
    pub fn gtk_tree_view_column_clear_attributes(tree_column:
                                                     *mut GtkTreeViewColumn,
                                                 cell_renderer:
                                                     *mut GtkCellRenderer);
    pub fn gtk_tree_view_column_set_spacing(tree_column:
                                                *mut GtkTreeViewColumn,
                                            spacing: gint);
    pub fn gtk_tree_view_column_get_spacing(tree_column:
                                                *mut GtkTreeViewColumn) ->
     gint;
    pub fn gtk_tree_view_column_set_visible(tree_column:
                                                *mut GtkTreeViewColumn,
                                            visible: gboolean);
    pub fn gtk_tree_view_column_get_visible(tree_column:
                                                *mut GtkTreeViewColumn) ->
     gboolean;
    pub fn gtk_tree_view_column_set_resizable(tree_column:
                                                  *mut GtkTreeViewColumn,
                                              resizable: gboolean);
    pub fn gtk_tree_view_column_get_resizable(tree_column:
                                                  *mut GtkTreeViewColumn) ->
     gboolean;
    pub fn gtk_tree_view_column_set_sizing(tree_column:
                                               *mut GtkTreeViewColumn,
                                           _type: GtkTreeViewColumnSizing);
    pub fn gtk_tree_view_column_get_sizing(tree_column:
                                               *mut GtkTreeViewColumn) ->
     GtkTreeViewColumnSizing;
    pub fn gtk_tree_view_column_get_x_offset(tree_column:
                                                 *mut GtkTreeViewColumn) ->
     gint;
    pub fn gtk_tree_view_column_get_width(tree_column: *mut GtkTreeViewColumn)
     -> gint;
    pub fn gtk_tree_view_column_get_fixed_width(tree_column:
                                                    *mut GtkTreeViewColumn) ->
     gint;
    pub fn gtk_tree_view_column_set_fixed_width(tree_column:
                                                    *mut GtkTreeViewColumn,
                                                fixed_width: gint);
    pub fn gtk_tree_view_column_set_min_width(tree_column:
                                                  *mut GtkTreeViewColumn,
                                              min_width: gint);
    pub fn gtk_tree_view_column_get_min_width(tree_column:
                                                  *mut GtkTreeViewColumn) ->
     gint;
    pub fn gtk_tree_view_column_set_max_width(tree_column:
                                                  *mut GtkTreeViewColumn,
                                              max_width: gint);
    pub fn gtk_tree_view_column_get_max_width(tree_column:
                                                  *mut GtkTreeViewColumn) ->
     gint;
    pub fn gtk_tree_view_column_clicked(tree_column: *mut GtkTreeViewColumn);
    pub fn gtk_tree_view_column_set_title(tree_column: *mut GtkTreeViewColumn,
                                          title: *gchar);
    pub fn gtk_tree_view_column_get_title(tree_column: *mut GtkTreeViewColumn)
     -> *gchar;
    pub fn gtk_tree_view_column_set_expand(tree_column:
                                               *mut GtkTreeViewColumn,
                                           expand: gboolean);
    pub fn gtk_tree_view_column_get_expand(tree_column:
                                               *mut GtkTreeViewColumn) ->
     gboolean;
    pub fn gtk_tree_view_column_set_clickable(tree_column:
                                                  *mut GtkTreeViewColumn,
                                              clickable: gboolean);
    pub fn gtk_tree_view_column_get_clickable(tree_column:
                                                  *mut GtkTreeViewColumn) ->
     gboolean;
    pub fn gtk_tree_view_column_set_widget(tree_column:
                                               *mut GtkTreeViewColumn,
                                           widget: *mut GtkWidget);
    pub fn gtk_tree_view_column_get_widget(tree_column:
                                               *mut GtkTreeViewColumn) ->
     *mut GtkWidget;
    pub fn gtk_tree_view_column_set_alignment(tree_column:
                                                  *mut GtkTreeViewColumn,
                                              xalign: gfloat);
    pub fn gtk_tree_view_column_get_alignment(tree_column:
                                                  *mut GtkTreeViewColumn) ->
     gfloat;
    pub fn gtk_tree_view_column_set_reorderable(tree_column:
                                                    *mut GtkTreeViewColumn,
                                                reorderable: gboolean);
    pub fn gtk_tree_view_column_get_reorderable(tree_column:
                                                    *mut GtkTreeViewColumn) ->
     gboolean;
    pub fn gtk_tree_view_column_set_sort_column_id(tree_column:
                                                       *mut GtkTreeViewColumn,
                                                   sort_column_id: gint);
    pub fn gtk_tree_view_column_get_sort_column_id(tree_column:
                                                       *mut GtkTreeViewColumn)
     -> gint;
    pub fn gtk_tree_view_column_set_sort_indicator(tree_column:
                                                       *mut GtkTreeViewColumn,
                                                   setting: gboolean);
    pub fn gtk_tree_view_column_get_sort_indicator(tree_column:
                                                       *mut GtkTreeViewColumn)
     -> gboolean;
    pub fn gtk_tree_view_column_set_sort_order(tree_column:
                                                   *mut GtkTreeViewColumn,
                                               order: GtkSortType);
    pub fn gtk_tree_view_column_get_sort_order(tree_column:
                                                   *mut GtkTreeViewColumn) ->
     GtkSortType;
    pub fn gtk_tree_view_column_cell_set_cell_data(tree_column:
                                                       *mut GtkTreeViewColumn,
                                                   tree_model:
                                                       *mut GtkTreeModel,
                                                   iter: *mut GtkTreeIter,
                                                   is_expander: gboolean,
                                                   is_expanded: gboolean);
    pub fn gtk_tree_view_column_cell_get_size(tree_column:
                                                  *mut GtkTreeViewColumn,
                                              cell_area: *GdkRectangle,
                                              x_offset: *mut gint,
                                              y_offset: *mut gint,
                                              width: *mut gint,
                                              height: *mut gint);
    pub fn gtk_tree_view_column_cell_is_visible(tree_column:
                                                    *mut GtkTreeViewColumn) ->
     gboolean;
    pub fn gtk_tree_view_column_focus_cell(tree_column:
                                               *mut GtkTreeViewColumn,
                                           cell: *mut GtkCellRenderer);
    pub fn gtk_tree_view_column_cell_get_position(tree_column:
                                                      *mut GtkTreeViewColumn,
                                                  cell_renderer:
                                                      *mut GtkCellRenderer,
                                                  x_offset: *mut gint,
                                                  width: *mut gint) ->
     gboolean;
    pub fn gtk_tree_view_column_queue_resize(tree_column:
                                                 *mut GtkTreeViewColumn);
    pub fn gtk_tree_view_column_get_tree_view(tree_column:
                                                  *mut GtkTreeViewColumn) ->
     *mut GtkWidget;
    pub fn gtk_tree_view_column_get_button(tree_column:
                                               *mut GtkTreeViewColumn) ->
     *mut GtkWidget;
    pub fn gtk_text_attributes_new() -> *mut GtkTextAttributes;
    pub fn gtk_text_attributes_copy(src: *mut GtkTextAttributes) ->
     *mut GtkTextAttributes;
    pub fn gtk_text_attributes_copy_values(src: *mut GtkTextAttributes,
                                           dest: *mut GtkTextAttributes);
    pub fn gtk_text_attributes_unref(values: *mut GtkTextAttributes);
    pub fn gtk_text_attributes_ref(values: *mut GtkTextAttributes) ->
     *mut GtkTextAttributes;
    pub fn gtk_text_attributes_get_type() -> GType;
    pub fn gtk_text_child_anchor_get_type() -> GType;
    pub fn gtk_text_child_anchor_new() -> *mut GtkTextChildAnchor;
    pub fn gtk_text_child_anchor_get_widgets(anchor: *mut GtkTextChildAnchor)
     -> *mut GList;
    pub fn gtk_text_child_anchor_get_deleted(anchor: *mut GtkTextChildAnchor)
     -> gboolean;
    pub fn gtk_text_tag_get_type() -> GType;
    pub fn gtk_text_tag_new(name: *gchar) -> *mut GtkTextTag;
    pub fn gtk_text_tag_get_priority(tag: *mut GtkTextTag) -> gint;
    pub fn gtk_text_tag_set_priority(tag: *mut GtkTextTag, priority: gint);
    pub fn gtk_text_tag_event(tag: *mut GtkTextTag,
                              event_object: *mut GObject,
                              event: *mut GdkEvent, iter: *GtkTextIter) ->
     gboolean;
    pub fn gtk_text_iter_get_buffer(iter: *GtkTextIter) -> *mut GtkTextBuffer;
    pub fn gtk_text_iter_copy(iter: *GtkTextIter) -> *mut GtkTextIter;
    pub fn gtk_text_iter_free(iter: *mut GtkTextIter);
    pub fn gtk_text_iter_assign(iter: *mut GtkTextIter, other: *GtkTextIter);
    pub fn gtk_text_iter_get_type() -> GType;
    pub fn gtk_text_iter_get_offset(iter: *GtkTextIter) -> gint;
    pub fn gtk_text_iter_get_line(iter: *GtkTextIter) -> gint;
    pub fn gtk_text_iter_get_line_offset(iter: *GtkTextIter) -> gint;
    pub fn gtk_text_iter_get_line_index(iter: *GtkTextIter) -> gint;
    pub fn gtk_text_iter_get_visible_line_offset(iter: *GtkTextIter) -> gint;
    pub fn gtk_text_iter_get_visible_line_index(iter: *GtkTextIter) -> gint;
    pub fn gtk_text_iter_get_char(iter: *GtkTextIter) -> gunichar;
    pub fn gtk_text_iter_get_slice(start: *GtkTextIter, end: *GtkTextIter) ->
     *mut gchar;
    pub fn gtk_text_iter_get_text(start: *GtkTextIter, end: *GtkTextIter) ->
     *mut gchar;
    pub fn gtk_text_iter_get_visible_slice(start: *GtkTextIter,
                                           end: *GtkTextIter) -> *mut gchar;
    pub fn gtk_text_iter_get_visible_text(start: *GtkTextIter,
                                          end: *GtkTextIter) -> *mut gchar;
    pub fn gtk_text_iter_get_pixbuf(iter: *GtkTextIter) -> *mut GdkPixbuf;
    pub fn gtk_text_iter_get_marks(iter: *GtkTextIter) -> *mut GSList;
    pub fn gtk_text_iter_get_child_anchor(iter: *GtkTextIter) ->
     *mut GtkTextChildAnchor;
    pub fn gtk_text_iter_get_toggled_tags(iter: *GtkTextIter,
                                          toggled_on: gboolean) ->
     *mut GSList;
    pub fn gtk_text_iter_begins_tag(iter: *GtkTextIter, tag: *mut GtkTextTag)
     -> gboolean;
    pub fn gtk_text_iter_ends_tag(iter: *GtkTextIter, tag: *mut GtkTextTag) ->
     gboolean;
    pub fn gtk_text_iter_toggles_tag(iter: *GtkTextIter, tag: *mut GtkTextTag)
     -> gboolean;
    pub fn gtk_text_iter_has_tag(iter: *GtkTextIter, tag: *mut GtkTextTag) ->
     gboolean;
    pub fn gtk_text_iter_get_tags(iter: *GtkTextIter) -> *mut GSList;
    pub fn gtk_text_iter_editable(iter: *GtkTextIter,
                                  default_setting: gboolean) -> gboolean;
    pub fn gtk_text_iter_can_insert(iter: *GtkTextIter,
                                    default_editability: gboolean) ->
     gboolean;
    pub fn gtk_text_iter_starts_word(iter: *GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_ends_word(iter: *GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_inside_word(iter: *GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_starts_sentence(iter: *GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_ends_sentence(iter: *GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_inside_sentence(iter: *GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_starts_line(iter: *GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_ends_line(iter: *GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_is_cursor_position(iter: *GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_get_chars_in_line(iter: *GtkTextIter) -> gint;
    pub fn gtk_text_iter_get_bytes_in_line(iter: *GtkTextIter) -> gint;
    pub fn gtk_text_iter_get_attributes(iter: *GtkTextIter,
                                        values: *mut GtkTextAttributes) ->
     gboolean;
    pub fn gtk_text_iter_get_language(iter: *GtkTextIter) ->
     *mut PangoLanguage;
    pub fn gtk_text_iter_is_end(iter: *GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_is_start(iter: *GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_forward_char(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_backward_char(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_forward_chars(iter: *mut GtkTextIter, count: gint) ->
     gboolean;
    pub fn gtk_text_iter_backward_chars(iter: *mut GtkTextIter, count: gint)
     -> gboolean;
    pub fn gtk_text_iter_forward_line(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_backward_line(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_forward_lines(iter: *mut GtkTextIter, count: gint) ->
     gboolean;
    pub fn gtk_text_iter_backward_lines(iter: *mut GtkTextIter, count: gint)
     -> gboolean;
    pub fn gtk_text_iter_forward_word_end(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_backward_word_start(iter: *mut GtkTextIter) ->
     gboolean;
    pub fn gtk_text_iter_forward_word_ends(iter: *mut GtkTextIter,
                                           count: gint) -> gboolean;
    pub fn gtk_text_iter_backward_word_starts(iter: *mut GtkTextIter,
                                              count: gint) -> gboolean;
    pub fn gtk_text_iter_forward_visible_line(iter: *mut GtkTextIter) ->
     gboolean;
    pub fn gtk_text_iter_backward_visible_line(iter: *mut GtkTextIter) ->
     gboolean;
    pub fn gtk_text_iter_forward_visible_lines(iter: *mut GtkTextIter,
                                               count: gint) -> gboolean;
    pub fn gtk_text_iter_backward_visible_lines(iter: *mut GtkTextIter,
                                                count: gint) -> gboolean;
    pub fn gtk_text_iter_forward_visible_word_end(iter: *mut GtkTextIter) ->
     gboolean;
    pub fn gtk_text_iter_backward_visible_word_start(iter: *mut GtkTextIter)
     -> gboolean;
    pub fn gtk_text_iter_forward_visible_word_ends(iter: *mut GtkTextIter,
                                                   count: gint) -> gboolean;
    pub fn gtk_text_iter_backward_visible_word_starts(iter: *mut GtkTextIter,
                                                      count: gint) ->
     gboolean;
    pub fn gtk_text_iter_forward_sentence_end(iter: *mut GtkTextIter) ->
     gboolean;
    pub fn gtk_text_iter_backward_sentence_start(iter: *mut GtkTextIter) ->
     gboolean;
    pub fn gtk_text_iter_forward_sentence_ends(iter: *mut GtkTextIter,
                                               count: gint) -> gboolean;
    pub fn gtk_text_iter_backward_sentence_starts(iter: *mut GtkTextIter,
                                                  count: gint) -> gboolean;
    pub fn gtk_text_iter_forward_cursor_position(iter: *mut GtkTextIter) ->
     gboolean;
    pub fn gtk_text_iter_backward_cursor_position(iter: *mut GtkTextIter) ->
     gboolean;
    pub fn gtk_text_iter_forward_cursor_positions(iter: *mut GtkTextIter,
                                                  count: gint) -> gboolean;
    pub fn gtk_text_iter_backward_cursor_positions(iter: *mut GtkTextIter,
                                                   count: gint) -> gboolean;
    pub fn gtk_text_iter_forward_visible_cursor_position(iter:
                                                             *mut GtkTextIter)
     -> gboolean;
    pub fn gtk_text_iter_backward_visible_cursor_position(iter:
                                                              *mut GtkTextIter)
     -> gboolean;
    pub fn gtk_text_iter_forward_visible_cursor_positions(iter:
                                                              *mut GtkTextIter,
                                                          count: gint) ->
     gboolean;
    pub fn gtk_text_iter_backward_visible_cursor_positions(iter:
                                                               *mut GtkTextIter,
                                                           count: gint) ->
     gboolean;
    pub fn gtk_text_iter_set_offset(iter: *mut GtkTextIter,
                                    char_offset: gint);
    pub fn gtk_text_iter_set_line(iter: *mut GtkTextIter, line_number: gint);
    pub fn gtk_text_iter_set_line_offset(iter: *mut GtkTextIter,
                                         char_on_line: gint);
    pub fn gtk_text_iter_set_line_index(iter: *mut GtkTextIter,
                                        byte_on_line: gint);
    pub fn gtk_text_iter_forward_to_end(iter: *mut GtkTextIter);
    pub fn gtk_text_iter_forward_to_line_end(iter: *mut GtkTextIter) ->
     gboolean;
    pub fn gtk_text_iter_set_visible_line_offset(iter: *mut GtkTextIter,
                                                 char_on_line: gint);
    pub fn gtk_text_iter_set_visible_line_index(iter: *mut GtkTextIter,
                                                byte_on_line: gint);
    pub fn gtk_text_iter_forward_to_tag_toggle(iter: *mut GtkTextIter,
                                               tag: *mut GtkTextTag) ->
     gboolean;
    pub fn gtk_text_iter_backward_to_tag_toggle(iter: *mut GtkTextIter,
                                                tag: *mut GtkTextTag) ->
     gboolean;
    pub fn gtk_text_iter_forward_find_char(iter: *mut GtkTextIter,
                                           pred: GtkTextCharPredicate,
                                           user_data: gpointer,
                                           limit: *GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_backward_find_char(iter: *mut GtkTextIter,
                                            pred: GtkTextCharPredicate,
                                            user_data: gpointer,
                                            limit: *GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_forward_search(iter: *GtkTextIter, str: *gchar,
                                        flags: GtkTextSearchFlags,
                                        match_start: *mut GtkTextIter,
                                        match_end: *mut GtkTextIter,
                                        limit: *GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_backward_search(iter: *GtkTextIter, str: *gchar,
                                         flags: GtkTextSearchFlags,
                                         match_start: *mut GtkTextIter,
                                         match_end: *mut GtkTextIter,
                                         limit: *GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_equal(lhs: *GtkTextIter, rhs: *GtkTextIter) ->
     gboolean;
    pub fn gtk_text_iter_compare(lhs: *GtkTextIter, rhs: *GtkTextIter) ->
     gint;
    pub fn gtk_text_iter_in_range(iter: *GtkTextIter, start: *GtkTextIter,
                                  end: *GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_order(first: *mut GtkTextIter,
                               second: *mut GtkTextIter);
    pub fn gtk_target_list_get_type() -> GType;
    pub fn gtk_target_list_new(targets: *GtkTargetEntry, ntargets: guint) ->
     *mut GtkTargetList;
    pub fn gtk_target_list_ref(list: *mut GtkTargetList) ->
     *mut GtkTargetList;
    pub fn gtk_target_list_unref(list: *mut GtkTargetList);
    pub fn gtk_target_list_add(list: *mut GtkTargetList, target: GdkAtom,
                               flags: guint, info: guint);
    pub fn gtk_target_list_add_text_targets(list: *mut GtkTargetList,
                                            info: guint);
    pub fn gtk_target_list_add_rich_text_targets(list: *mut GtkTargetList,
                                                 info: guint,
                                                 deserializable: gboolean,
                                                 buffer: *mut GtkTextBuffer);
    pub fn gtk_target_list_add_image_targets(list: *mut GtkTargetList,
                                             info: guint, writable: gboolean);
    pub fn gtk_target_list_add_uri_targets(list: *mut GtkTargetList,
                                           info: guint);
    pub fn gtk_target_list_add_table(list: *mut GtkTargetList,
                                     targets: *GtkTargetEntry,
                                     ntargets: guint);
    pub fn gtk_target_list_remove(list: *mut GtkTargetList, target: GdkAtom);
    pub fn gtk_target_list_find(list: *mut GtkTargetList, target: GdkAtom,
                                info: *mut guint) -> gboolean;
    pub fn gtk_target_table_new_from_list(list: *mut GtkTargetList,
                                          n_targets: *mut gint) ->
     *mut GtkTargetEntry;
    pub fn gtk_target_table_free(targets: *mut GtkTargetEntry,
                                 n_targets: gint);
    pub fn gtk_selection_owner_set(widget: *mut GtkWidget, selection: GdkAtom,
                                   time_: guint32) -> gboolean;
    pub fn gtk_selection_owner_set_for_display(display: *mut GdkDisplay,
                                               widget: *mut GtkWidget,
                                               selection: GdkAtom,
                                               time_: guint32) -> gboolean;
    pub fn gtk_selection_add_target(widget: *mut GtkWidget,
                                    selection: GdkAtom, target: GdkAtom,
                                    info: guint);
    pub fn gtk_selection_add_targets(widget: *mut GtkWidget,
                                     selection: GdkAtom,
                                     targets: *GtkTargetEntry,
                                     ntargets: guint);
    pub fn gtk_selection_clear_targets(widget: *mut GtkWidget,
                                       selection: GdkAtom);
    pub fn gtk_selection_convert(widget: *mut GtkWidget, selection: GdkAtom,
                                 target: GdkAtom, time_: guint32) -> gboolean;
    pub fn gtk_selection_remove_all(widget: *mut GtkWidget);
    pub fn gtk_selection_data_get_selection(selection_data: *GtkSelectionData)
     -> GdkAtom;
    pub fn gtk_selection_data_get_target(selection_data: *GtkSelectionData) ->
     GdkAtom;
    pub fn gtk_selection_data_get_data_type(selection_data: *GtkSelectionData)
     -> GdkAtom;
    pub fn gtk_selection_data_get_format(selection_data: *GtkSelectionData) ->
     gint;
    pub fn gtk_selection_data_get_data(selection_data: *GtkSelectionData) ->
     *guchar;
    pub fn gtk_selection_data_get_length(selection_data: *GtkSelectionData) ->
     gint;
    pub fn gtk_selection_data_get_data_with_length(selection_data:
                                                       *GtkSelectionData,
                                                   length: *mut gint) ->
     *guchar;
    pub fn gtk_selection_data_get_display(selection_data: *GtkSelectionData)
     -> *mut GdkDisplay;
    pub fn gtk_selection_data_set(selection_data: *mut GtkSelectionData,
                                  _type: GdkAtom, format: gint, data: *guchar,
                                  length: gint);
    pub fn gtk_selection_data_set_text(selection_data: *mut GtkSelectionData,
                                       str: *gchar, len: gint) -> gboolean;
    pub fn gtk_selection_data_get_text(selection_data: *GtkSelectionData) ->
     *mut guchar;
    pub fn gtk_selection_data_set_pixbuf(selection_data:
                                             *mut GtkSelectionData,
                                         pixbuf: *mut GdkPixbuf) -> gboolean;
    pub fn gtk_selection_data_get_pixbuf(selection_data: *GtkSelectionData) ->
     *mut GdkPixbuf;
    pub fn gtk_selection_data_set_uris(selection_data: *mut GtkSelectionData,
                                       uris: *mut *mut gchar) -> gboolean;
    pub fn gtk_selection_data_get_uris(selection_data: *GtkSelectionData) ->
     *mut *mut gchar;
    pub fn gtk_selection_data_get_targets(selection_data: *GtkSelectionData,
                                          targets: *mut *mut GdkAtom,
                                          n_atoms: *mut gint) -> gboolean;
    pub fn gtk_selection_data_targets_include_text(selection_data:
                                                       *GtkSelectionData) ->
     gboolean;
    pub fn gtk_selection_data_targets_include_rich_text(selection_data:
                                                            *GtkSelectionData,
                                                        buffer:
                                                            *mut GtkTextBuffer)
     -> gboolean;
    pub fn gtk_selection_data_targets_include_image(selection_data:
                                                        *GtkSelectionData,
                                                    writable: gboolean) ->
     gboolean;
    pub fn gtk_selection_data_targets_include_uri(selection_data:
                                                      *GtkSelectionData) ->
     gboolean;
    pub fn gtk_targets_include_text(targets: *mut GdkAtom, n_targets: gint) ->
     gboolean;
    pub fn gtk_targets_include_rich_text(targets: *mut GdkAtom,
                                         n_targets: gint,
                                         buffer: *mut GtkTextBuffer) ->
     gboolean;
    pub fn gtk_targets_include_image(targets: *mut GdkAtom, n_targets: gint,
                                     writable: gboolean) -> gboolean;
    pub fn gtk_targets_include_uri(targets: *mut GdkAtom, n_targets: gint) ->
     gboolean;
    pub fn gtk_selection_data_get_type() -> GType;
    pub fn gtk_selection_data_copy(data: *GtkSelectionData) ->
     *mut GtkSelectionData;
    pub fn gtk_selection_data_free(data: *mut GtkSelectionData);
    pub fn gtk_target_entry_get_type() -> GType;
    pub fn gtk_target_entry_new(target: *gchar, flags: guint, info: guint) ->
     *mut GtkTargetEntry;
    pub fn gtk_target_entry_copy(data: *mut GtkTargetEntry) ->
     *mut GtkTargetEntry;
    pub fn gtk_target_entry_free(data: *mut GtkTargetEntry);
    pub fn gtk_drag_get_data(widget: *mut GtkWidget,
                             context: *mut GdkDragContext, target: GdkAtom,
                             time_: guint32);
    pub fn gtk_drag_finish(context: *mut GdkDragContext, success: gboolean,
                           del: gboolean, time_: guint32);
    pub fn gtk_drag_get_source_widget(context: *mut GdkDragContext) ->
     *mut GtkWidget;
    pub fn gtk_drag_highlight(widget: *mut GtkWidget);
    pub fn gtk_drag_unhighlight(widget: *mut GtkWidget);
    pub fn gtk_drag_dest_set(widget: *mut GtkWidget, flags: GtkDestDefaults,
                             targets: *GtkTargetEntry, n_targets: gint,
                             actions: GdkDragAction);
    pub fn gtk_drag_dest_set_proxy(widget: *mut GtkWidget,
                                   proxy_window: *mut GdkWindow,
                                   protocol: GdkDragProtocol,
                                   use_coordinates: gboolean);
    pub fn gtk_drag_dest_unset(widget: *mut GtkWidget);
    pub fn gtk_drag_dest_find_target(widget: *mut GtkWidget,
                                     context: *mut GdkDragContext,
                                     target_list: *mut GtkTargetList) ->
     GdkAtom;
    pub fn gtk_drag_dest_get_target_list(widget: *mut GtkWidget) ->
     *mut GtkTargetList;
    pub fn gtk_drag_dest_set_target_list(widget: *mut GtkWidget,
                                         target_list: *mut GtkTargetList);
    pub fn gtk_drag_dest_add_text_targets(widget: *mut GtkWidget);
    pub fn gtk_drag_dest_add_image_targets(widget: *mut GtkWidget);
    pub fn gtk_drag_dest_add_uri_targets(widget: *mut GtkWidget);
    pub fn gtk_drag_dest_set_track_motion(widget: *mut GtkWidget,
                                          track_motion: gboolean);
    pub fn gtk_drag_dest_get_track_motion(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_drag_source_set(widget: *mut GtkWidget,
                               start_button_mask: GdkModifierType,
                               targets: *GtkTargetEntry, n_targets: gint,
                               actions: GdkDragAction);
    pub fn gtk_drag_source_unset(widget: *mut GtkWidget);
    pub fn gtk_drag_source_get_target_list(widget: *mut GtkWidget) ->
     *mut GtkTargetList;
    pub fn gtk_drag_source_set_target_list(widget: *mut GtkWidget,
                                           target_list: *mut GtkTargetList);
    pub fn gtk_drag_source_add_text_targets(widget: *mut GtkWidget);
    pub fn gtk_drag_source_add_image_targets(widget: *mut GtkWidget);
    pub fn gtk_drag_source_add_uri_targets(widget: *mut GtkWidget);
    pub fn gtk_drag_source_set_icon_pixbuf(widget: *mut GtkWidget,
                                           pixbuf: *mut GdkPixbuf);
    pub fn gtk_drag_source_set_icon_stock(widget: *mut GtkWidget,
                                          stock_id: *gchar);
    pub fn gtk_drag_source_set_icon_name(widget: *mut GtkWidget,
                                         icon_name: *gchar);
    pub fn gtk_drag_source_set_icon_gicon(widget: *mut GtkWidget,
                                          icon: *mut GIcon);
    pub fn gtk_drag_begin_with_coordinates(widget: *mut GtkWidget,
                                           targets: *mut GtkTargetList,
                                           actions: GdkDragAction,
                                           button: gint, event: *mut GdkEvent,
                                           x: gint, y: gint) ->
     *mut GdkDragContext;
    pub fn gtk_drag_begin(widget: *mut GtkWidget, targets: *mut GtkTargetList,
                          actions: GdkDragAction, button: gint,
                          event: *mut GdkEvent) -> *mut GdkDragContext;
    pub fn gtk_drag_set_icon_widget(context: *mut GdkDragContext,
                                    widget: *mut GtkWidget, hot_x: gint,
                                    hot_y: gint);
    pub fn gtk_drag_set_icon_pixbuf(context: *mut GdkDragContext,
                                    pixbuf: *mut GdkPixbuf, hot_x: gint,
                                    hot_y: gint);
    pub fn gtk_drag_set_icon_stock(context: *mut GdkDragContext,
                                   stock_id: *gchar, hot_x: gint,
                                   hot_y: gint);
    pub fn gtk_drag_set_icon_surface(context: *mut GdkDragContext,
                                     surface: *mut cairo_surface_t);
    pub fn gtk_drag_set_icon_name(context: *mut GdkDragContext,
                                  icon_name: *gchar, hot_x: gint,
                                  hot_y: gint);
    pub fn gtk_drag_set_icon_gicon(context: *mut GdkDragContext,
                                   icon: *mut GIcon, hot_x: gint,
                                   hot_y: gint);
    pub fn gtk_drag_set_icon_default(context: *mut GdkDragContext);
    pub fn gtk_drag_check_threshold(widget: *mut GtkWidget, start_x: gint,
                                    start_y: gint, current_x: gint,
                                    current_y: gint) -> gboolean;
    pub fn _gtk_drag_source_handle_event(widget: *mut GtkWidget,
                                         event: *mut GdkEvent);
    pub fn _gtk_drag_dest_handle_event(toplevel: *mut GtkWidget,
                                       event: *mut GdkEvent);
    pub fn gtk_editable_get_type() -> GType;
    pub fn gtk_editable_select_region(editable: *mut GtkEditable,
                                      start_pos: gint, end_pos: gint);
    pub fn gtk_editable_get_selection_bounds(editable: *mut GtkEditable,
                                             start_pos: *mut gint,
                                             end_pos: *mut gint) -> gboolean;
    pub fn gtk_editable_insert_text(editable: *mut GtkEditable,
                                    new_text: *gchar, new_text_length: gint,
                                    position: *mut gint);
    pub fn gtk_editable_delete_text(editable: *mut GtkEditable,
                                    start_pos: gint, end_pos: gint);
    pub fn gtk_editable_get_chars(editable: *mut GtkEditable, start_pos: gint,
                                  end_pos: gint) -> *mut gchar;
    pub fn gtk_editable_cut_clipboard(editable: *mut GtkEditable);
    pub fn gtk_editable_copy_clipboard(editable: *mut GtkEditable);
    pub fn gtk_editable_paste_clipboard(editable: *mut GtkEditable);
    pub fn gtk_editable_delete_selection(editable: *mut GtkEditable);
    pub fn gtk_editable_set_position(editable: *mut GtkEditable,
                                     position: gint);
    pub fn gtk_editable_get_position(editable: *mut GtkEditable) -> gint;
    pub fn gtk_editable_set_editable(editable: *mut GtkEditable,
                                     is_editable: gboolean);
    pub fn gtk_editable_get_editable(editable: *mut GtkEditable) -> gboolean;
    pub fn gtk_im_context_get_type() -> GType;
    pub fn gtk_im_context_set_client_window(context: *mut GtkIMContext,
                                            window: *mut GdkWindow);
    pub fn gtk_im_context_get_preedit_string(context: *mut GtkIMContext,
                                             str: *mut *mut gchar,
                                             attrs: *mut *mut PangoAttrList,
                                             cursor_pos: *mut gint);
    pub fn gtk_im_context_filter_keypress(context: *mut GtkIMContext,
                                          event: *mut GdkEventKey) ->
     gboolean;
    pub fn gtk_im_context_focus_in(context: *mut GtkIMContext);
    pub fn gtk_im_context_focus_out(context: *mut GtkIMContext);
    pub fn gtk_im_context_reset(context: *mut GtkIMContext);
    pub fn gtk_im_context_set_cursor_location(context: *mut GtkIMContext,
                                              area: *GdkRectangle);
    pub fn gtk_im_context_set_use_preedit(context: *mut GtkIMContext,
                                          use_preedit: gboolean);
    pub fn gtk_im_context_set_surrounding(context: *mut GtkIMContext,
                                          text: *gchar, len: gint,
                                          cursor_index: gint);
    pub fn gtk_im_context_get_surrounding(context: *mut GtkIMContext,
                                          text: *mut *mut gchar,
                                          cursor_index: *mut gint) ->
     gboolean;
    pub fn gtk_im_context_delete_surrounding(context: *mut GtkIMContext,
                                             offset: gint, n_chars: gint) ->
     gboolean;
    pub fn gtk_entry_buffer_get_type() -> GType;
    pub fn gtk_entry_buffer_new(initial_chars: *gchar, n_initial_chars: gint)
     -> *mut GtkEntryBuffer;
    pub fn gtk_entry_buffer_get_bytes(buffer: *mut GtkEntryBuffer) -> gsize;
    pub fn gtk_entry_buffer_get_length(buffer: *mut GtkEntryBuffer) -> guint;
    pub fn gtk_entry_buffer_get_text(buffer: *mut GtkEntryBuffer) -> *gchar;
    pub fn gtk_entry_buffer_set_text(buffer: *mut GtkEntryBuffer,
                                     chars: *gchar, n_chars: gint);
    pub fn gtk_entry_buffer_set_max_length(buffer: *mut GtkEntryBuffer,
                                           max_length: gint);
    pub fn gtk_entry_buffer_get_max_length(buffer: *mut GtkEntryBuffer) ->
     gint;
    pub fn gtk_entry_buffer_insert_text(buffer: *mut GtkEntryBuffer,
                                        position: guint, chars: *gchar,
                                        n_chars: gint) -> guint;
    pub fn gtk_entry_buffer_delete_text(buffer: *mut GtkEntryBuffer,
                                        position: guint, n_chars: gint) ->
     guint;
    pub fn gtk_entry_buffer_emit_inserted_text(buffer: *mut GtkEntryBuffer,
                                               position: guint, chars: *gchar,
                                               n_chars: guint);
    pub fn gtk_entry_buffer_emit_deleted_text(buffer: *mut GtkEntryBuffer,
                                              position: guint,
                                              n_chars: guint);
    pub fn gtk_list_store_get_type() -> GType;
    pub fn gtk_list_store_new(n_columns: gint, ...) -> *mut GtkListStore;
    pub fn gtk_list_store_newv(n_columns: gint, types: *mut GType) ->
     *mut GtkListStore;
    pub fn gtk_list_store_set_column_types(list_store: *mut GtkListStore,
                                           n_columns: gint,
                                           types: *mut GType);
    pub fn gtk_list_store_set_value(list_store: *mut GtkListStore,
                                    iter: *mut GtkTreeIter, column: gint,
                                    value: *mut GValue);
    pub fn gtk_list_store_set(list_store: *mut GtkListStore,
                              iter: *mut GtkTreeIter, ...);
    pub fn gtk_list_store_set_valuesv(list_store: *mut GtkListStore,
                                      iter: *mut GtkTreeIter,
                                      columns: *mut gint, values: *mut GValue,
                                      n_values: gint);
    pub fn gtk_list_store_set_valist(list_store: *mut GtkListStore,
                                     iter: *mut GtkTreeIter,
                                     var_args: va_list);
    pub fn gtk_list_store_remove(list_store: *mut GtkListStore,
                                 iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_list_store_insert(list_store: *mut GtkListStore,
                                 iter: *mut GtkTreeIter, position: gint);
    pub fn gtk_list_store_insert_before(list_store: *mut GtkListStore,
                                        iter: *mut GtkTreeIter,
                                        sibling: *mut GtkTreeIter);
    pub fn gtk_list_store_insert_after(list_store: *mut GtkListStore,
                                       iter: *mut GtkTreeIter,
                                       sibling: *mut GtkTreeIter);
    pub fn gtk_list_store_insert_with_values(list_store: *mut GtkListStore,
                                             iter: *mut GtkTreeIter,
                                             position: gint, ...);
    pub fn gtk_list_store_insert_with_valuesv(list_store: *mut GtkListStore,
                                              iter: *mut GtkTreeIter,
                                              position: gint,
                                              columns: *mut gint,
                                              values: *mut GValue,
                                              n_values: gint);
    pub fn gtk_list_store_prepend(list_store: *mut GtkListStore,
                                  iter: *mut GtkTreeIter);
    pub fn gtk_list_store_append(list_store: *mut GtkListStore,
                                 iter: *mut GtkTreeIter);
    pub fn gtk_list_store_clear(list_store: *mut GtkListStore);
    pub fn gtk_list_store_iter_is_valid(list_store: *mut GtkListStore,
                                        iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_list_store_reorder(store: *mut GtkListStore,
                                  new_order: *mut gint);
    pub fn gtk_list_store_swap(store: *mut GtkListStore, a: *mut GtkTreeIter,
                               b: *mut GtkTreeIter);
    pub fn gtk_list_store_move_after(store: *mut GtkListStore,
                                     iter: *mut GtkTreeIter,
                                     position: *mut GtkTreeIter);
    pub fn gtk_list_store_move_before(store: *mut GtkListStore,
                                      iter: *mut GtkTreeIter,
                                      position: *mut GtkTreeIter);
    pub fn gtk_tree_model_filter_get_type() -> GType;
    pub fn gtk_tree_model_filter_new(child_model: *mut GtkTreeModel,
                                     root: *mut GtkTreePath) ->
     *mut GtkTreeModel;
    pub fn gtk_tree_model_filter_set_visible_func(filter:
                                                      *mut GtkTreeModelFilter,
                                                  func:
                                                      GtkTreeModelFilterVisibleFunc,
                                                  data: gpointer,
                                                  destroy: GDestroyNotify);
    pub fn gtk_tree_model_filter_set_modify_func(filter:
                                                     *mut GtkTreeModelFilter,
                                                 n_columns: gint,
                                                 types: *mut GType,
                                                 func:
                                                     GtkTreeModelFilterModifyFunc,
                                                 data: gpointer,
                                                 destroy: GDestroyNotify);
    pub fn gtk_tree_model_filter_set_visible_column(filter:
                                                        *mut GtkTreeModelFilter,
                                                    column: gint);
    pub fn gtk_tree_model_filter_get_model(filter: *mut GtkTreeModelFilter) ->
     *mut GtkTreeModel;
    pub fn gtk_tree_model_filter_convert_child_iter_to_iter(filter:
                                                                *mut GtkTreeModelFilter,
                                                            filter_iter:
                                                                *mut GtkTreeIter,
                                                            child_iter:
                                                                *mut GtkTreeIter)
     -> gboolean;
    pub fn gtk_tree_model_filter_convert_iter_to_child_iter(filter:
                                                                *mut GtkTreeModelFilter,
                                                            child_iter:
                                                                *mut GtkTreeIter,
                                                            filter_iter:
                                                                *mut GtkTreeIter);
    pub fn gtk_tree_model_filter_convert_child_path_to_path(filter:
                                                                *mut GtkTreeModelFilter,
                                                            child_path:
                                                                *mut GtkTreePath)
     -> *mut GtkTreePath;
    pub fn gtk_tree_model_filter_convert_path_to_child_path(filter:
                                                                *mut GtkTreeModelFilter,
                                                            filter_path:
                                                                *mut GtkTreePath)
     -> *mut GtkTreePath;
    pub fn gtk_tree_model_filter_refilter(filter: *mut GtkTreeModelFilter);
    pub fn gtk_tree_model_filter_clear_cache(filter: *mut GtkTreeModelFilter);
    pub fn gtk_entry_completion_get_type() -> GType;
    pub fn gtk_entry_completion_new() -> *mut GtkEntryCompletion;
    pub fn gtk_entry_completion_new_with_area(area: *mut GtkCellArea) ->
     *mut GtkEntryCompletion;
    pub fn gtk_entry_completion_get_entry(completion: *mut GtkEntryCompletion)
     -> *mut GtkWidget;
    pub fn gtk_entry_completion_set_model(completion: *mut GtkEntryCompletion,
                                          model: *mut GtkTreeModel);
    pub fn gtk_entry_completion_get_model(completion: *mut GtkEntryCompletion)
     -> *mut GtkTreeModel;
    pub fn gtk_entry_completion_set_match_func(completion:
                                                   *mut GtkEntryCompletion,
                                               func:
                                                   GtkEntryCompletionMatchFunc,
                                               func_data: gpointer,
                                               func_notify: GDestroyNotify);
    pub fn gtk_entry_completion_set_minimum_key_length(completion:
                                                           *mut GtkEntryCompletion,
                                                       length: gint);
    pub fn gtk_entry_completion_get_minimum_key_length(completion:
                                                           *mut GtkEntryCompletion)
     -> gint;
    pub fn gtk_entry_completion_compute_prefix(completion:
                                                   *mut GtkEntryCompletion,
                                               key: *c_schar) -> *mut gchar;
    pub fn gtk_entry_completion_complete(completion: *mut GtkEntryCompletion);
    pub fn gtk_entry_completion_insert_prefix(completion:
                                                  *mut GtkEntryCompletion);
    pub fn gtk_entry_completion_insert_action_text(completion:
                                                       *mut GtkEntryCompletion,
                                                   index_: gint,
                                                   text: *gchar);
    pub fn gtk_entry_completion_insert_action_markup(completion:
                                                         *mut GtkEntryCompletion,
                                                     index_: gint,
                                                     markup: *gchar);
    pub fn gtk_entry_completion_delete_action(completion:
                                                  *mut GtkEntryCompletion,
                                              index_: gint);
    pub fn gtk_entry_completion_set_inline_completion(completion:
                                                          *mut GtkEntryCompletion,
                                                      inline_completion:
                                                          gboolean);
    pub fn gtk_entry_completion_get_inline_completion(completion:
                                                          *mut GtkEntryCompletion)
     -> gboolean;
    pub fn gtk_entry_completion_set_inline_selection(completion:
                                                         *mut GtkEntryCompletion,
                                                     inline_selection:
                                                         gboolean);
    pub fn gtk_entry_completion_get_inline_selection(completion:
                                                         *mut GtkEntryCompletion)
     -> gboolean;
    pub fn gtk_entry_completion_set_popup_completion(completion:
                                                         *mut GtkEntryCompletion,
                                                     popup_completion:
                                                         gboolean);
    pub fn gtk_entry_completion_get_popup_completion(completion:
                                                         *mut GtkEntryCompletion)
     -> gboolean;
    pub fn gtk_entry_completion_set_popup_set_width(completion:
                                                        *mut GtkEntryCompletion,
                                                    popup_set_width:
                                                        gboolean);
    pub fn gtk_entry_completion_get_popup_set_width(completion:
                                                        *mut GtkEntryCompletion)
     -> gboolean;
    pub fn gtk_entry_completion_set_popup_single_match(completion:
                                                           *mut GtkEntryCompletion,
                                                       popup_single_match:
                                                           gboolean);
    pub fn gtk_entry_completion_get_popup_single_match(completion:
                                                           *mut GtkEntryCompletion)
     -> gboolean;
    pub fn gtk_entry_completion_get_completion_prefix(completion:
                                                          *mut GtkEntryCompletion)
     -> *gchar;
    pub fn gtk_entry_completion_set_text_column(completion:
                                                    *mut GtkEntryCompletion,
                                                column: gint);
    pub fn gtk_entry_completion_get_text_column(completion:
                                                    *mut GtkEntryCompletion)
     -> gint;
    pub fn gtk_image_get_type() -> GType;
    pub fn gtk_image_new() -> *mut GtkWidget;
    pub fn gtk_image_new_from_file(filename: *gchar) -> *mut GtkWidget;
    pub fn gtk_image_new_from_resource(resource_path: *gchar) ->
     *mut GtkWidget;
    pub fn gtk_image_new_from_pixbuf(pixbuf: *mut GdkPixbuf) ->
     *mut GtkWidget;
    pub fn gtk_image_new_from_stock(stock_id: *gchar, size: GtkIconSize) ->
     *mut GtkWidget;
    pub fn gtk_image_new_from_icon_set(icon_set: *mut GtkIconSet,
                                       size: GtkIconSize) -> *mut GtkWidget;
    pub fn gtk_image_new_from_animation(animation: *mut GdkPixbufAnimation) ->
     *mut GtkWidget;
    pub fn gtk_image_new_from_icon_name(icon_name: *gchar, size: GtkIconSize)
     -> *mut GtkWidget;
    pub fn gtk_image_new_from_gicon(icon: *mut GIcon, size: GtkIconSize) ->
     *mut GtkWidget;
    pub fn gtk_image_new_from_surface(surface: *mut cairo_surface_t) ->
     *mut GtkWidget;
    pub fn gtk_image_clear(image: *mut GtkImage);
    pub fn gtk_image_set_from_file(image: *mut GtkImage, filename: *gchar);
    pub fn gtk_image_set_from_resource(image: *mut GtkImage,
                                       resource_path: *gchar);
    pub fn gtk_image_set_from_pixbuf(image: *mut GtkImage,
                                     pixbuf: *mut GdkPixbuf);
    pub fn gtk_image_set_from_stock(image: *mut GtkImage, stock_id: *gchar,
                                    size: GtkIconSize);
    pub fn gtk_image_set_from_icon_set(image: *mut GtkImage,
                                       icon_set: *mut GtkIconSet,
                                       size: GtkIconSize);
    pub fn gtk_image_set_from_animation(image: *mut GtkImage,
                                        animation: *mut GdkPixbufAnimation);
    pub fn gtk_image_set_from_icon_name(image: *mut GtkImage,
                                        icon_name: *gchar, size: GtkIconSize);
    pub fn gtk_image_set_from_gicon(image: *mut GtkImage, icon: *mut GIcon,
                                    size: GtkIconSize);
    pub fn gtk_image_set_from_surface(image: *mut GtkImage,
                                      surface: *mut cairo_surface_t);
    pub fn gtk_image_set_pixel_size(image: *mut GtkImage, pixel_size: gint);
    pub fn gtk_image_get_storage_type(image: *mut GtkImage) -> GtkImageType;
    pub fn gtk_image_get_pixbuf(image: *mut GtkImage) -> *mut GdkPixbuf;
    pub fn gtk_image_get_stock(image: *mut GtkImage,
                               stock_id: *mut *mut gchar,
                               size: *mut GtkIconSize);
    pub fn gtk_image_get_icon_set(image: *mut GtkImage,
                                  icon_set: *mut *mut GtkIconSet,
                                  size: *mut GtkIconSize);
    pub fn gtk_image_get_animation(image: *mut GtkImage) ->
     *mut GdkPixbufAnimation;
    pub fn gtk_image_get_icon_name(image: *mut GtkImage,
                                   icon_name: *mut *gchar,
                                   size: *mut GtkIconSize);
    pub fn gtk_image_get_gicon(image: *mut GtkImage, gicon: *mut *mut GIcon,
                               size: *mut GtkIconSize);
    pub fn gtk_image_get_pixel_size(image: *mut GtkImage) -> gint;
    pub fn gtk_entry_get_type() -> GType;
    pub fn gtk_entry_new() -> *mut GtkWidget;
    pub fn gtk_entry_new_with_buffer(buffer: *mut GtkEntryBuffer) ->
     *mut GtkWidget;
    pub fn gtk_entry_get_buffer(entry: *mut GtkEntry) -> *mut GtkEntryBuffer;
    pub fn gtk_entry_set_buffer(entry: *mut GtkEntry,
                                buffer: *mut GtkEntryBuffer);
    pub fn gtk_entry_get_text_area(entry: *mut GtkEntry,
                                   text_area: *mut GdkRectangle);
    pub fn gtk_entry_set_visibility(entry: *mut GtkEntry, visible: gboolean);
    pub fn gtk_entry_get_visibility(entry: *mut GtkEntry) -> gboolean;
    pub fn gtk_entry_set_invisible_char(entry: *mut GtkEntry, ch: gunichar);
    pub fn gtk_entry_get_invisible_char(entry: *mut GtkEntry) -> gunichar;
    pub fn gtk_entry_unset_invisible_char(entry: *mut GtkEntry);
    pub fn gtk_entry_set_has_frame(entry: *mut GtkEntry, setting: gboolean);
    pub fn gtk_entry_get_has_frame(entry: *mut GtkEntry) -> gboolean;
    pub fn gtk_entry_set_inner_border(entry: *mut GtkEntry,
                                      border: *GtkBorder);
    pub fn gtk_entry_get_inner_border(entry: *mut GtkEntry) -> *GtkBorder;
    pub fn gtk_entry_set_overwrite_mode(entry: *mut GtkEntry,
                                        overwrite: gboolean);
    pub fn gtk_entry_get_overwrite_mode(entry: *mut GtkEntry) -> gboolean;
    pub fn gtk_entry_set_max_length(entry: *mut GtkEntry, max: gint);
    pub fn gtk_entry_get_max_length(entry: *mut GtkEntry) -> gint;
    pub fn gtk_entry_get_text_length(entry: *mut GtkEntry) -> guint16;
    pub fn gtk_entry_set_activates_default(entry: *mut GtkEntry,
                                           setting: gboolean);
    pub fn gtk_entry_get_activates_default(entry: *mut GtkEntry) -> gboolean;
    pub fn gtk_entry_set_width_chars(entry: *mut GtkEntry, n_chars: gint);
    pub fn gtk_entry_get_width_chars(entry: *mut GtkEntry) -> gint;
    pub fn gtk_entry_set_text(entry: *mut GtkEntry, text: *gchar);
    pub fn gtk_entry_get_text(entry: *mut GtkEntry) -> *gchar;
    pub fn gtk_entry_get_layout(entry: *mut GtkEntry) -> *mut PangoLayout;
    pub fn gtk_entry_get_layout_offsets(entry: *mut GtkEntry, x: *mut gint,
                                        y: *mut gint);
    pub fn gtk_entry_set_alignment(entry: *mut GtkEntry, xalign: gfloat);
    pub fn gtk_entry_get_alignment(entry: *mut GtkEntry) -> gfloat;
    pub fn gtk_entry_set_completion(entry: *mut GtkEntry,
                                    completion: *mut GtkEntryCompletion);
    pub fn gtk_entry_get_completion(entry: *mut GtkEntry) ->
     *mut GtkEntryCompletion;
    pub fn gtk_entry_layout_index_to_text_index(entry: *mut GtkEntry,
                                                layout_index: gint) -> gint;
    pub fn gtk_entry_text_index_to_layout_index(entry: *mut GtkEntry,
                                                text_index: gint) -> gint;
    pub fn gtk_entry_set_cursor_hadjustment(entry: *mut GtkEntry,
                                            adjustment: *mut GtkAdjustment);
    pub fn gtk_entry_get_cursor_hadjustment(entry: *mut GtkEntry) ->
     *mut GtkAdjustment;
    pub fn gtk_entry_set_progress_fraction(entry: *mut GtkEntry,
                                           fraction: gdouble);
    pub fn gtk_entry_get_progress_fraction(entry: *mut GtkEntry) -> gdouble;
    pub fn gtk_entry_set_progress_pulse_step(entry: *mut GtkEntry,
                                             fraction: gdouble);
    pub fn gtk_entry_get_progress_pulse_step(entry: *mut GtkEntry) -> gdouble;
    pub fn gtk_entry_progress_pulse(entry: *mut GtkEntry);
    pub fn gtk_entry_get_placeholder_text(entry: *mut GtkEntry) -> *gchar;
    pub fn gtk_entry_set_placeholder_text(entry: *mut GtkEntry, text: *gchar);
    pub fn gtk_entry_set_icon_from_pixbuf(entry: *mut GtkEntry,
                                          icon_pos: GtkEntryIconPosition,
                                          pixbuf: *mut GdkPixbuf);
    pub fn gtk_entry_set_icon_from_stock(entry: *mut GtkEntry,
                                         icon_pos: GtkEntryIconPosition,
                                         stock_id: *gchar);
    pub fn gtk_entry_set_icon_from_icon_name(entry: *mut GtkEntry,
                                             icon_pos: GtkEntryIconPosition,
                                             icon_name: *gchar);
    pub fn gtk_entry_set_icon_from_gicon(entry: *mut GtkEntry,
                                         icon_pos: GtkEntryIconPosition,
                                         icon: *mut GIcon);
    pub fn gtk_entry_get_icon_storage_type(entry: *mut GtkEntry,
                                           icon_pos: GtkEntryIconPosition) ->
     GtkImageType;
    pub fn gtk_entry_get_icon_pixbuf(entry: *mut GtkEntry,
                                     icon_pos: GtkEntryIconPosition) ->
     *mut GdkPixbuf;
    pub fn gtk_entry_get_icon_stock(entry: *mut GtkEntry,
                                    icon_pos: GtkEntryIconPosition) -> *gchar;
    pub fn gtk_entry_get_icon_name(entry: *mut GtkEntry,
                                   icon_pos: GtkEntryIconPosition) -> *gchar;
    pub fn gtk_entry_get_icon_gicon(entry: *mut GtkEntry,
                                    icon_pos: GtkEntryIconPosition) ->
     *mut GIcon;
    pub fn gtk_entry_set_icon_activatable(entry: *mut GtkEntry,
                                          icon_pos: GtkEntryIconPosition,
                                          activatable: gboolean);
    pub fn gtk_entry_get_icon_activatable(entry: *mut GtkEntry,
                                          icon_pos: GtkEntryIconPosition) ->
     gboolean;
    pub fn gtk_entry_set_icon_sensitive(entry: *mut GtkEntry,
                                        icon_pos: GtkEntryIconPosition,
                                        sensitive: gboolean);
    pub fn gtk_entry_get_icon_sensitive(entry: *mut GtkEntry,
                                        icon_pos: GtkEntryIconPosition) ->
     gboolean;
    pub fn gtk_entry_get_icon_at_pos(entry: *mut GtkEntry, x: gint, y: gint)
     -> gint;
    pub fn gtk_entry_set_icon_tooltip_text(entry: *mut GtkEntry,
                                           icon_pos: GtkEntryIconPosition,
                                           tooltip: *gchar);
    pub fn gtk_entry_get_icon_tooltip_text(entry: *mut GtkEntry,
                                           icon_pos: GtkEntryIconPosition) ->
     *mut gchar;
    pub fn gtk_entry_set_icon_tooltip_markup(entry: *mut GtkEntry,
                                             icon_pos: GtkEntryIconPosition,
                                             tooltip: *gchar);
    pub fn gtk_entry_get_icon_tooltip_markup(entry: *mut GtkEntry,
                                             icon_pos: GtkEntryIconPosition)
     -> *mut gchar;
    pub fn gtk_entry_set_icon_drag_source(entry: *mut GtkEntry,
                                          icon_pos: GtkEntryIconPosition,
                                          target_list: *mut GtkTargetList,
                                          actions: GdkDragAction);
    pub fn gtk_entry_get_current_icon_drag_source(entry: *mut GtkEntry) ->
     gint;
    pub fn gtk_entry_get_icon_area(entry: *mut GtkEntry,
                                   icon_pos: GtkEntryIconPosition,
                                   icon_area: *mut GdkRectangle);
    pub fn gtk_entry_im_context_filter_keypress(entry: *mut GtkEntry,
                                                event: *mut GdkEventKey) ->
     gboolean;
    pub fn gtk_entry_reset_im_context(entry: *mut GtkEntry);
    pub fn gtk_entry_set_input_purpose(entry: *mut GtkEntry,
                                       purpose: GtkInputPurpose);
    pub fn gtk_entry_get_input_purpose(entry: *mut GtkEntry) ->
     GtkInputPurpose;
    pub fn gtk_entry_set_input_hints(entry: *mut GtkEntry,
                                     hints: GtkInputHints);
    pub fn gtk_entry_get_input_hints(entry: *mut GtkEntry) -> GtkInputHints;
    pub fn gtk_entry_set_attributes(entry: *mut GtkEntry,
                                    attrs: *mut PangoAttrList);
    pub fn gtk_entry_get_attributes(entry: *mut GtkEntry) ->
     *mut PangoAttrList;
    pub fn gtk_entry_set_tabs(entry: *mut GtkEntry, tabs: *mut PangoTabArray);
    pub fn gtk_entry_get_tabs(entry: *mut GtkEntry) -> *mut PangoTabArray;
    pub fn gtk_tree_view_get_type() -> GType;
    pub fn gtk_tree_view_new() -> *mut GtkWidget;
    pub fn gtk_tree_view_new_with_model(model: *mut GtkTreeModel) ->
     *mut GtkWidget;
    pub fn gtk_tree_view_get_model(tree_view: *mut GtkTreeView) ->
     *mut GtkTreeModel;
    pub fn gtk_tree_view_set_model(tree_view: *mut GtkTreeView,
                                   model: *mut GtkTreeModel);
    pub fn gtk_tree_view_get_selection(tree_view: *mut GtkTreeView) ->
     *mut GtkTreeSelection;
    pub fn gtk_tree_view_get_hadjustment(tree_view: *mut GtkTreeView) ->
     *mut GtkAdjustment;
    pub fn gtk_tree_view_set_hadjustment(tree_view: *mut GtkTreeView,
                                         adjustment: *mut GtkAdjustment);
    pub fn gtk_tree_view_get_vadjustment(tree_view: *mut GtkTreeView) ->
     *mut GtkAdjustment;
    pub fn gtk_tree_view_set_vadjustment(tree_view: *mut GtkTreeView,
                                         adjustment: *mut GtkAdjustment);
    pub fn gtk_tree_view_get_headers_visible(tree_view: *mut GtkTreeView) ->
     gboolean;
    pub fn gtk_tree_view_set_headers_visible(tree_view: *mut GtkTreeView,
                                             headers_visible: gboolean);
    pub fn gtk_tree_view_columns_autosize(tree_view: *mut GtkTreeView);
    pub fn gtk_tree_view_get_headers_clickable(tree_view: *mut GtkTreeView) ->
     gboolean;
    pub fn gtk_tree_view_set_headers_clickable(tree_view: *mut GtkTreeView,
                                               setting: gboolean);
    pub fn gtk_tree_view_set_rules_hint(tree_view: *mut GtkTreeView,
                                        setting: gboolean);
    pub fn gtk_tree_view_get_rules_hint(tree_view: *mut GtkTreeView) ->
     gboolean;
    pub fn gtk_tree_view_get_activate_on_single_click(tree_view:
                                                          *mut GtkTreeView) ->
     gboolean;
    pub fn gtk_tree_view_set_activate_on_single_click(tree_view:
                                                          *mut GtkTreeView,
                                                      single: gboolean);
    pub fn gtk_tree_view_append_column(tree_view: *mut GtkTreeView,
                                       column: *mut GtkTreeViewColumn) ->
     gint;
    pub fn gtk_tree_view_remove_column(tree_view: *mut GtkTreeView,
                                       column: *mut GtkTreeViewColumn) ->
     gint;
    pub fn gtk_tree_view_insert_column(tree_view: *mut GtkTreeView,
                                       column: *mut GtkTreeViewColumn,
                                       position: gint) -> gint;
    pub fn gtk_tree_view_insert_column_with_attributes(tree_view:
                                                           *mut GtkTreeView,
                                                       position: gint,
                                                       title: *gchar,
                                                       cell:
                                                           *mut GtkCellRenderer, ...)
     -> gint;
    pub fn gtk_tree_view_insert_column_with_data_func(tree_view:
                                                          *mut GtkTreeView,
                                                      position: gint,
                                                      title: *gchar,
                                                      cell:
                                                          *mut GtkCellRenderer,
                                                      func:
                                                          GtkTreeCellDataFunc,
                                                      data: gpointer,
                                                      dnotify: GDestroyNotify)
     -> gint;
    pub fn gtk_tree_view_get_n_columns(tree_view: *mut GtkTreeView) -> guint;
    pub fn gtk_tree_view_get_column(tree_view: *mut GtkTreeView, n: gint) ->
     *mut GtkTreeViewColumn;
    pub fn gtk_tree_view_get_columns(tree_view: *mut GtkTreeView) ->
     *mut GList;
    pub fn gtk_tree_view_move_column_after(tree_view: *mut GtkTreeView,
                                           column: *mut GtkTreeViewColumn,
                                           base_column:
                                               *mut GtkTreeViewColumn);
    pub fn gtk_tree_view_set_expander_column(tree_view: *mut GtkTreeView,
                                             column: *mut GtkTreeViewColumn);
    pub fn gtk_tree_view_get_expander_column(tree_view: *mut GtkTreeView) ->
     *mut GtkTreeViewColumn;
    pub fn gtk_tree_view_set_column_drag_function(tree_view: *mut GtkTreeView,
                                                  func:
                                                      GtkTreeViewColumnDropFunc,
                                                  user_data: gpointer,
                                                  destroy: GDestroyNotify);
    pub fn gtk_tree_view_scroll_to_point(tree_view: *mut GtkTreeView,
                                         tree_x: gint, tree_y: gint);
    pub fn gtk_tree_view_scroll_to_cell(tree_view: *mut GtkTreeView,
                                        path: *mut GtkTreePath,
                                        column: *mut GtkTreeViewColumn,
                                        use_align: gboolean,
                                        row_align: gfloat, col_align: gfloat);
    pub fn gtk_tree_view_row_activated(tree_view: *mut GtkTreeView,
                                       path: *mut GtkTreePath,
                                       column: *mut GtkTreeViewColumn);
    pub fn gtk_tree_view_expand_all(tree_view: *mut GtkTreeView);
    pub fn gtk_tree_view_collapse_all(tree_view: *mut GtkTreeView);
    pub fn gtk_tree_view_expand_to_path(tree_view: *mut GtkTreeView,
                                        path: *mut GtkTreePath);
    pub fn gtk_tree_view_expand_row(tree_view: *mut GtkTreeView,
                                    path: *mut GtkTreePath,
                                    open_all: gboolean) -> gboolean;
    pub fn gtk_tree_view_collapse_row(tree_view: *mut GtkTreeView,
                                      path: *mut GtkTreePath) -> gboolean;
    pub fn gtk_tree_view_map_expanded_rows(tree_view: *mut GtkTreeView,
                                           func: GtkTreeViewMappingFunc,
                                           data: gpointer);
    pub fn gtk_tree_view_row_expanded(tree_view: *mut GtkTreeView,
                                      path: *mut GtkTreePath) -> gboolean;
    pub fn gtk_tree_view_set_reorderable(tree_view: *mut GtkTreeView,
                                         reorderable: gboolean);
    pub fn gtk_tree_view_get_reorderable(tree_view: *mut GtkTreeView) ->
     gboolean;
    pub fn gtk_tree_view_set_cursor(tree_view: *mut GtkTreeView,
                                    path: *mut GtkTreePath,
                                    focus_column: *mut GtkTreeViewColumn,
                                    start_editing: gboolean);
    pub fn gtk_tree_view_set_cursor_on_cell(tree_view: *mut GtkTreeView,
                                            path: *mut GtkTreePath,
                                            focus_column:
                                                *mut GtkTreeViewColumn,
                                            focus_cell: *mut GtkCellRenderer,
                                            start_editing: gboolean);
    pub fn gtk_tree_view_get_cursor(tree_view: *mut GtkTreeView,
                                    path: *mut *mut GtkTreePath,
                                    focus_column:
                                        *mut *mut GtkTreeViewColumn);
    pub fn gtk_tree_view_get_bin_window(tree_view: *mut GtkTreeView) ->
     *mut GdkWindow;
    pub fn gtk_tree_view_get_path_at_pos(tree_view: *mut GtkTreeView, x: gint,
                                         y: gint, path: *mut *mut GtkTreePath,
                                         column: *mut *mut GtkTreeViewColumn,
                                         cell_x: *mut gint, cell_y: *mut gint)
     -> gboolean;
    pub fn gtk_tree_view_get_cell_area(tree_view: *mut GtkTreeView,
                                       path: *mut GtkTreePath,
                                       column: *mut GtkTreeViewColumn,
                                       rect: *mut GdkRectangle);
    pub fn gtk_tree_view_get_background_area(tree_view: *mut GtkTreeView,
                                             path: *mut GtkTreePath,
                                             column: *mut GtkTreeViewColumn,
                                             rect: *mut GdkRectangle);
    pub fn gtk_tree_view_get_visible_rect(tree_view: *mut GtkTreeView,
                                          visible_rect: *mut GdkRectangle);
    pub fn gtk_tree_view_get_visible_range(tree_view: *mut GtkTreeView,
                                           start_path: *mut *mut GtkTreePath,
                                           end_path: *mut *mut GtkTreePath) ->
     gboolean;
    pub fn gtk_tree_view_is_blank_at_pos(tree_view: *mut GtkTreeView, x: gint,
                                         y: gint, path: *mut *mut GtkTreePath,
                                         column: *mut *mut GtkTreeViewColumn,
                                         cell_x: *mut gint, cell_y: *mut gint)
     -> gboolean;
    pub fn gtk_tree_view_enable_model_drag_source(tree_view: *mut GtkTreeView,
                                                  start_button_mask:
                                                      GdkModifierType,
                                                  targets: *GtkTargetEntry,
                                                  n_targets: gint,
                                                  actions: GdkDragAction);
    pub fn gtk_tree_view_enable_model_drag_dest(tree_view: *mut GtkTreeView,
                                                targets: *GtkTargetEntry,
                                                n_targets: gint,
                                                actions: GdkDragAction);
    pub fn gtk_tree_view_unset_rows_drag_source(tree_view: *mut GtkTreeView);
    pub fn gtk_tree_view_unset_rows_drag_dest(tree_view: *mut GtkTreeView);
    pub fn gtk_tree_view_set_drag_dest_row(tree_view: *mut GtkTreeView,
                                           path: *mut GtkTreePath,
                                           pos: GtkTreeViewDropPosition);
    pub fn gtk_tree_view_get_drag_dest_row(tree_view: *mut GtkTreeView,
                                           path: *mut *mut GtkTreePath,
                                           pos: *mut GtkTreeViewDropPosition);
    pub fn gtk_tree_view_get_dest_row_at_pos(tree_view: *mut GtkTreeView,
                                             drag_x: gint, drag_y: gint,
                                             path: *mut *mut GtkTreePath,
                                             pos:
                                                 *mut GtkTreeViewDropPosition)
     -> gboolean;
    pub fn gtk_tree_view_create_row_drag_icon(tree_view: *mut GtkTreeView,
                                              path: *mut GtkTreePath) ->
     *mut cairo_surface_t;
    pub fn gtk_tree_view_set_enable_search(tree_view: *mut GtkTreeView,
                                           enable_search: gboolean);
    pub fn gtk_tree_view_get_enable_search(tree_view: *mut GtkTreeView) ->
     gboolean;
    pub fn gtk_tree_view_get_search_column(tree_view: *mut GtkTreeView) ->
     gint;
    pub fn gtk_tree_view_set_search_column(tree_view: *mut GtkTreeView,
                                           column: gint);
    pub fn gtk_tree_view_get_search_equal_func(tree_view: *mut GtkTreeView) ->
     GtkTreeViewSearchEqualFunc;
    pub fn gtk_tree_view_set_search_equal_func(tree_view: *mut GtkTreeView,
                                               search_equal_func:
                                                   GtkTreeViewSearchEqualFunc,
                                               search_user_data: gpointer,
                                               search_destroy:
                                                   GDestroyNotify);
    pub fn gtk_tree_view_get_search_entry(tree_view: *mut GtkTreeView) ->
     *mut GtkEntry;
    pub fn gtk_tree_view_set_search_entry(tree_view: *mut GtkTreeView,
                                          entry: *mut GtkEntry);
    pub fn gtk_tree_view_get_search_position_func(tree_view: *mut GtkTreeView)
     -> GtkTreeViewSearchPositionFunc;
    pub fn gtk_tree_view_set_search_position_func(tree_view: *mut GtkTreeView,
                                                  func:
                                                      GtkTreeViewSearchPositionFunc,
                                                  data: gpointer,
                                                  destroy: GDestroyNotify);
    pub fn gtk_tree_view_convert_widget_to_tree_coords(tree_view:
                                                           *mut GtkTreeView,
                                                       wx: gint, wy: gint,
                                                       tx: *mut gint,
                                                       ty: *mut gint);
    pub fn gtk_tree_view_convert_tree_to_widget_coords(tree_view:
                                                           *mut GtkTreeView,
                                                       tx: gint, ty: gint,
                                                       wx: *mut gint,
                                                       wy: *mut gint);
    pub fn gtk_tree_view_convert_widget_to_bin_window_coords(tree_view:
                                                                 *mut GtkTreeView,
                                                             wx: gint,
                                                             wy: gint,
                                                             bx: *mut gint,
                                                             by: *mut gint);
    pub fn gtk_tree_view_convert_bin_window_to_widget_coords(tree_view:
                                                                 *mut GtkTreeView,
                                                             bx: gint,
                                                             by: gint,
                                                             wx: *mut gint,
                                                             wy: *mut gint);
    pub fn gtk_tree_view_convert_tree_to_bin_window_coords(tree_view:
                                                               *mut GtkTreeView,
                                                           tx: gint, ty: gint,
                                                           bx: *mut gint,
                                                           by: *mut gint);
    pub fn gtk_tree_view_convert_bin_window_to_tree_coords(tree_view:
                                                               *mut GtkTreeView,
                                                           bx: gint, by: gint,
                                                           tx: *mut gint,
                                                           ty: *mut gint);
    pub fn gtk_tree_view_set_destroy_count_func(tree_view: *mut GtkTreeView,
                                                func: GtkTreeDestroyCountFunc,
                                                data: gpointer,
                                                destroy: GDestroyNotify);
    pub fn gtk_tree_view_set_fixed_height_mode(tree_view: *mut GtkTreeView,
                                               enable: gboolean);
    pub fn gtk_tree_view_get_fixed_height_mode(tree_view: *mut GtkTreeView) ->
     gboolean;
    pub fn gtk_tree_view_set_hover_selection(tree_view: *mut GtkTreeView,
                                             hover: gboolean);
    pub fn gtk_tree_view_get_hover_selection(tree_view: *mut GtkTreeView) ->
     gboolean;
    pub fn gtk_tree_view_set_hover_expand(tree_view: *mut GtkTreeView,
                                          expand: gboolean);
    pub fn gtk_tree_view_get_hover_expand(tree_view: *mut GtkTreeView) ->
     gboolean;
    pub fn gtk_tree_view_set_rubber_banding(tree_view: *mut GtkTreeView,
                                            enable: gboolean);
    pub fn gtk_tree_view_get_rubber_banding(tree_view: *mut GtkTreeView) ->
     gboolean;
    pub fn gtk_tree_view_is_rubber_banding_active(tree_view: *mut GtkTreeView)
     -> gboolean;
    pub fn gtk_tree_view_get_row_separator_func(tree_view: *mut GtkTreeView)
     -> GtkTreeViewRowSeparatorFunc;
    pub fn gtk_tree_view_set_row_separator_func(tree_view: *mut GtkTreeView,
                                                func:
                                                    GtkTreeViewRowSeparatorFunc,
                                                data: gpointer,
                                                destroy: GDestroyNotify);
    pub fn gtk_tree_view_get_grid_lines(tree_view: *mut GtkTreeView) ->
     GtkTreeViewGridLines;
    pub fn gtk_tree_view_set_grid_lines(tree_view: *mut GtkTreeView,
                                        grid_lines: GtkTreeViewGridLines);
    pub fn gtk_tree_view_get_enable_tree_lines(tree_view: *mut GtkTreeView) ->
     gboolean;
    pub fn gtk_tree_view_set_enable_tree_lines(tree_view: *mut GtkTreeView,
                                               enabled: gboolean);
    pub fn gtk_tree_view_set_show_expanders(tree_view: *mut GtkTreeView,
                                            enabled: gboolean);
    pub fn gtk_tree_view_get_show_expanders(tree_view: *mut GtkTreeView) ->
     gboolean;
    pub fn gtk_tree_view_set_level_indentation(tree_view: *mut GtkTreeView,
                                               indentation: gint);
    pub fn gtk_tree_view_get_level_indentation(tree_view: *mut GtkTreeView) ->
     gint;
    pub fn gtk_tree_view_set_tooltip_row(tree_view: *mut GtkTreeView,
                                         tooltip: *mut GtkTooltip,
                                         path: *mut GtkTreePath);
    pub fn gtk_tree_view_set_tooltip_cell(tree_view: *mut GtkTreeView,
                                          tooltip: *mut GtkTooltip,
                                          path: *mut GtkTreePath,
                                          column: *mut GtkTreeViewColumn,
                                          cell: *mut GtkCellRenderer);
    pub fn gtk_tree_view_get_tooltip_context(tree_view: *mut GtkTreeView,
                                             x: *mut gint, y: *mut gint,
                                             keyboard_tip: gboolean,
                                             model: *mut *mut GtkTreeModel,
                                             path: *mut *mut GtkTreePath,
                                             iter: *mut GtkTreeIter) ->
     gboolean;
    pub fn gtk_tree_view_set_tooltip_column(tree_view: *mut GtkTreeView,
                                            column: gint);
    pub fn gtk_tree_view_get_tooltip_column(tree_view: *mut GtkTreeView) ->
     gint;
    pub fn gtk_combo_box_get_type() -> GType;
    pub fn gtk_combo_box_new() -> *mut GtkWidget;
    pub fn gtk_combo_box_new_with_area(area: *mut GtkCellArea) ->
     *mut GtkWidget;
    pub fn gtk_combo_box_new_with_area_and_entry(area: *mut GtkCellArea) ->
     *mut GtkWidget;
    pub fn gtk_combo_box_new_with_entry() -> *mut GtkWidget;
    pub fn gtk_combo_box_new_with_model(model: *mut GtkTreeModel) ->
     *mut GtkWidget;
    pub fn gtk_combo_box_new_with_model_and_entry(model: *mut GtkTreeModel) ->
     *mut GtkWidget;
    pub fn gtk_combo_box_get_wrap_width(combo_box: *mut GtkComboBox) -> gint;
    pub fn gtk_combo_box_set_wrap_width(combo_box: *mut GtkComboBox,
                                        width: gint);
    pub fn gtk_combo_box_get_row_span_column(combo_box: *mut GtkComboBox) ->
     gint;
    pub fn gtk_combo_box_set_row_span_column(combo_box: *mut GtkComboBox,
                                             row_span: gint);
    pub fn gtk_combo_box_get_column_span_column(combo_box: *mut GtkComboBox)
     -> gint;
    pub fn gtk_combo_box_set_column_span_column(combo_box: *mut GtkComboBox,
                                                column_span: gint);
    pub fn gtk_combo_box_get_add_tearoffs(combo_box: *mut GtkComboBox) ->
     gboolean;
    pub fn gtk_combo_box_set_add_tearoffs(combo_box: *mut GtkComboBox,
                                          add_tearoffs: gboolean);
    pub fn gtk_combo_box_get_title(combo_box: *mut GtkComboBox) -> *gchar;
    pub fn gtk_combo_box_set_title(combo_box: *mut GtkComboBox,
                                   title: *gchar);
    pub fn gtk_combo_box_get_focus_on_click(combo: *mut GtkComboBox) ->
     gboolean;
    pub fn gtk_combo_box_set_focus_on_click(combo: *mut GtkComboBox,
                                            focus_on_click: gboolean);
    pub fn gtk_combo_box_get_active(combo_box: *mut GtkComboBox) -> gint;
    pub fn gtk_combo_box_set_active(combo_box: *mut GtkComboBox,
                                    index_: gint);
    pub fn gtk_combo_box_get_active_iter(combo_box: *mut GtkComboBox,
                                         iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_combo_box_set_active_iter(combo_box: *mut GtkComboBox,
                                         iter: *mut GtkTreeIter);
    pub fn gtk_combo_box_set_model(combo_box: *mut GtkComboBox,
                                   model: *mut GtkTreeModel);
    pub fn gtk_combo_box_get_model(combo_box: *mut GtkComboBox) ->
     *mut GtkTreeModel;
    pub fn gtk_combo_box_get_row_separator_func(combo_box: *mut GtkComboBox)
     -> GtkTreeViewRowSeparatorFunc;
    pub fn gtk_combo_box_set_row_separator_func(combo_box: *mut GtkComboBox,
                                                func:
                                                    GtkTreeViewRowSeparatorFunc,
                                                data: gpointer,
                                                destroy: GDestroyNotify);
    pub fn gtk_combo_box_set_button_sensitivity(combo_box: *mut GtkComboBox,
                                                sensitivity:
                                                    GtkSensitivityType);
    pub fn gtk_combo_box_get_button_sensitivity(combo_box: *mut GtkComboBox)
     -> GtkSensitivityType;
    pub fn gtk_combo_box_get_has_entry(combo_box: *mut GtkComboBox) ->
     gboolean;
    pub fn gtk_combo_box_set_entry_text_column(combo_box: *mut GtkComboBox,
                                               text_column: gint);
    pub fn gtk_combo_box_get_entry_text_column(combo_box: *mut GtkComboBox) ->
     gint;
    pub fn gtk_combo_box_set_popup_fixed_width(combo_box: *mut GtkComboBox,
                                               fixed: gboolean);
    pub fn gtk_combo_box_get_popup_fixed_width(combo_box: *mut GtkComboBox) ->
     gboolean;
    pub fn gtk_combo_box_popup(combo_box: *mut GtkComboBox);
    pub fn gtk_combo_box_popup_for_device(combo_box: *mut GtkComboBox,
                                          device: *mut GdkDevice);
    pub fn gtk_combo_box_popdown(combo_box: *mut GtkComboBox);
    pub fn gtk_combo_box_get_popup_accessible(combo_box: *mut GtkComboBox) ->
     *mut AtkObject;
    pub fn gtk_combo_box_get_id_column(combo_box: *mut GtkComboBox) -> gint;
    pub fn gtk_combo_box_set_id_column(combo_box: *mut GtkComboBox,
                                       id_column: gint);
    pub fn gtk_combo_box_get_active_id(combo_box: *mut GtkComboBox) -> *gchar;
    pub fn gtk_combo_box_set_active_id(combo_box: *mut GtkComboBox,
                                       active_id: *gchar) -> gboolean;
    pub fn gtk_app_chooser_button_get_type() -> GType;
    pub fn gtk_app_chooser_button_new(content_type: *gchar) -> *mut GtkWidget;
    pub fn gtk_app_chooser_button_append_separator(_self:
                                                       *mut GtkAppChooserButton);
    pub fn gtk_app_chooser_button_append_custom_item(_self:
                                                         *mut GtkAppChooserButton,
                                                     name: *gchar,
                                                     label: *gchar,
                                                     icon: *mut GIcon);
    pub fn gtk_app_chooser_button_set_active_custom_item(_self:
                                                             *mut GtkAppChooserButton,
                                                         name: *gchar);
    pub fn gtk_app_chooser_button_set_show_dialog_item(_self:
                                                           *mut GtkAppChooserButton,
                                                       setting: gboolean);
    pub fn gtk_app_chooser_button_get_show_dialog_item(_self:
                                                           *mut GtkAppChooserButton)
     -> gboolean;
    pub fn gtk_app_chooser_button_set_heading(_self: *mut GtkAppChooserButton,
                                              heading: *gchar);
    pub fn gtk_app_chooser_button_get_heading(_self: *mut GtkAppChooserButton)
     -> *gchar;
    pub fn gtk_app_chooser_button_set_show_default_item(_self:
                                                            *mut GtkAppChooserButton,
                                                        setting: gboolean);
    pub fn gtk_app_chooser_button_get_show_default_item(_self:
                                                            *mut GtkAppChooserButton)
     -> gboolean;
    pub fn gtk_application_window_get_type() -> GType;
    pub fn gtk_application_window_new(application: *mut GtkApplication) ->
     *mut GtkWidget;
    pub fn gtk_application_window_set_show_menubar(window:
                                                       *mut GtkApplicationWindow,
                                                   show_menubar: gboolean);
    pub fn gtk_application_window_get_show_menubar(window:
                                                       *mut GtkApplicationWindow)
     -> gboolean;
    pub fn gtk_application_window_get_id(window: *mut GtkApplicationWindow) ->
     guint;
    pub fn gtk_arrow_get_type() -> GType;
    pub fn gtk_arrow_new(arrow_type: GtkArrowType, shadow_type: GtkShadowType)
     -> *mut GtkWidget;
    pub fn gtk_arrow_set(arrow: *mut GtkArrow, arrow_type: GtkArrowType,
                         shadow_type: GtkShadowType);
    pub fn gtk_frame_get_type() -> GType;
    pub fn gtk_frame_new(label: *gchar) -> *mut GtkWidget;
    pub fn gtk_frame_set_label(frame: *mut GtkFrame, label: *gchar);
    pub fn gtk_frame_get_label(frame: *mut GtkFrame) -> *gchar;
    pub fn gtk_frame_set_label_widget(frame: *mut GtkFrame,
                                      label_widget: *mut GtkWidget);
    pub fn gtk_frame_get_label_widget(frame: *mut GtkFrame) -> *mut GtkWidget;
    pub fn gtk_frame_set_label_align(frame: *mut GtkFrame, xalign: gfloat,
                                     yalign: gfloat);
    pub fn gtk_frame_get_label_align(frame: *mut GtkFrame,
                                     xalign: *mut gfloat,
                                     yalign: *mut gfloat);
    pub fn gtk_frame_set_shadow_type(frame: *mut GtkFrame,
                                     _type: GtkShadowType);
    pub fn gtk_frame_get_shadow_type(frame: *mut GtkFrame) -> GtkShadowType;
    pub fn gtk_aspect_frame_get_type() -> GType;
    pub fn gtk_aspect_frame_new(label: *gchar, xalign: gfloat, yalign: gfloat,
                                ratio: gfloat, obey_child: gboolean) ->
     *mut GtkWidget;
    pub fn gtk_aspect_frame_set(aspect_frame: *mut GtkAspectFrame,
                                xalign: gfloat, yalign: gfloat, ratio: gfloat,
                                obey_child: gboolean);
    pub fn gtk_assistant_get_type() -> GType;
    pub fn gtk_assistant_new() -> *mut GtkWidget;
    pub fn gtk_assistant_next_page(assistant: *mut GtkAssistant);
    pub fn gtk_assistant_previous_page(assistant: *mut GtkAssistant);
    pub fn gtk_assistant_get_current_page(assistant: *mut GtkAssistant) ->
     gint;
    pub fn gtk_assistant_set_current_page(assistant: *mut GtkAssistant,
                                          page_num: gint);
    pub fn gtk_assistant_get_n_pages(assistant: *mut GtkAssistant) -> gint;
    pub fn gtk_assistant_get_nth_page(assistant: *mut GtkAssistant,
                                      page_num: gint) -> *mut GtkWidget;
    pub fn gtk_assistant_prepend_page(assistant: *mut GtkAssistant,
                                      page: *mut GtkWidget) -> gint;
    pub fn gtk_assistant_append_page(assistant: *mut GtkAssistant,
                                     page: *mut GtkWidget) -> gint;
    pub fn gtk_assistant_insert_page(assistant: *mut GtkAssistant,
                                     page: *mut GtkWidget, position: gint) ->
     gint;
    pub fn gtk_assistant_remove_page(assistant: *mut GtkAssistant,
                                     page_num: gint);
    pub fn gtk_assistant_set_forward_page_func(assistant: *mut GtkAssistant,
                                               page_func:
                                                   GtkAssistantPageFunc,
                                               data: gpointer,
                                               destroy: GDestroyNotify);
    pub fn gtk_assistant_set_page_type(assistant: *mut GtkAssistant,
                                       page: *mut GtkWidget,
                                       _type: GtkAssistantPageType);
    pub fn gtk_assistant_get_page_type(assistant: *mut GtkAssistant,
                                       page: *mut GtkWidget) ->
     GtkAssistantPageType;
    pub fn gtk_assistant_set_page_title(assistant: *mut GtkAssistant,
                                        page: *mut GtkWidget, title: *gchar);
    pub fn gtk_assistant_get_page_title(assistant: *mut GtkAssistant,
                                        page: *mut GtkWidget) -> *gchar;
    pub fn gtk_assistant_set_page_header_image(assistant: *mut GtkAssistant,
                                               page: *mut GtkWidget,
                                               pixbuf: *mut GdkPixbuf);
    pub fn gtk_assistant_get_page_header_image(assistant: *mut GtkAssistant,
                                               page: *mut GtkWidget) ->
     *mut GdkPixbuf;
    pub fn gtk_assistant_set_page_side_image(assistant: *mut GtkAssistant,
                                             page: *mut GtkWidget,
                                             pixbuf: *mut GdkPixbuf);
    pub fn gtk_assistant_get_page_side_image(assistant: *mut GtkAssistant,
                                             page: *mut GtkWidget) ->
     *mut GdkPixbuf;
    pub fn gtk_assistant_set_page_complete(assistant: *mut GtkAssistant,
                                           page: *mut GtkWidget,
                                           complete: gboolean);
    pub fn gtk_assistant_get_page_complete(assistant: *mut GtkAssistant,
                                           page: *mut GtkWidget) -> gboolean;
    pub fn gtk_assistant_add_action_widget(assistant: *mut GtkAssistant,
                                           child: *mut GtkWidget);
    pub fn gtk_assistant_remove_action_widget(assistant: *mut GtkAssistant,
                                              child: *mut GtkWidget);
    pub fn gtk_assistant_update_buttons_state(assistant: *mut GtkAssistant);
    pub fn gtk_assistant_commit(assistant: *mut GtkAssistant);
    pub fn gtk_button_box_get_type() -> GType;
    pub fn gtk_button_box_new(orientation: GtkOrientation) -> *mut GtkWidget;
    pub fn gtk_button_box_get_layout(widget: *mut GtkButtonBox) ->
     GtkButtonBoxStyle;
    pub fn gtk_button_box_set_layout(widget: *mut GtkButtonBox,
                                     layout_style: GtkButtonBoxStyle);
    pub fn gtk_button_box_get_child_secondary(widget: *mut GtkButtonBox,
                                              child: *mut GtkWidget) ->
     gboolean;
    pub fn gtk_button_box_set_child_secondary(widget: *mut GtkButtonBox,
                                              child: *mut GtkWidget,
                                              is_secondary: gboolean);
    pub fn gtk_button_box_get_child_non_homogeneous(widget: *mut GtkButtonBox,
                                                    child: *mut GtkWidget) ->
     gboolean;
    pub fn gtk_button_box_set_child_non_homogeneous(widget: *mut GtkButtonBox,
                                                    child: *mut GtkWidget,
                                                    non_homogeneous:
                                                        gboolean);
    pub fn gtk_binding_set_new(set_name: *gchar) -> *mut GtkBindingSet;
    pub fn gtk_binding_set_by_class(object_class: gpointer) ->
     *mut GtkBindingSet;
    pub fn gtk_binding_set_find(set_name: *gchar) -> *mut GtkBindingSet;
    pub fn gtk_bindings_activate(object: *mut GObject, keyval: guint,
                                 modifiers: GdkModifierType) -> gboolean;
    pub fn gtk_bindings_activate_event(object: *mut GObject,
                                       event: *mut GdkEventKey) -> gboolean;
    pub fn gtk_binding_set_activate(binding_set: *mut GtkBindingSet,
                                    keyval: guint, modifiers: GdkModifierType,
                                    object: *mut GObject) -> gboolean;
    pub fn gtk_binding_entry_skip(binding_set: *mut GtkBindingSet,
                                  keyval: guint, modifiers: GdkModifierType);
    pub fn gtk_binding_entry_add_signal(binding_set: *mut GtkBindingSet,
                                        keyval: guint,
                                        modifiers: GdkModifierType,
                                        signal_name: *gchar,
                                        n_args: guint, ...);
    pub fn gtk_binding_entry_add_signall(binding_set: *mut GtkBindingSet,
                                         keyval: guint,
                                         modifiers: GdkModifierType,
                                         signal_name: *gchar,
                                         binding_args: *mut GSList);
    pub fn gtk_binding_entry_add_signal_from_string(binding_set:
                                                        *mut GtkBindingSet,
                                                    signal_desc: *gchar) ->
     GTokenType;
    pub fn gtk_binding_entry_remove(binding_set: *mut GtkBindingSet,
                                    keyval: guint,
                                    modifiers: GdkModifierType);
    pub fn gtk_binding_set_add_path(binding_set: *mut GtkBindingSet,
                                    path_type: GtkPathType,
                                    path_pattern: *gchar,
                                    priority: GtkPathPriorityType);
    pub fn gtk_builder_error_quark() -> GQuark;
    pub fn gtk_builder_get_type() -> GType;
    pub fn gtk_builder_new() -> *mut GtkBuilder;
    pub fn gtk_builder_add_from_file(builder: *mut GtkBuilder,
                                     filename: *gchar,
                                     error: *mut *mut GError) -> guint;
    pub fn gtk_builder_add_from_resource(builder: *mut GtkBuilder,
                                         resource_path: *gchar,
                                         error: *mut *mut GError) -> guint;
    pub fn gtk_builder_add_from_string(builder: *mut GtkBuilder,
                                       buffer: *gchar, length: gsize,
                                       error: *mut *mut GError) -> guint;
    pub fn gtk_builder_add_objects_from_file(builder: *mut GtkBuilder,
                                             filename: *gchar,
                                             object_ids: *mut *mut gchar,
                                             error: *mut *mut GError) ->
     guint;
    pub fn gtk_builder_add_objects_from_resource(builder: *mut GtkBuilder,
                                                 resource_path: *gchar,
                                                 object_ids: *mut *mut gchar,
                                                 error: *mut *mut GError) ->
     guint;
    pub fn gtk_builder_add_objects_from_string(builder: *mut GtkBuilder,
                                               buffer: *gchar, length: gsize,
                                               object_ids: *mut *mut gchar,
                                               error: *mut *mut GError) ->
     guint;
    pub fn gtk_builder_get_object(builder: *mut GtkBuilder, name: *gchar) ->
     *mut GObject;
    pub fn gtk_builder_get_objects(builder: *mut GtkBuilder) -> *mut GSList;
    pub fn gtk_builder_expose_object(builder: *mut GtkBuilder, name: *gchar,
                                     object: *mut GObject);
    pub fn gtk_builder_connect_signals(builder: *mut GtkBuilder,
                                       user_data: gpointer);
    pub fn gtk_builder_connect_signals_full(builder: *mut GtkBuilder,
                                            func: GtkBuilderConnectFunc,
                                            user_data: gpointer);
    pub fn gtk_builder_set_translation_domain(builder: *mut GtkBuilder,
                                              domain: *gchar);
    pub fn gtk_builder_get_translation_domain(builder: *mut GtkBuilder) ->
     *gchar;
    pub fn gtk_builder_get_type_from_name(builder: *mut GtkBuilder,
                                          type_name: *c_schar) -> GType;
    pub fn gtk_builder_value_from_string(builder: *mut GtkBuilder,
                                         pspec: *mut GParamSpec,
                                         string: *gchar, value: *mut GValue,
                                         error: *mut *mut GError) -> gboolean;
    pub fn gtk_builder_value_from_string_type(builder: *mut GtkBuilder,
                                              _type: GType, string: *gchar,
                                              value: *mut GValue,
                                              error: *mut *mut GError) ->
     gboolean;
    pub fn gtk_builder_new_from_file(filename: *gchar) -> *mut GtkBuilder;
    pub fn gtk_builder_new_from_resource(resource_path: *gchar) ->
     *mut GtkBuilder;
    pub fn gtk_builder_new_from_string(string: *gchar, length: gssize) ->
     *mut GtkBuilder;
    pub fn gtk_builder_add_callback_symbol(builder: *mut GtkBuilder,
                                           callback_name: *gchar,
                                           callback_symbol: GCallback);
    pub fn gtk_builder_add_callback_symbols(builder: *mut GtkBuilder,
                                            first_callback_name: *gchar,
                                            first_callback_symbol:
                                                GCallback, ...);
    pub fn gtk_builder_lookup_callback_symbol(builder: *mut GtkBuilder,
                                              callback_name: *gchar) ->
     GCallback;
    pub fn gtk_buildable_get_type() -> GType;
    pub fn gtk_buildable_set_name(buildable: *mut GtkBuildable, name: *gchar);
    pub fn gtk_buildable_get_name(buildable: *mut GtkBuildable) -> *gchar;
    pub fn gtk_buildable_add_child(buildable: *mut GtkBuildable,
                                   builder: *mut GtkBuilder,
                                   child: *mut GObject, _type: *gchar);
    pub fn gtk_buildable_set_buildable_property(buildable: *mut GtkBuildable,
                                                builder: *mut GtkBuilder,
                                                name: *gchar, value: *GValue);
    pub fn gtk_buildable_construct_child(buildable: *mut GtkBuildable,
                                         builder: *mut GtkBuilder,
                                         name: *gchar) -> *mut GObject;
    pub fn gtk_buildable_custom_tag_start(buildable: *mut GtkBuildable,
                                          builder: *mut GtkBuilder,
                                          child: *mut GObject,
                                          tagname: *gchar,
                                          parser: *mut GMarkupParser,
                                          data: *mut gpointer) -> gboolean;
    pub fn gtk_buildable_custom_tag_end(buildable: *mut GtkBuildable,
                                        builder: *mut GtkBuilder,
                                        child: *mut GObject, tagname: *gchar,
                                        data: *mut gpointer);
    pub fn gtk_buildable_custom_finished(buildable: *mut GtkBuildable,
                                         builder: *mut GtkBuilder,
                                         child: *mut GObject, tagname: *gchar,
                                         data: gpointer);
    pub fn gtk_buildable_parser_finished(buildable: *mut GtkBuildable,
                                         builder: *mut GtkBuilder);
    pub fn gtk_buildable_get_internal_child(buildable: *mut GtkBuildable,
                                            builder: *mut GtkBuilder,
                                            childname: *gchar) ->
     *mut GObject;
    pub fn gtk_button_get_type() -> GType;
    pub fn gtk_button_new() -> *mut GtkWidget;
    pub fn gtk_button_new_with_label(label: *gchar) -> *mut GtkWidget;
    pub fn gtk_button_new_from_icon_name(icon_name: *gchar, size: GtkIconSize)
     -> *mut GtkWidget;
    pub fn gtk_button_new_from_stock(stock_id: *gchar) -> *mut GtkWidget;
    pub fn gtk_button_new_with_mnemonic(label: *gchar) -> *mut GtkWidget;
    pub fn gtk_button_clicked(button: *mut GtkButton);
    pub fn gtk_button_pressed(button: *mut GtkButton);
    pub fn gtk_button_released(button: *mut GtkButton);
    pub fn gtk_button_enter(button: *mut GtkButton);
    pub fn gtk_button_leave(button: *mut GtkButton);
    pub fn gtk_button_set_relief(button: *mut GtkButton,
                                 newstyle: GtkReliefStyle);
    pub fn gtk_button_get_relief(button: *mut GtkButton) -> GtkReliefStyle;
    pub fn gtk_button_set_label(button: *mut GtkButton, label: *gchar);
    pub fn gtk_button_get_label(button: *mut GtkButton) -> *gchar;
    pub fn gtk_button_set_use_underline(button: *mut GtkButton,
                                        use_underline: gboolean);
    pub fn gtk_button_get_use_underline(button: *mut GtkButton) -> gboolean;
    pub fn gtk_button_set_use_stock(button: *mut GtkButton,
                                    use_stock: gboolean);
    pub fn gtk_button_get_use_stock(button: *mut GtkButton) -> gboolean;
    pub fn gtk_button_set_focus_on_click(button: *mut GtkButton,
                                         focus_on_click: gboolean);
    pub fn gtk_button_get_focus_on_click(button: *mut GtkButton) -> gboolean;
    pub fn gtk_button_set_alignment(button: *mut GtkButton, xalign: gfloat,
                                    yalign: gfloat);
    pub fn gtk_button_get_alignment(button: *mut GtkButton,
                                    xalign: *mut gfloat, yalign: *mut gfloat);
    pub fn gtk_button_set_image(button: *mut GtkButton,
                                image: *mut GtkWidget);
    pub fn gtk_button_get_image(button: *mut GtkButton) -> *mut GtkWidget;
    pub fn gtk_button_set_image_position(button: *mut GtkButton,
                                         position: GtkPositionType);
    pub fn gtk_button_get_image_position(button: *mut GtkButton) ->
     GtkPositionType;
    pub fn gtk_button_set_always_show_image(button: *mut GtkButton,
                                            always_show: gboolean);
    pub fn gtk_button_get_always_show_image(button: *mut GtkButton) ->
     gboolean;
    pub fn gtk_button_get_event_window(button: *mut GtkButton) ->
     *mut GdkWindow;
    pub fn gtk_calendar_get_type() -> GType;
    pub fn gtk_calendar_new() -> *mut GtkWidget;
    pub fn gtk_calendar_select_month(calendar: *mut GtkCalendar, month: guint,
                                     year: guint);
    pub fn gtk_calendar_select_day(calendar: *mut GtkCalendar, day: guint);
    pub fn gtk_calendar_mark_day(calendar: *mut GtkCalendar, day: guint);
    pub fn gtk_calendar_unmark_day(calendar: *mut GtkCalendar, day: guint);
    pub fn gtk_calendar_clear_marks(calendar: *mut GtkCalendar);
    pub fn gtk_calendar_set_display_options(calendar: *mut GtkCalendar,
                                            flags: GtkCalendarDisplayOptions);
    pub fn gtk_calendar_get_display_options(calendar: *mut GtkCalendar) ->
     GtkCalendarDisplayOptions;
    pub fn gtk_calendar_get_date(calendar: *mut GtkCalendar, year: *mut guint,
                                 month: *mut guint, day: *mut guint);
    pub fn gtk_calendar_set_detail_func(calendar: *mut GtkCalendar,
                                        func: GtkCalendarDetailFunc,
                                        data: gpointer,
                                        destroy: GDestroyNotify);
    pub fn gtk_calendar_set_detail_width_chars(calendar: *mut GtkCalendar,
                                               chars: gint);
    pub fn gtk_calendar_set_detail_height_rows(calendar: *mut GtkCalendar,
                                               rows: gint);
    pub fn gtk_calendar_get_detail_width_chars(calendar: *mut GtkCalendar) ->
     gint;
    pub fn gtk_calendar_get_detail_height_rows(calendar: *mut GtkCalendar) ->
     gint;
    pub fn gtk_calendar_get_day_is_marked(calendar: *mut GtkCalendar,
                                          day: guint) -> gboolean;
    pub fn gtk_cell_area_box_get_type() -> GType;
    pub fn gtk_cell_area_box_new() -> *mut GtkCellArea;
    pub fn gtk_cell_area_box_pack_start(box: *mut GtkCellAreaBox,
                                        renderer: *mut GtkCellRenderer,
                                        expand: gboolean, align: gboolean,
                                        fixed: gboolean);
    pub fn gtk_cell_area_box_pack_end(box: *mut GtkCellAreaBox,
                                      renderer: *mut GtkCellRenderer,
                                      expand: gboolean, align: gboolean,
                                      fixed: gboolean);
    pub fn gtk_cell_area_box_get_spacing(box: *mut GtkCellAreaBox) -> gint;
    pub fn gtk_cell_area_box_set_spacing(box: *mut GtkCellAreaBox,
                                         spacing: gint);
    pub fn _gtk_cell_area_box_group_visible(box: *mut GtkCellAreaBox,
                                            group_idx: gint) -> gboolean;
    pub fn gtk_cell_area_context_get_type() -> GType;
    pub fn gtk_cell_area_context_get_area(context: *mut GtkCellAreaContext) ->
     *mut GtkCellArea;
    pub fn gtk_cell_area_context_allocate(context: *mut GtkCellAreaContext,
                                          width: gint, height: gint);
    pub fn gtk_cell_area_context_reset(context: *mut GtkCellAreaContext);
    pub fn gtk_cell_area_context_get_preferred_width(context:
                                                         *mut GtkCellAreaContext,
                                                     minimum_width: *mut gint,
                                                     natural_width:
                                                         *mut gint);
    pub fn gtk_cell_area_context_get_preferred_height(context:
                                                          *mut GtkCellAreaContext,
                                                      minimum_height:
                                                          *mut gint,
                                                      natural_height:
                                                          *mut gint);
    pub fn gtk_cell_area_context_get_preferred_height_for_width(context:
                                                                    *mut GtkCellAreaContext,
                                                                width: gint,
                                                                minimum_height:
                                                                    *mut gint,
                                                                natural_height:
                                                                    *mut gint);
    pub fn gtk_cell_area_context_get_preferred_width_for_height(context:
                                                                    *mut GtkCellAreaContext,
                                                                height: gint,
                                                                minimum_width:
                                                                    *mut gint,
                                                                natural_width:
                                                                    *mut gint);
    pub fn gtk_cell_area_context_get_allocation(context:
                                                    *mut GtkCellAreaContext,
                                                width: *mut gint,
                                                height: *mut gint);
    pub fn gtk_cell_area_context_push_preferred_width(context:
                                                          *mut GtkCellAreaContext,
                                                      minimum_width: gint,
                                                      natural_width: gint);
    pub fn gtk_cell_area_context_push_preferred_height(context:
                                                           *mut GtkCellAreaContext,
                                                       minimum_height: gint,
                                                       natural_height: gint);
    pub fn gtk_cell_layout_get_type() -> GType;
    pub fn gtk_cell_layout_pack_start(cell_layout: *mut GtkCellLayout,
                                      cell: *mut GtkCellRenderer,
                                      expand: gboolean);
    pub fn gtk_cell_layout_pack_end(cell_layout: *mut GtkCellLayout,
                                    cell: *mut GtkCellRenderer,
                                    expand: gboolean);
    pub fn gtk_cell_layout_get_cells(cell_layout: *mut GtkCellLayout) ->
     *mut GList;
    pub fn gtk_cell_layout_clear(cell_layout: *mut GtkCellLayout);
    pub fn gtk_cell_layout_set_attributes(cell_layout: *mut GtkCellLayout,
                                          cell: *mut GtkCellRenderer, ...);
    pub fn gtk_cell_layout_add_attribute(cell_layout: *mut GtkCellLayout,
                                         cell: *mut GtkCellRenderer,
                                         attribute: *gchar, column: gint);
    pub fn gtk_cell_layout_set_cell_data_func(cell_layout: *mut GtkCellLayout,
                                              cell: *mut GtkCellRenderer,
                                              func: GtkCellLayoutDataFunc,
                                              func_data: gpointer,
                                              destroy: GDestroyNotify);
    pub fn gtk_cell_layout_clear_attributes(cell_layout: *mut GtkCellLayout,
                                            cell: *mut GtkCellRenderer);
    pub fn gtk_cell_layout_reorder(cell_layout: *mut GtkCellLayout,
                                   cell: *mut GtkCellRenderer,
                                   position: gint);
    pub fn gtk_cell_layout_get_area(cell_layout: *mut GtkCellLayout) ->
     *mut GtkCellArea;
    pub fn _gtk_cell_layout_buildable_custom_tag_start(buildable:
                                                           *mut GtkBuildable,
                                                       builder:
                                                           *mut GtkBuilder,
                                                       child: *mut GObject,
                                                       tagname: *gchar,
                                                       parser:
                                                           *mut GMarkupParser,
                                                       data: *mut gpointer) ->
     gboolean;
    pub fn _gtk_cell_layout_buildable_custom_tag_end(buildable:
                                                         *mut GtkBuildable,
                                                     builder: *mut GtkBuilder,
                                                     child: *mut GObject,
                                                     tagname: *gchar,
                                                     data: *mut gpointer) ->
     gboolean;
    pub fn _gtk_cell_layout_buildable_add_child(buildable: *mut GtkBuildable,
                                                builder: *mut GtkBuilder,
                                                child: *mut GObject,
                                                _type: *gchar);
    pub fn gtk_cell_renderer_text_get_type() -> GType;
    pub fn gtk_cell_renderer_text_new() -> *mut GtkCellRenderer;
    pub fn gtk_cell_renderer_text_set_fixed_height_from_font(renderer:
                                                                 *mut GtkCellRendererText,
                                                             number_of_rows:
                                                                 gint);
    pub fn gtk_cell_renderer_accel_get_type() -> GType;
    pub fn gtk_cell_renderer_accel_new() -> *mut GtkCellRenderer;
    pub fn gtk_cell_renderer_combo_get_type() -> GType;
    pub fn gtk_cell_renderer_combo_new() -> *mut GtkCellRenderer;
    pub fn gtk_cell_renderer_pixbuf_get_type() -> GType;
    pub fn gtk_cell_renderer_pixbuf_new() -> *mut GtkCellRenderer;
    pub fn gtk_cell_renderer_progress_get_type() -> GType;
    pub fn gtk_cell_renderer_progress_new() -> *mut GtkCellRenderer;
    pub fn gtk_cell_renderer_spin_get_type() -> GType;
    pub fn gtk_cell_renderer_spin_new() -> *mut GtkCellRenderer;
    pub fn gtk_cell_renderer_spinner_get_type() -> GType;
    pub fn gtk_cell_renderer_spinner_new() -> *mut GtkCellRenderer;
    pub fn gtk_cell_renderer_toggle_get_type() -> GType;
    pub fn gtk_cell_renderer_toggle_new() -> *mut GtkCellRenderer;
    pub fn gtk_cell_renderer_toggle_get_radio(toggle:
                                                  *mut GtkCellRendererToggle)
     -> gboolean;
    pub fn gtk_cell_renderer_toggle_set_radio(toggle:
                                                  *mut GtkCellRendererToggle,
                                              radio: gboolean);
    pub fn gtk_cell_renderer_toggle_get_active(toggle:
                                                   *mut GtkCellRendererToggle)
     -> gboolean;
    pub fn gtk_cell_renderer_toggle_set_active(toggle:
                                                   *mut GtkCellRendererToggle,
                                               setting: gboolean);
    pub fn gtk_cell_renderer_toggle_get_activatable(toggle:
                                                        *mut GtkCellRendererToggle)
     -> gboolean;
    pub fn gtk_cell_renderer_toggle_set_activatable(toggle:
                                                        *mut GtkCellRendererToggle,
                                                    setting: gboolean);
    pub fn gtk_cell_view_get_type() -> GType;
    pub fn gtk_cell_view_new() -> *mut GtkWidget;
    pub fn gtk_cell_view_new_with_context(area: *mut GtkCellArea,
                                          context: *mut GtkCellAreaContext) ->
     *mut GtkWidget;
    pub fn gtk_cell_view_new_with_text(text: *gchar) -> *mut GtkWidget;
    pub fn gtk_cell_view_new_with_markup(markup: *gchar) -> *mut GtkWidget;
    pub fn gtk_cell_view_new_with_pixbuf(pixbuf: *mut GdkPixbuf) ->
     *mut GtkWidget;
    pub fn gtk_cell_view_set_model(cell_view: *mut GtkCellView,
                                   model: *mut GtkTreeModel);
    pub fn gtk_cell_view_get_model(cell_view: *mut GtkCellView) ->
     *mut GtkTreeModel;
    pub fn gtk_cell_view_set_displayed_row(cell_view: *mut GtkCellView,
                                           path: *mut GtkTreePath);
    pub fn gtk_cell_view_get_displayed_row(cell_view: *mut GtkCellView) ->
     *mut GtkTreePath;
    pub fn gtk_cell_view_set_background_rgba(cell_view: *mut GtkCellView,
                                             rgba: *GdkRGBA);
    pub fn gtk_cell_view_get_draw_sensitive(cell_view: *mut GtkCellView) ->
     gboolean;
    pub fn gtk_cell_view_set_draw_sensitive(cell_view: *mut GtkCellView,
                                            draw_sensitive: gboolean);
    pub fn gtk_cell_view_get_fit_model(cell_view: *mut GtkCellView) ->
     gboolean;
    pub fn gtk_cell_view_set_fit_model(cell_view: *mut GtkCellView,
                                       fit_model: gboolean);
    pub fn gtk_cell_view_get_size_of_row(cell_view: *mut GtkCellView,
                                         path: *mut GtkTreePath,
                                         requisition: *mut GtkRequisition) ->
     gboolean;
    pub fn gtk_cell_view_set_background_color(cell_view: *mut GtkCellView,
                                              color: *GdkColor);
    pub fn gtk_toggle_button_get_type() -> GType;
    pub fn gtk_toggle_button_new() -> *mut GtkWidget;
    pub fn gtk_toggle_button_new_with_label(label: *gchar) -> *mut GtkWidget;
    pub fn gtk_toggle_button_new_with_mnemonic(label: *gchar) ->
     *mut GtkWidget;
    pub fn gtk_toggle_button_set_mode(toggle_button: *mut GtkToggleButton,
                                      draw_indicator: gboolean);
    pub fn gtk_toggle_button_get_mode(toggle_button: *mut GtkToggleButton) ->
     gboolean;
    pub fn gtk_toggle_button_set_active(toggle_button: *mut GtkToggleButton,
                                        is_active: gboolean);
    pub fn gtk_toggle_button_get_active(toggle_button: *mut GtkToggleButton)
     -> gboolean;
    pub fn gtk_toggle_button_toggled(toggle_button: *mut GtkToggleButton);
    pub fn gtk_toggle_button_set_inconsistent(toggle_button:
                                                  *mut GtkToggleButton,
                                              setting: gboolean);
    pub fn gtk_toggle_button_get_inconsistent(toggle_button:
                                                  *mut GtkToggleButton) ->
     gboolean;
    pub fn _gtk_toggle_button_set_active(toggle_button: *mut GtkToggleButton,
                                         is_active: gboolean);
    pub fn gtk_check_button_get_type() -> GType;
    pub fn gtk_check_button_new() -> *mut GtkWidget;
    pub fn gtk_check_button_new_with_label(label: *gchar) -> *mut GtkWidget;
    pub fn gtk_check_button_new_with_mnemonic(label: *gchar) ->
     *mut GtkWidget;
    pub fn _gtk_check_button_get_props(check_button: *mut GtkCheckButton,
                                       indicator_size: *mut gint,
                                       indicator_spacing: *mut gint);
    pub fn gtk_menu_item_get_type() -> GType;
    pub fn gtk_menu_item_new() -> *mut GtkWidget;
    pub fn gtk_menu_item_new_with_label(label: *gchar) -> *mut GtkWidget;
    pub fn gtk_menu_item_new_with_mnemonic(label: *gchar) -> *mut GtkWidget;
    pub fn gtk_menu_item_set_submenu(menu_item: *mut GtkMenuItem,
                                     submenu: *mut GtkWidget);
    pub fn gtk_menu_item_get_submenu(menu_item: *mut GtkMenuItem) ->
     *mut GtkWidget;
    pub fn gtk_menu_item_select(menu_item: *mut GtkMenuItem);
    pub fn gtk_menu_item_deselect(menu_item: *mut GtkMenuItem);
    pub fn gtk_menu_item_activate(menu_item: *mut GtkMenuItem);
    pub fn gtk_menu_item_toggle_size_request(menu_item: *mut GtkMenuItem,
                                             requisition: *mut gint);
    pub fn gtk_menu_item_toggle_size_allocate(menu_item: *mut GtkMenuItem,
                                              allocation: gint);
    pub fn gtk_menu_item_set_right_justified(menu_item: *mut GtkMenuItem,
                                             right_justified: gboolean);
    pub fn gtk_menu_item_get_right_justified(menu_item: *mut GtkMenuItem) ->
     gboolean;
    pub fn gtk_menu_item_set_accel_path(menu_item: *mut GtkMenuItem,
                                        accel_path: *gchar);
    pub fn gtk_menu_item_get_accel_path(menu_item: *mut GtkMenuItem) ->
     *gchar;
    pub fn gtk_menu_item_set_label(menu_item: *mut GtkMenuItem,
                                   label: *gchar);
    pub fn gtk_menu_item_get_label(menu_item: *mut GtkMenuItem) -> *gchar;
    pub fn gtk_menu_item_set_use_underline(menu_item: *mut GtkMenuItem,
                                           setting: gboolean);
    pub fn gtk_menu_item_get_use_underline(menu_item: *mut GtkMenuItem) ->
     gboolean;
    pub fn gtk_menu_item_set_reserve_indicator(menu_item: *mut GtkMenuItem,
                                               reserve: gboolean);
    pub fn gtk_menu_item_get_reserve_indicator(menu_item: *mut GtkMenuItem) ->
     gboolean;
    pub fn gtk_check_menu_item_get_type() -> GType;
    pub fn gtk_check_menu_item_new() -> *mut GtkWidget;
    pub fn gtk_check_menu_item_new_with_label(label: *gchar) ->
     *mut GtkWidget;
    pub fn gtk_check_menu_item_new_with_mnemonic(label: *gchar) ->
     *mut GtkWidget;
    pub fn gtk_check_menu_item_set_active(check_menu_item:
                                              *mut GtkCheckMenuItem,
                                          is_active: gboolean);
    pub fn gtk_check_menu_item_get_active(check_menu_item:
                                              *mut GtkCheckMenuItem) ->
     gboolean;
    pub fn gtk_check_menu_item_toggled(check_menu_item:
                                           *mut GtkCheckMenuItem);
    pub fn gtk_check_menu_item_set_inconsistent(check_menu_item:
                                                    *mut GtkCheckMenuItem,
                                                setting: gboolean);
    pub fn gtk_check_menu_item_get_inconsistent(check_menu_item:
                                                    *mut GtkCheckMenuItem) ->
     gboolean;
    pub fn gtk_check_menu_item_set_draw_as_radio(check_menu_item:
                                                     *mut GtkCheckMenuItem,
                                                 draw_as_radio: gboolean);
    pub fn gtk_check_menu_item_get_draw_as_radio(check_menu_item:
                                                     *mut GtkCheckMenuItem) ->
     gboolean;
    pub fn _gtk_check_menu_item_set_active(check_menu_item:
                                               *mut GtkCheckMenuItem,
                                           is_active: gboolean);
    pub fn gtk_clipboard_get_type() -> GType;
    pub fn gtk_clipboard_get_for_display(display: *mut GdkDisplay,
                                         selection: GdkAtom) ->
     *mut GtkClipboard;
    pub fn gtk_clipboard_get(selection: GdkAtom) -> *mut GtkClipboard;
    pub fn gtk_clipboard_get_display(clipboard: *mut GtkClipboard) ->
     *mut GdkDisplay;
    pub fn gtk_clipboard_set_with_data(clipboard: *mut GtkClipboard,
                                       targets: *GtkTargetEntry,
                                       n_targets: guint,
                                       get_func: GtkClipboardGetFunc,
                                       clear_func: GtkClipboardClearFunc,
                                       user_data: gpointer) -> gboolean;
    pub fn gtk_clipboard_set_with_owner(clipboard: *mut GtkClipboard,
                                        targets: *GtkTargetEntry,
                                        n_targets: guint,
                                        get_func: GtkClipboardGetFunc,
                                        clear_func: GtkClipboardClearFunc,
                                        owner: *mut GObject) -> gboolean;
    pub fn gtk_clipboard_get_owner(clipboard: *mut GtkClipboard) ->
     *mut GObject;
    pub fn gtk_clipboard_clear(clipboard: *mut GtkClipboard);
    pub fn gtk_clipboard_set_text(clipboard: *mut GtkClipboard, text: *gchar,
                                  len: gint);
    pub fn gtk_clipboard_set_image(clipboard: *mut GtkClipboard,
                                   pixbuf: *mut GdkPixbuf);
    pub fn gtk_clipboard_request_contents(clipboard: *mut GtkClipboard,
                                          target: GdkAtom,
                                          callback: GtkClipboardReceivedFunc,
                                          user_data: gpointer);
    pub fn gtk_clipboard_request_text(clipboard: *mut GtkClipboard,
                                      callback: GtkClipboardTextReceivedFunc,
                                      user_data: gpointer);
    pub fn gtk_clipboard_request_rich_text(clipboard: *mut GtkClipboard,
                                           buffer: *mut GtkTextBuffer,
                                           callback:
                                               GtkClipboardRichTextReceivedFunc,
                                           user_data: gpointer);
    pub fn gtk_clipboard_request_image(clipboard: *mut GtkClipboard,
                                       callback:
                                           GtkClipboardImageReceivedFunc,
                                       user_data: gpointer);
    pub fn gtk_clipboard_request_uris(clipboard: *mut GtkClipboard,
                                      callback: GtkClipboardURIReceivedFunc,
                                      user_data: gpointer);
    pub fn gtk_clipboard_request_targets(clipboard: *mut GtkClipboard,
                                         callback:
                                             GtkClipboardTargetsReceivedFunc,
                                         user_data: gpointer);
    pub fn gtk_clipboard_wait_for_contents(clipboard: *mut GtkClipboard,
                                           target: GdkAtom) ->
     *mut GtkSelectionData;
    pub fn gtk_clipboard_wait_for_text(clipboard: *mut GtkClipboard) ->
     *mut gchar;
    pub fn gtk_clipboard_wait_for_rich_text(clipboard: *mut GtkClipboard,
                                            buffer: *mut GtkTextBuffer,
                                            format: *mut GdkAtom,
                                            length: *mut gsize) ->
     *mut guint8;
    pub fn gtk_clipboard_wait_for_image(clipboard: *mut GtkClipboard) ->
     *mut GdkPixbuf;
    pub fn gtk_clipboard_wait_for_uris(clipboard: *mut GtkClipboard) ->
     *mut *mut gchar;
    pub fn gtk_clipboard_wait_for_targets(clipboard: *mut GtkClipboard,
                                          targets: *mut *mut GdkAtom,
                                          n_targets: *mut gint) -> gboolean;
    pub fn gtk_clipboard_wait_is_text_available(clipboard: *mut GtkClipboard)
     -> gboolean;
    pub fn gtk_clipboard_wait_is_rich_text_available(clipboard:
                                                         *mut GtkClipboard,
                                                     buffer:
                                                         *mut GtkTextBuffer)
     -> gboolean;
    pub fn gtk_clipboard_wait_is_image_available(clipboard: *mut GtkClipboard)
     -> gboolean;
    pub fn gtk_clipboard_wait_is_uris_available(clipboard: *mut GtkClipboard)
     -> gboolean;
    pub fn gtk_clipboard_wait_is_target_available(clipboard:
                                                      *mut GtkClipboard,
                                                  target: GdkAtom) ->
     gboolean;
    pub fn gtk_clipboard_set_can_store(clipboard: *mut GtkClipboard,
                                       targets: *GtkTargetEntry,
                                       n_targets: gint);
    pub fn gtk_clipboard_store(clipboard: *mut GtkClipboard);
    pub fn _gtk_clipboard_handle_event(event: *mut GdkEventOwnerChange);
    pub fn _gtk_clipboard_store_all();
    pub fn gtk_color_button_get_type() -> GType;
    pub fn gtk_color_button_new() -> *mut GtkWidget;
    pub fn gtk_color_button_new_with_rgba(rgba: *GdkRGBA) -> *mut GtkWidget;
    pub fn gtk_color_button_set_title(button: *mut GtkColorButton,
                                      title: *gchar);
    pub fn gtk_color_button_get_title(button: *mut GtkColorButton) -> *gchar;
    pub fn gtk_color_button_new_with_color(color: *GdkColor) ->
     *mut GtkWidget;
    pub fn gtk_color_button_set_color(button: *mut GtkColorButton,
                                      color: *GdkColor);
    pub fn gtk_color_button_get_color(button: *mut GtkColorButton,
                                      color: *mut GdkColor);
    pub fn gtk_color_button_set_alpha(button: *mut GtkColorButton,
                                      alpha: guint16);
    pub fn gtk_color_button_get_alpha(button: *mut GtkColorButton) -> guint16;
    pub fn gtk_color_button_set_use_alpha(button: *mut GtkColorButton,
                                          use_alpha: gboolean);
    pub fn gtk_color_button_get_use_alpha(button: *mut GtkColorButton) ->
     gboolean;
    pub fn gtk_color_button_set_rgba(button: *mut GtkColorButton,
                                     rgba: *GdkRGBA);
    pub fn gtk_color_button_get_rgba(button: *mut GtkColorButton,
                                     rgba: *mut GdkRGBA);
    pub fn gtk_color_chooser_get_type() -> GType;
    pub fn gtk_color_chooser_get_rgba(chooser: *mut GtkColorChooser,
                                      color: *mut GdkRGBA);
    pub fn gtk_color_chooser_set_rgba(chooser: *mut GtkColorChooser,
                                      color: *GdkRGBA);
    pub fn gtk_color_chooser_get_use_alpha(chooser: *mut GtkColorChooser) ->
     gboolean;
    pub fn gtk_color_chooser_set_use_alpha(chooser: *mut GtkColorChooser,
                                           use_alpha: gboolean);
    pub fn gtk_color_chooser_add_palette(chooser: *mut GtkColorChooser,
                                         orientation: GtkOrientation,
                                         colors_per_line: gint,
                                         n_colors: gint,
                                         colors: *mut GdkRGBA);
    pub fn gtk_color_chooser_dialog_get_type() -> GType;
    pub fn gtk_color_chooser_dialog_new(title: *gchar, parent: *mut GtkWindow)
     -> *mut GtkWidget;
    pub fn gtk_color_chooser_widget_get_type() -> GType;
    pub fn gtk_color_chooser_widget_new() -> *mut GtkWidget;
    pub fn gtk_hsv_to_rgb(h: gdouble, s: gdouble, v: gdouble, r: *mut gdouble,
                          g: *mut gdouble, b: *mut gdouble);
    pub fn gtk_rgb_to_hsv(r: gdouble, g: gdouble, b: gdouble, h: *mut gdouble,
                          s: *mut gdouble, v: *mut gdouble);
    pub fn gtk_combo_box_text_get_type() -> GType;
    pub fn gtk_combo_box_text_new() -> *mut GtkWidget;
    pub fn gtk_combo_box_text_new_with_entry() -> *mut GtkWidget;
    pub fn gtk_combo_box_text_append_text(combo_box: *mut GtkComboBoxText,
                                          text: *gchar);
    pub fn gtk_combo_box_text_insert_text(combo_box: *mut GtkComboBoxText,
                                          position: gint, text: *gchar);
    pub fn gtk_combo_box_text_prepend_text(combo_box: *mut GtkComboBoxText,
                                           text: *gchar);
    pub fn gtk_combo_box_text_remove(combo_box: *mut GtkComboBoxText,
                                     position: gint);
    pub fn gtk_combo_box_text_remove_all(combo_box: *mut GtkComboBoxText);
    pub fn gtk_combo_box_text_get_active_text(combo_box: *mut GtkComboBoxText)
     -> *mut gchar;
    pub fn gtk_combo_box_text_insert(combo_box: *mut GtkComboBoxText,
                                     position: gint, id: *gchar,
                                     text: *gchar);
    pub fn gtk_combo_box_text_append(combo_box: *mut GtkComboBoxText,
                                     id: *gchar, text: *gchar);
    pub fn gtk_combo_box_text_prepend(combo_box: *mut GtkComboBoxText,
                                      id: *gchar, text: *gchar);
    pub fn gtk_css_section_get_type() -> GType;
    pub fn gtk_css_section_ref(section: *mut GtkCssSection) ->
     *mut GtkCssSection;
    pub fn gtk_css_section_unref(section: *mut GtkCssSection);
    pub fn gtk_css_section_get_section_type(section: *GtkCssSection) ->
     GtkCssSectionType;
    pub fn gtk_css_section_get_parent(section: *GtkCssSection) ->
     *mut GtkCssSection;
    pub fn gtk_css_section_get_file(section: *GtkCssSection) -> *mut GFile;
    pub fn gtk_css_section_get_start_line(section: *GtkCssSection) -> guint;
    pub fn gtk_css_section_get_start_position(section: *GtkCssSection) ->
     guint;
    pub fn gtk_css_section_get_end_line(section: *GtkCssSection) -> guint;
    pub fn gtk_css_section_get_end_position(section: *GtkCssSection) -> guint;
    pub fn gtk_css_provider_error_quark() -> GQuark;
    pub fn gtk_css_provider_get_type() -> GType;
    pub fn gtk_css_provider_new() -> *mut GtkCssProvider;
    pub fn gtk_css_provider_to_string(provider: *mut GtkCssProvider) ->
     *mut c_schar;
    pub fn gtk_css_provider_load_from_data(css_provider: *mut GtkCssProvider,
                                           data: *gchar, length: gssize,
                                           error: *mut *mut GError) ->
     gboolean;
    pub fn gtk_css_provider_load_from_file(css_provider: *mut GtkCssProvider,
                                           file: *mut GFile,
                                           error: *mut *mut GError) ->
     gboolean;
    pub fn gtk_css_provider_load_from_path(css_provider: *mut GtkCssProvider,
                                           path: *gchar,
                                           error: *mut *mut GError) ->
     gboolean;
    pub fn gtk_css_provider_get_default() -> *mut GtkCssProvider;
    pub fn gtk_css_provider_get_named(name: *gchar, variant: *gchar) ->
     *mut GtkCssProvider;
    pub fn gtk_get_debug_flags() -> guint;
    pub fn gtk_set_debug_flags(flags: guint);
    pub fn gtk_drawing_area_get_type() -> GType;
    pub fn gtk_drawing_area_new() -> *mut GtkWidget;
    pub fn gtk_event_box_get_type() -> GType;
    pub fn gtk_event_box_new() -> *mut GtkWidget;
    pub fn gtk_event_box_get_visible_window(event_box: *mut GtkEventBox) ->
     gboolean;
    pub fn gtk_event_box_set_visible_window(event_box: *mut GtkEventBox,
                                            visible_window: gboolean);
    pub fn gtk_event_box_get_above_child(event_box: *mut GtkEventBox) ->
     gboolean;
    pub fn gtk_event_box_set_above_child(event_box: *mut GtkEventBox,
                                         above_child: gboolean);
    pub fn gtk_expander_get_type() -> GType;
    pub fn gtk_expander_new(label: *gchar) -> *mut GtkWidget;
    pub fn gtk_expander_new_with_mnemonic(label: *gchar) -> *mut GtkWidget;
    pub fn gtk_expander_set_expanded(expander: *mut GtkExpander,
                                     expanded: gboolean);
    pub fn gtk_expander_get_expanded(expander: *mut GtkExpander) -> gboolean;
    pub fn gtk_expander_set_spacing(expander: *mut GtkExpander,
                                    spacing: gint);
    pub fn gtk_expander_get_spacing(expander: *mut GtkExpander) -> gint;
    pub fn gtk_expander_set_label(expander: *mut GtkExpander, label: *gchar);
    pub fn gtk_expander_get_label(expander: *mut GtkExpander) -> *gchar;
    pub fn gtk_expander_set_use_underline(expander: *mut GtkExpander,
                                          use_underline: gboolean);
    pub fn gtk_expander_get_use_underline(expander: *mut GtkExpander) ->
     gboolean;
    pub fn gtk_expander_set_use_markup(expander: *mut GtkExpander,
                                       use_markup: gboolean);
    pub fn gtk_expander_get_use_markup(expander: *mut GtkExpander) ->
     gboolean;
    pub fn gtk_expander_set_label_widget(expander: *mut GtkExpander,
                                         label_widget: *mut GtkWidget);
    pub fn gtk_expander_get_label_widget(expander: *mut GtkExpander) ->
     *mut GtkWidget;
    pub fn gtk_expander_set_label_fill(expander: *mut GtkExpander,
                                       label_fill: gboolean);
    pub fn gtk_expander_get_label_fill(expander: *mut GtkExpander) ->
     gboolean;
    pub fn gtk_expander_set_resize_toplevel(expander: *mut GtkExpander,
                                            resize_toplevel: gboolean);
    pub fn gtk_expander_get_resize_toplevel(expander: *mut GtkExpander) ->
     gboolean;
    pub fn gtk_fixed_get_type() -> GType;
    pub fn gtk_fixed_new() -> *mut GtkWidget;
    pub fn gtk_fixed_put(fixed: *mut GtkFixed, widget: *mut GtkWidget,
                         x: gint, y: gint);
    pub fn gtk_fixed_move(fixed: *mut GtkFixed, widget: *mut GtkWidget,
                          x: gint, y: gint);
    pub fn gtk_file_filter_get_type() -> GType;
    pub fn gtk_file_filter_new() -> *mut GtkFileFilter;
    pub fn gtk_file_filter_set_name(filter: *mut GtkFileFilter, name: *gchar);
    pub fn gtk_file_filter_get_name(filter: *mut GtkFileFilter) -> *gchar;
    pub fn gtk_file_filter_add_mime_type(filter: *mut GtkFileFilter,
                                         mime_type: *gchar);
    pub fn gtk_file_filter_add_pattern(filter: *mut GtkFileFilter,
                                       pattern: *gchar);
    pub fn gtk_file_filter_add_pixbuf_formats(filter: *mut GtkFileFilter);
    pub fn gtk_file_filter_add_custom(filter: *mut GtkFileFilter,
                                      needed: GtkFileFilterFlags,
                                      func: GtkFileFilterFunc, data: gpointer,
                                      notify: GDestroyNotify);
    pub fn gtk_file_filter_get_needed(filter: *mut GtkFileFilter) ->
     GtkFileFilterFlags;
    pub fn gtk_file_filter_filter(filter: *mut GtkFileFilter,
                                  filter_info: *GtkFileFilterInfo) ->
     gboolean;
    pub fn gtk_file_chooser_get_type() -> GType;
    pub fn gtk_file_chooser_error_quark() -> GQuark;
    pub fn gtk_file_chooser_set_action(chooser: *mut GtkFileChooser,
                                       action: GtkFileChooserAction);
    pub fn gtk_file_chooser_get_action(chooser: *mut GtkFileChooser) ->
     GtkFileChooserAction;
    pub fn gtk_file_chooser_set_local_only(chooser: *mut GtkFileChooser,
                                           local_only: gboolean);
    pub fn gtk_file_chooser_get_local_only(chooser: *mut GtkFileChooser) ->
     gboolean;
    pub fn gtk_file_chooser_set_select_multiple(chooser: *mut GtkFileChooser,
                                                select_multiple: gboolean);
    pub fn gtk_file_chooser_get_select_multiple(chooser: *mut GtkFileChooser)
     -> gboolean;
    pub fn gtk_file_chooser_set_show_hidden(chooser: *mut GtkFileChooser,
                                            show_hidden: gboolean);
    pub fn gtk_file_chooser_get_show_hidden(chooser: *mut GtkFileChooser) ->
     gboolean;
    pub fn gtk_file_chooser_set_do_overwrite_confirmation(chooser:
                                                              *mut GtkFileChooser,
                                                          do_overwrite_confirmation:
                                                              gboolean);
    pub fn gtk_file_chooser_get_do_overwrite_confirmation(chooser:
                                                              *mut GtkFileChooser)
     -> gboolean;
    pub fn gtk_file_chooser_set_create_folders(chooser: *mut GtkFileChooser,
                                               create_folders: gboolean);
    pub fn gtk_file_chooser_get_create_folders(chooser: *mut GtkFileChooser)
     -> gboolean;
    pub fn gtk_file_chooser_set_current_name(chooser: *mut GtkFileChooser,
                                             name: *gchar);
    pub fn gtk_file_chooser_get_current_name(chooser: *mut GtkFileChooser) ->
     *mut gchar;
    pub fn gtk_file_chooser_get_filename(chooser: *mut GtkFileChooser) ->
     *mut gchar;
    pub fn gtk_file_chooser_set_filename(chooser: *mut GtkFileChooser,
                                         filename: *c_schar) -> gboolean;
    pub fn gtk_file_chooser_select_filename(chooser: *mut GtkFileChooser,
                                            filename: *c_schar) -> gboolean;
    pub fn gtk_file_chooser_unselect_filename(chooser: *mut GtkFileChooser,
                                              filename: *c_schar);
    pub fn gtk_file_chooser_select_all(chooser: *mut GtkFileChooser);
    pub fn gtk_file_chooser_unselect_all(chooser: *mut GtkFileChooser);
    pub fn gtk_file_chooser_get_filenames(chooser: *mut GtkFileChooser) ->
     *mut GSList;
    pub fn gtk_file_chooser_set_current_folder(chooser: *mut GtkFileChooser,
                                               filename: *gchar) -> gboolean;
    pub fn gtk_file_chooser_get_current_folder(chooser: *mut GtkFileChooser)
     -> *mut gchar;
    pub fn gtk_file_chooser_get_uri(chooser: *mut GtkFileChooser) ->
     *mut gchar;
    pub fn gtk_file_chooser_set_uri(chooser: *mut GtkFileChooser,
                                    uri: *c_schar) -> gboolean;
    pub fn gtk_file_chooser_select_uri(chooser: *mut GtkFileChooser,
                                       uri: *c_schar) -> gboolean;
    pub fn gtk_file_chooser_unselect_uri(chooser: *mut GtkFileChooser,
                                         uri: *c_schar);
    pub fn gtk_file_chooser_get_uris(chooser: *mut GtkFileChooser) ->
     *mut GSList;
    pub fn gtk_file_chooser_set_current_folder_uri(chooser:
                                                       *mut GtkFileChooser,
                                                   uri: *gchar) -> gboolean;
    pub fn gtk_file_chooser_get_current_folder_uri(chooser:
                                                       *mut GtkFileChooser) ->
     *mut gchar;
    pub fn gtk_file_chooser_get_file(chooser: *mut GtkFileChooser) ->
     *mut GFile;
    pub fn gtk_file_chooser_set_file(chooser: *mut GtkFileChooser,
                                     file: *mut GFile,
                                     error: *mut *mut GError) -> gboolean;
    pub fn gtk_file_chooser_select_file(chooser: *mut GtkFileChooser,
                                        file: *mut GFile,
                                        error: *mut *mut GError) -> gboolean;
    pub fn gtk_file_chooser_unselect_file(chooser: *mut GtkFileChooser,
                                          file: *mut GFile);
    pub fn gtk_file_chooser_get_files(chooser: *mut GtkFileChooser) ->
     *mut GSList;
    pub fn gtk_file_chooser_set_current_folder_file(chooser:
                                                        *mut GtkFileChooser,
                                                    file: *mut GFile,
                                                    error: *mut *mut GError)
     -> gboolean;
    pub fn gtk_file_chooser_get_current_folder_file(chooser:
                                                        *mut GtkFileChooser)
     -> *mut GFile;
    pub fn gtk_file_chooser_set_preview_widget(chooser: *mut GtkFileChooser,
                                               preview_widget:
                                                   *mut GtkWidget);
    pub fn gtk_file_chooser_get_preview_widget(chooser: *mut GtkFileChooser)
     -> *mut GtkWidget;
    pub fn gtk_file_chooser_set_preview_widget_active(chooser:
                                                          *mut GtkFileChooser,
                                                      active: gboolean);
    pub fn gtk_file_chooser_get_preview_widget_active(chooser:
                                                          *mut GtkFileChooser)
     -> gboolean;
    pub fn gtk_file_chooser_set_use_preview_label(chooser:
                                                      *mut GtkFileChooser,
                                                  use_label: gboolean);
    pub fn gtk_file_chooser_get_use_preview_label(chooser:
                                                      *mut GtkFileChooser) ->
     gboolean;
    pub fn gtk_file_chooser_get_preview_filename(chooser: *mut GtkFileChooser)
     -> *mut c_schar;
    pub fn gtk_file_chooser_get_preview_uri(chooser: *mut GtkFileChooser) ->
     *mut c_schar;
    pub fn gtk_file_chooser_get_preview_file(chooser: *mut GtkFileChooser) ->
     *mut GFile;
    pub fn gtk_file_chooser_set_extra_widget(chooser: *mut GtkFileChooser,
                                             extra_widget: *mut GtkWidget);
    pub fn gtk_file_chooser_get_extra_widget(chooser: *mut GtkFileChooser) ->
     *mut GtkWidget;
    pub fn gtk_file_chooser_add_filter(chooser: *mut GtkFileChooser,
                                       filter: *mut GtkFileFilter);
    pub fn gtk_file_chooser_remove_filter(chooser: *mut GtkFileChooser,
                                          filter: *mut GtkFileFilter);
    pub fn gtk_file_chooser_list_filters(chooser: *mut GtkFileChooser) ->
     *mut GSList;
    pub fn gtk_file_chooser_set_filter(chooser: *mut GtkFileChooser,
                                       filter: *mut GtkFileFilter);
    pub fn gtk_file_chooser_get_filter(chooser: *mut GtkFileChooser) ->
     *mut GtkFileFilter;
    pub fn gtk_file_chooser_add_shortcut_folder(chooser: *mut GtkFileChooser,
                                                folder: *c_schar,
                                                error: *mut *mut GError) ->
     gboolean;
    pub fn gtk_file_chooser_remove_shortcut_folder(chooser:
                                                       *mut GtkFileChooser,
                                                   folder: *c_schar,
                                                   error: *mut *mut GError) ->
     gboolean;
    pub fn gtk_file_chooser_list_shortcut_folders(chooser:
                                                      *mut GtkFileChooser) ->
     *mut GSList;
    pub fn gtk_file_chooser_add_shortcut_folder_uri(chooser:
                                                        *mut GtkFileChooser,
                                                    uri: *c_schar,
                                                    error: *mut *mut GError)
     -> gboolean;
    pub fn gtk_file_chooser_remove_shortcut_folder_uri(chooser:
                                                           *mut GtkFileChooser,
                                                       uri: *c_schar,
                                                       error:
                                                           *mut *mut GError)
     -> gboolean;
    pub fn gtk_file_chooser_list_shortcut_folder_uris(chooser:
                                                          *mut GtkFileChooser)
     -> *mut GSList;
    pub fn gtk_file_chooser_button_get_type() -> GType;
    pub fn gtk_file_chooser_button_new(title: *gchar,
                                       action: GtkFileChooserAction) ->
     *mut GtkWidget;
    pub fn gtk_file_chooser_button_new_with_dialog(dialog: *mut GtkWidget) ->
     *mut GtkWidget;
    pub fn gtk_file_chooser_button_get_title(button:
                                                 *mut GtkFileChooserButton) ->
     *gchar;
    pub fn gtk_file_chooser_button_set_title(button:
                                                 *mut GtkFileChooserButton,
                                             title: *gchar);
    pub fn gtk_file_chooser_button_get_width_chars(button:
                                                       *mut GtkFileChooserButton)
     -> gint;
    pub fn gtk_file_chooser_button_set_width_chars(button:
                                                       *mut GtkFileChooserButton,
                                                   n_chars: gint);
    pub fn gtk_file_chooser_button_get_focus_on_click(button:
                                                          *mut GtkFileChooserButton)
     -> gboolean;
    pub fn gtk_file_chooser_button_set_focus_on_click(button:
                                                          *mut GtkFileChooserButton,
                                                      focus_on_click:
                                                          gboolean);
    pub fn gtk_file_chooser_dialog_get_type() -> GType;
    pub fn gtk_file_chooser_dialog_new(title: *gchar, parent: *mut GtkWindow,
                                       action: GtkFileChooserAction,
                                       first_button_text: *gchar, ...) ->
     *mut GtkWidget;
    pub fn gtk_file_chooser_widget_get_type() -> GType;
    pub fn gtk_file_chooser_widget_new(action: GtkFileChooserAction) ->
     *mut GtkWidget;
    pub fn gtk_font_button_get_type() -> GType;
    pub fn gtk_font_button_new() -> *mut GtkWidget;
    pub fn gtk_font_button_new_with_font(fontname: *gchar) -> *mut GtkWidget;
    pub fn gtk_font_button_get_title(font_button: *mut GtkFontButton) ->
     *gchar;
    pub fn gtk_font_button_set_title(font_button: *mut GtkFontButton,
                                     title: *gchar);
    pub fn gtk_font_button_get_use_font(font_button: *mut GtkFontButton) ->
     gboolean;
    pub fn gtk_font_button_set_use_font(font_button: *mut GtkFontButton,
                                        use_font: gboolean);
    pub fn gtk_font_button_get_use_size(font_button: *mut GtkFontButton) ->
     gboolean;
    pub fn gtk_font_button_set_use_size(font_button: *mut GtkFontButton,
                                        use_size: gboolean);
    pub fn gtk_font_button_get_font_name(font_button: *mut GtkFontButton) ->
     *gchar;
    pub fn gtk_font_button_set_font_name(font_button: *mut GtkFontButton,
                                         fontname: *gchar) -> gboolean;
    pub fn gtk_font_button_get_show_style(font_button: *mut GtkFontButton) ->
     gboolean;
    pub fn gtk_font_button_set_show_style(font_button: *mut GtkFontButton,
                                          show_style: gboolean);
    pub fn gtk_font_button_get_show_size(font_button: *mut GtkFontButton) ->
     gboolean;
    pub fn gtk_font_button_set_show_size(font_button: *mut GtkFontButton,
                                         show_size: gboolean);
    pub fn gtk_font_chooser_get_type() -> GType;
    pub fn gtk_font_chooser_get_font_family(fontchooser: *mut GtkFontChooser)
     -> *mut PangoFontFamily;
    pub fn gtk_font_chooser_get_font_face(fontchooser: *mut GtkFontChooser) ->
     *mut PangoFontFace;
    pub fn gtk_font_chooser_get_font_size(fontchooser: *mut GtkFontChooser) ->
     gint;
    pub fn gtk_font_chooser_get_font_desc(fontchooser: *mut GtkFontChooser) ->
     *mut PangoFontDescription;
    pub fn gtk_font_chooser_set_font_desc(fontchooser: *mut GtkFontChooser,
                                          font_desc: *PangoFontDescription);
    pub fn gtk_font_chooser_get_font(fontchooser: *mut GtkFontChooser) ->
     *mut gchar;
    pub fn gtk_font_chooser_set_font(fontchooser: *mut GtkFontChooser,
                                     fontname: *gchar);
    pub fn gtk_font_chooser_get_preview_text(fontchooser: *mut GtkFontChooser)
     -> *mut gchar;
    pub fn gtk_font_chooser_set_preview_text(fontchooser: *mut GtkFontChooser,
                                             text: *gchar);
    pub fn gtk_font_chooser_get_show_preview_entry(fontchooser:
                                                       *mut GtkFontChooser) ->
     gboolean;
    pub fn gtk_font_chooser_set_show_preview_entry(fontchooser:
                                                       *mut GtkFontChooser,
                                                   show_preview_entry:
                                                       gboolean);
    pub fn gtk_font_chooser_set_filter_func(fontchooser: *mut GtkFontChooser,
                                            filter: GtkFontFilterFunc,
                                            user_data: gpointer,
                                            destroy: GDestroyNotify);
    pub fn gtk_font_chooser_dialog_get_type() -> GType;
    pub fn gtk_font_chooser_dialog_new(title: *gchar, parent: *mut GtkWindow)
     -> *mut GtkWidget;
    pub fn gtk_font_chooser_widget_get_type() -> GType;
    pub fn gtk_font_chooser_widget_new() -> *mut GtkWidget;
    pub fn gtk_grid_get_type() -> GType;
    pub fn gtk_grid_new() -> *mut GtkWidget;
    pub fn gtk_grid_attach(grid: *mut GtkGrid, child: *mut GtkWidget,
                           left: gint, top: gint, width: gint, height: gint);
    pub fn gtk_grid_attach_next_to(grid: *mut GtkGrid, child: *mut GtkWidget,
                                   sibling: *mut GtkWidget,
                                   side: GtkPositionType, width: gint,
                                   height: gint);
    pub fn gtk_grid_get_child_at(grid: *mut GtkGrid, left: gint, top: gint) ->
     *mut GtkWidget;
    pub fn gtk_grid_insert_row(grid: *mut GtkGrid, position: gint);
    pub fn gtk_grid_insert_column(grid: *mut GtkGrid, position: gint);
    pub fn gtk_grid_remove_row(grid: *mut GtkGrid, position: gint);
    pub fn gtk_grid_remove_column(grid: *mut GtkGrid, position: gint);
    pub fn gtk_grid_insert_next_to(grid: *mut GtkGrid,
                                   sibling: *mut GtkWidget,
                                   side: GtkPositionType);
    pub fn gtk_grid_set_row_homogeneous(grid: *mut GtkGrid,
                                        homogeneous: gboolean);
    pub fn gtk_grid_get_row_homogeneous(grid: *mut GtkGrid) -> gboolean;
    pub fn gtk_grid_set_row_spacing(grid: *mut GtkGrid, spacing: guint);
    pub fn gtk_grid_get_row_spacing(grid: *mut GtkGrid) -> guint;
    pub fn gtk_grid_set_column_homogeneous(grid: *mut GtkGrid,
                                           homogeneous: gboolean);
    pub fn gtk_grid_get_column_homogeneous(grid: *mut GtkGrid) -> gboolean;
    pub fn gtk_grid_set_column_spacing(grid: *mut GtkGrid, spacing: guint);
    pub fn gtk_grid_get_column_spacing(grid: *mut GtkGrid) -> guint;
    pub fn gtk_grid_set_row_baseline_position(grid: *mut GtkGrid, row: gint,
                                              pos: GtkBaselinePosition);
    pub fn gtk_grid_get_row_baseline_position(grid: *mut GtkGrid, row: gint)
     -> GtkBaselinePosition;
    pub fn gtk_grid_set_baseline_row(grid: *mut GtkGrid, row: gint);
    pub fn gtk_grid_get_baseline_row(grid: *mut GtkGrid) -> gint;
    pub fn gtk_header_bar_get_type() -> GType;
    pub fn gtk_header_bar_new() -> *mut GtkWidget;
    pub fn gtk_header_bar_set_title(bar: *mut GtkHeaderBar, title: *gchar);
    pub fn gtk_header_bar_get_title(bar: *mut GtkHeaderBar) -> *gchar;
    pub fn gtk_header_bar_set_subtitle(bar: *mut GtkHeaderBar,
                                       subtitle: *gchar);
    pub fn gtk_header_bar_get_subtitle(bar: *mut GtkHeaderBar) -> *gchar;
    pub fn gtk_header_bar_set_custom_title(bar: *mut GtkHeaderBar,
                                           title_widget: *mut GtkWidget);
    pub fn gtk_header_bar_get_custom_title(bar: *mut GtkHeaderBar) ->
     *mut GtkWidget;
    pub fn gtk_header_bar_pack_start(bar: *mut GtkHeaderBar,
                                     child: *mut GtkWidget);
    pub fn gtk_header_bar_pack_end(bar: *mut GtkHeaderBar,
                                   child: *mut GtkWidget);
    pub fn gtk_header_bar_get_show_close_button(bar: *mut GtkHeaderBar) ->
     gboolean;
    pub fn gtk_header_bar_set_show_close_button(bar: *mut GtkHeaderBar,
                                                setting: gboolean);
    pub fn gtk_icon_factory_get_type() -> GType;
    pub fn gtk_icon_factory_new() -> *mut GtkIconFactory;
    pub fn gtk_icon_factory_add(factory: *mut GtkIconFactory,
                                stock_id: *gchar, icon_set: *mut GtkIconSet);
    pub fn gtk_icon_factory_lookup(factory: *mut GtkIconFactory,
                                   stock_id: *gchar) -> *mut GtkIconSet;
    pub fn gtk_icon_factory_add_default(factory: *mut GtkIconFactory);
    pub fn gtk_icon_factory_remove_default(factory: *mut GtkIconFactory);
    pub fn gtk_icon_factory_lookup_default(stock_id: *gchar) ->
     *mut GtkIconSet;
    pub fn gtk_icon_size_lookup(size: GtkIconSize, width: *mut gint,
                                height: *mut gint) -> gboolean;
    pub fn gtk_icon_size_lookup_for_settings(settings: *mut GtkSettings,
                                             size: GtkIconSize,
                                             width: *mut gint,
                                             height: *mut gint) -> gboolean;
    pub fn gtk_icon_size_register(name: *gchar, width: gint, height: gint) ->
     GtkIconSize;
    pub fn gtk_icon_size_register_alias(alias: *gchar, target: GtkIconSize);
    pub fn gtk_icon_size_from_name(name: *gchar) -> GtkIconSize;
    pub fn gtk_icon_size_get_name(size: GtkIconSize) -> *gchar;
    pub fn gtk_icon_set_get_type() -> GType;
    pub fn gtk_icon_set_new() -> *mut GtkIconSet;
    pub fn gtk_icon_set_new_from_pixbuf(pixbuf: *mut GdkPixbuf) ->
     *mut GtkIconSet;
    pub fn gtk_icon_set_ref(icon_set: *mut GtkIconSet) -> *mut GtkIconSet;
    pub fn gtk_icon_set_unref(icon_set: *mut GtkIconSet);
    pub fn gtk_icon_set_copy(icon_set: *mut GtkIconSet) -> *mut GtkIconSet;
    pub fn gtk_icon_set_render_icon(icon_set: *mut GtkIconSet,
                                    style: *mut GtkStyle,
                                    direction: GtkTextDirection,
                                    state: GtkStateType, size: GtkIconSize,
                                    widget: *mut GtkWidget, detail: *gchar) ->
     *mut GdkPixbuf;
    pub fn gtk_icon_set_add_source(icon_set: *mut GtkIconSet,
                                   source: *GtkIconSource);
    pub fn gtk_icon_set_get_sizes(icon_set: *mut GtkIconSet,
                                  sizes: *mut *mut GtkIconSize,
                                  n_sizes: *mut gint);
    pub fn gtk_icon_source_get_type() -> GType;
    pub fn gtk_icon_source_new() -> *mut GtkIconSource;
    pub fn gtk_icon_source_copy(source: *GtkIconSource) -> *mut GtkIconSource;
    pub fn gtk_icon_source_free(source: *mut GtkIconSource);
    pub fn gtk_icon_source_set_filename(source: *mut GtkIconSource,
                                        filename: *gchar);
    pub fn gtk_icon_source_set_icon_name(source: *mut GtkIconSource,
                                         icon_name: *gchar);
    pub fn gtk_icon_source_set_pixbuf(source: *mut GtkIconSource,
                                      pixbuf: *mut GdkPixbuf);
    pub fn gtk_icon_source_get_filename(source: *GtkIconSource) -> *gchar;
    pub fn gtk_icon_source_get_icon_name(source: *GtkIconSource) -> *gchar;
    pub fn gtk_icon_source_get_pixbuf(source: *GtkIconSource) ->
     *mut GdkPixbuf;
    pub fn gtk_icon_source_set_direction_wildcarded(source:
                                                        *mut GtkIconSource,
                                                    setting: gboolean);
    pub fn gtk_icon_source_set_state_wildcarded(source: *mut GtkIconSource,
                                                setting: gboolean);
    pub fn gtk_icon_source_set_size_wildcarded(source: *mut GtkIconSource,
                                               setting: gboolean);
    pub fn gtk_icon_source_get_size_wildcarded(source: *GtkIconSource) ->
     gboolean;
    pub fn gtk_icon_source_get_state_wildcarded(source: *GtkIconSource) ->
     gboolean;
    pub fn gtk_icon_source_get_direction_wildcarded(source: *GtkIconSource) ->
     gboolean;
    pub fn gtk_icon_source_set_direction(source: *mut GtkIconSource,
                                         direction: GtkTextDirection);
    pub fn gtk_icon_source_set_state(source: *mut GtkIconSource,
                                     state: GtkStateType);
    pub fn gtk_icon_source_set_size(source: *mut GtkIconSource,
                                    size: GtkIconSize);
    pub fn gtk_icon_source_get_direction(source: *GtkIconSource) ->
     GtkTextDirection;
    pub fn gtk_icon_source_get_state(source: *GtkIconSource) -> GtkStateType;
    pub fn gtk_icon_source_get_size(source: *GtkIconSource) -> GtkIconSize;
    pub fn _gtk_icon_set_invalidate_caches();
    pub fn _gtk_icon_factory_list_ids() -> *mut GList;
    pub fn _gtk_icon_factory_ensure_default_icons();
    pub fn gtk_style_properties_get_type() -> GType;
    pub fn gtk_style_properties_register_property(parse_func:
                                                      GtkStylePropertyParser,
                                                  pspec: *mut GParamSpec);
    pub fn gtk_style_properties_lookup_property(property_name: *gchar,
                                                parse_func:
                                                    *mut GtkStylePropertyParser,
                                                pspec: *mut *mut GParamSpec)
     -> gboolean;
    pub fn gtk_style_properties_new() -> *mut GtkStyleProperties;
    pub fn gtk_style_properties_map_color(props: *mut GtkStyleProperties,
                                          name: *gchar,
                                          color: *mut GtkSymbolicColor);
    pub fn gtk_style_properties_lookup_color(props: *mut GtkStyleProperties,
                                             name: *gchar) ->
     *mut GtkSymbolicColor;
    pub fn gtk_style_properties_set_property(props: *mut GtkStyleProperties,
                                             property: *gchar,
                                             state: GtkStateFlags,
                                             value: *GValue);
    pub fn gtk_style_properties_set_valist(props: *mut GtkStyleProperties,
                                           state: GtkStateFlags,
                                           args: va_list);
    pub fn gtk_style_properties_set(props: *mut GtkStyleProperties,
                                    state: GtkStateFlags, ...);
    pub fn gtk_style_properties_get_property(props: *mut GtkStyleProperties,
                                             property: *gchar,
                                             state: GtkStateFlags,
                                             value: *mut GValue) -> gboolean;
    pub fn gtk_style_properties_get_valist(props: *mut GtkStyleProperties,
                                           state: GtkStateFlags,
                                           args: va_list);
    pub fn gtk_style_properties_get(props: *mut GtkStyleProperties,
                                    state: GtkStateFlags, ...);
    pub fn gtk_style_properties_unset_property(props: *mut GtkStyleProperties,
                                               property: *gchar,
                                               state: GtkStateFlags);
    pub fn gtk_style_properties_clear(props: *mut GtkStyleProperties);
    pub fn gtk_style_properties_merge(props: *mut GtkStyleProperties,
                                      props_to_merge: *GtkStyleProperties,
                                      replace: gboolean);
    pub fn gtk_style_provider_get_type() -> GType;
    pub fn gtk_style_provider_get_style(provider: *mut GtkStyleProvider,
                                        path: *mut GtkWidgetPath) ->
     *mut GtkStyleProperties;
    pub fn gtk_style_provider_get_style_property(provider:
                                                     *mut GtkStyleProvider,
                                                 path: *mut GtkWidgetPath,
                                                 state: GtkStateFlags,
                                                 pspec: *mut GParamSpec,
                                                 value: *mut GValue) ->
     gboolean;
    pub fn gtk_style_provider_get_icon_factory(provider:
                                                   *mut GtkStyleProvider,
                                               path: *mut GtkWidgetPath) ->
     *mut GtkIconFactory;
    pub fn gtk_style_context_get_type() -> GType;
    pub fn gtk_style_context_new() -> *mut GtkStyleContext;
    pub fn gtk_style_context_add_provider_for_screen(screen: *mut GdkScreen,
                                                     provider:
                                                         *mut GtkStyleProvider,
                                                     priority: guint);
    pub fn gtk_style_context_remove_provider_for_screen(screen:
                                                            *mut GdkScreen,
                                                        provider:
                                                            *mut GtkStyleProvider);
    pub fn gtk_style_context_add_provider(context: *mut GtkStyleContext,
                                          provider: *mut GtkStyleProvider,
                                          priority: guint);
    pub fn gtk_style_context_remove_provider(context: *mut GtkStyleContext,
                                             provider: *mut GtkStyleProvider);
    pub fn gtk_style_context_save(context: *mut GtkStyleContext);
    pub fn gtk_style_context_restore(context: *mut GtkStyleContext);
    pub fn gtk_style_context_get_section(context: *mut GtkStyleContext,
                                         property: *gchar) ->
     *mut GtkCssSection;
    pub fn gtk_style_context_get_property(context: *mut GtkStyleContext,
                                          property: *gchar,
                                          state: GtkStateFlags,
                                          value: *mut GValue);
    pub fn gtk_style_context_get_valist(context: *mut GtkStyleContext,
                                        state: GtkStateFlags, args: va_list);
    pub fn gtk_style_context_get(context: *mut GtkStyleContext,
                                 state: GtkStateFlags, ...);
    pub fn gtk_style_context_set_state(context: *mut GtkStyleContext,
                                       flags: GtkStateFlags);
    pub fn gtk_style_context_get_state(context: *mut GtkStyleContext) ->
     GtkStateFlags;
    pub fn gtk_style_context_set_scale(context: *mut GtkStyleContext,
                                       scale: gint);
    pub fn gtk_style_context_get_scale(context: *mut GtkStyleContext) -> gint;
    pub fn gtk_style_context_state_is_running(context: *mut GtkStyleContext,
                                              state: GtkStateType,
                                              progress: *mut gdouble) ->
     gboolean;
    pub fn gtk_style_context_set_path(context: *mut GtkStyleContext,
                                      path: *mut GtkWidgetPath);
    pub fn gtk_style_context_get_path(context: *mut GtkStyleContext) ->
     *GtkWidgetPath;
    pub fn gtk_style_context_set_parent(context: *mut GtkStyleContext,
                                        parent: *mut GtkStyleContext);
    pub fn gtk_style_context_get_parent(context: *mut GtkStyleContext) ->
     *mut GtkStyleContext;
    pub fn gtk_style_context_list_classes(context: *mut GtkStyleContext) ->
     *mut GList;
    pub fn gtk_style_context_add_class(context: *mut GtkStyleContext,
                                       class_name: *gchar);
    pub fn gtk_style_context_remove_class(context: *mut GtkStyleContext,
                                          class_name: *gchar);
    pub fn gtk_style_context_has_class(context: *mut GtkStyleContext,
                                       class_name: *gchar) -> gboolean;
    pub fn gtk_style_context_list_regions(context: *mut GtkStyleContext) ->
     *mut GList;
    pub fn gtk_style_context_add_region(context: *mut GtkStyleContext,
                                        region_name: *gchar,
                                        flags: GtkRegionFlags);
    pub fn gtk_style_context_remove_region(context: *mut GtkStyleContext,
                                           region_name: *gchar);
    pub fn gtk_style_context_has_region(context: *mut GtkStyleContext,
                                        region_name: *gchar,
                                        flags_return: *mut GtkRegionFlags) ->
     gboolean;
    pub fn gtk_style_context_get_style_property(context: *mut GtkStyleContext,
                                                property_name: *gchar,
                                                value: *mut GValue);
    pub fn gtk_style_context_get_style_valist(context: *mut GtkStyleContext,
                                              args: va_list);
    pub fn gtk_style_context_get_style(context: *mut GtkStyleContext, ...);
    pub fn gtk_style_context_lookup_icon_set(context: *mut GtkStyleContext,
                                             stock_id: *gchar) ->
     *mut GtkIconSet;
    pub fn gtk_icon_set_render_icon_pixbuf(icon_set: *mut GtkIconSet,
                                           context: *mut GtkStyleContext,
                                           size: GtkIconSize) ->
     *mut GdkPixbuf;
    pub fn gtk_icon_set_render_icon_surface(icon_set: *mut GtkIconSet,
                                            context: *mut GtkStyleContext,
                                            size: GtkIconSize, scale: c_int,
                                            for_window: *mut GdkWindow) ->
     *mut cairo_surface_t;
    pub fn gtk_style_context_set_screen(context: *mut GtkStyleContext,
                                        screen: *mut GdkScreen);
    pub fn gtk_style_context_get_screen(context: *mut GtkStyleContext) ->
     *mut GdkScreen;
    pub fn gtk_style_context_set_frame_clock(context: *mut GtkStyleContext,
                                             frame_clock: *mut GdkFrameClock);
    pub fn gtk_style_context_get_frame_clock(context: *mut GtkStyleContext) ->
     *mut GdkFrameClock;
    pub fn gtk_style_context_set_direction(context: *mut GtkStyleContext,
                                           direction: GtkTextDirection);
    pub fn gtk_style_context_get_direction(context: *mut GtkStyleContext) ->
     GtkTextDirection;
    pub fn gtk_style_context_set_junction_sides(context: *mut GtkStyleContext,
                                                sides: GtkJunctionSides);
    pub fn gtk_style_context_get_junction_sides(context: *mut GtkStyleContext)
     -> GtkJunctionSides;
    pub fn gtk_style_context_lookup_color(context: *mut GtkStyleContext,
                                          color_name: *gchar,
                                          color: *mut GdkRGBA) -> gboolean;
    pub fn gtk_style_context_notify_state_change(context:
                                                     *mut GtkStyleContext,
                                                 window: *mut GdkWindow,
                                                 region_id: gpointer,
                                                 state: GtkStateType,
                                                 state_value: gboolean);
    pub fn gtk_style_context_cancel_animations(context: *mut GtkStyleContext,
                                               region_id: gpointer);
    pub fn gtk_style_context_scroll_animations(context: *mut GtkStyleContext,
                                               window: *mut GdkWindow,
                                               dx: gint, dy: gint);
    pub fn gtk_style_context_push_animatable_region(context:
                                                        *mut GtkStyleContext,
                                                    region_id: gpointer);
    pub fn gtk_style_context_pop_animatable_region(context:
                                                       *mut GtkStyleContext);
    pub fn gtk_style_context_get_color(context: *mut GtkStyleContext,
                                       state: GtkStateFlags,
                                       color: *mut GdkRGBA);
    pub fn gtk_style_context_get_background_color(context:
                                                      *mut GtkStyleContext,
                                                  state: GtkStateFlags,
                                                  color: *mut GdkRGBA);
    pub fn gtk_style_context_get_border_color(context: *mut GtkStyleContext,
                                              state: GtkStateFlags,
                                              color: *mut GdkRGBA);
    pub fn gtk_style_context_get_font(context: *mut GtkStyleContext,
                                      state: GtkStateFlags) ->
     *PangoFontDescription;
    pub fn gtk_style_context_get_border(context: *mut GtkStyleContext,
                                        state: GtkStateFlags,
                                        border: *mut GtkBorder);
    pub fn gtk_style_context_get_padding(context: *mut GtkStyleContext,
                                         state: GtkStateFlags,
                                         padding: *mut GtkBorder);
    pub fn gtk_style_context_get_margin(context: *mut GtkStyleContext,
                                        state: GtkStateFlags,
                                        margin: *mut GtkBorder);
    pub fn gtk_style_context_invalidate(context: *mut GtkStyleContext);
    pub fn gtk_style_context_reset_widgets(screen: *mut GdkScreen);
    pub fn gtk_style_context_set_background(context: *mut GtkStyleContext,
                                            window: *mut GdkWindow);
    pub fn gtk_render_check(context: *mut GtkStyleContext, cr: *mut cairo_t,
                            x: gdouble, y: gdouble, width: gdouble,
                            height: gdouble);
    pub fn gtk_render_option(context: *mut GtkStyleContext, cr: *mut cairo_t,
                             x: gdouble, y: gdouble, width: gdouble,
                             height: gdouble);
    pub fn gtk_render_arrow(context: *mut GtkStyleContext, cr: *mut cairo_t,
                            angle: gdouble, x: gdouble, y: gdouble,
                            size: gdouble);
    pub fn gtk_render_background(context: *mut GtkStyleContext,
                                 cr: *mut cairo_t, x: gdouble, y: gdouble,
                                 width: gdouble, height: gdouble);
    pub fn gtk_render_frame(context: *mut GtkStyleContext, cr: *mut cairo_t,
                            x: gdouble, y: gdouble, width: gdouble,
                            height: gdouble);
    pub fn gtk_render_expander(context: *mut GtkStyleContext,
                               cr: *mut cairo_t, x: gdouble, y: gdouble,
                               width: gdouble, height: gdouble);
    pub fn gtk_render_focus(context: *mut GtkStyleContext, cr: *mut cairo_t,
                            x: gdouble, y: gdouble, width: gdouble,
                            height: gdouble);
    pub fn gtk_render_layout(context: *mut GtkStyleContext, cr: *mut cairo_t,
                             x: gdouble, y: gdouble,
                             layout: *mut PangoLayout);
    pub fn gtk_render_line(context: *mut GtkStyleContext, cr: *mut cairo_t,
                           x0: gdouble, y0: gdouble, x1: gdouble,
                           y1: gdouble);
    pub fn gtk_render_slider(context: *mut GtkStyleContext, cr: *mut cairo_t,
                             x: gdouble, y: gdouble, width: gdouble,
                             height: gdouble, orientation: GtkOrientation);
    pub fn gtk_render_frame_gap(context: *mut GtkStyleContext,
                                cr: *mut cairo_t, x: gdouble, y: gdouble,
                                width: gdouble, height: gdouble,
                                gap_side: GtkPositionType, xy0_gap: gdouble,
                                xy1_gap: gdouble);
    pub fn gtk_render_extension(context: *mut GtkStyleContext,
                                cr: *mut cairo_t, x: gdouble, y: gdouble,
                                width: gdouble, height: gdouble,
                                gap_side: GtkPositionType);
    pub fn gtk_render_handle(context: *mut GtkStyleContext, cr: *mut cairo_t,
                             x: gdouble, y: gdouble, width: gdouble,
                             height: gdouble);
    pub fn gtk_render_activity(context: *mut GtkStyleContext,
                               cr: *mut cairo_t, x: gdouble, y: gdouble,
                               width: gdouble, height: gdouble);
    pub fn gtk_render_icon_pixbuf(context: *mut GtkStyleContext,
                                  source: *GtkIconSource, size: GtkIconSize)
     -> *mut GdkPixbuf;
    pub fn gtk_render_icon(context: *mut GtkStyleContext, cr: *mut cairo_t,
                           pixbuf: *mut GdkPixbuf, x: gdouble, y: gdouble);
    pub fn gtk_render_icon_surface(context: *mut GtkStyleContext,
                                   cr: *mut cairo_t,
                                   surface: *mut cairo_surface_t, x: gdouble,
                                   y: gdouble);
    pub fn gtk_render_insertion_cursor(context: *mut GtkStyleContext,
                                       cr: *mut cairo_t, x: gdouble,
                                       y: gdouble, layout: *mut PangoLayout,
                                       index: c_int,
                                       direction: PangoDirection);
    pub fn gtk_draw_insertion_cursor(widget: *mut GtkWidget, cr: *mut cairo_t,
                                     location: *GdkRectangle,
                                     is_primary: gboolean,
                                     direction: GtkTextDirection,
                                     draw_arrow: gboolean);
    pub fn _gtk_style_context_get_attributes(attributes: *mut AtkAttributeSet,
                                             context: *mut GtkStyleContext,
                                             flags: GtkStateFlags) ->
     *mut AtkAttributeSet;
    pub fn gtk_icon_theme_error_quark() -> GQuark;
    pub fn gtk_icon_theme_get_type() -> GType;
    pub fn gtk_icon_theme_new() -> *mut GtkIconTheme;
    pub fn gtk_icon_theme_get_default() -> *mut GtkIconTheme;
    pub fn gtk_icon_theme_get_for_screen(screen: *mut GdkScreen) ->
     *mut GtkIconTheme;
    pub fn gtk_icon_theme_set_screen(icon_theme: *mut GtkIconTheme,
                                     screen: *mut GdkScreen);
    pub fn gtk_icon_theme_set_search_path(icon_theme: *mut GtkIconTheme,
                                          path: c_void, n_elements: gint);
    pub fn gtk_icon_theme_get_search_path(icon_theme: *mut GtkIconTheme,
                                          path: c_void,
                                          n_elements: *mut gint);
    pub fn gtk_icon_theme_append_search_path(icon_theme: *mut GtkIconTheme,
                                             path: *gchar);
    pub fn gtk_icon_theme_prepend_search_path(icon_theme: *mut GtkIconTheme,
                                              path: *gchar);
    pub fn gtk_icon_theme_set_custom_theme(icon_theme: *mut GtkIconTheme,
                                           theme_name: *gchar);
    pub fn gtk_icon_theme_has_icon(icon_theme: *mut GtkIconTheme,
                                   icon_name: *gchar) -> gboolean;
    pub fn gtk_icon_theme_get_icon_sizes(icon_theme: *mut GtkIconTheme,
                                         icon_name: *gchar) -> *mut gint;
    pub fn gtk_icon_theme_lookup_icon(icon_theme: *mut GtkIconTheme,
                                      icon_name: *gchar, size: gint,
                                      flags: GtkIconLookupFlags) ->
     *mut GtkIconInfo;
    pub fn gtk_icon_theme_lookup_icon_for_scale(icon_theme: *mut GtkIconTheme,
                                                icon_name: *gchar, size: gint,
                                                scale: gint,
                                                flags: GtkIconLookupFlags) ->
     *mut GtkIconInfo;
    pub fn gtk_icon_theme_choose_icon(icon_theme: *mut GtkIconTheme,
                                      icon_names: c_void, size: gint,
                                      flags: GtkIconLookupFlags) ->
     *mut GtkIconInfo;
    pub fn gtk_icon_theme_choose_icon_for_scale(icon_theme: *mut GtkIconTheme,
                                                icon_names: c_void,
                                                size: gint, scale: gint,
                                                flags: GtkIconLookupFlags) ->
     *mut GtkIconInfo;
    pub fn gtk_icon_theme_load_icon(icon_theme: *mut GtkIconTheme,
                                    icon_name: *gchar, size: gint,
                                    flags: GtkIconLookupFlags,
                                    error: *mut *mut GError) ->
     *mut GdkPixbuf;
    pub fn gtk_icon_theme_load_icon_for_scale(icon_theme: *mut GtkIconTheme,
                                              icon_name: *gchar, size: gint,
                                              scale: gint,
                                              flags: GtkIconLookupFlags,
                                              error: *mut *mut GError) ->
     *mut GdkPixbuf;
    pub fn gtk_icon_theme_load_surface(icon_theme: *mut GtkIconTheme,
                                       icon_name: *gchar, size: gint,
                                       scale: gint,
                                       for_window: *mut GdkWindow,
                                       flags: GtkIconLookupFlags,
                                       error: *mut *mut GError) ->
     *mut cairo_surface_t;
    pub fn gtk_icon_theme_lookup_by_gicon(icon_theme: *mut GtkIconTheme,
                                          icon: *mut GIcon, size: gint,
                                          flags: GtkIconLookupFlags) ->
     *mut GtkIconInfo;
    pub fn gtk_icon_theme_lookup_by_gicon_for_scale(icon_theme:
                                                        *mut GtkIconTheme,
                                                    icon: *mut GIcon,
                                                    size: gint, scale: gint,
                                                    flags: GtkIconLookupFlags)
     -> *mut GtkIconInfo;
    pub fn gtk_icon_theme_list_icons(icon_theme: *mut GtkIconTheme,
                                     context: *gchar) -> *mut GList;
    pub fn gtk_icon_theme_list_contexts(icon_theme: *mut GtkIconTheme) ->
     *mut GList;
    pub fn gtk_icon_theme_get_example_icon_name(icon_theme: *mut GtkIconTheme)
     -> *mut c_schar;
    pub fn gtk_icon_theme_rescan_if_needed(icon_theme: *mut GtkIconTheme) ->
     gboolean;
    pub fn gtk_icon_theme_add_builtin_icon(icon_name: *gchar, size: gint,
                                           pixbuf: *mut GdkPixbuf);
    pub fn gtk_icon_info_get_type() -> GType;
    pub fn gtk_icon_info_copy(icon_info: *mut GtkIconInfo) ->
     *mut GtkIconInfo;
    pub fn gtk_icon_info_free(icon_info: *mut GtkIconInfo);
    pub fn gtk_icon_info_new_for_pixbuf(icon_theme: *mut GtkIconTheme,
                                        pixbuf: *mut GdkPixbuf) ->
     *mut GtkIconInfo;
    pub fn gtk_icon_info_get_base_size(icon_info: *mut GtkIconInfo) -> gint;
    pub fn gtk_icon_info_get_base_scale(icon_info: *mut GtkIconInfo) -> gint;
    pub fn gtk_icon_info_get_filename(icon_info: *mut GtkIconInfo) -> *gchar;
    pub fn gtk_icon_info_get_builtin_pixbuf(icon_info: *mut GtkIconInfo) ->
     *mut GdkPixbuf;
    pub fn gtk_icon_info_load_icon(icon_info: *mut GtkIconInfo,
                                   error: *mut *mut GError) -> *mut GdkPixbuf;
    pub fn gtk_icon_info_load_surface(icon_info: *mut GtkIconInfo,
                                      for_window: *mut GdkWindow,
                                      error: *mut *mut GError) ->
     *mut cairo_surface_t;
    pub fn gtk_icon_info_load_icon_async(icon_info: *mut GtkIconInfo,
                                         cancellable: *mut GCancellable,
                                         callback: GAsyncReadyCallback,
                                         user_data: gpointer);
    pub fn gtk_icon_info_load_icon_finish(icon_info: *mut GtkIconInfo,
                                          res: *mut GAsyncResult,
                                          error: *mut *mut GError) ->
     *mut GdkPixbuf;
    pub fn gtk_icon_info_load_symbolic(icon_info: *mut GtkIconInfo,
                                       fg: *GdkRGBA, success_color: *GdkRGBA,
                                       warning_color: *GdkRGBA,
                                       error_color: *GdkRGBA,
                                       was_symbolic: *mut gboolean,
                                       error: *mut *mut GError) ->
     *mut GdkPixbuf;
    pub fn gtk_icon_info_load_symbolic_async(icon_info: *mut GtkIconInfo,
                                             fg: *GdkRGBA,
                                             success_color: *GdkRGBA,
                                             warning_color: *GdkRGBA,
                                             error_color: *GdkRGBA,
                                             cancellable: *mut GCancellable,
                                             callback: GAsyncReadyCallback,
                                             user_data: gpointer);
    pub fn gtk_icon_info_load_symbolic_finish(icon_info: *mut GtkIconInfo,
                                              res: *mut GAsyncResult,
                                              was_symbolic: *mut gboolean,
                                              error: *mut *mut GError) ->
     *mut GdkPixbuf;
    pub fn gtk_icon_info_load_symbolic_for_context(icon_info:
                                                       *mut GtkIconInfo,
                                                   context:
                                                       *mut GtkStyleContext,
                                                   was_symbolic:
                                                       *mut gboolean,
                                                   error: *mut *mut GError) ->
     *mut GdkPixbuf;
    pub fn gtk_icon_info_load_symbolic_for_context_async(icon_info:
                                                             *mut GtkIconInfo,
                                                         context:
                                                             *mut GtkStyleContext,
                                                         cancellable:
                                                             *mut GCancellable,
                                                         callback:
                                                             GAsyncReadyCallback,
                                                         user_data: gpointer);
    pub fn gtk_icon_info_load_symbolic_for_context_finish(icon_info:
                                                              *mut GtkIconInfo,
                                                          res:
                                                              *mut GAsyncResult,
                                                          was_symbolic:
                                                              *mut gboolean,
                                                          error:
                                                              *mut *mut GError)
     -> *mut GdkPixbuf;
    pub fn gtk_icon_info_load_symbolic_for_style(icon_info: *mut GtkIconInfo,
                                                 style: *mut GtkStyle,
                                                 state: GtkStateType,
                                                 was_symbolic: *mut gboolean,
                                                 error: *mut *mut GError) ->
     *mut GdkPixbuf;
    pub fn gtk_icon_info_set_raw_coordinates(icon_info: *mut GtkIconInfo,
                                             raw_coordinates: gboolean);
    pub fn gtk_icon_info_get_embedded_rect(icon_info: *mut GtkIconInfo,
                                           rectangle: *mut GdkRectangle) ->
     gboolean;
    pub fn gtk_icon_info_get_attach_points(icon_info: *mut GtkIconInfo,
                                           points: *mut *mut GdkPoint,
                                           n_points: *mut gint) -> gboolean;
    pub fn gtk_icon_info_get_display_name(icon_info: *mut GtkIconInfo) ->
     *gchar;
    pub fn _gtk_icon_theme_ensure_builtin_cache();
    pub fn gtk_tooltip_get_type() -> GType;
    pub fn gtk_tooltip_set_markup(tooltip: *mut GtkTooltip, markup: *gchar);
    pub fn gtk_tooltip_set_text(tooltip: *mut GtkTooltip, text: *gchar);
    pub fn gtk_tooltip_set_icon(tooltip: *mut GtkTooltip,
                                pixbuf: *mut GdkPixbuf);
    pub fn gtk_tooltip_set_icon_from_stock(tooltip: *mut GtkTooltip,
                                           stock_id: *gchar,
                                           size: GtkIconSize);
    pub fn gtk_tooltip_set_icon_from_icon_name(tooltip: *mut GtkTooltip,
                                               icon_name: *gchar,
                                               size: GtkIconSize);
    pub fn gtk_tooltip_set_icon_from_gicon(tooltip: *mut GtkTooltip,
                                           gicon: *mut GIcon,
                                           size: GtkIconSize);
    pub fn gtk_tooltip_set_custom(tooltip: *mut GtkTooltip,
                                  custom_widget: *mut GtkWidget);
    pub fn gtk_tooltip_set_tip_area(tooltip: *mut GtkTooltip,
                                    rect: *GdkRectangle);
    pub fn gtk_tooltip_trigger_tooltip_query(display: *mut GdkDisplay);
    pub fn _gtk_tooltip_focus_in(widget: *mut GtkWidget);
    pub fn _gtk_tooltip_focus_out(widget: *mut GtkWidget);
    pub fn _gtk_tooltip_toggle_keyboard_mode(widget: *mut GtkWidget);
    pub fn _gtk_tooltip_handle_event(event: *mut GdkEvent);
    pub fn _gtk_tooltip_hide(widget: *mut GtkWidget);
    pub fn _gtk_widget_find_at_coords(window: *mut GdkWindow, window_x: gint,
                                      window_y: gint, widget_x: *mut gint,
                                      widget_y: *mut gint) -> *mut GtkWidget;
    pub fn gtk_icon_view_get_type() -> GType;
    pub fn gtk_icon_view_new() -> *mut GtkWidget;
    pub fn gtk_icon_view_new_with_area(area: *mut GtkCellArea) ->
     *mut GtkWidget;
    pub fn gtk_icon_view_new_with_model(model: *mut GtkTreeModel) ->
     *mut GtkWidget;
    pub fn gtk_icon_view_set_model(icon_view: *mut GtkIconView,
                                   model: *mut GtkTreeModel);
    pub fn gtk_icon_view_get_model(icon_view: *mut GtkIconView) ->
     *mut GtkTreeModel;
    pub fn gtk_icon_view_set_text_column(icon_view: *mut GtkIconView,
                                         column: gint);
    pub fn gtk_icon_view_get_text_column(icon_view: *mut GtkIconView) -> gint;
    pub fn gtk_icon_view_set_markup_column(icon_view: *mut GtkIconView,
                                           column: gint);
    pub fn gtk_icon_view_get_markup_column(icon_view: *mut GtkIconView) ->
     gint;
    pub fn gtk_icon_view_set_pixbuf_column(icon_view: *mut GtkIconView,
                                           column: gint);
    pub fn gtk_icon_view_get_pixbuf_column(icon_view: *mut GtkIconView) ->
     gint;
    pub fn gtk_icon_view_set_item_orientation(icon_view: *mut GtkIconView,
                                              orientation: GtkOrientation);
    pub fn gtk_icon_view_get_item_orientation(icon_view: *mut GtkIconView) ->
     GtkOrientation;
    pub fn gtk_icon_view_set_columns(icon_view: *mut GtkIconView,
                                     columns: gint);
    pub fn gtk_icon_view_get_columns(icon_view: *mut GtkIconView) -> gint;
    pub fn gtk_icon_view_set_item_width(icon_view: *mut GtkIconView,
                                        item_width: gint);
    pub fn gtk_icon_view_get_item_width(icon_view: *mut GtkIconView) -> gint;
    pub fn gtk_icon_view_set_spacing(icon_view: *mut GtkIconView,
                                     spacing: gint);
    pub fn gtk_icon_view_get_spacing(icon_view: *mut GtkIconView) -> gint;
    pub fn gtk_icon_view_set_row_spacing(icon_view: *mut GtkIconView,
                                         row_spacing: gint);
    pub fn gtk_icon_view_get_row_spacing(icon_view: *mut GtkIconView) -> gint;
    pub fn gtk_icon_view_set_column_spacing(icon_view: *mut GtkIconView,
                                            column_spacing: gint);
    pub fn gtk_icon_view_get_column_spacing(icon_view: *mut GtkIconView) ->
     gint;
    pub fn gtk_icon_view_set_margin(icon_view: *mut GtkIconView,
                                    margin: gint);
    pub fn gtk_icon_view_get_margin(icon_view: *mut GtkIconView) -> gint;
    pub fn gtk_icon_view_set_item_padding(icon_view: *mut GtkIconView,
                                          item_padding: gint);
    pub fn gtk_icon_view_get_item_padding(icon_view: *mut GtkIconView) ->
     gint;
    pub fn gtk_icon_view_get_path_at_pos(icon_view: *mut GtkIconView, x: gint,
                                         y: gint) -> *mut GtkTreePath;
    pub fn gtk_icon_view_get_item_at_pos(icon_view: *mut GtkIconView, x: gint,
                                         y: gint, path: *mut *mut GtkTreePath,
                                         cell: *mut *mut GtkCellRenderer) ->
     gboolean;
    pub fn gtk_icon_view_get_visible_range(icon_view: *mut GtkIconView,
                                           start_path: *mut *mut GtkTreePath,
                                           end_path: *mut *mut GtkTreePath) ->
     gboolean;
    pub fn gtk_icon_view_set_activate_on_single_click(icon_view:
                                                          *mut GtkIconView,
                                                      single: gboolean);
    pub fn gtk_icon_view_get_activate_on_single_click(icon_view:
                                                          *mut GtkIconView) ->
     gboolean;
    pub fn gtk_icon_view_selected_foreach(icon_view: *mut GtkIconView,
                                          func: GtkIconViewForeachFunc,
                                          data: gpointer);
    pub fn gtk_icon_view_set_selection_mode(icon_view: *mut GtkIconView,
                                            mode: GtkSelectionMode);
    pub fn gtk_icon_view_get_selection_mode(icon_view: *mut GtkIconView) ->
     GtkSelectionMode;
    pub fn gtk_icon_view_select_path(icon_view: *mut GtkIconView,
                                     path: *mut GtkTreePath);
    pub fn gtk_icon_view_unselect_path(icon_view: *mut GtkIconView,
                                       path: *mut GtkTreePath);
    pub fn gtk_icon_view_path_is_selected(icon_view: *mut GtkIconView,
                                          path: *mut GtkTreePath) -> gboolean;
    pub fn gtk_icon_view_get_item_row(icon_view: *mut GtkIconView,
                                      path: *mut GtkTreePath) -> gint;
    pub fn gtk_icon_view_get_item_column(icon_view: *mut GtkIconView,
                                         path: *mut GtkTreePath) -> gint;
    pub fn gtk_icon_view_get_selected_items(icon_view: *mut GtkIconView) ->
     *mut GList;
    pub fn gtk_icon_view_select_all(icon_view: *mut GtkIconView);
    pub fn gtk_icon_view_unselect_all(icon_view: *mut GtkIconView);
    pub fn gtk_icon_view_item_activated(icon_view: *mut GtkIconView,
                                        path: *mut GtkTreePath);
    pub fn gtk_icon_view_set_cursor(icon_view: *mut GtkIconView,
                                    path: *mut GtkTreePath,
                                    cell: *mut GtkCellRenderer,
                                    start_editing: gboolean);
    pub fn gtk_icon_view_get_cursor(icon_view: *mut GtkIconView,
                                    path: *mut *mut GtkTreePath,
                                    cell: *mut *mut GtkCellRenderer) ->
     gboolean;
    pub fn gtk_icon_view_scroll_to_path(icon_view: *mut GtkIconView,
                                        path: *mut GtkTreePath,
                                        use_align: gboolean,
                                        row_align: gfloat, col_align: gfloat);
    pub fn gtk_icon_view_enable_model_drag_source(icon_view: *mut GtkIconView,
                                                  start_button_mask:
                                                      GdkModifierType,
                                                  targets: *GtkTargetEntry,
                                                  n_targets: gint,
                                                  actions: GdkDragAction);
    pub fn gtk_icon_view_enable_model_drag_dest(icon_view: *mut GtkIconView,
                                                targets: *GtkTargetEntry,
                                                n_targets: gint,
                                                actions: GdkDragAction);
    pub fn gtk_icon_view_unset_model_drag_source(icon_view: *mut GtkIconView);
    pub fn gtk_icon_view_unset_model_drag_dest(icon_view: *mut GtkIconView);
    pub fn gtk_icon_view_set_reorderable(icon_view: *mut GtkIconView,
                                         reorderable: gboolean);
    pub fn gtk_icon_view_get_reorderable(icon_view: *mut GtkIconView) ->
     gboolean;
    pub fn gtk_icon_view_set_drag_dest_item(icon_view: *mut GtkIconView,
                                            path: *mut GtkTreePath,
                                            pos: GtkIconViewDropPosition);
    pub fn gtk_icon_view_get_drag_dest_item(icon_view: *mut GtkIconView,
                                            path: *mut *mut GtkTreePath,
                                            pos:
                                                *mut GtkIconViewDropPosition);
    pub fn gtk_icon_view_get_dest_item_at_pos(icon_view: *mut GtkIconView,
                                              drag_x: gint, drag_y: gint,
                                              path: *mut *mut GtkTreePath,
                                              pos:
                                                  *mut GtkIconViewDropPosition)
     -> gboolean;
    pub fn gtk_icon_view_create_drag_icon(icon_view: *mut GtkIconView,
                                          path: *mut GtkTreePath) ->
     *mut cairo_surface_t;
    pub fn gtk_icon_view_convert_widget_to_bin_window_coords(icon_view:
                                                                 *mut GtkIconView,
                                                             wx: gint,
                                                             wy: gint,
                                                             bx: *mut gint,
                                                             by: *mut gint);
    pub fn gtk_icon_view_get_cell_rect(icon_view: *mut GtkIconView,
                                       path: *mut GtkTreePath,
                                       cell: *mut GtkCellRenderer,
                                       rect: *mut GdkRectangle) -> gboolean;
    pub fn gtk_icon_view_set_tooltip_item(icon_view: *mut GtkIconView,
                                          tooltip: *mut GtkTooltip,
                                          path: *mut GtkTreePath);
    pub fn gtk_icon_view_set_tooltip_cell(icon_view: *mut GtkIconView,
                                          tooltip: *mut GtkTooltip,
                                          path: *mut GtkTreePath,
                                          cell: *mut GtkCellRenderer);
    pub fn gtk_icon_view_get_tooltip_context(icon_view: *mut GtkIconView,
                                             x: *mut gint, y: *mut gint,
                                             keyboard_tip: gboolean,
                                             model: *mut *mut GtkTreeModel,
                                             path: *mut *mut GtkTreePath,
                                             iter: *mut GtkTreeIter) ->
     gboolean;
    pub fn gtk_icon_view_set_tooltip_column(icon_view: *mut GtkIconView,
                                            column: gint);
    pub fn gtk_icon_view_get_tooltip_column(icon_view: *mut GtkIconView) ->
     gint;
    pub fn gtk_im_context_simple_get_type() -> GType;
    pub fn gtk_im_context_simple_new() -> *mut GtkIMContext;
    pub fn gtk_im_context_simple_add_table(context_simple:
                                               *mut GtkIMContextSimple,
                                           data: *mut guint16,
                                           max_seq_len: gint, n_seqs: gint);
    pub fn gtk_im_multicontext_get_type() -> GType;
    pub fn gtk_im_multicontext_new() -> *mut GtkIMContext;
    pub fn gtk_im_multicontext_append_menuitems(context:
                                                    *mut GtkIMMulticontext,
                                                menushell: *mut GtkMenuShell);
    pub fn gtk_im_multicontext_get_context_id(context: *mut GtkIMMulticontext)
     -> *c_schar;
    pub fn gtk_im_multicontext_set_context_id(context: *mut GtkIMMulticontext,
                                              context_id: *c_schar);
    pub fn gtk_info_bar_get_type() -> GType;
    pub fn gtk_info_bar_new() -> *mut GtkWidget;
    pub fn gtk_info_bar_new_with_buttons(first_button_text: *gchar, ...) ->
     *mut GtkWidget;
    pub fn gtk_info_bar_get_action_area(info_bar: *mut GtkInfoBar) ->
     *mut GtkWidget;
    pub fn gtk_info_bar_get_content_area(info_bar: *mut GtkInfoBar) ->
     *mut GtkWidget;
    pub fn gtk_info_bar_add_action_widget(info_bar: *mut GtkInfoBar,
                                          child: *mut GtkWidget,
                                          response_id: gint);
    pub fn gtk_info_bar_add_button(info_bar: *mut GtkInfoBar,
                                   button_text: *gchar, response_id: gint) ->
     *mut GtkWidget;
    pub fn gtk_info_bar_add_buttons(info_bar: *mut GtkInfoBar,
                                    first_button_text: *gchar, ...);
    pub fn gtk_info_bar_set_response_sensitive(info_bar: *mut GtkInfoBar,
                                               response_id: gint,
                                               setting: gboolean);
    pub fn gtk_info_bar_set_default_response(info_bar: *mut GtkInfoBar,
                                             response_id: gint);
    pub fn gtk_info_bar_response(info_bar: *mut GtkInfoBar,
                                 response_id: gint);
    pub fn gtk_info_bar_set_message_type(info_bar: *mut GtkInfoBar,
                                         message_type: GtkMessageType);
    pub fn gtk_info_bar_get_message_type(info_bar: *mut GtkInfoBar) ->
     GtkMessageType;
    pub fn gtk_info_bar_set_show_close_button(info_bar: *mut GtkInfoBar,
                                              setting: gboolean);
    pub fn gtk_info_bar_get_show_close_button(info_bar: *mut GtkInfoBar) ->
     gboolean;
    pub fn gtk_invisible_get_type() -> GType;
    pub fn gtk_invisible_new() -> *mut GtkWidget;
    pub fn gtk_invisible_new_for_screen(screen: *mut GdkScreen) ->
     *mut GtkWidget;
    pub fn gtk_invisible_set_screen(invisible: *mut GtkInvisible,
                                    screen: *mut GdkScreen);
    pub fn gtk_invisible_get_screen(invisible: *mut GtkInvisible) ->
     *mut GdkScreen;
    pub fn gtk_layout_get_type() -> GType;
    pub fn gtk_layout_new(hadjustment: *mut GtkAdjustment,
                          vadjustment: *mut GtkAdjustment) -> *mut GtkWidget;
    pub fn gtk_layout_get_bin_window(layout: *mut GtkLayout) ->
     *mut GdkWindow;
    pub fn gtk_layout_put(layout: *mut GtkLayout,
                          child_widget: *mut GtkWidget, x: gint, y: gint);
    pub fn gtk_layout_move(layout: *mut GtkLayout,
                           child_widget: *mut GtkWidget, x: gint, y: gint);
    pub fn gtk_layout_set_size(layout: *mut GtkLayout, width: guint,
                               height: guint);
    pub fn gtk_layout_get_size(layout: *mut GtkLayout, width: *mut guint,
                               height: *mut guint);
    pub fn gtk_layout_get_hadjustment(layout: *mut GtkLayout) ->
     *mut GtkAdjustment;
    pub fn gtk_layout_get_vadjustment(layout: *mut GtkLayout) ->
     *mut GtkAdjustment;
    pub fn gtk_layout_set_hadjustment(layout: *mut GtkLayout,
                                      adjustment: *mut GtkAdjustment);
    pub fn gtk_layout_set_vadjustment(layout: *mut GtkLayout,
                                      adjustment: *mut GtkAdjustment);
    pub fn gtk_level_bar_get_type() -> GType;
    pub fn gtk_level_bar_new() -> *mut GtkWidget;
    pub fn gtk_level_bar_new_for_interval(min_value: gdouble,
                                          max_value: gdouble) ->
     *mut GtkWidget;
    pub fn gtk_level_bar_set_mode(_self: *mut GtkLevelBar,
                                  mode: GtkLevelBarMode);
    pub fn gtk_level_bar_get_mode(_self: *mut GtkLevelBar) -> GtkLevelBarMode;
    pub fn gtk_level_bar_set_value(_self: *mut GtkLevelBar, value: gdouble);
    pub fn gtk_level_bar_get_value(_self: *mut GtkLevelBar) -> gdouble;
    pub fn gtk_level_bar_set_min_value(_self: *mut GtkLevelBar,
                                       value: gdouble);
    pub fn gtk_level_bar_get_min_value(_self: *mut GtkLevelBar) -> gdouble;
    pub fn gtk_level_bar_set_max_value(_self: *mut GtkLevelBar,
                                       value: gdouble);
    pub fn gtk_level_bar_get_max_value(_self: *mut GtkLevelBar) -> gdouble;
    pub fn gtk_level_bar_set_inverted(_self: *mut GtkLevelBar,
                                      inverted: gboolean);
    pub fn gtk_level_bar_get_inverted(_self: *mut GtkLevelBar) -> gboolean;
    pub fn gtk_level_bar_add_offset_value(_self: *mut GtkLevelBar,
                                          name: *gchar, value: gdouble);
    pub fn gtk_level_bar_remove_offset_value(_self: *mut GtkLevelBar,
                                             name: *gchar);
    pub fn gtk_level_bar_get_offset_value(_self: *mut GtkLevelBar,
                                          name: *gchar, value: *mut gdouble)
     -> gboolean;
    pub fn gtk_link_button_get_type() -> GType;
    pub fn gtk_link_button_new(uri: *gchar) -> *mut GtkWidget;
    pub fn gtk_link_button_new_with_label(uri: *gchar, label: *gchar) ->
     *mut GtkWidget;
    pub fn gtk_link_button_get_uri(link_button: *mut GtkLinkButton) -> *gchar;
    pub fn gtk_link_button_set_uri(link_button: *mut GtkLinkButton,
                                   uri: *gchar);
    pub fn gtk_link_button_get_visited(link_button: *mut GtkLinkButton) ->
     gboolean;
    pub fn gtk_link_button_set_visited(link_button: *mut GtkLinkButton,
                                       visited: gboolean);
    pub fn gtk_list_box_row_get_type() -> GType;
    pub fn gtk_list_box_row_new() -> *mut GtkWidget;
    pub fn gtk_list_box_row_get_header(row: *mut GtkListBoxRow) ->
     *mut GtkWidget;
    pub fn gtk_list_box_row_set_header(row: *mut GtkListBoxRow,
                                       header: *mut GtkWidget);
    pub fn gtk_list_box_row_get_index(row: *mut GtkListBoxRow) -> gint;
    pub fn gtk_list_box_row_changed(row: *mut GtkListBoxRow);
    pub fn gtk_list_box_get_type() -> GType;
    pub fn gtk_list_box_prepend(list_box: *mut GtkListBox,
                                child: *mut GtkWidget);
    pub fn gtk_list_box_insert(list_box: *mut GtkListBox,
                               child: *mut GtkWidget, position: gint);
    pub fn gtk_list_box_get_selected_row(list_box: *mut GtkListBox) ->
     *mut GtkListBoxRow;
    pub fn gtk_list_box_get_row_at_index(list_box: *mut GtkListBox,
                                         index_: gint) -> *mut GtkListBoxRow;
    pub fn gtk_list_box_get_row_at_y(list_box: *mut GtkListBox, y: gint) ->
     *mut GtkListBoxRow;
    pub fn gtk_list_box_select_row(list_box: *mut GtkListBox,
                                   row: *mut GtkListBoxRow);
    pub fn gtk_list_box_set_placeholder(list_box: *mut GtkListBox,
                                        placeholder: *mut GtkWidget);
    pub fn gtk_list_box_set_adjustment(list_box: *mut GtkListBox,
                                       adjustment: *mut GtkAdjustment);
    pub fn gtk_list_box_get_adjustment(list_box: *mut GtkListBox) ->
     *mut GtkAdjustment;
    pub fn gtk_list_box_set_selection_mode(list_box: *mut GtkListBox,
                                           mode: GtkSelectionMode);
    pub fn gtk_list_box_get_selection_mode(list_box: *mut GtkListBox) ->
     GtkSelectionMode;
    pub fn gtk_list_box_set_filter_func(list_box: *mut GtkListBox,
                                        filter_func: GtkListBoxFilterFunc,
                                        user_data: gpointer,
                                        destroy: GDestroyNotify);
    pub fn gtk_list_box_set_header_func(list_box: *mut GtkListBox,
                                        update_header:
                                            GtkListBoxUpdateHeaderFunc,
                                        user_data: gpointer,
                                        destroy: GDestroyNotify);
    pub fn gtk_list_box_invalidate_filter(list_box: *mut GtkListBox);
    pub fn gtk_list_box_invalidate_sort(list_box: *mut GtkListBox);
    pub fn gtk_list_box_invalidate_headers(list_box: *mut GtkListBox);
    pub fn gtk_list_box_set_sort_func(list_box: *mut GtkListBox,
                                      sort_func: GtkListBoxSortFunc,
                                      user_data: gpointer,
                                      destroy: GDestroyNotify);
    pub fn gtk_list_box_set_activate_on_single_click(list_box:
                                                         *mut GtkListBox,
                                                     single: gboolean);
    pub fn gtk_list_box_get_activate_on_single_click(list_box:
                                                         *mut GtkListBox) ->
     gboolean;
    pub fn gtk_list_box_drag_unhighlight_row(list_box: *mut GtkListBox);
    pub fn gtk_list_box_drag_highlight_row(list_box: *mut GtkListBox,
                                           row: *mut GtkListBoxRow);
    pub fn gtk_list_box_new() -> *mut GtkWidget;
    pub fn gtk_lock_button_get_type() -> GType;
    pub fn gtk_lock_button_new(permission: *mut GPermission) ->
     *mut GtkWidget;
    pub fn gtk_lock_button_get_permission(button: *mut GtkLockButton) ->
     *mut GPermission;
    pub fn gtk_lock_button_set_permission(button: *mut GtkLockButton,
                                          permission: *mut GPermission);
    pub fn gtk_get_major_version() -> guint;
    pub fn gtk_get_minor_version() -> guint;
    pub fn gtk_get_micro_version() -> guint;
    pub fn gtk_get_binary_age() -> guint;
    pub fn gtk_get_interface_age() -> guint;
    pub fn gtk_check_version(required_major: guint, required_minor: guint,
                             required_micro: guint) -> *gchar;
    pub fn gtk_parse_args(argc: *mut c_int, argv: *mut *mut *mut c_schar) ->
     gboolean;
    pub fn gtk_init(argc: *mut c_int, argv: *mut *mut *mut c_schar);
    pub fn gtk_init_check(argc: *mut c_int, argv: *mut *mut *mut c_schar) ->
     gboolean;
    pub fn gtk_init_with_args(argc: *mut gint, argv: *mut *mut *mut gchar,
                              parameter_string: *gchar,
                              entries: *GOptionEntry,
                              translation_domain: *gchar,
                              error: *mut *mut GError) -> gboolean;
    pub fn gtk_get_option_group(open_default_display: gboolean) ->
     *mut GOptionGroup;
    pub fn gtk_disable_setlocale();
    pub fn gtk_get_default_language() -> *mut PangoLanguage;
    pub fn gtk_events_pending() -> gboolean;
    pub fn gtk_main_do_event(event: *mut GdkEvent);
    pub fn gtk_main();
    pub fn gtk_main_level() -> guint;
    pub fn gtk_main_quit();
    pub fn gtk_main_iteration() -> gboolean;
    pub fn gtk_main_iteration_do(blocking: gboolean) -> gboolean;
    pub fn gtk_true() -> gboolean;
    pub fn gtk_false() -> gboolean;
    pub fn gtk_grab_add(widget: *mut GtkWidget);
    pub fn gtk_grab_get_current() -> *mut GtkWidget;
    pub fn gtk_grab_remove(widget: *mut GtkWidget);
    pub fn gtk_device_grab_add(widget: *mut GtkWidget, device: *mut GdkDevice,
                               block_others: gboolean);
    pub fn gtk_device_grab_remove(widget: *mut GtkWidget,
                                  device: *mut GdkDevice);
    pub fn gtk_key_snooper_install(snooper: GtkKeySnoopFunc,
                                   func_data: gpointer) -> guint;
    pub fn gtk_key_snooper_remove(snooper_handler_id: guint);
    pub fn gtk_get_current_event() -> *mut GdkEvent;
    pub fn gtk_get_current_event_time() -> guint32;
    pub fn gtk_get_current_event_state(state: *mut GdkModifierType) ->
     gboolean;
    pub fn gtk_get_current_event_device() -> *mut GdkDevice;
    pub fn gtk_get_event_widget(event: *mut GdkEvent) -> *mut GtkWidget;
    pub fn gtk_propagate_event(widget: *mut GtkWidget, event: *mut GdkEvent);
    pub fn gtk_menu_bar_get_type() -> GType;
    pub fn gtk_menu_bar_new() -> *mut GtkWidget;
    pub fn gtk_menu_bar_new_from_model(model: *mut GMenuModel) ->
     *mut GtkWidget;
    pub fn gtk_menu_bar_get_pack_direction(menubar: *mut GtkMenuBar) ->
     GtkPackDirection;
    pub fn gtk_menu_bar_set_pack_direction(menubar: *mut GtkMenuBar,
                                           pack_dir: GtkPackDirection);
    pub fn gtk_menu_bar_get_child_pack_direction(menubar: *mut GtkMenuBar) ->
     GtkPackDirection;
    pub fn gtk_menu_bar_set_child_pack_direction(menubar: *mut GtkMenuBar,
                                                 child_pack_dir:
                                                     GtkPackDirection);
    pub fn _gtk_menu_bar_cycle_focus(menubar: *mut GtkMenuBar,
                                     dir: GtkDirectionType);
    pub fn gtk_menu_button_get_type() -> GType;
    pub fn gtk_menu_button_new() -> *mut GtkWidget;
    pub fn gtk_menu_button_set_popup(menu_button: *mut GtkMenuButton,
                                     popup: *mut GtkWidget);
    pub fn gtk_menu_button_get_popup(menu_button: *mut GtkMenuButton) ->
     *mut GtkMenu;
    pub fn gtk_menu_button_set_direction(menu_button: *mut GtkMenuButton,
                                         direction: GtkArrowType);
    pub fn gtk_menu_button_get_direction(menu_button: *mut GtkMenuButton) ->
     GtkArrowType;
    pub fn gtk_menu_button_set_menu_model(menu_button: *mut GtkMenuButton,
                                          menu_model: *mut GMenuModel);
    pub fn gtk_menu_button_get_menu_model(menu_button: *mut GtkMenuButton) ->
     *mut GMenuModel;
    pub fn gtk_menu_button_set_align_widget(menu_button: *mut GtkMenuButton,
                                            align_widget: *mut GtkWidget);
    pub fn gtk_menu_button_get_align_widget(menu_button: *mut GtkMenuButton)
     -> *mut GtkWidget;
    pub fn gtk_size_group_get_type() -> GType;
    pub fn gtk_size_group_new(mode: GtkSizeGroupMode) -> *mut GtkSizeGroup;
    pub fn gtk_size_group_set_mode(size_group: *mut GtkSizeGroup,
                                   mode: GtkSizeGroupMode);
    pub fn gtk_size_group_get_mode(size_group: *mut GtkSizeGroup) ->
     GtkSizeGroupMode;
    pub fn gtk_size_group_set_ignore_hidden(size_group: *mut GtkSizeGroup,
                                            ignore_hidden: gboolean);
    pub fn gtk_size_group_get_ignore_hidden(size_group: *mut GtkSizeGroup) ->
     gboolean;
    pub fn gtk_size_group_add_widget(size_group: *mut GtkSizeGroup,
                                     widget: *mut GtkWidget);
    pub fn gtk_size_group_remove_widget(size_group: *mut GtkSizeGroup,
                                        widget: *mut GtkWidget);
    pub fn gtk_size_group_get_widgets(size_group: *mut GtkSizeGroup) ->
     *mut GSList;
    pub fn gtk_tool_item_get_type() -> GType;
    pub fn gtk_tool_item_new() -> *mut GtkToolItem;
    pub fn gtk_tool_item_set_homogeneous(tool_item: *mut GtkToolItem,
                                         homogeneous: gboolean);
    pub fn gtk_tool_item_get_homogeneous(tool_item: *mut GtkToolItem) ->
     gboolean;
    pub fn gtk_tool_item_set_expand(tool_item: *mut GtkToolItem,
                                    expand: gboolean);
    pub fn gtk_tool_item_get_expand(tool_item: *mut GtkToolItem) -> gboolean;
    pub fn gtk_tool_item_set_tooltip_text(tool_item: *mut GtkToolItem,
                                          text: *gchar);
    pub fn gtk_tool_item_set_tooltip_markup(tool_item: *mut GtkToolItem,
                                            markup: *gchar);
    pub fn gtk_tool_item_set_use_drag_window(tool_item: *mut GtkToolItem,
                                             use_drag_window: gboolean);
    pub fn gtk_tool_item_get_use_drag_window(tool_item: *mut GtkToolItem) ->
     gboolean;
    pub fn gtk_tool_item_set_visible_horizontal(tool_item: *mut GtkToolItem,
                                                visible_horizontal: gboolean);
    pub fn gtk_tool_item_get_visible_horizontal(tool_item: *mut GtkToolItem)
     -> gboolean;
    pub fn gtk_tool_item_set_visible_vertical(tool_item: *mut GtkToolItem,
                                              visible_vertical: gboolean);
    pub fn gtk_tool_item_get_visible_vertical(tool_item: *mut GtkToolItem) ->
     gboolean;
    pub fn gtk_tool_item_get_is_important(tool_item: *mut GtkToolItem) ->
     gboolean;
    pub fn gtk_tool_item_set_is_important(tool_item: *mut GtkToolItem,
                                          is_important: gboolean);
    pub fn gtk_tool_item_get_ellipsize_mode(tool_item: *mut GtkToolItem) ->
     PangoEllipsizeMode;
    pub fn gtk_tool_item_get_icon_size(tool_item: *mut GtkToolItem) ->
     GtkIconSize;
    pub fn gtk_tool_item_get_orientation(tool_item: *mut GtkToolItem) ->
     GtkOrientation;
    pub fn gtk_tool_item_get_toolbar_style(tool_item: *mut GtkToolItem) ->
     GtkToolbarStyle;
    pub fn gtk_tool_item_get_relief_style(tool_item: *mut GtkToolItem) ->
     GtkReliefStyle;
    pub fn gtk_tool_item_get_text_alignment(tool_item: *mut GtkToolItem) ->
     gfloat;
    pub fn gtk_tool_item_get_text_orientation(tool_item: *mut GtkToolItem) ->
     GtkOrientation;
    pub fn gtk_tool_item_get_text_size_group(tool_item: *mut GtkToolItem) ->
     *mut GtkSizeGroup;
    pub fn gtk_tool_item_retrieve_proxy_menu_item(tool_item: *mut GtkToolItem)
     -> *mut GtkWidget;
    pub fn gtk_tool_item_get_proxy_menu_item(tool_item: *mut GtkToolItem,
                                             menu_item_id: *gchar) ->
     *mut GtkWidget;
    pub fn gtk_tool_item_set_proxy_menu_item(tool_item: *mut GtkToolItem,
                                             menu_item_id: *gchar,
                                             menu_item: *mut GtkWidget);
    pub fn gtk_tool_item_rebuild_menu(tool_item: *mut GtkToolItem);
    pub fn gtk_tool_item_toolbar_reconfigured(tool_item: *mut GtkToolItem);
    pub fn _gtk_tool_item_create_menu_proxy(tool_item: *mut GtkToolItem) ->
     gboolean;
    pub fn gtk_tool_button_get_type() -> GType;
    pub fn gtk_tool_button_new(icon_widget: *mut GtkWidget, label: *gchar) ->
     *mut GtkToolItem;
    pub fn gtk_tool_button_new_from_stock(stock_id: *gchar) ->
     *mut GtkToolItem;
    pub fn gtk_tool_button_set_label(button: *mut GtkToolButton,
                                     label: *gchar);
    pub fn gtk_tool_button_get_label(button: *mut GtkToolButton) -> *gchar;
    pub fn gtk_tool_button_set_use_underline(button: *mut GtkToolButton,
                                             use_underline: gboolean);
    pub fn gtk_tool_button_get_use_underline(button: *mut GtkToolButton) ->
     gboolean;
    pub fn gtk_tool_button_set_stock_id(button: *mut GtkToolButton,
                                        stock_id: *gchar);
    pub fn gtk_tool_button_get_stock_id(button: *mut GtkToolButton) -> *gchar;
    pub fn gtk_tool_button_set_icon_name(button: *mut GtkToolButton,
                                         icon_name: *gchar);
    pub fn gtk_tool_button_get_icon_name(button: *mut GtkToolButton) ->
     *gchar;
    pub fn gtk_tool_button_set_icon_widget(button: *mut GtkToolButton,
                                           icon_widget: *mut GtkWidget);
    pub fn gtk_tool_button_get_icon_widget(button: *mut GtkToolButton) ->
     *mut GtkWidget;
    pub fn gtk_tool_button_set_label_widget(button: *mut GtkToolButton,
                                            label_widget: *mut GtkWidget);
    pub fn gtk_tool_button_get_label_widget(button: *mut GtkToolButton) ->
     *mut GtkWidget;
    pub fn _gtk_tool_button_get_button(button: *mut GtkToolButton) ->
     *mut GtkWidget;
    pub fn gtk_menu_tool_button_get_type() -> GType;
    pub fn gtk_menu_tool_button_new(icon_widget: *mut GtkWidget,
                                    label: *gchar) -> *mut GtkToolItem;
    pub fn gtk_menu_tool_button_new_from_stock(stock_id: *gchar) ->
     *mut GtkToolItem;
    pub fn gtk_menu_tool_button_set_menu(button: *mut GtkMenuToolButton,
                                         menu: *mut GtkWidget);
    pub fn gtk_menu_tool_button_get_menu(button: *mut GtkMenuToolButton) ->
     *mut GtkWidget;
    pub fn gtk_menu_tool_button_set_arrow_tooltip_text(button:
                                                           *mut GtkMenuToolButton,
                                                       text: *gchar);
    pub fn gtk_menu_tool_button_set_arrow_tooltip_markup(button:
                                                             *mut GtkMenuToolButton,
                                                         markup: *gchar);
    pub fn gtk_message_dialog_get_type() -> GType;
    pub fn gtk_message_dialog_new(parent: *mut GtkWindow,
                                  flags: GtkDialogFlags,
                                  _type: GtkMessageType,
                                  buttons: GtkButtonsType,
                                  message_format: *gchar, ...) ->
     *mut GtkWidget;
    pub fn gtk_message_dialog_new_with_markup(parent: *mut GtkWindow,
                                              flags: GtkDialogFlags,
                                              _type: GtkMessageType,
                                              buttons: GtkButtonsType,
                                              message_format: *gchar, ...) ->
     *mut GtkWidget;
    pub fn gtk_message_dialog_set_image(dialog: *mut GtkMessageDialog,
                                        image: *mut GtkWidget);
    pub fn gtk_message_dialog_get_image(dialog: *mut GtkMessageDialog) ->
     *mut GtkWidget;
    pub fn gtk_message_dialog_set_markup(message_dialog:
                                             *mut GtkMessageDialog,
                                         str: *gchar);
    pub fn gtk_message_dialog_format_secondary_text(message_dialog:
                                                        *mut GtkMessageDialog,
                                                    message_format:
                                                        *gchar, ...);
    pub fn gtk_message_dialog_format_secondary_markup(message_dialog:
                                                          *mut GtkMessageDialog,
                                                      message_format:
                                                          *gchar, ...);
    pub fn gtk_message_dialog_get_message_area(message_dialog:
                                                   *mut GtkMessageDialog) ->
     *mut GtkWidget;
    pub fn gtk_mount_operation_get_type() -> GType;
    pub fn gtk_mount_operation_new(parent: *mut GtkWindow) ->
     *mut GMountOperation;
    pub fn gtk_mount_operation_is_showing(op: *mut GtkMountOperation) ->
     gboolean;
    pub fn gtk_mount_operation_set_parent(op: *mut GtkMountOperation,
                                          parent: *mut GtkWindow);
    pub fn gtk_mount_operation_get_parent(op: *mut GtkMountOperation) ->
     *mut GtkWindow;
    pub fn gtk_mount_operation_set_screen(op: *mut GtkMountOperation,
                                          screen: *mut GdkScreen);
    pub fn gtk_mount_operation_get_screen(op: *mut GtkMountOperation) ->
     *mut GdkScreen;
    pub fn gtk_notebook_get_type() -> GType;
    pub fn gtk_notebook_new() -> *mut GtkWidget;
    pub fn gtk_notebook_append_page(notebook: *mut GtkNotebook,
                                    child: *mut GtkWidget,
                                    tab_label: *mut GtkWidget) -> gint;
    pub fn gtk_notebook_append_page_menu(notebook: *mut GtkNotebook,
                                         child: *mut GtkWidget,
                                         tab_label: *mut GtkWidget,
                                         menu_label: *mut GtkWidget) -> gint;
    pub fn gtk_notebook_prepend_page(notebook: *mut GtkNotebook,
                                     child: *mut GtkWidget,
                                     tab_label: *mut GtkWidget) -> gint;
    pub fn gtk_notebook_prepend_page_menu(notebook: *mut GtkNotebook,
                                          child: *mut GtkWidget,
                                          tab_label: *mut GtkWidget,
                                          menu_label: *mut GtkWidget) -> gint;
    pub fn gtk_notebook_insert_page(notebook: *mut GtkNotebook,
                                    child: *mut GtkWidget,
                                    tab_label: *mut GtkWidget, position: gint)
     -> gint;
    pub fn gtk_notebook_insert_page_menu(notebook: *mut GtkNotebook,
                                         child: *mut GtkWidget,
                                         tab_label: *mut GtkWidget,
                                         menu_label: *mut GtkWidget,
                                         position: gint) -> gint;
    pub fn gtk_notebook_remove_page(notebook: *mut GtkNotebook,
                                    page_num: gint);
    pub fn gtk_notebook_set_group_name(notebook: *mut GtkNotebook,
                                       group_name: *gchar);
    pub fn gtk_notebook_get_group_name(notebook: *mut GtkNotebook) -> *gchar;
    pub fn gtk_notebook_get_current_page(notebook: *mut GtkNotebook) -> gint;
    pub fn gtk_notebook_get_nth_page(notebook: *mut GtkNotebook,
                                     page_num: gint) -> *mut GtkWidget;
    pub fn gtk_notebook_get_n_pages(notebook: *mut GtkNotebook) -> gint;
    pub fn gtk_notebook_page_num(notebook: *mut GtkNotebook,
                                 child: *mut GtkWidget) -> gint;
    pub fn gtk_notebook_set_current_page(notebook: *mut GtkNotebook,
                                         page_num: gint);
    pub fn gtk_notebook_next_page(notebook: *mut GtkNotebook);
    pub fn gtk_notebook_prev_page(notebook: *mut GtkNotebook);
    pub fn gtk_notebook_set_show_border(notebook: *mut GtkNotebook,
                                        show_border: gboolean);
    pub fn gtk_notebook_get_show_border(notebook: *mut GtkNotebook) ->
     gboolean;
    pub fn gtk_notebook_set_show_tabs(notebook: *mut GtkNotebook,
                                      show_tabs: gboolean);
    pub fn gtk_notebook_get_show_tabs(notebook: *mut GtkNotebook) -> gboolean;
    pub fn gtk_notebook_set_tab_pos(notebook: *mut GtkNotebook,
                                    pos: GtkPositionType);
    pub fn gtk_notebook_get_tab_pos(notebook: *mut GtkNotebook) ->
     GtkPositionType;
    pub fn gtk_notebook_set_scrollable(notebook: *mut GtkNotebook,
                                       scrollable: gboolean);
    pub fn gtk_notebook_get_scrollable(notebook: *mut GtkNotebook) ->
     gboolean;
    pub fn gtk_notebook_get_tab_hborder(notebook: *mut GtkNotebook) ->
     guint16;
    pub fn gtk_notebook_get_tab_vborder(notebook: *mut GtkNotebook) ->
     guint16;
    pub fn gtk_notebook_popup_enable(notebook: *mut GtkNotebook);
    pub fn gtk_notebook_popup_disable(notebook: *mut GtkNotebook);
    pub fn gtk_notebook_get_tab_label(notebook: *mut GtkNotebook,
                                      child: *mut GtkWidget) ->
     *mut GtkWidget;
    pub fn gtk_notebook_set_tab_label(notebook: *mut GtkNotebook,
                                      child: *mut GtkWidget,
                                      tab_label: *mut GtkWidget);
    pub fn gtk_notebook_set_tab_label_text(notebook: *mut GtkNotebook,
                                           child: *mut GtkWidget,
                                           tab_text: *gchar);
    pub fn gtk_notebook_get_tab_label_text(notebook: *mut GtkNotebook,
                                           child: *mut GtkWidget) -> *gchar;
    pub fn gtk_notebook_get_menu_label(notebook: *mut GtkNotebook,
                                       child: *mut GtkWidget) ->
     *mut GtkWidget;
    pub fn gtk_notebook_set_menu_label(notebook: *mut GtkNotebook,
                                       child: *mut GtkWidget,
                                       menu_label: *mut GtkWidget);
    pub fn gtk_notebook_set_menu_label_text(notebook: *mut GtkNotebook,
                                            child: *mut GtkWidget,
                                            menu_text: *gchar);
    pub fn gtk_notebook_get_menu_label_text(notebook: *mut GtkNotebook,
                                            child: *mut GtkWidget) -> *gchar;
    pub fn gtk_notebook_reorder_child(notebook: *mut GtkNotebook,
                                      child: *mut GtkWidget, position: gint);
    pub fn gtk_notebook_get_tab_reorderable(notebook: *mut GtkNotebook,
                                            child: *mut GtkWidget) ->
     gboolean;
    pub fn gtk_notebook_set_tab_reorderable(notebook: *mut GtkNotebook,
                                            child: *mut GtkWidget,
                                            reorderable: gboolean);
    pub fn gtk_notebook_get_tab_detachable(notebook: *mut GtkNotebook,
                                           child: *mut GtkWidget) -> gboolean;
    pub fn gtk_notebook_set_tab_detachable(notebook: *mut GtkNotebook,
                                           child: *mut GtkWidget,
                                           detachable: gboolean);
    pub fn gtk_notebook_get_action_widget(notebook: *mut GtkNotebook,
                                          pack_type: GtkPackType) ->
     *mut GtkWidget;
    pub fn gtk_notebook_set_action_widget(notebook: *mut GtkNotebook,
                                          widget: *mut GtkWidget,
                                          pack_type: GtkPackType);
    pub fn gtk_numerable_icon_get_type() -> GType;
    pub fn gtk_numerable_icon_new(base_icon: *mut GIcon) -> *mut GIcon;
    pub fn gtk_numerable_icon_new_with_style_context(base_icon: *mut GIcon,
                                                     context:
                                                         *mut GtkStyleContext)
     -> *mut GIcon;
    pub fn gtk_numerable_icon_get_style_context(_self: *mut GtkNumerableIcon)
     -> *mut GtkStyleContext;
    pub fn gtk_numerable_icon_set_style_context(_self: *mut GtkNumerableIcon,
                                                style: *mut GtkStyleContext);
    pub fn gtk_numerable_icon_get_count(_self: *mut GtkNumerableIcon) -> gint;
    pub fn gtk_numerable_icon_set_count(_self: *mut GtkNumerableIcon,
                                        count: gint);
    pub fn gtk_numerable_icon_get_label(_self: *mut GtkNumerableIcon) ->
     *gchar;
    pub fn gtk_numerable_icon_set_label(_self: *mut GtkNumerableIcon,
                                        label: *gchar);
    pub fn gtk_numerable_icon_set_background_gicon(_self:
                                                       *mut GtkNumerableIcon,
                                                   icon: *mut GIcon);
    pub fn gtk_numerable_icon_get_background_gicon(_self:
                                                       *mut GtkNumerableIcon)
     -> *mut GIcon;
    pub fn gtk_numerable_icon_set_background_icon_name(_self:
                                                           *mut GtkNumerableIcon,
                                                       icon_name: *gchar);
    pub fn gtk_numerable_icon_get_background_icon_name(_self:
                                                           *mut GtkNumerableIcon)
     -> *gchar;
    pub fn gtk_offscreen_window_get_type() -> GType;
    pub fn gtk_offscreen_window_new() -> *mut GtkWidget;
    pub fn gtk_offscreen_window_get_surface(offscreen:
                                                *mut GtkOffscreenWindow) ->
     *mut cairo_surface_t;
    pub fn gtk_offscreen_window_get_pixbuf(offscreen: *mut GtkOffscreenWindow)
     -> *mut GdkPixbuf;
    pub fn gtk_orientable_get_type() -> GType;
    pub fn gtk_orientable_set_orientation(orientable: *mut GtkOrientable,
                                          orientation: GtkOrientation);
    pub fn gtk_orientable_get_orientation(orientable: *mut GtkOrientable) ->
     GtkOrientation;
    pub fn gtk_overlay_get_type() -> GType;
    pub fn gtk_overlay_new() -> *mut GtkWidget;
    pub fn gtk_overlay_add_overlay(overlay: *mut GtkOverlay,
                                   widget: *mut GtkWidget);
    pub fn gtk_paper_size_get_type() -> GType;
    pub fn gtk_paper_size_new(name: *gchar) -> *mut GtkPaperSize;
    pub fn gtk_paper_size_new_from_ppd(ppd_name: *gchar,
                                       ppd_display_name: *gchar,
                                       width: gdouble, height: gdouble) ->
     *mut GtkPaperSize;
    pub fn gtk_paper_size_new_custom(name: *gchar, display_name: *gchar,
                                     width: gdouble, height: gdouble,
                                     unit: GtkUnit) -> *mut GtkPaperSize;
    pub fn gtk_paper_size_copy(other: *mut GtkPaperSize) -> *mut GtkPaperSize;
    pub fn gtk_paper_size_free(size: *mut GtkPaperSize);
    pub fn gtk_paper_size_is_equal(size1: *mut GtkPaperSize,
                                   size2: *mut GtkPaperSize) -> gboolean;
    pub fn gtk_paper_size_get_paper_sizes(include_custom: gboolean) ->
     *mut GList;
    pub fn gtk_paper_size_get_name(size: *mut GtkPaperSize) -> *gchar;
    pub fn gtk_paper_size_get_display_name(size: *mut GtkPaperSize) -> *gchar;
    pub fn gtk_paper_size_get_ppd_name(size: *mut GtkPaperSize) -> *gchar;
    pub fn gtk_paper_size_get_width(size: *mut GtkPaperSize, unit: GtkUnit) ->
     gdouble;
    pub fn gtk_paper_size_get_height(size: *mut GtkPaperSize, unit: GtkUnit)
     -> gdouble;
    pub fn gtk_paper_size_is_custom(size: *mut GtkPaperSize) -> gboolean;
    pub fn gtk_paper_size_set_size(size: *mut GtkPaperSize, width: gdouble,
                                   height: gdouble, unit: GtkUnit);
    pub fn gtk_paper_size_get_default_top_margin(size: *mut GtkPaperSize,
                                                 unit: GtkUnit) -> gdouble;
    pub fn gtk_paper_size_get_default_bottom_margin(size: *mut GtkPaperSize,
                                                    unit: GtkUnit) -> gdouble;
    pub fn gtk_paper_size_get_default_left_margin(size: *mut GtkPaperSize,
                                                  unit: GtkUnit) -> gdouble;
    pub fn gtk_paper_size_get_default_right_margin(size: *mut GtkPaperSize,
                                                   unit: GtkUnit) -> gdouble;
    pub fn gtk_paper_size_get_default() -> *gchar;
    pub fn gtk_paper_size_new_from_key_file(key_file: *mut GKeyFile,
                                            group_name: *gchar,
                                            error: *mut *mut GError) ->
     *mut GtkPaperSize;
    pub fn gtk_paper_size_to_key_file(size: *mut GtkPaperSize,
                                      key_file: *mut GKeyFile,
                                      group_name: *gchar);
    pub fn gtk_page_setup_get_type() -> GType;
    pub fn gtk_page_setup_new() -> *mut GtkPageSetup;
    pub fn gtk_page_setup_copy(other: *mut GtkPageSetup) -> *mut GtkPageSetup;
    pub fn gtk_page_setup_get_orientation(setup: *mut GtkPageSetup) ->
     GtkPageOrientation;
    pub fn gtk_page_setup_set_orientation(setup: *mut GtkPageSetup,
                                          orientation: GtkPageOrientation);
    pub fn gtk_page_setup_get_paper_size(setup: *mut GtkPageSetup) ->
     *mut GtkPaperSize;
    pub fn gtk_page_setup_set_paper_size(setup: *mut GtkPageSetup,
                                         size: *mut GtkPaperSize);
    pub fn gtk_page_setup_get_top_margin(setup: *mut GtkPageSetup,
                                         unit: GtkUnit) -> gdouble;
    pub fn gtk_page_setup_set_top_margin(setup: *mut GtkPageSetup,
                                         margin: gdouble, unit: GtkUnit);
    pub fn gtk_page_setup_get_bottom_margin(setup: *mut GtkPageSetup,
                                            unit: GtkUnit) -> gdouble;
    pub fn gtk_page_setup_set_bottom_margin(setup: *mut GtkPageSetup,
                                            margin: gdouble, unit: GtkUnit);
    pub fn gtk_page_setup_get_left_margin(setup: *mut GtkPageSetup,
                                          unit: GtkUnit) -> gdouble;
    pub fn gtk_page_setup_set_left_margin(setup: *mut GtkPageSetup,
                                          margin: gdouble, unit: GtkUnit);
    pub fn gtk_page_setup_get_right_margin(setup: *mut GtkPageSetup,
                                           unit: GtkUnit) -> gdouble;
    pub fn gtk_page_setup_set_right_margin(setup: *mut GtkPageSetup,
                                           margin: gdouble, unit: GtkUnit);
    pub fn gtk_page_setup_set_paper_size_and_default_margins(setup:
                                                                 *mut GtkPageSetup,
                                                             size:
                                                                 *mut GtkPaperSize);
    pub fn gtk_page_setup_get_paper_width(setup: *mut GtkPageSetup,
                                          unit: GtkUnit) -> gdouble;
    pub fn gtk_page_setup_get_paper_height(setup: *mut GtkPageSetup,
                                           unit: GtkUnit) -> gdouble;
    pub fn gtk_page_setup_get_page_width(setup: *mut GtkPageSetup,
                                         unit: GtkUnit) -> gdouble;
    pub fn gtk_page_setup_get_page_height(setup: *mut GtkPageSetup,
                                          unit: GtkUnit) -> gdouble;
    pub fn gtk_page_setup_new_from_file(file_name: *gchar,
                                        error: *mut *mut GError) ->
     *mut GtkPageSetup;
    pub fn gtk_page_setup_load_file(setup: *mut GtkPageSetup,
                                    file_name: *c_schar,
                                    error: *mut *mut GError) -> gboolean;
    pub fn gtk_page_setup_to_file(setup: *mut GtkPageSetup,
                                  file_name: *c_schar,
                                  error: *mut *mut GError) -> gboolean;
    pub fn gtk_page_setup_new_from_key_file(key_file: *mut GKeyFile,
                                            group_name: *gchar,
                                            error: *mut *mut GError) ->
     *mut GtkPageSetup;
    pub fn gtk_page_setup_load_key_file(setup: *mut GtkPageSetup,
                                        key_file: *mut GKeyFile,
                                        group_name: *gchar,
                                        error: *mut *mut GError) -> gboolean;
    pub fn gtk_page_setup_to_key_file(setup: *mut GtkPageSetup,
                                      key_file: *mut GKeyFile,
                                      group_name: *gchar);
    pub fn gtk_paned_get_type() -> GType;
    pub fn gtk_paned_new(orientation: GtkOrientation) -> *mut GtkWidget;
    pub fn gtk_paned_add1(paned: *mut GtkPaned, child: *mut GtkWidget);
    pub fn gtk_paned_add2(paned: *mut GtkPaned, child: *mut GtkWidget);
    pub fn gtk_paned_pack1(paned: *mut GtkPaned, child: *mut GtkWidget,
                           resize: gboolean, shrink: gboolean);
    pub fn gtk_paned_pack2(paned: *mut GtkPaned, child: *mut GtkWidget,
                           resize: gboolean, shrink: gboolean);
    pub fn gtk_paned_get_position(paned: *mut GtkPaned) -> gint;
    pub fn gtk_paned_set_position(paned: *mut GtkPaned, position: gint);
    pub fn gtk_paned_get_child1(paned: *mut GtkPaned) -> *mut GtkWidget;
    pub fn gtk_paned_get_child2(paned: *mut GtkPaned) -> *mut GtkWidget;
    pub fn gtk_paned_get_handle_window(paned: *mut GtkPaned) ->
     *mut GdkWindow;
    pub fn gtk_places_sidebar_get_type() -> GType;
    pub fn gtk_places_sidebar_new() -> *mut GtkWidget;
    pub fn gtk_places_sidebar_get_open_flags(sidebar: *mut GtkPlacesSidebar)
     -> GtkPlacesOpenFlags;
    pub fn gtk_places_sidebar_set_open_flags(sidebar: *mut GtkPlacesSidebar,
                                             flags: GtkPlacesOpenFlags);
    pub fn gtk_places_sidebar_get_location(sidebar: *mut GtkPlacesSidebar) ->
     *mut GFile;
    pub fn gtk_places_sidebar_set_location(sidebar: *mut GtkPlacesSidebar,
                                           location: *mut GFile);
    pub fn gtk_places_sidebar_get_show_desktop(sidebar: *mut GtkPlacesSidebar)
     -> gboolean;
    pub fn gtk_places_sidebar_set_show_desktop(sidebar: *mut GtkPlacesSidebar,
                                               show_desktop: gboolean);
    pub fn gtk_places_sidebar_get_show_connect_to_server(sidebar:
                                                             *mut GtkPlacesSidebar)
     -> gboolean;
    pub fn gtk_places_sidebar_set_show_connect_to_server(sidebar:
                                                             *mut GtkPlacesSidebar,
                                                         show_connect_to_server:
                                                             gboolean);
    pub fn gtk_places_sidebar_add_shortcut(sidebar: *mut GtkPlacesSidebar,
                                           location: *mut GFile);
    pub fn gtk_places_sidebar_remove_shortcut(sidebar: *mut GtkPlacesSidebar,
                                              location: *mut GFile);
    pub fn gtk_places_sidebar_list_shortcuts(sidebar: *mut GtkPlacesSidebar)
     -> *mut GSList;
    pub fn gtk_places_sidebar_get_nth_bookmark(sidebar: *mut GtkPlacesSidebar,
                                               n: gint) -> *mut GFile;
    pub fn gtk_print_context_get_type() -> GType;
    pub fn gtk_print_context_get_cairo_context(context: *mut GtkPrintContext)
     -> *mut cairo_t;
    pub fn gtk_print_context_get_page_setup(context: *mut GtkPrintContext) ->
     *mut GtkPageSetup;
    pub fn gtk_print_context_get_width(context: *mut GtkPrintContext) ->
     gdouble;
    pub fn gtk_print_context_get_height(context: *mut GtkPrintContext) ->
     gdouble;
    pub fn gtk_print_context_get_dpi_x(context: *mut GtkPrintContext) ->
     gdouble;
    pub fn gtk_print_context_get_dpi_y(context: *mut GtkPrintContext) ->
     gdouble;
    pub fn gtk_print_context_get_hard_margins(context: *mut GtkPrintContext,
                                              top: *mut gdouble,
                                              bottom: *mut gdouble,
                                              left: *mut gdouble,
                                              right: *mut gdouble) ->
     gboolean;
    pub fn gtk_print_context_get_pango_fontmap(context: *mut GtkPrintContext)
     -> *mut PangoFontMap;
    pub fn gtk_print_context_create_pango_context(context:
                                                      *mut GtkPrintContext) ->
     *mut PangoContext;
    pub fn gtk_print_context_create_pango_layout(context:
                                                     *mut GtkPrintContext) ->
     *mut PangoLayout;
    pub fn gtk_print_context_set_cairo_context(context: *mut GtkPrintContext,
                                               cr: *mut cairo_t,
                                               dpi_x: c_double,
                                               dpi_y: c_double);
    pub fn gtk_print_settings_get_type() -> GType;
    pub fn gtk_print_settings_new() -> *mut GtkPrintSettings;
    pub fn gtk_print_settings_copy(other: *mut GtkPrintSettings) ->
     *mut GtkPrintSettings;
    pub fn gtk_print_settings_new_from_file(file_name: *gchar,
                                            error: *mut *mut GError) ->
     *mut GtkPrintSettings;
    pub fn gtk_print_settings_load_file(settings: *mut GtkPrintSettings,
                                        file_name: *gchar,
                                        error: *mut *mut GError) -> gboolean;
    pub fn gtk_print_settings_to_file(settings: *mut GtkPrintSettings,
                                      file_name: *gchar,
                                      error: *mut *mut GError) -> gboolean;
    pub fn gtk_print_settings_new_from_key_file(key_file: *mut GKeyFile,
                                                group_name: *gchar,
                                                error: *mut *mut GError) ->
     *mut GtkPrintSettings;
    pub fn gtk_print_settings_load_key_file(settings: *mut GtkPrintSettings,
                                            key_file: *mut GKeyFile,
                                            group_name: *gchar,
                                            error: *mut *mut GError) ->
     gboolean;
    pub fn gtk_print_settings_to_key_file(settings: *mut GtkPrintSettings,
                                          key_file: *mut GKeyFile,
                                          group_name: *gchar);
    pub fn gtk_print_settings_has_key(settings: *mut GtkPrintSettings,
                                      key: *gchar) -> gboolean;
    pub fn gtk_print_settings_get(settings: *mut GtkPrintSettings,
                                  key: *gchar) -> *gchar;
    pub fn gtk_print_settings_set(settings: *mut GtkPrintSettings,
                                  key: *gchar, value: *gchar);
    pub fn gtk_print_settings_unset(settings: *mut GtkPrintSettings,
                                    key: *gchar);
    pub fn gtk_print_settings_foreach(settings: *mut GtkPrintSettings,
                                      func: GtkPrintSettingsFunc,
                                      user_data: gpointer);
    pub fn gtk_print_settings_get_bool(settings: *mut GtkPrintSettings,
                                       key: *gchar) -> gboolean;
    pub fn gtk_print_settings_set_bool(settings: *mut GtkPrintSettings,
                                       key: *gchar, value: gboolean);
    pub fn gtk_print_settings_get_double(settings: *mut GtkPrintSettings,
                                         key: *gchar) -> gdouble;
    pub fn gtk_print_settings_get_double_with_default(settings:
                                                          *mut GtkPrintSettings,
                                                      key: *gchar,
                                                      def: gdouble) ->
     gdouble;
    pub fn gtk_print_settings_set_double(settings: *mut GtkPrintSettings,
                                         key: *gchar, value: gdouble);
    pub fn gtk_print_settings_get_length(settings: *mut GtkPrintSettings,
                                         key: *gchar, unit: GtkUnit) ->
     gdouble;
    pub fn gtk_print_settings_set_length(settings: *mut GtkPrintSettings,
                                         key: *gchar, value: gdouble,
                                         unit: GtkUnit);
    pub fn gtk_print_settings_get_int(settings: *mut GtkPrintSettings,
                                      key: *gchar) -> gint;
    pub fn gtk_print_settings_get_int_with_default(settings:
                                                       *mut GtkPrintSettings,
                                                   key: *gchar, def: gint) ->
     gint;
    pub fn gtk_print_settings_set_int(settings: *mut GtkPrintSettings,
                                      key: *gchar, value: gint);
    pub fn gtk_print_settings_get_printer(settings: *mut GtkPrintSettings) ->
     *gchar;
    pub fn gtk_print_settings_set_printer(settings: *mut GtkPrintSettings,
                                          printer: *gchar);
    pub fn gtk_print_settings_get_orientation(settings: *mut GtkPrintSettings)
     -> GtkPageOrientation;
    pub fn gtk_print_settings_set_orientation(settings: *mut GtkPrintSettings,
                                              orientation:
                                                  GtkPageOrientation);
    pub fn gtk_print_settings_get_paper_size(settings: *mut GtkPrintSettings)
     -> *mut GtkPaperSize;
    pub fn gtk_print_settings_set_paper_size(settings: *mut GtkPrintSettings,
                                             paper_size: *mut GtkPaperSize);
    pub fn gtk_print_settings_get_paper_width(settings: *mut GtkPrintSettings,
                                              unit: GtkUnit) -> gdouble;
    pub fn gtk_print_settings_set_paper_width(settings: *mut GtkPrintSettings,
                                              width: gdouble, unit: GtkUnit);
    pub fn gtk_print_settings_get_paper_height(settings:
                                                   *mut GtkPrintSettings,
                                               unit: GtkUnit) -> gdouble;
    pub fn gtk_print_settings_set_paper_height(settings:
                                                   *mut GtkPrintSettings,
                                               height: gdouble,
                                               unit: GtkUnit);
    pub fn gtk_print_settings_get_use_color(settings: *mut GtkPrintSettings)
     -> gboolean;
    pub fn gtk_print_settings_set_use_color(settings: *mut GtkPrintSettings,
                                            use_color: gboolean);
    pub fn gtk_print_settings_get_collate(settings: *mut GtkPrintSettings) ->
     gboolean;
    pub fn gtk_print_settings_set_collate(settings: *mut GtkPrintSettings,
                                          collate: gboolean);
    pub fn gtk_print_settings_get_reverse(settings: *mut GtkPrintSettings) ->
     gboolean;
    pub fn gtk_print_settings_set_reverse(settings: *mut GtkPrintSettings,
                                          reverse: gboolean);
    pub fn gtk_print_settings_get_duplex(settings: *mut GtkPrintSettings) ->
     GtkPrintDuplex;
    pub fn gtk_print_settings_set_duplex(settings: *mut GtkPrintSettings,
                                         duplex: GtkPrintDuplex);
    pub fn gtk_print_settings_get_quality(settings: *mut GtkPrintSettings) ->
     GtkPrintQuality;
    pub fn gtk_print_settings_set_quality(settings: *mut GtkPrintSettings,
                                          quality: GtkPrintQuality);
    pub fn gtk_print_settings_get_n_copies(settings: *mut GtkPrintSettings) ->
     gint;
    pub fn gtk_print_settings_set_n_copies(settings: *mut GtkPrintSettings,
                                           num_copies: gint);
    pub fn gtk_print_settings_get_number_up(settings: *mut GtkPrintSettings)
     -> gint;
    pub fn gtk_print_settings_set_number_up(settings: *mut GtkPrintSettings,
                                            number_up: gint);
    pub fn gtk_print_settings_get_number_up_layout(settings:
                                                       *mut GtkPrintSettings)
     -> GtkNumberUpLayout;
    pub fn gtk_print_settings_set_number_up_layout(settings:
                                                       *mut GtkPrintSettings,
                                                   number_up_layout:
                                                       GtkNumberUpLayout);
    pub fn gtk_print_settings_get_resolution(settings: *mut GtkPrintSettings)
     -> gint;
    pub fn gtk_print_settings_set_resolution(settings: *mut GtkPrintSettings,
                                             resolution: gint);
    pub fn gtk_print_settings_get_resolution_x(settings:
                                                   *mut GtkPrintSettings) ->
     gint;
    pub fn gtk_print_settings_get_resolution_y(settings:
                                                   *mut GtkPrintSettings) ->
     gint;
    pub fn gtk_print_settings_set_resolution_xy(settings:
                                                    *mut GtkPrintSettings,
                                                resolution_x: gint,
                                                resolution_y: gint);
    pub fn gtk_print_settings_get_printer_lpi(settings: *mut GtkPrintSettings)
     -> gdouble;
    pub fn gtk_print_settings_set_printer_lpi(settings: *mut GtkPrintSettings,
                                              lpi: gdouble);
    pub fn gtk_print_settings_get_scale(settings: *mut GtkPrintSettings) ->
     gdouble;
    pub fn gtk_print_settings_set_scale(settings: *mut GtkPrintSettings,
                                        scale: gdouble);
    pub fn gtk_print_settings_get_print_pages(settings: *mut GtkPrintSettings)
     -> GtkPrintPages;
    pub fn gtk_print_settings_set_print_pages(settings: *mut GtkPrintSettings,
                                              pages: GtkPrintPages);
    pub fn gtk_print_settings_get_page_ranges(settings: *mut GtkPrintSettings,
                                              num_ranges: *mut gint) ->
     *mut GtkPageRange;
    pub fn gtk_print_settings_set_page_ranges(settings: *mut GtkPrintSettings,
                                              page_ranges: *mut GtkPageRange,
                                              num_ranges: gint);
    pub fn gtk_print_settings_get_page_set(settings: *mut GtkPrintSettings) ->
     GtkPageSet;
    pub fn gtk_print_settings_set_page_set(settings: *mut GtkPrintSettings,
                                           page_set: GtkPageSet);
    pub fn gtk_print_settings_get_default_source(settings:
                                                     *mut GtkPrintSettings) ->
     *gchar;
    pub fn gtk_print_settings_set_default_source(settings:
                                                     *mut GtkPrintSettings,
                                                 default_source: *gchar);
    pub fn gtk_print_settings_get_media_type(settings: *mut GtkPrintSettings)
     -> *gchar;
    pub fn gtk_print_settings_set_media_type(settings: *mut GtkPrintSettings,
                                             media_type: *gchar);
    pub fn gtk_print_settings_get_dither(settings: *mut GtkPrintSettings) ->
     *gchar;
    pub fn gtk_print_settings_set_dither(settings: *mut GtkPrintSettings,
                                         dither: *gchar);
    pub fn gtk_print_settings_get_finishings(settings: *mut GtkPrintSettings)
     -> *gchar;
    pub fn gtk_print_settings_set_finishings(settings: *mut GtkPrintSettings,
                                             finishings: *gchar);
    pub fn gtk_print_settings_get_output_bin(settings: *mut GtkPrintSettings)
     -> *gchar;
    pub fn gtk_print_settings_set_output_bin(settings: *mut GtkPrintSettings,
                                             output_bin: *gchar);
    pub fn gtk_print_operation_preview_get_type() -> GType;
    pub fn gtk_print_operation_preview_render_page(preview:
                                                       *mut GtkPrintOperationPreview,
                                                   page_nr: gint);
    pub fn gtk_print_operation_preview_end_preview(preview:
                                                       *mut GtkPrintOperationPreview);
    pub fn gtk_print_operation_preview_is_selected(preview:
                                                       *mut GtkPrintOperationPreview,
                                                   page_nr: gint) -> gboolean;
    pub fn gtk_print_error_quark() -> GQuark;
    pub fn gtk_print_operation_get_type() -> GType;
    pub fn gtk_print_operation_new() -> *mut GtkPrintOperation;
    pub fn gtk_print_operation_set_default_page_setup(op:
                                                          *mut GtkPrintOperation,
                                                      default_page_setup:
                                                          *mut GtkPageSetup);
    pub fn gtk_print_operation_get_default_page_setup(op:
                                                          *mut GtkPrintOperation)
     -> *mut GtkPageSetup;
    pub fn gtk_print_operation_set_print_settings(op: *mut GtkPrintOperation,
                                                  print_settings:
                                                      *mut GtkPrintSettings);
    pub fn gtk_print_operation_get_print_settings(op: *mut GtkPrintOperation)
     -> *mut GtkPrintSettings;
    pub fn gtk_print_operation_set_job_name(op: *mut GtkPrintOperation,
                                            job_name: *gchar);
    pub fn gtk_print_operation_set_n_pages(op: *mut GtkPrintOperation,
                                           n_pages: gint);
    pub fn gtk_print_operation_set_current_page(op: *mut GtkPrintOperation,
                                                current_page: gint);
    pub fn gtk_print_operation_set_use_full_page(op: *mut GtkPrintOperation,
                                                 full_page: gboolean);
    pub fn gtk_print_operation_set_unit(op: *mut GtkPrintOperation,
                                        unit: GtkUnit);
    pub fn gtk_print_operation_set_export_filename(op: *mut GtkPrintOperation,
                                                   filename: *gchar);
    pub fn gtk_print_operation_set_track_print_status(op:
                                                          *mut GtkPrintOperation,
                                                      track_status: gboolean);
    pub fn gtk_print_operation_set_show_progress(op: *mut GtkPrintOperation,
                                                 show_progress: gboolean);
    pub fn gtk_print_operation_set_allow_async(op: *mut GtkPrintOperation,
                                               allow_async: gboolean);
    pub fn gtk_print_operation_set_custom_tab_label(op:
                                                        *mut GtkPrintOperation,
                                                    label: *gchar);
    pub fn gtk_print_operation_run(op: *mut GtkPrintOperation,
                                   action: GtkPrintOperationAction,
                                   parent: *mut GtkWindow,
                                   error: *mut *mut GError) ->
     GtkPrintOperationResult;
    pub fn gtk_print_operation_get_error(op: *mut GtkPrintOperation,
                                         error: *mut *mut GError);
    pub fn gtk_print_operation_get_status(op: *mut GtkPrintOperation) ->
     GtkPrintStatus;
    pub fn gtk_print_operation_get_status_string(op: *mut GtkPrintOperation)
     -> *gchar;
    pub fn gtk_print_operation_is_finished(op: *mut GtkPrintOperation) ->
     gboolean;
    pub fn gtk_print_operation_cancel(op: *mut GtkPrintOperation);
    pub fn gtk_print_operation_draw_page_finish(op: *mut GtkPrintOperation);
    pub fn gtk_print_operation_set_defer_drawing(op: *mut GtkPrintOperation);
    pub fn gtk_print_operation_set_support_selection(op:
                                                         *mut GtkPrintOperation,
                                                     support_selection:
                                                         gboolean);
    pub fn gtk_print_operation_get_support_selection(op:
                                                         *mut GtkPrintOperation)
     -> gboolean;
    pub fn gtk_print_operation_set_has_selection(op: *mut GtkPrintOperation,
                                                 has_selection: gboolean);
    pub fn gtk_print_operation_get_has_selection(op: *mut GtkPrintOperation)
     -> gboolean;
    pub fn gtk_print_operation_set_embed_page_setup(op:
                                                        *mut GtkPrintOperation,
                                                    embed: gboolean);
    pub fn gtk_print_operation_get_embed_page_setup(op:
                                                        *mut GtkPrintOperation)
     -> gboolean;
    pub fn gtk_print_operation_get_n_pages_to_print(op:
                                                        *mut GtkPrintOperation)
     -> gint;
    pub fn gtk_print_run_page_setup_dialog(parent: *mut GtkWindow,
                                           page_setup: *mut GtkPageSetup,
                                           settings: *mut GtkPrintSettings) ->
     *mut GtkPageSetup;
    pub fn gtk_print_run_page_setup_dialog_async(parent: *mut GtkWindow,
                                                 page_setup:
                                                     *mut GtkPageSetup,
                                                 settings:
                                                     *mut GtkPrintSettings,
                                                 done_cb:
                                                     GtkPageSetupDoneFunc,
                                                 data: gpointer);
    pub fn gtk_progress_bar_get_type() -> GType;
    pub fn gtk_progress_bar_new() -> *mut GtkWidget;
    pub fn gtk_progress_bar_pulse(pbar: *mut GtkProgressBar);
    pub fn gtk_progress_bar_set_text(pbar: *mut GtkProgressBar, text: *gchar);
    pub fn gtk_progress_bar_set_fraction(pbar: *mut GtkProgressBar,
                                         fraction: gdouble);
    pub fn gtk_progress_bar_set_pulse_step(pbar: *mut GtkProgressBar,
                                           fraction: gdouble);
    pub fn gtk_progress_bar_set_inverted(pbar: *mut GtkProgressBar,
                                         inverted: gboolean);
    pub fn gtk_progress_bar_get_text(pbar: *mut GtkProgressBar) -> *gchar;
    pub fn gtk_progress_bar_get_fraction(pbar: *mut GtkProgressBar) ->
     gdouble;
    pub fn gtk_progress_bar_get_pulse_step(pbar: *mut GtkProgressBar) ->
     gdouble;
    pub fn gtk_progress_bar_get_inverted(pbar: *mut GtkProgressBar) ->
     gboolean;
    pub fn gtk_progress_bar_set_ellipsize(pbar: *mut GtkProgressBar,
                                          mode: PangoEllipsizeMode);
    pub fn gtk_progress_bar_get_ellipsize(pbar: *mut GtkProgressBar) ->
     PangoEllipsizeMode;
    pub fn gtk_progress_bar_set_show_text(pbar: *mut GtkProgressBar,
                                          show_text: gboolean);
    pub fn gtk_progress_bar_get_show_text(pbar: *mut GtkProgressBar) ->
     gboolean;
    pub fn gtk_radio_button_get_type() -> GType;
    pub fn gtk_radio_button_new(group: *mut GSList) -> *mut GtkWidget;
    pub fn gtk_radio_button_new_from_widget(radio_group_member:
                                                *mut GtkRadioButton) ->
     *mut GtkWidget;
    pub fn gtk_radio_button_new_with_label(group: *mut GSList, label: *gchar)
     -> *mut GtkWidget;
    pub fn gtk_radio_button_new_with_label_from_widget(radio_group_member:
                                                           *mut GtkRadioButton,
                                                       label: *gchar) ->
     *mut GtkWidget;
    pub fn gtk_radio_button_new_with_mnemonic(group: *mut GSList,
                                              label: *gchar) ->
     *mut GtkWidget;
    pub fn gtk_radio_button_new_with_mnemonic_from_widget(radio_group_member:
                                                              *mut GtkRadioButton,
                                                          label: *gchar) ->
     *mut GtkWidget;
    pub fn gtk_radio_button_get_group(radio_button: *mut GtkRadioButton) ->
     *mut GSList;
    pub fn gtk_radio_button_set_group(radio_button: *mut GtkRadioButton,
                                      group: *mut GSList);
    pub fn gtk_radio_button_join_group(radio_button: *mut GtkRadioButton,
                                       group_source: *mut GtkRadioButton);
    pub fn gtk_radio_menu_item_get_type() -> GType;
    pub fn gtk_radio_menu_item_new(group: *mut GSList) -> *mut GtkWidget;
    pub fn gtk_radio_menu_item_new_with_label(group: *mut GSList,
                                              label: *gchar) ->
     *mut GtkWidget;
    pub fn gtk_radio_menu_item_new_with_mnemonic(group: *mut GSList,
                                                 label: *gchar) ->
     *mut GtkWidget;
    pub fn gtk_radio_menu_item_new_from_widget(group: *mut GtkRadioMenuItem)
     -> *mut GtkWidget;
    pub fn gtk_radio_menu_item_new_with_mnemonic_from_widget(group:
                                                                 *mut GtkRadioMenuItem,
                                                             label: *gchar) ->
     *mut GtkWidget;
    pub fn gtk_radio_menu_item_new_with_label_from_widget(group:
                                                              *mut GtkRadioMenuItem,
                                                          label: *gchar) ->
     *mut GtkWidget;
    pub fn gtk_radio_menu_item_get_group(radio_menu_item:
                                             *mut GtkRadioMenuItem) ->
     *mut GSList;
    pub fn gtk_radio_menu_item_set_group(radio_menu_item:
                                             *mut GtkRadioMenuItem,
                                         group: *mut GSList);
    pub fn gtk_toggle_tool_button_get_type() -> GType;
    pub fn gtk_toggle_tool_button_new() -> *mut GtkToolItem;
    pub fn gtk_toggle_tool_button_new_from_stock(stock_id: *gchar) ->
     *mut GtkToolItem;
    pub fn gtk_toggle_tool_button_set_active(button: *mut GtkToggleToolButton,
                                             is_active: gboolean);
    pub fn gtk_toggle_tool_button_get_active(button: *mut GtkToggleToolButton)
     -> gboolean;
    pub fn gtk_radio_tool_button_get_type() -> GType;
    pub fn gtk_radio_tool_button_new(group: *mut GSList) -> *mut GtkToolItem;
    pub fn gtk_radio_tool_button_new_from_stock(group: *mut GSList,
                                                stock_id: *gchar) ->
     *mut GtkToolItem;
    pub fn gtk_radio_tool_button_new_from_widget(group:
                                                     *mut GtkRadioToolButton)
     -> *mut GtkToolItem;
    pub fn gtk_radio_tool_button_new_with_stock_from_widget(group:
                                                                *mut GtkRadioToolButton,
                                                            stock_id: *gchar)
     -> *mut GtkToolItem;
    pub fn gtk_radio_tool_button_get_group(button: *mut GtkRadioToolButton) ->
     *mut GSList;
    pub fn gtk_radio_tool_button_set_group(button: *mut GtkRadioToolButton,
                                           group: *mut GSList);
    pub fn gtk_range_get_type() -> GType;
    pub fn gtk_range_set_adjustment(range: *mut GtkRange,
                                    adjustment: *mut GtkAdjustment);
    pub fn gtk_range_get_adjustment(range: *mut GtkRange) ->
     *mut GtkAdjustment;
    pub fn gtk_range_set_inverted(range: *mut GtkRange, setting: gboolean);
    pub fn gtk_range_get_inverted(range: *mut GtkRange) -> gboolean;
    pub fn gtk_range_set_flippable(range: *mut GtkRange, flippable: gboolean);
    pub fn gtk_range_get_flippable(range: *mut GtkRange) -> gboolean;
    pub fn gtk_range_set_slider_size_fixed(range: *mut GtkRange,
                                           size_fixed: gboolean);
    pub fn gtk_range_get_slider_size_fixed(range: *mut GtkRange) -> gboolean;
    pub fn gtk_range_set_min_slider_size(range: *mut GtkRange,
                                         min_size: gint);
    pub fn gtk_range_get_min_slider_size(range: *mut GtkRange) -> gint;
    pub fn gtk_range_get_range_rect(range: *mut GtkRange,
                                    range_rect: *mut GdkRectangle);
    pub fn gtk_range_get_slider_range(range: *mut GtkRange,
                                      slider_start: *mut gint,
                                      slider_end: *mut gint);
    pub fn gtk_range_set_lower_stepper_sensitivity(range: *mut GtkRange,
                                                   sensitivity:
                                                       GtkSensitivityType);
    pub fn gtk_range_get_lower_stepper_sensitivity(range: *mut GtkRange) ->
     GtkSensitivityType;
    pub fn gtk_range_set_upper_stepper_sensitivity(range: *mut GtkRange,
                                                   sensitivity:
                                                       GtkSensitivityType);
    pub fn gtk_range_get_upper_stepper_sensitivity(range: *mut GtkRange) ->
     GtkSensitivityType;
    pub fn gtk_range_set_increments(range: *mut GtkRange, step: gdouble,
                                    page: gdouble);
    pub fn gtk_range_set_range(range: *mut GtkRange, min: gdouble,
                               max: gdouble);
    pub fn gtk_range_set_value(range: *mut GtkRange, value: gdouble);
    pub fn gtk_range_get_value(range: *mut GtkRange) -> gdouble;
    pub fn gtk_range_set_show_fill_level(range: *mut GtkRange,
                                         show_fill_level: gboolean);
    pub fn gtk_range_get_show_fill_level(range: *mut GtkRange) -> gboolean;
    pub fn gtk_range_set_restrict_to_fill_level(range: *mut GtkRange,
                                                restrict_to_fill_level:
                                                    gboolean);
    pub fn gtk_range_get_restrict_to_fill_level(range: *mut GtkRange) ->
     gboolean;
    pub fn gtk_range_set_fill_level(range: *mut GtkRange,
                                    fill_level: gdouble);
    pub fn gtk_range_get_fill_level(range: *mut GtkRange) -> gdouble;
    pub fn gtk_range_set_round_digits(range: *mut GtkRange,
                                      round_digits: gint);
    pub fn gtk_range_get_round_digits(range: *mut GtkRange) -> gint;
    pub fn _gtk_range_get_wheel_delta(range: *mut GtkRange,
                                      event: *mut GdkEventScroll) -> gdouble;
    pub fn _gtk_range_set_has_origin(range: *mut GtkRange,
                                     has_origin: gboolean);
    pub fn _gtk_range_get_has_origin(range: *mut GtkRange) -> gboolean;
    pub fn _gtk_range_set_stop_values(range: *mut GtkRange,
                                      values: *mut gdouble, n_values: gint);
    pub fn _gtk_range_get_stop_positions(range: *mut GtkRange,
                                         values: *mut *mut gint) -> gint;
    pub fn _gtk_range_set_steppers(range: *mut GtkRange, has_a: gboolean,
                                   has_b: gboolean, has_c: gboolean,
                                   has_d: gboolean);
    pub fn gtk_recent_manager_error_quark() -> GQuark;
    pub fn gtk_recent_manager_get_type() -> GType;
    pub fn gtk_recent_manager_new() -> *mut GtkRecentManager;
    pub fn gtk_recent_manager_get_default() -> *mut GtkRecentManager;
    pub fn gtk_recent_manager_add_item(manager: *mut GtkRecentManager,
                                       uri: *gchar) -> gboolean;
    pub fn gtk_recent_manager_add_full(manager: *mut GtkRecentManager,
                                       uri: *gchar,
                                       recent_data: *GtkRecentData) ->
     gboolean;
    pub fn gtk_recent_manager_remove_item(manager: *mut GtkRecentManager,
                                          uri: *gchar,
                                          error: *mut *mut GError) ->
     gboolean;
    pub fn gtk_recent_manager_lookup_item(manager: *mut GtkRecentManager,
                                          uri: *gchar,
                                          error: *mut *mut GError) ->
     *mut GtkRecentInfo;
    pub fn gtk_recent_manager_has_item(manager: *mut GtkRecentManager,
                                       uri: *gchar) -> gboolean;
    pub fn gtk_recent_manager_move_item(manager: *mut GtkRecentManager,
                                        uri: *gchar, new_uri: *gchar,
                                        error: *mut *mut GError) -> gboolean;
    pub fn gtk_recent_manager_get_items(manager: *mut GtkRecentManager) ->
     *mut GList;
    pub fn gtk_recent_manager_purge_items(manager: *mut GtkRecentManager,
                                          error: *mut *mut GError) -> gint;
    pub fn gtk_recent_info_get_type() -> GType;
    pub fn gtk_recent_info_ref(info: *mut GtkRecentInfo) ->
     *mut GtkRecentInfo;
    pub fn gtk_recent_info_unref(info: *mut GtkRecentInfo);
    pub fn gtk_recent_info_get_uri(info: *mut GtkRecentInfo) -> *gchar;
    pub fn gtk_recent_info_get_display_name(info: *mut GtkRecentInfo) ->
     *gchar;
    pub fn gtk_recent_info_get_description(info: *mut GtkRecentInfo) ->
     *gchar;
    pub fn gtk_recent_info_get_mime_type(info: *mut GtkRecentInfo) -> *gchar;
    pub fn gtk_recent_info_get_added(info: *mut GtkRecentInfo) -> time_t;
    pub fn gtk_recent_info_get_modified(info: *mut GtkRecentInfo) -> time_t;
    pub fn gtk_recent_info_get_visited(info: *mut GtkRecentInfo) -> time_t;
    pub fn gtk_recent_info_get_private_hint(info: *mut GtkRecentInfo) ->
     gboolean;
    pub fn gtk_recent_info_get_application_info(info: *mut GtkRecentInfo,
                                                app_name: *gchar,
                                                app_exec: *mut *gchar,
                                                count: *mut guint,
                                                time_: *mut time_t) ->
     gboolean;
    pub fn gtk_recent_info_create_app_info(info: *mut GtkRecentInfo,
                                           app_name: *gchar,
                                           error: *mut *mut GError) ->
     *mut GAppInfo;
    pub fn gtk_recent_info_get_applications(info: *mut GtkRecentInfo,
                                            length: *mut gsize) ->
     *mut *mut gchar;
    pub fn gtk_recent_info_last_application(info: *mut GtkRecentInfo) ->
     *mut gchar;
    pub fn gtk_recent_info_has_application(info: *mut GtkRecentInfo,
                                           app_name: *gchar) -> gboolean;
    pub fn gtk_recent_info_get_groups(info: *mut GtkRecentInfo,
                                      length: *mut gsize) -> *mut *mut gchar;
    pub fn gtk_recent_info_has_group(info: *mut GtkRecentInfo,
                                     group_name: *gchar) -> gboolean;
    pub fn gtk_recent_info_get_icon(info: *mut GtkRecentInfo, size: gint) ->
     *mut GdkPixbuf;
    pub fn gtk_recent_info_get_gicon(info: *mut GtkRecentInfo) -> *mut GIcon;
    pub fn gtk_recent_info_get_short_name(info: *mut GtkRecentInfo) ->
     *mut gchar;
    pub fn gtk_recent_info_get_uri_display(info: *mut GtkRecentInfo) ->
     *mut gchar;
    pub fn gtk_recent_info_get_age(info: *mut GtkRecentInfo) -> gint;
    pub fn gtk_recent_info_is_local(info: *mut GtkRecentInfo) -> gboolean;
    pub fn gtk_recent_info_exists(info: *mut GtkRecentInfo) -> gboolean;
    pub fn gtk_recent_info_match(info_a: *mut GtkRecentInfo,
                                 info_b: *mut GtkRecentInfo) -> gboolean;
    pub fn _gtk_recent_manager_sync();
    pub fn gtk_recent_filter_get_type() -> GType;
    pub fn gtk_recent_filter_new() -> *mut GtkRecentFilter;
    pub fn gtk_recent_filter_set_name(filter: *mut GtkRecentFilter,
                                      name: *gchar);
    pub fn gtk_recent_filter_get_name(filter: *mut GtkRecentFilter) -> *gchar;
    pub fn gtk_recent_filter_add_mime_type(filter: *mut GtkRecentFilter,
                                           mime_type: *gchar);
    pub fn gtk_recent_filter_add_pattern(filter: *mut GtkRecentFilter,
                                         pattern: *gchar);
    pub fn gtk_recent_filter_add_pixbuf_formats(filter: *mut GtkRecentFilter);
    pub fn gtk_recent_filter_add_application(filter: *mut GtkRecentFilter,
                                             application: *gchar);
    pub fn gtk_recent_filter_add_group(filter: *mut GtkRecentFilter,
                                       group: *gchar);
    pub fn gtk_recent_filter_add_age(filter: *mut GtkRecentFilter,
                                     days: gint);
    pub fn gtk_recent_filter_add_custom(filter: *mut GtkRecentFilter,
                                        needed: GtkRecentFilterFlags,
                                        func: GtkRecentFilterFunc,
                                        data: gpointer,
                                        data_destroy: GDestroyNotify);
    pub fn gtk_recent_filter_get_needed(filter: *mut GtkRecentFilter) ->
     GtkRecentFilterFlags;
    pub fn gtk_recent_filter_filter(filter: *mut GtkRecentFilter,
                                    filter_info: *GtkRecentFilterInfo) ->
     gboolean;
    pub fn gtk_recent_chooser_error_quark() -> GQuark;
    pub fn gtk_recent_chooser_get_type() -> GType;
    pub fn gtk_recent_chooser_set_show_private(chooser: *mut GtkRecentChooser,
                                               show_private: gboolean);
    pub fn gtk_recent_chooser_get_show_private(chooser: *mut GtkRecentChooser)
     -> gboolean;
    pub fn gtk_recent_chooser_set_show_not_found(chooser:
                                                     *mut GtkRecentChooser,
                                                 show_not_found: gboolean);
    pub fn gtk_recent_chooser_get_show_not_found(chooser:
                                                     *mut GtkRecentChooser) ->
     gboolean;
    pub fn gtk_recent_chooser_set_select_multiple(chooser:
                                                      *mut GtkRecentChooser,
                                                  select_multiple: gboolean);
    pub fn gtk_recent_chooser_get_select_multiple(chooser:
                                                      *mut GtkRecentChooser)
     -> gboolean;
    pub fn gtk_recent_chooser_set_limit(chooser: *mut GtkRecentChooser,
                                        limit: gint);
    pub fn gtk_recent_chooser_get_limit(chooser: *mut GtkRecentChooser) ->
     gint;
    pub fn gtk_recent_chooser_set_local_only(chooser: *mut GtkRecentChooser,
                                             local_only: gboolean);
    pub fn gtk_recent_chooser_get_local_only(chooser: *mut GtkRecentChooser)
     -> gboolean;
    pub fn gtk_recent_chooser_set_show_tips(chooser: *mut GtkRecentChooser,
                                            show_tips: gboolean);
    pub fn gtk_recent_chooser_get_show_tips(chooser: *mut GtkRecentChooser) ->
     gboolean;
    pub fn gtk_recent_chooser_set_show_icons(chooser: *mut GtkRecentChooser,
                                             show_icons: gboolean);
    pub fn gtk_recent_chooser_get_show_icons(chooser: *mut GtkRecentChooser)
     -> gboolean;
    pub fn gtk_recent_chooser_set_sort_type(chooser: *mut GtkRecentChooser,
                                            sort_type: GtkRecentSortType);
    pub fn gtk_recent_chooser_get_sort_type(chooser: *mut GtkRecentChooser) ->
     GtkRecentSortType;
    pub fn gtk_recent_chooser_set_sort_func(chooser: *mut GtkRecentChooser,
                                            sort_func: GtkRecentSortFunc,
                                            sort_data: gpointer,
                                            data_destroy: GDestroyNotify);
    pub fn gtk_recent_chooser_set_current_uri(chooser: *mut GtkRecentChooser,
                                              uri: *gchar,
                                              error: *mut *mut GError) ->
     gboolean;
    pub fn gtk_recent_chooser_get_current_uri(chooser: *mut GtkRecentChooser)
     -> *mut gchar;
    pub fn gtk_recent_chooser_get_current_item(chooser: *mut GtkRecentChooser)
     -> *mut GtkRecentInfo;
    pub fn gtk_recent_chooser_select_uri(chooser: *mut GtkRecentChooser,
                                         uri: *gchar, error: *mut *mut GError)
     -> gboolean;
    pub fn gtk_recent_chooser_unselect_uri(chooser: *mut GtkRecentChooser,
                                           uri: *gchar);
    pub fn gtk_recent_chooser_select_all(chooser: *mut GtkRecentChooser);
    pub fn gtk_recent_chooser_unselect_all(chooser: *mut GtkRecentChooser);
    pub fn gtk_recent_chooser_get_items(chooser: *mut GtkRecentChooser) ->
     *mut GList;
    pub fn gtk_recent_chooser_get_uris(chooser: *mut GtkRecentChooser,
                                       length: *mut gsize) -> *mut *mut gchar;
    pub fn gtk_recent_chooser_add_filter(chooser: *mut GtkRecentChooser,
                                         filter: *mut GtkRecentFilter);
    pub fn gtk_recent_chooser_remove_filter(chooser: *mut GtkRecentChooser,
                                            filter: *mut GtkRecentFilter);
    pub fn gtk_recent_chooser_list_filters(chooser: *mut GtkRecentChooser) ->
     *mut GSList;
    pub fn gtk_recent_chooser_set_filter(chooser: *mut GtkRecentChooser,
                                         filter: *mut GtkRecentFilter);
    pub fn gtk_recent_chooser_get_filter(chooser: *mut GtkRecentChooser) ->
     *mut GtkRecentFilter;
    pub fn gtk_recent_chooser_dialog_get_type() -> GType;
    pub fn gtk_recent_chooser_dialog_new(title: *gchar,
                                         parent: *mut GtkWindow,
                                         first_button_text: *gchar, ...) ->
     *mut GtkWidget;
    pub fn gtk_recent_chooser_dialog_new_for_manager(title: *gchar,
                                                     parent: *mut GtkWindow,
                                                     manager:
                                                         *mut GtkRecentManager,
                                                     first_button_text:
                                                         *gchar, ...) ->
     *mut GtkWidget;
    pub fn gtk_recent_chooser_menu_get_type() -> GType;
    pub fn gtk_recent_chooser_menu_new() -> *mut GtkWidget;
    pub fn gtk_recent_chooser_menu_new_for_manager(manager:
                                                       *mut GtkRecentManager)
     -> *mut GtkWidget;
    pub fn gtk_recent_chooser_menu_get_show_numbers(menu:
                                                        *mut GtkRecentChooserMenu)
     -> gboolean;
    pub fn gtk_recent_chooser_menu_set_show_numbers(menu:
                                                        *mut GtkRecentChooserMenu,
                                                    show_numbers: gboolean);
    pub fn gtk_recent_chooser_widget_get_type() -> GType;
    pub fn gtk_recent_chooser_widget_new() -> *mut GtkWidget;
    pub fn gtk_recent_chooser_widget_new_for_manager(manager:
                                                         *mut GtkRecentManager)
     -> *mut GtkWidget;
    pub fn gtk_revealer_get_type() -> GType;
    pub fn gtk_revealer_new() -> *mut GtkWidget;
    pub fn gtk_revealer_get_reveal_child(revealer: *mut GtkRevealer) ->
     gboolean;
    pub fn gtk_revealer_set_reveal_child(revealer: *mut GtkRevealer,
                                         reveal_child: gboolean);
    pub fn gtk_revealer_get_child_revealed(revealer: *mut GtkRevealer) ->
     gboolean;
    pub fn gtk_revealer_get_transition_duration(revealer: *mut GtkRevealer) ->
     guint;
    pub fn gtk_revealer_set_transition_duration(revealer: *mut GtkRevealer,
                                                duration: guint);
    pub fn gtk_revealer_set_transition_type(revealer: *mut GtkRevealer,
                                            transition:
                                                GtkRevealerTransitionType);
    pub fn gtk_revealer_get_transition_type(revealer: *mut GtkRevealer) ->
     GtkRevealerTransitionType;
    pub fn gtk_scale_get_type() -> GType;
    pub fn gtk_scale_new(orientation: GtkOrientation,
                         adjustment: *mut GtkAdjustment) -> *mut GtkWidget;
    pub fn gtk_scale_new_with_range(orientation: GtkOrientation, min: gdouble,
                                    max: gdouble, step: gdouble) ->
     *mut GtkWidget;
    pub fn gtk_scale_set_digits(scale: *mut GtkScale, digits: gint);
    pub fn gtk_scale_get_digits(scale: *mut GtkScale) -> gint;
    pub fn gtk_scale_set_draw_value(scale: *mut GtkScale,
                                    draw_value: gboolean);
    pub fn gtk_scale_get_draw_value(scale: *mut GtkScale) -> gboolean;
    pub fn gtk_scale_set_has_origin(scale: *mut GtkScale,
                                    has_origin: gboolean);
    pub fn gtk_scale_get_has_origin(scale: *mut GtkScale) -> gboolean;
    pub fn gtk_scale_set_value_pos(scale: *mut GtkScale,
                                   pos: GtkPositionType);
    pub fn gtk_scale_get_value_pos(scale: *mut GtkScale) -> GtkPositionType;
    pub fn gtk_scale_get_layout(scale: *mut GtkScale) -> *mut PangoLayout;
    pub fn gtk_scale_get_layout_offsets(scale: *mut GtkScale, x: *mut gint,
                                        y: *mut gint);
    pub fn gtk_scale_add_mark(scale: *mut GtkScale, value: gdouble,
                              position: GtkPositionType, markup: *gchar);
    pub fn gtk_scale_clear_marks(scale: *mut GtkScale);
    pub fn gtk_scale_button_get_type() -> GType;
    pub fn gtk_scale_button_new(size: GtkIconSize, min: gdouble, max: gdouble,
                                step: gdouble, icons: *mut *gchar) ->
     *mut GtkWidget;
    pub fn gtk_scale_button_set_icons(button: *mut GtkScaleButton,
                                      icons: *mut *gchar);
    pub fn gtk_scale_button_get_value(button: *mut GtkScaleButton) -> gdouble;
    pub fn gtk_scale_button_set_value(button: *mut GtkScaleButton,
                                      value: gdouble);
    pub fn gtk_scale_button_get_adjustment(button: *mut GtkScaleButton) ->
     *mut GtkAdjustment;
    pub fn gtk_scale_button_set_adjustment(button: *mut GtkScaleButton,
                                           adjustment: *mut GtkAdjustment);
    pub fn gtk_scale_button_get_plus_button(button: *mut GtkScaleButton) ->
     *mut GtkWidget;
    pub fn gtk_scale_button_get_minus_button(button: *mut GtkScaleButton) ->
     *mut GtkWidget;
    pub fn gtk_scale_button_get_popup(button: *mut GtkScaleButton) ->
     *mut GtkWidget;
    pub fn gtk_scrollable_get_type() -> GType;
    pub fn gtk_scrollable_get_hadjustment(scrollable: *mut GtkScrollable) ->
     *mut GtkAdjustment;
    pub fn gtk_scrollable_set_hadjustment(scrollable: *mut GtkScrollable,
                                          hadjustment: *mut GtkAdjustment);
    pub fn gtk_scrollable_get_vadjustment(scrollable: *mut GtkScrollable) ->
     *mut GtkAdjustment;
    pub fn gtk_scrollable_set_vadjustment(scrollable: *mut GtkScrollable,
                                          vadjustment: *mut GtkAdjustment);
    pub fn gtk_scrollable_get_hscroll_policy(scrollable: *mut GtkScrollable)
     -> GtkScrollablePolicy;
    pub fn gtk_scrollable_set_hscroll_policy(scrollable: *mut GtkScrollable,
                                             policy: GtkScrollablePolicy);
    pub fn gtk_scrollable_get_vscroll_policy(scrollable: *mut GtkScrollable)
     -> GtkScrollablePolicy;
    pub fn gtk_scrollable_set_vscroll_policy(scrollable: *mut GtkScrollable,
                                             policy: GtkScrollablePolicy);
    pub fn gtk_scrollbar_get_type() -> GType;
    pub fn gtk_scrollbar_new(orientation: GtkOrientation,
                             adjustment: *mut GtkAdjustment) ->
     *mut GtkWidget;
    pub fn gtk_scrolled_window_get_type() -> GType;
    pub fn gtk_scrolled_window_new(hadjustment: *mut GtkAdjustment,
                                   vadjustment: *mut GtkAdjustment) ->
     *mut GtkWidget;
    pub fn gtk_scrolled_window_set_hadjustment(scrolled_window:
                                                   *mut GtkScrolledWindow,
                                               hadjustment:
                                                   *mut GtkAdjustment);
    pub fn gtk_scrolled_window_set_vadjustment(scrolled_window:
                                                   *mut GtkScrolledWindow,
                                               vadjustment:
                                                   *mut GtkAdjustment);
    pub fn gtk_scrolled_window_get_hadjustment(scrolled_window:
                                                   *mut GtkScrolledWindow) ->
     *mut GtkAdjustment;
    pub fn gtk_scrolled_window_get_vadjustment(scrolled_window:
                                                   *mut GtkScrolledWindow) ->
     *mut GtkAdjustment;
    pub fn gtk_scrolled_window_get_hscrollbar(scrolled_window:
                                                  *mut GtkScrolledWindow) ->
     *mut GtkWidget;
    pub fn gtk_scrolled_window_get_vscrollbar(scrolled_window:
                                                  *mut GtkScrolledWindow) ->
     *mut GtkWidget;
    pub fn gtk_scrolled_window_set_policy(scrolled_window:
                                              *mut GtkScrolledWindow,
                                          hscrollbar_policy: GtkPolicyType,
                                          vscrollbar_policy: GtkPolicyType);
    pub fn gtk_scrolled_window_get_policy(scrolled_window:
                                              *mut GtkScrolledWindow,
                                          hscrollbar_policy:
                                              *mut GtkPolicyType,
                                          vscrollbar_policy:
                                              *mut GtkPolicyType);
    pub fn gtk_scrolled_window_set_placement(scrolled_window:
                                                 *mut GtkScrolledWindow,
                                             window_placement: GtkCornerType);
    pub fn gtk_scrolled_window_unset_placement(scrolled_window:
                                                   *mut GtkScrolledWindow);
    pub fn gtk_scrolled_window_get_placement(scrolled_window:
                                                 *mut GtkScrolledWindow) ->
     GtkCornerType;
    pub fn gtk_scrolled_window_set_shadow_type(scrolled_window:
                                                   *mut GtkScrolledWindow,
                                               _type: GtkShadowType);
    pub fn gtk_scrolled_window_get_shadow_type(scrolled_window:
                                                   *mut GtkScrolledWindow) ->
     GtkShadowType;
    pub fn gtk_scrolled_window_add_with_viewport(scrolled_window:
                                                     *mut GtkScrolledWindow,
                                                 child: *mut GtkWidget);
    pub fn gtk_scrolled_window_get_min_content_width(scrolled_window:
                                                         *mut GtkScrolledWindow)
     -> gint;
    pub fn gtk_scrolled_window_set_min_content_width(scrolled_window:
                                                         *mut GtkScrolledWindow,
                                                     width: gint);
    pub fn gtk_scrolled_window_get_min_content_height(scrolled_window:
                                                          *mut GtkScrolledWindow)
     -> gint;
    pub fn gtk_scrolled_window_set_min_content_height(scrolled_window:
                                                          *mut GtkScrolledWindow,
                                                      height: gint);
    pub fn gtk_scrolled_window_set_kinetic_scrolling(scrolled_window:
                                                         *mut GtkScrolledWindow,
                                                     kinetic_scrolling:
                                                         gboolean);
    pub fn gtk_scrolled_window_get_kinetic_scrolling(scrolled_window:
                                                         *mut GtkScrolledWindow)
     -> gboolean;
    pub fn gtk_scrolled_window_set_capture_button_press(scrolled_window:
                                                            *mut GtkScrolledWindow,
                                                        capture_button_press:
                                                            gboolean);
    pub fn gtk_scrolled_window_get_capture_button_press(scrolled_window:
                                                            *mut GtkScrolledWindow)
     -> gboolean;
    pub fn _gtk_scrolled_window_get_scrollbar_spacing(scrolled_window:
                                                          *mut GtkScrolledWindow)
     -> gint;
    pub fn gtk_search_bar_get_type() -> GType;
    pub fn gtk_search_bar_new() -> *mut GtkWidget;
    pub fn gtk_search_bar_connect_entry(bar: *mut GtkSearchBar,
                                        entry: *mut GtkEntry);
    pub fn gtk_search_bar_get_search_mode(bar: *mut GtkSearchBar) -> gboolean;
    pub fn gtk_search_bar_set_search_mode(bar: *mut GtkSearchBar,
                                          search_mode: gboolean);
    pub fn gtk_search_bar_get_show_close_button(bar: *mut GtkSearchBar) ->
     gboolean;
    pub fn gtk_search_bar_set_show_close_button(bar: *mut GtkSearchBar,
                                                visible: gboolean);
    pub fn gtk_search_bar_handle_event(bar: *mut GtkSearchBar,
                                       event: *mut GdkEvent) -> gboolean;
    pub fn gtk_search_entry_get_type() -> GType;
    pub fn gtk_search_entry_new() -> *mut GtkWidget;
    pub fn gtk_separator_get_type() -> GType;
    pub fn gtk_separator_new(orientation: GtkOrientation) -> *mut GtkWidget;
    pub fn gtk_separator_menu_item_get_type() -> GType;
    pub fn gtk_separator_menu_item_new() -> *mut GtkWidget;
    pub fn gtk_separator_tool_item_get_type() -> GType;
    pub fn gtk_separator_tool_item_new() -> *mut GtkToolItem;
    pub fn gtk_separator_tool_item_get_draw(item: *mut GtkSeparatorToolItem)
     -> gboolean;
    pub fn gtk_separator_tool_item_set_draw(item: *mut GtkSeparatorToolItem,
                                            draw: gboolean);
    pub fn gtk_settings_get_type() -> GType;
    pub fn gtk_settings_get_default() -> *mut GtkSettings;
    pub fn gtk_settings_get_for_screen(screen: *mut GdkScreen) ->
     *mut GtkSettings;
    pub fn gtk_settings_install_property(pspec: *mut GParamSpec);
    pub fn gtk_settings_install_property_parser(pspec: *mut GParamSpec,
                                                parser: GtkRcPropertyParser);
    pub fn gtk_rc_property_parse_color(pspec: *GParamSpec, gstring: *GString,
                                       property_value: *mut GValue) ->
     gboolean;
    pub fn gtk_rc_property_parse_enum(pspec: *GParamSpec, gstring: *GString,
                                      property_value: *mut GValue) ->
     gboolean;
    pub fn gtk_rc_property_parse_flags(pspec: *GParamSpec, gstring: *GString,
                                       property_value: *mut GValue) ->
     gboolean;
    pub fn gtk_rc_property_parse_requisition(pspec: *GParamSpec,
                                             gstring: *GString,
                                             property_value: *mut GValue) ->
     gboolean;
    pub fn gtk_rc_property_parse_border(pspec: *GParamSpec, gstring: *GString,
                                        property_value: *mut GValue) ->
     gboolean;
    pub fn gtk_settings_set_property_value(settings: *mut GtkSettings,
                                           name: *gchar,
                                           svalue: *GtkSettingsValue);
    pub fn gtk_settings_set_string_property(settings: *mut GtkSettings,
                                            name: *gchar, v_string: *gchar,
                                            origin: *gchar);
    pub fn gtk_settings_set_long_property(settings: *mut GtkSettings,
                                          name: *gchar, v_long: glong,
                                          origin: *gchar);
    pub fn gtk_settings_set_double_property(settings: *mut GtkSettings,
                                            name: *gchar, v_double: gdouble,
                                            origin: *gchar);
    pub fn gtk_show_uri(screen: *mut GdkScreen, uri: *gchar,
                        timestamp: guint32, error: *mut *mut GError) ->
     gboolean;
    pub fn gtk_distribute_natural_allocation(extra_space: gint,
                                             n_requested_sizes: guint,
                                             sizes: *mut GtkRequestedSize) ->
     gint;
    pub fn gtk_spin_button_get_type() -> GType;
    pub fn gtk_spin_button_configure(spin_button: *mut GtkSpinButton,
                                     adjustment: *mut GtkAdjustment,
                                     climb_rate: gdouble, digits: guint);
    pub fn gtk_spin_button_new(adjustment: *mut GtkAdjustment,
                               climb_rate: gdouble, digits: guint) ->
     *mut GtkWidget;
    pub fn gtk_spin_button_new_with_range(min: gdouble, max: gdouble,
                                          step: gdouble) -> *mut GtkWidget;
    pub fn gtk_spin_button_set_adjustment(spin_button: *mut GtkSpinButton,
                                          adjustment: *mut GtkAdjustment);
    pub fn gtk_spin_button_get_adjustment(spin_button: *mut GtkSpinButton) ->
     *mut GtkAdjustment;
    pub fn gtk_spin_button_set_digits(spin_button: *mut GtkSpinButton,
                                      digits: guint);
    pub fn gtk_spin_button_get_digits(spin_button: *mut GtkSpinButton) ->
     guint;
    pub fn gtk_spin_button_set_increments(spin_button: *mut GtkSpinButton,
                                          step: gdouble, page: gdouble);
    pub fn gtk_spin_button_get_increments(spin_button: *mut GtkSpinButton,
                                          step: *mut gdouble,
                                          page: *mut gdouble);
    pub fn gtk_spin_button_set_range(spin_button: *mut GtkSpinButton,
                                     min: gdouble, max: gdouble);
    pub fn gtk_spin_button_get_range(spin_button: *mut GtkSpinButton,
                                     min: *mut gdouble, max: *mut gdouble);
    pub fn gtk_spin_button_get_value(spin_button: *mut GtkSpinButton) ->
     gdouble;
    pub fn gtk_spin_button_get_value_as_int(spin_button: *mut GtkSpinButton)
     -> gint;
    pub fn gtk_spin_button_set_value(spin_button: *mut GtkSpinButton,
                                     value: gdouble);
    pub fn gtk_spin_button_set_update_policy(spin_button: *mut GtkSpinButton,
                                             policy:
                                                 GtkSpinButtonUpdatePolicy);
    pub fn gtk_spin_button_get_update_policy(spin_button: *mut GtkSpinButton)
     -> GtkSpinButtonUpdatePolicy;
    pub fn gtk_spin_button_set_numeric(spin_button: *mut GtkSpinButton,
                                       numeric: gboolean);
    pub fn gtk_spin_button_get_numeric(spin_button: *mut GtkSpinButton) ->
     gboolean;
    pub fn gtk_spin_button_spin(spin_button: *mut GtkSpinButton,
                                direction: GtkSpinType, increment: gdouble);
    pub fn gtk_spin_button_set_wrap(spin_button: *mut GtkSpinButton,
                                    wrap: gboolean);
    pub fn gtk_spin_button_get_wrap(spin_button: *mut GtkSpinButton) ->
     gboolean;
    pub fn gtk_spin_button_set_snap_to_ticks(spin_button: *mut GtkSpinButton,
                                             snap_to_ticks: gboolean);
    pub fn gtk_spin_button_get_snap_to_ticks(spin_button: *mut GtkSpinButton)
     -> gboolean;
    pub fn gtk_spin_button_update(spin_button: *mut GtkSpinButton);
    pub fn _gtk_spin_button_get_panels(spin_button: *mut GtkSpinButton,
                                       down_panel: *mut *mut GdkWindow,
                                       up_panel: *mut *mut GdkWindow);
    pub fn gtk_spinner_get_type() -> GType;
    pub fn gtk_spinner_new() -> *mut GtkWidget;
    pub fn gtk_spinner_start(spinner: *mut GtkSpinner);
    pub fn gtk_spinner_stop(spinner: *mut GtkSpinner);
    pub fn gtk_stack_get_type() -> GType;
    pub fn gtk_stack_new() -> *mut GtkWidget;
    pub fn gtk_stack_add_named(stack: *mut GtkStack, child: *mut GtkWidget,
                               name: *gchar);
    pub fn gtk_stack_add_titled(stack: *mut GtkStack, child: *mut GtkWidget,
                                name: *gchar, title: *gchar);
    pub fn gtk_stack_set_visible_child(stack: *mut GtkStack,
                                       child: *mut GtkWidget);
    pub fn gtk_stack_get_visible_child(stack: *mut GtkStack) ->
     *mut GtkWidget;
    pub fn gtk_stack_set_visible_child_name(stack: *mut GtkStack,
                                            name: *gchar);
    pub fn gtk_stack_get_visible_child_name(stack: *mut GtkStack) -> *gchar;
    pub fn gtk_stack_set_visible_child_full(stack: *mut GtkStack,
                                            name: *gchar,
                                            transition:
                                                GtkStackTransitionType);
    pub fn gtk_stack_set_homogeneous(stack: *mut GtkStack,
                                     homogeneous: gboolean);
    pub fn gtk_stack_get_homogeneous(stack: *mut GtkStack) -> gboolean;
    pub fn gtk_stack_set_transition_duration(stack: *mut GtkStack,
                                             duration: guint);
    pub fn gtk_stack_get_transition_duration(stack: *mut GtkStack) -> guint;
    pub fn gtk_stack_set_transition_type(stack: *mut GtkStack,
                                         transition: GtkStackTransitionType);
    pub fn gtk_stack_get_transition_type(stack: *mut GtkStack) ->
     GtkStackTransitionType;
    pub fn gtk_stack_switcher_get_type() -> GType;
    pub fn gtk_stack_switcher_new() -> *mut GtkWidget;
    pub fn gtk_stack_switcher_set_stack(switcher: *mut GtkStackSwitcher,
                                        stack: *mut GtkStack);
    pub fn gtk_stack_switcher_get_stack(switcher: *mut GtkStackSwitcher) ->
     *mut GtkStack;
    pub fn gtk_statusbar_get_type() -> GType;
    pub fn gtk_statusbar_new() -> *mut GtkWidget;
    pub fn gtk_statusbar_get_context_id(statusbar: *mut GtkStatusbar,
                                        context_description: *gchar) -> guint;
    pub fn gtk_statusbar_push(statusbar: *mut GtkStatusbar, context_id: guint,
                              text: *gchar) -> guint;
    pub fn gtk_statusbar_pop(statusbar: *mut GtkStatusbar, context_id: guint);
    pub fn gtk_statusbar_remove(statusbar: *mut GtkStatusbar,
                                context_id: guint, message_id: guint);
    pub fn gtk_statusbar_remove_all(statusbar: *mut GtkStatusbar,
                                    context_id: guint);
    pub fn gtk_statusbar_get_message_area(statusbar: *mut GtkStatusbar) ->
     *mut GtkWidget;
    pub fn gtk_status_icon_get_type() -> GType;
    pub fn gtk_status_icon_new() -> *mut GtkStatusIcon;
    pub fn gtk_status_icon_new_from_pixbuf(pixbuf: *mut GdkPixbuf) ->
     *mut GtkStatusIcon;
    pub fn gtk_status_icon_new_from_file(filename: *gchar) ->
     *mut GtkStatusIcon;
    pub fn gtk_status_icon_new_from_stock(stock_id: *gchar) ->
     *mut GtkStatusIcon;
    pub fn gtk_status_icon_new_from_icon_name(icon_name: *gchar) ->
     *mut GtkStatusIcon;
    pub fn gtk_status_icon_new_from_gicon(icon: *mut GIcon) ->
     *mut GtkStatusIcon;
    pub fn gtk_status_icon_set_from_pixbuf(status_icon: *mut GtkStatusIcon,
                                           pixbuf: *mut GdkPixbuf);
    pub fn gtk_status_icon_set_from_file(status_icon: *mut GtkStatusIcon,
                                         filename: *gchar);
    pub fn gtk_status_icon_set_from_stock(status_icon: *mut GtkStatusIcon,
                                          stock_id: *gchar);
    pub fn gtk_status_icon_set_from_icon_name(status_icon: *mut GtkStatusIcon,
                                              icon_name: *gchar);
    pub fn gtk_status_icon_set_from_gicon(status_icon: *mut GtkStatusIcon,
                                          icon: *mut GIcon);
    pub fn gtk_status_icon_get_storage_type(status_icon: *mut GtkStatusIcon)
     -> GtkImageType;
    pub fn gtk_status_icon_get_pixbuf(status_icon: *mut GtkStatusIcon) ->
     *mut GdkPixbuf;
    pub fn gtk_status_icon_get_stock(status_icon: *mut GtkStatusIcon) ->
     *gchar;
    pub fn gtk_status_icon_get_icon_name(status_icon: *mut GtkStatusIcon) ->
     *gchar;
    pub fn gtk_status_icon_get_gicon(status_icon: *mut GtkStatusIcon) ->
     *mut GIcon;
    pub fn gtk_status_icon_get_size(status_icon: *mut GtkStatusIcon) -> gint;
    pub fn gtk_status_icon_set_screen(status_icon: *mut GtkStatusIcon,
                                      screen: *mut GdkScreen);
    pub fn gtk_status_icon_get_screen(status_icon: *mut GtkStatusIcon) ->
     *mut GdkScreen;
    pub fn gtk_status_icon_set_has_tooltip(status_icon: *mut GtkStatusIcon,
                                           has_tooltip: gboolean);
    pub fn gtk_status_icon_set_tooltip_text(status_icon: *mut GtkStatusIcon,
                                            text: *gchar);
    pub fn gtk_status_icon_set_tooltip_markup(status_icon: *mut GtkStatusIcon,
                                              markup: *gchar);
    pub fn gtk_status_icon_set_title(status_icon: *mut GtkStatusIcon,
                                     title: *gchar);
    pub fn gtk_status_icon_get_title(status_icon: *mut GtkStatusIcon) ->
     *gchar;
    pub fn gtk_status_icon_set_name(status_icon: *mut GtkStatusIcon,
                                    name: *gchar);
    pub fn gtk_status_icon_set_visible(status_icon: *mut GtkStatusIcon,
                                       visible: gboolean);
    pub fn gtk_status_icon_get_visible(status_icon: *mut GtkStatusIcon) ->
     gboolean;
    pub fn gtk_status_icon_is_embedded(status_icon: *mut GtkStatusIcon) ->
     gboolean;
    pub fn gtk_status_icon_position_menu(menu: *mut GtkMenu, x: *mut gint,
                                         y: *mut gint, push_in: *mut gboolean,
                                         user_data: gpointer);
    pub fn gtk_status_icon_get_geometry(status_icon: *mut GtkStatusIcon,
                                        screen: *mut *mut GdkScreen,
                                        area: *mut GdkRectangle,
                                        orientation: *mut GtkOrientation) ->
     gboolean;
    pub fn gtk_status_icon_get_has_tooltip(status_icon: *mut GtkStatusIcon) ->
     gboolean;
    pub fn gtk_status_icon_get_tooltip_text(status_icon: *mut GtkStatusIcon)
     -> *mut gchar;
    pub fn gtk_status_icon_get_tooltip_markup(status_icon: *mut GtkStatusIcon)
     -> *mut gchar;
    pub fn gtk_status_icon_get_x11_window_id(status_icon: *mut GtkStatusIcon)
     -> guint32;
    pub fn gtk_switch_get_type() -> GType;
    pub fn gtk_switch_new() -> *mut GtkWidget;
    pub fn gtk_switch_set_active(sw: *mut GtkSwitch, is_active: gboolean);
    pub fn gtk_switch_get_active(sw: *mut GtkSwitch) -> gboolean;
    pub fn gtk_text_tag_table_get_type() -> GType;
    pub fn gtk_text_tag_table_new() -> *mut GtkTextTagTable;
    pub fn gtk_text_tag_table_add(table: *mut GtkTextTagTable,
                                  tag: *mut GtkTextTag);
    pub fn gtk_text_tag_table_remove(table: *mut GtkTextTagTable,
                                     tag: *mut GtkTextTag);
    pub fn gtk_text_tag_table_lookup(table: *mut GtkTextTagTable,
                                     name: *gchar) -> *mut GtkTextTag;
    pub fn gtk_text_tag_table_foreach(table: *mut GtkTextTagTable,
                                      func: GtkTextTagTableForeach,
                                      data: gpointer);
    pub fn gtk_text_tag_table_get_size(table: *mut GtkTextTagTable) -> gint;
    pub fn _gtk_text_tag_table_add_buffer(table: *mut GtkTextTagTable,
                                          buffer: gpointer);
    pub fn _gtk_text_tag_table_remove_buffer(table: *mut GtkTextTagTable,
                                             buffer: gpointer);
    pub fn gtk_text_mark_get_type() -> GType;
    pub fn gtk_text_mark_new(name: *gchar, left_gravity: gboolean) ->
     *mut GtkTextMark;
    pub fn gtk_text_mark_set_visible(mark: *mut GtkTextMark,
                                     setting: gboolean);
    pub fn gtk_text_mark_get_visible(mark: *mut GtkTextMark) -> gboolean;
    pub fn gtk_text_mark_get_name(mark: *mut GtkTextMark) -> *gchar;
    pub fn gtk_text_mark_get_deleted(mark: *mut GtkTextMark) -> gboolean;
    pub fn gtk_text_mark_get_buffer(mark: *mut GtkTextMark) ->
     *mut GtkTextBuffer;
    pub fn gtk_text_mark_get_left_gravity(mark: *mut GtkTextMark) -> gboolean;
    pub fn gtk_text_buffer_get_type() -> GType;
    pub fn gtk_text_buffer_new(table: *mut GtkTextTagTable) ->
     *mut GtkTextBuffer;
    pub fn gtk_text_buffer_get_line_count(buffer: *mut GtkTextBuffer) -> gint;
    pub fn gtk_text_buffer_get_char_count(buffer: *mut GtkTextBuffer) -> gint;
    pub fn gtk_text_buffer_get_tag_table(buffer: *mut GtkTextBuffer) ->
     *mut GtkTextTagTable;
    pub fn gtk_text_buffer_set_text(buffer: *mut GtkTextBuffer, text: *gchar,
                                    len: gint);
    pub fn gtk_text_buffer_insert(buffer: *mut GtkTextBuffer,
                                  iter: *mut GtkTextIter, text: *gchar,
                                  len: gint);
    pub fn gtk_text_buffer_insert_at_cursor(buffer: *mut GtkTextBuffer,
                                            text: *gchar, len: gint);
    pub fn gtk_text_buffer_insert_interactive(buffer: *mut GtkTextBuffer,
                                              iter: *mut GtkTextIter,
                                              text: *gchar, len: gint,
                                              default_editable: gboolean) ->
     gboolean;
    pub fn gtk_text_buffer_insert_interactive_at_cursor(buffer:
                                                            *mut GtkTextBuffer,
                                                        text: *gchar,
                                                        len: gint,
                                                        default_editable:
                                                            gboolean) ->
     gboolean;
    pub fn gtk_text_buffer_insert_range(buffer: *mut GtkTextBuffer,
                                        iter: *mut GtkTextIter,
                                        start: *GtkTextIter,
                                        end: *GtkTextIter);
    pub fn gtk_text_buffer_insert_range_interactive(buffer:
                                                        *mut GtkTextBuffer,
                                                    iter: *mut GtkTextIter,
                                                    start: *GtkTextIter,
                                                    end: *GtkTextIter,
                                                    default_editable:
                                                        gboolean) -> gboolean;
    pub fn gtk_text_buffer_insert_with_tags(buffer: *mut GtkTextBuffer,
                                            iter: *mut GtkTextIter,
                                            text: *gchar, len: gint,
                                            first_tag: *mut GtkTextTag, ...);
    pub fn gtk_text_buffer_insert_with_tags_by_name(buffer:
                                                        *mut GtkTextBuffer,
                                                    iter: *mut GtkTextIter,
                                                    text: *gchar, len: gint,
                                                    first_tag_name:
                                                        *gchar, ...);
    pub fn gtk_text_buffer_delete(buffer: *mut GtkTextBuffer,
                                  start: *mut GtkTextIter,
                                  end: *mut GtkTextIter);
    pub fn gtk_text_buffer_delete_interactive(buffer: *mut GtkTextBuffer,
                                              start_iter: *mut GtkTextIter,
                                              end_iter: *mut GtkTextIter,
                                              default_editable: gboolean) ->
     gboolean;
    pub fn gtk_text_buffer_backspace(buffer: *mut GtkTextBuffer,
                                     iter: *mut GtkTextIter,
                                     interactive: gboolean,
                                     default_editable: gboolean) -> gboolean;
    pub fn gtk_text_buffer_get_text(buffer: *mut GtkTextBuffer,
                                    start: *GtkTextIter, end: *GtkTextIter,
                                    include_hidden_chars: gboolean) ->
     *mut gchar;
    pub fn gtk_text_buffer_get_slice(buffer: *mut GtkTextBuffer,
                                     start: *GtkTextIter, end: *GtkTextIter,
                                     include_hidden_chars: gboolean) ->
     *mut gchar;
    pub fn gtk_text_buffer_insert_pixbuf(buffer: *mut GtkTextBuffer,
                                         iter: *mut GtkTextIter,
                                         pixbuf: *mut GdkPixbuf);
    pub fn gtk_text_buffer_insert_child_anchor(buffer: *mut GtkTextBuffer,
                                               iter: *mut GtkTextIter,
                                               anchor:
                                                   *mut GtkTextChildAnchor);
    pub fn gtk_text_buffer_create_child_anchor(buffer: *mut GtkTextBuffer,
                                               iter: *mut GtkTextIter) ->
     *mut GtkTextChildAnchor;
    pub fn gtk_text_buffer_add_mark(buffer: *mut GtkTextBuffer,
                                    mark: *mut GtkTextMark,
                                    where: *GtkTextIter);
    pub fn gtk_text_buffer_create_mark(buffer: *mut GtkTextBuffer,
                                       mark_name: *gchar, where: *GtkTextIter,
                                       left_gravity: gboolean) ->
     *mut GtkTextMark;
    pub fn gtk_text_buffer_move_mark(buffer: *mut GtkTextBuffer,
                                     mark: *mut GtkTextMark,
                                     where: *GtkTextIter);
    pub fn gtk_text_buffer_delete_mark(buffer: *mut GtkTextBuffer,
                                       mark: *mut GtkTextMark);
    pub fn gtk_text_buffer_get_mark(buffer: *mut GtkTextBuffer, name: *gchar)
     -> *mut GtkTextMark;
    pub fn gtk_text_buffer_move_mark_by_name(buffer: *mut GtkTextBuffer,
                                             name: *gchar,
                                             where: *GtkTextIter);
    pub fn gtk_text_buffer_delete_mark_by_name(buffer: *mut GtkTextBuffer,
                                               name: *gchar);
    pub fn gtk_text_buffer_get_insert(buffer: *mut GtkTextBuffer) ->
     *mut GtkTextMark;
    pub fn gtk_text_buffer_get_selection_bound(buffer: *mut GtkTextBuffer) ->
     *mut GtkTextMark;
    pub fn gtk_text_buffer_place_cursor(buffer: *mut GtkTextBuffer,
                                        where: *GtkTextIter);
    pub fn gtk_text_buffer_select_range(buffer: *mut GtkTextBuffer,
                                        ins: *GtkTextIter,
                                        bound: *GtkTextIter);
    pub fn gtk_text_buffer_apply_tag(buffer: *mut GtkTextBuffer,
                                     tag: *mut GtkTextTag,
                                     start: *GtkTextIter, end: *GtkTextIter);
    pub fn gtk_text_buffer_remove_tag(buffer: *mut GtkTextBuffer,
                                      tag: *mut GtkTextTag,
                                      start: *GtkTextIter, end: *GtkTextIter);
    pub fn gtk_text_buffer_apply_tag_by_name(buffer: *mut GtkTextBuffer,
                                             name: *gchar,
                                             start: *GtkTextIter,
                                             end: *GtkTextIter);
    pub fn gtk_text_buffer_remove_tag_by_name(buffer: *mut GtkTextBuffer,
                                              name: *gchar,
                                              start: *GtkTextIter,
                                              end: *GtkTextIter);
    pub fn gtk_text_buffer_remove_all_tags(buffer: *mut GtkTextBuffer,
                                           start: *GtkTextIter,
                                           end: *GtkTextIter);
    pub fn gtk_text_buffer_create_tag(buffer: *mut GtkTextBuffer,
                                      tag_name: *gchar,
                                      first_property_name: *gchar, ...) ->
     *mut GtkTextTag;
    pub fn gtk_text_buffer_get_iter_at_line_offset(buffer: *mut GtkTextBuffer,
                                                   iter: *mut GtkTextIter,
                                                   line_number: gint,
                                                   char_offset: gint);
    pub fn gtk_text_buffer_get_iter_at_line_index(buffer: *mut GtkTextBuffer,
                                                  iter: *mut GtkTextIter,
                                                  line_number: gint,
                                                  byte_index: gint);
    pub fn gtk_text_buffer_get_iter_at_offset(buffer: *mut GtkTextBuffer,
                                              iter: *mut GtkTextIter,
                                              char_offset: gint);
    pub fn gtk_text_buffer_get_iter_at_line(buffer: *mut GtkTextBuffer,
                                            iter: *mut GtkTextIter,
                                            line_number: gint);
    pub fn gtk_text_buffer_get_start_iter(buffer: *mut GtkTextBuffer,
                                          iter: *mut GtkTextIter);
    pub fn gtk_text_buffer_get_end_iter(buffer: *mut GtkTextBuffer,
                                        iter: *mut GtkTextIter);
    pub fn gtk_text_buffer_get_bounds(buffer: *mut GtkTextBuffer,
                                      start: *mut GtkTextIter,
                                      end: *mut GtkTextIter);
    pub fn gtk_text_buffer_get_iter_at_mark(buffer: *mut GtkTextBuffer,
                                            iter: *mut GtkTextIter,
                                            mark: *mut GtkTextMark);
    pub fn gtk_text_buffer_get_iter_at_child_anchor(buffer:
                                                        *mut GtkTextBuffer,
                                                    iter: *mut GtkTextIter,
                                                    anchor:
                                                        *mut GtkTextChildAnchor);
    pub fn gtk_text_buffer_get_modified(buffer: *mut GtkTextBuffer) ->
     gboolean;
    pub fn gtk_text_buffer_set_modified(buffer: *mut GtkTextBuffer,
                                        setting: gboolean);
    pub fn gtk_text_buffer_get_has_selection(buffer: *mut GtkTextBuffer) ->
     gboolean;
    pub fn gtk_text_buffer_add_selection_clipboard(buffer: *mut GtkTextBuffer,
                                                   clipboard:
                                                       *mut GtkClipboard);
    pub fn gtk_text_buffer_remove_selection_clipboard(buffer:
                                                          *mut GtkTextBuffer,
                                                      clipboard:
                                                          *mut GtkClipboard);
    pub fn gtk_text_buffer_cut_clipboard(buffer: *mut GtkTextBuffer,
                                         clipboard: *mut GtkClipboard,
                                         default_editable: gboolean);
    pub fn gtk_text_buffer_copy_clipboard(buffer: *mut GtkTextBuffer,
                                          clipboard: *mut GtkClipboard);
    pub fn gtk_text_buffer_paste_clipboard(buffer: *mut GtkTextBuffer,
                                           clipboard: *mut GtkClipboard,
                                           override_location:
                                               *mut GtkTextIter,
                                           default_editable: gboolean);
    pub fn gtk_text_buffer_get_selection_bounds(buffer: *mut GtkTextBuffer,
                                                start: *mut GtkTextIter,
                                                end: *mut GtkTextIter) ->
     gboolean;
    pub fn gtk_text_buffer_delete_selection(buffer: *mut GtkTextBuffer,
                                            interactive: gboolean,
                                            default_editable: gboolean) ->
     gboolean;
    pub fn gtk_text_buffer_begin_user_action(buffer: *mut GtkTextBuffer);
    pub fn gtk_text_buffer_end_user_action(buffer: *mut GtkTextBuffer);
    pub fn gtk_text_buffer_get_copy_target_list(buffer: *mut GtkTextBuffer) ->
     *mut GtkTargetList;
    pub fn gtk_text_buffer_get_paste_target_list(buffer: *mut GtkTextBuffer)
     -> *mut GtkTargetList;
    pub fn _gtk_text_buffer_spew(buffer: *mut GtkTextBuffer);
    pub fn _gtk_text_buffer_get_btree(buffer: *mut GtkTextBuffer) ->
     *mut GtkTextBTree;
    pub fn _gtk_text_buffer_get_line_log_attrs(buffer: *mut GtkTextBuffer,
                                               anywhere_in_line: *GtkTextIter,
                                               char_len: *mut gint) ->
     *PangoLogAttr;
    pub fn _gtk_text_buffer_notify_will_remove_tag(buffer: *mut GtkTextBuffer,
                                                   tag: *mut GtkTextTag);
    pub fn _gtk_text_buffer_get_text_before(buffer: *mut GtkTextBuffer,
                                            boundary_type: AtkTextBoundary,
                                            position: *mut GtkTextIter,
                                            start: *mut GtkTextIter,
                                            end: *mut GtkTextIter);
    pub fn _gtk_text_buffer_get_text_at(buffer: *mut GtkTextBuffer,
                                        boundary_type: AtkTextBoundary,
                                        position: *mut GtkTextIter,
                                        start: *mut GtkTextIter,
                                        end: *mut GtkTextIter);
    pub fn _gtk_text_buffer_get_text_after(buffer: *mut GtkTextBuffer,
                                           boundary_type: AtkTextBoundary,
                                           position: *mut GtkTextIter,
                                           start: *mut GtkTextIter,
                                           end: *mut GtkTextIter);
    pub fn gtk_text_buffer_register_serialize_format(buffer:
                                                         *mut GtkTextBuffer,
                                                     mime_type: *gchar,
                                                     function:
                                                         GtkTextBufferSerializeFunc,
                                                     user_data: gpointer,
                                                     user_data_destroy:
                                                         GDestroyNotify) ->
     GdkAtom;
    pub fn gtk_text_buffer_register_serialize_tagset(buffer:
                                                         *mut GtkTextBuffer,
                                                     tagset_name: *gchar) ->
     GdkAtom;
    pub fn gtk_text_buffer_register_deserialize_format(buffer:
                                                           *mut GtkTextBuffer,
                                                       mime_type: *gchar,
                                                       function:
                                                           GtkTextBufferDeserializeFunc,
                                                       user_data: gpointer,
                                                       user_data_destroy:
                                                           GDestroyNotify) ->
     GdkAtom;
    pub fn gtk_text_buffer_register_deserialize_tagset(buffer:
                                                           *mut GtkTextBuffer,
                                                       tagset_name: *gchar) ->
     GdkAtom;
    pub fn gtk_text_buffer_unregister_serialize_format(buffer:
                                                           *mut GtkTextBuffer,
                                                       format: GdkAtom);
    pub fn gtk_text_buffer_unregister_deserialize_format(buffer:
                                                             *mut GtkTextBuffer,
                                                         format: GdkAtom);
    pub fn gtk_text_buffer_deserialize_set_can_create_tags(buffer:
                                                               *mut GtkTextBuffer,
                                                           format: GdkAtom,
                                                           can_create_tags:
                                                               gboolean);
    pub fn gtk_text_buffer_deserialize_get_can_create_tags(buffer:
                                                               *mut GtkTextBuffer,
                                                           format: GdkAtom) ->
     gboolean;
    pub fn gtk_text_buffer_get_serialize_formats(buffer: *mut GtkTextBuffer,
                                                 n_formats: *mut gint) ->
     *mut GdkAtom;
    pub fn gtk_text_buffer_get_deserialize_formats(buffer: *mut GtkTextBuffer,
                                                   n_formats: *mut gint) ->
     *mut GdkAtom;
    pub fn gtk_text_buffer_serialize(register_buffer: *mut GtkTextBuffer,
                                     content_buffer: *mut GtkTextBuffer,
                                     format: GdkAtom, start: *GtkTextIter,
                                     end: *GtkTextIter, length: *mut gsize) ->
     *mut guint8;
    pub fn gtk_text_buffer_deserialize(register_buffer: *mut GtkTextBuffer,
                                       content_buffer: *mut GtkTextBuffer,
                                       format: GdkAtom,
                                       iter: *mut GtkTextIter, data: *guint8,
                                       length: gsize, error: *mut *mut GError)
     -> gboolean;
    pub fn gtk_text_view_get_type() -> GType;
    pub fn gtk_text_view_new() -> *mut GtkWidget;
    pub fn gtk_text_view_new_with_buffer(buffer: *mut GtkTextBuffer) ->
     *mut GtkWidget;
    pub fn gtk_text_view_set_buffer(text_view: *mut GtkTextView,
                                    buffer: *mut GtkTextBuffer);
    pub fn gtk_text_view_get_buffer(text_view: *mut GtkTextView) ->
     *mut GtkTextBuffer;
    pub fn gtk_text_view_scroll_to_iter(text_view: *mut GtkTextView,
                                        iter: *mut GtkTextIter,
                                        within_margin: gdouble,
                                        use_align: gboolean, xalign: gdouble,
                                        yalign: gdouble) -> gboolean;
    pub fn gtk_text_view_scroll_to_mark(text_view: *mut GtkTextView,
                                        mark: *mut GtkTextMark,
                                        within_margin: gdouble,
                                        use_align: gboolean, xalign: gdouble,
                                        yalign: gdouble);
    pub fn gtk_text_view_scroll_mark_onscreen(text_view: *mut GtkTextView,
                                              mark: *mut GtkTextMark);
    pub fn gtk_text_view_move_mark_onscreen(text_view: *mut GtkTextView,
                                            mark: *mut GtkTextMark) ->
     gboolean;
    pub fn gtk_text_view_place_cursor_onscreen(text_view: *mut GtkTextView) ->
     gboolean;
    pub fn gtk_text_view_get_visible_rect(text_view: *mut GtkTextView,
                                          visible_rect: *mut GdkRectangle);
    pub fn gtk_text_view_set_cursor_visible(text_view: *mut GtkTextView,
                                            setting: gboolean);
    pub fn gtk_text_view_get_cursor_visible(text_view: *mut GtkTextView) ->
     gboolean;
    pub fn gtk_text_view_get_cursor_locations(text_view: *mut GtkTextView,
                                              iter: *GtkTextIter,
                                              strong: *mut GdkRectangle,
                                              weak: *mut GdkRectangle);
    pub fn gtk_text_view_get_iter_location(text_view: *mut GtkTextView,
                                           iter: *GtkTextIter,
                                           location: *mut GdkRectangle);
    pub fn gtk_text_view_get_iter_at_location(text_view: *mut GtkTextView,
                                              iter: *mut GtkTextIter, x: gint,
                                              y: gint);
    pub fn gtk_text_view_get_iter_at_position(text_view: *mut GtkTextView,
                                              iter: *mut GtkTextIter,
                                              trailing: *mut gint, x: gint,
                                              y: gint);
    pub fn gtk_text_view_get_line_yrange(text_view: *mut GtkTextView,
                                         iter: *GtkTextIter, y: *mut gint,
                                         height: *mut gint);
    pub fn gtk_text_view_get_line_at_y(text_view: *mut GtkTextView,
                                       target_iter: *mut GtkTextIter, y: gint,
                                       line_top: *mut gint);
    pub fn gtk_text_view_buffer_to_window_coords(text_view: *mut GtkTextView,
                                                 win: GtkTextWindowType,
                                                 buffer_x: gint,
                                                 buffer_y: gint,
                                                 window_x: *mut gint,
                                                 window_y: *mut gint);
    pub fn gtk_text_view_window_to_buffer_coords(text_view: *mut GtkTextView,
                                                 win: GtkTextWindowType,
                                                 window_x: gint,
                                                 window_y: gint,
                                                 buffer_x: *mut gint,
                                                 buffer_y: *mut gint);
    pub fn gtk_text_view_get_hadjustment(text_view: *mut GtkTextView) ->
     *mut GtkAdjustment;
    pub fn gtk_text_view_get_vadjustment(text_view: *mut GtkTextView) ->
     *mut GtkAdjustment;
    pub fn gtk_text_view_get_window(text_view: *mut GtkTextView,
                                    win: GtkTextWindowType) -> *mut GdkWindow;
    pub fn gtk_text_view_get_window_type(text_view: *mut GtkTextView,
                                         window: *mut GdkWindow) ->
     GtkTextWindowType;
    pub fn gtk_text_view_set_border_window_size(text_view: *mut GtkTextView,
                                                _type: GtkTextWindowType,
                                                size: gint);
    pub fn gtk_text_view_get_border_window_size(text_view: *mut GtkTextView,
                                                _type: GtkTextWindowType) ->
     gint;
    pub fn gtk_text_view_forward_display_line(text_view: *mut GtkTextView,
                                              iter: *mut GtkTextIter) ->
     gboolean;
    pub fn gtk_text_view_backward_display_line(text_view: *mut GtkTextView,
                                               iter: *mut GtkTextIter) ->
     gboolean;
    pub fn gtk_text_view_forward_display_line_end(text_view: *mut GtkTextView,
                                                  iter: *mut GtkTextIter) ->
     gboolean;
    pub fn gtk_text_view_backward_display_line_start(text_view:
                                                         *mut GtkTextView,
                                                     iter: *mut GtkTextIter)
     -> gboolean;
    pub fn gtk_text_view_starts_display_line(text_view: *mut GtkTextView,
                                             iter: *GtkTextIter) -> gboolean;
    pub fn gtk_text_view_move_visually(text_view: *mut GtkTextView,
                                       iter: *mut GtkTextIter, count: gint) ->
     gboolean;
    pub fn gtk_text_view_im_context_filter_keypress(text_view:
                                                        *mut GtkTextView,
                                                    event: *mut GdkEventKey)
     -> gboolean;
    pub fn gtk_text_view_reset_im_context(text_view: *mut GtkTextView);
    pub fn gtk_text_view_add_child_at_anchor(text_view: *mut GtkTextView,
                                             child: *mut GtkWidget,
                                             anchor: *mut GtkTextChildAnchor);
    pub fn gtk_text_view_add_child_in_window(text_view: *mut GtkTextView,
                                             child: *mut GtkWidget,
                                             which_window: GtkTextWindowType,
                                             xpos: gint, ypos: gint);
    pub fn gtk_text_view_move_child(text_view: *mut GtkTextView,
                                    child: *mut GtkWidget, xpos: gint,
                                    ypos: gint);
    pub fn gtk_text_view_set_wrap_mode(text_view: *mut GtkTextView,
                                       wrap_mode: GtkWrapMode);
    pub fn gtk_text_view_get_wrap_mode(text_view: *mut GtkTextView) ->
     GtkWrapMode;
    pub fn gtk_text_view_set_editable(text_view: *mut GtkTextView,
                                      setting: gboolean);
    pub fn gtk_text_view_get_editable(text_view: *mut GtkTextView) ->
     gboolean;
    pub fn gtk_text_view_set_overwrite(text_view: *mut GtkTextView,
                                       overwrite: gboolean);
    pub fn gtk_text_view_get_overwrite(text_view: *mut GtkTextView) ->
     gboolean;
    pub fn gtk_text_view_set_accepts_tab(text_view: *mut GtkTextView,
                                         accepts_tab: gboolean);
    pub fn gtk_text_view_get_accepts_tab(text_view: *mut GtkTextView) ->
     gboolean;
    pub fn gtk_text_view_set_pixels_above_lines(text_view: *mut GtkTextView,
                                                pixels_above_lines: gint);
    pub fn gtk_text_view_get_pixels_above_lines(text_view: *mut GtkTextView)
     -> gint;
    pub fn gtk_text_view_set_pixels_below_lines(text_view: *mut GtkTextView,
                                                pixels_below_lines: gint);
    pub fn gtk_text_view_get_pixels_below_lines(text_view: *mut GtkTextView)
     -> gint;
    pub fn gtk_text_view_set_pixels_inside_wrap(text_view: *mut GtkTextView,
                                                pixels_inside_wrap: gint);
    pub fn gtk_text_view_get_pixels_inside_wrap(text_view: *mut GtkTextView)
     -> gint;
    pub fn gtk_text_view_set_justification(text_view: *mut GtkTextView,
                                           justification: GtkJustification);
    pub fn gtk_text_view_get_justification(text_view: *mut GtkTextView) ->
     GtkJustification;
    pub fn gtk_text_view_set_left_margin(text_view: *mut GtkTextView,
                                         left_margin: gint);
    pub fn gtk_text_view_get_left_margin(text_view: *mut GtkTextView) -> gint;
    pub fn gtk_text_view_set_right_margin(text_view: *mut GtkTextView,
                                          right_margin: gint);
    pub fn gtk_text_view_get_right_margin(text_view: *mut GtkTextView) ->
     gint;
    pub fn gtk_text_view_set_indent(text_view: *mut GtkTextView,
                                    indent: gint);
    pub fn gtk_text_view_get_indent(text_view: *mut GtkTextView) -> gint;
    pub fn gtk_text_view_set_tabs(text_view: *mut GtkTextView,
                                  tabs: *mut PangoTabArray);
    pub fn gtk_text_view_get_tabs(text_view: *mut GtkTextView) ->
     *mut PangoTabArray;
    pub fn gtk_text_view_get_default_attributes(text_view: *mut GtkTextView)
     -> *mut GtkTextAttributes;
    pub fn gtk_text_view_set_input_purpose(text_view: *mut GtkTextView,
                                           purpose: GtkInputPurpose);
    pub fn gtk_text_view_get_input_purpose(text_view: *mut GtkTextView) ->
     GtkInputPurpose;
    pub fn gtk_text_view_set_input_hints(text_view: *mut GtkTextView,
                                         hints: GtkInputHints);
    pub fn gtk_text_view_get_input_hints(text_view: *mut GtkTextView) ->
     GtkInputHints;
    pub fn gtk_theming_engine_get_type() -> GType;
    pub fn gtk_theming_engine_register_property(name_space: *gchar,
                                                parse_func:
                                                    GtkStylePropertyParser,
                                                pspec: *mut GParamSpec);
    pub fn gtk_theming_engine_get_property(engine: *mut GtkThemingEngine,
                                           property: *gchar,
                                           state: GtkStateFlags,
                                           value: *mut GValue);
    pub fn gtk_theming_engine_get_valist(engine: *mut GtkThemingEngine,
                                         state: GtkStateFlags, args: va_list);
    pub fn gtk_theming_engine_get(engine: *mut GtkThemingEngine,
                                  state: GtkStateFlags, ...);
    pub fn gtk_theming_engine_get_style_property(engine:
                                                     *mut GtkThemingEngine,
                                                 property_name: *gchar,
                                                 value: *mut GValue);
    pub fn gtk_theming_engine_get_style_valist(engine: *mut GtkThemingEngine,
                                               args: va_list);
    pub fn gtk_theming_engine_get_style(engine: *mut GtkThemingEngine, ...);
    pub fn gtk_theming_engine_lookup_color(engine: *mut GtkThemingEngine,
                                           color_name: *gchar,
                                           color: *mut GdkRGBA) -> gboolean;
    pub fn gtk_theming_engine_get_path(engine: *mut GtkThemingEngine) ->
     *GtkWidgetPath;
    pub fn gtk_theming_engine_has_class(engine: *mut GtkThemingEngine,
                                        style_class: *gchar) -> gboolean;
    pub fn gtk_theming_engine_has_region(engine: *mut GtkThemingEngine,
                                         style_region: *gchar,
                                         flags: *mut GtkRegionFlags) ->
     gboolean;
    pub fn gtk_theming_engine_get_state(engine: *mut GtkThemingEngine) ->
     GtkStateFlags;
    pub fn gtk_theming_engine_state_is_running(engine: *mut GtkThemingEngine,
                                               state: GtkStateType,
                                               progress: *mut gdouble) ->
     gboolean;
    pub fn gtk_theming_engine_get_direction(engine: *mut GtkThemingEngine) ->
     GtkTextDirection;
    pub fn gtk_theming_engine_get_junction_sides(engine:
                                                     *mut GtkThemingEngine) ->
     GtkJunctionSides;
    pub fn gtk_theming_engine_get_color(engine: *mut GtkThemingEngine,
                                        state: GtkStateFlags,
                                        color: *mut GdkRGBA);
    pub fn gtk_theming_engine_get_background_color(engine:
                                                       *mut GtkThemingEngine,
                                                   state: GtkStateFlags,
                                                   color: *mut GdkRGBA);
    pub fn gtk_theming_engine_get_border_color(engine: *mut GtkThemingEngine,
                                               state: GtkStateFlags,
                                               color: *mut GdkRGBA);
    pub fn gtk_theming_engine_get_border(engine: *mut GtkThemingEngine,
                                         state: GtkStateFlags,
                                         border: *mut GtkBorder);
    pub fn gtk_theming_engine_get_padding(engine: *mut GtkThemingEngine,
                                          state: GtkStateFlags,
                                          padding: *mut GtkBorder);
    pub fn gtk_theming_engine_get_margin(engine: *mut GtkThemingEngine,
                                         state: GtkStateFlags,
                                         margin: *mut GtkBorder);
    pub fn gtk_theming_engine_get_font(engine: *mut GtkThemingEngine,
                                       state: GtkStateFlags) ->
     *PangoFontDescription;
    pub fn gtk_theming_engine_load(name: *gchar) -> *mut GtkThemingEngine;
    pub fn gtk_theming_engine_get_screen(engine: *mut GtkThemingEngine) ->
     *mut GdkScreen;
    pub fn gtk_toolbar_get_type() -> GType;
    pub fn gtk_toolbar_new() -> *mut GtkWidget;
    pub fn gtk_toolbar_insert(toolbar: *mut GtkToolbar,
                              item: *mut GtkToolItem, pos: gint);
    pub fn gtk_toolbar_get_item_index(toolbar: *mut GtkToolbar,
                                      item: *mut GtkToolItem) -> gint;
    pub fn gtk_toolbar_get_n_items(toolbar: *mut GtkToolbar) -> gint;
    pub fn gtk_toolbar_get_nth_item(toolbar: *mut GtkToolbar, n: gint) ->
     *mut GtkToolItem;
    pub fn gtk_toolbar_get_show_arrow(toolbar: *mut GtkToolbar) -> gboolean;
    pub fn gtk_toolbar_set_show_arrow(toolbar: *mut GtkToolbar,
                                      show_arrow: gboolean);
    pub fn gtk_toolbar_get_style(toolbar: *mut GtkToolbar) -> GtkToolbarStyle;
    pub fn gtk_toolbar_set_style(toolbar: *mut GtkToolbar,
                                 style: GtkToolbarStyle);
    pub fn gtk_toolbar_unset_style(toolbar: *mut GtkToolbar);
    pub fn gtk_toolbar_get_icon_size(toolbar: *mut GtkToolbar) -> GtkIconSize;
    pub fn gtk_toolbar_set_icon_size(toolbar: *mut GtkToolbar,
                                     icon_size: GtkIconSize);
    pub fn gtk_toolbar_unset_icon_size(toolbar: *mut GtkToolbar);
    pub fn gtk_toolbar_get_relief_style(toolbar: *mut GtkToolbar) ->
     GtkReliefStyle;
    pub fn gtk_toolbar_get_drop_index(toolbar: *mut GtkToolbar, x: gint,
                                      y: gint) -> gint;
    pub fn gtk_toolbar_set_drop_highlight_item(toolbar: *mut GtkToolbar,
                                               tool_item: *mut GtkToolItem,
                                               index_: gint);
    pub fn _gtk_toolbar_elide_underscores(original: *gchar) -> *mut gchar;
    pub fn _gtk_toolbar_paint_space_line(widget: *mut GtkWidget,
                                         toolbar: *mut GtkToolbar,
                                         cr: *mut cairo_t);
    pub fn _gtk_toolbar_get_default_space_size() -> gint;
    pub fn gtk_tool_item_group_get_type() -> GType;
    pub fn gtk_tool_item_group_new(label: *gchar) -> *mut GtkWidget;
    pub fn gtk_tool_item_group_set_label(group: *mut GtkToolItemGroup,
                                         label: *gchar);
    pub fn gtk_tool_item_group_set_label_widget(group: *mut GtkToolItemGroup,
                                                label_widget: *mut GtkWidget);
    pub fn gtk_tool_item_group_set_collapsed(group: *mut GtkToolItemGroup,
                                             collapsed: gboolean);
    pub fn gtk_tool_item_group_set_ellipsize(group: *mut GtkToolItemGroup,
                                             ellipsize: PangoEllipsizeMode);
    pub fn gtk_tool_item_group_set_header_relief(group: *mut GtkToolItemGroup,
                                                 style: GtkReliefStyle);
    pub fn gtk_tool_item_group_get_label(group: *mut GtkToolItemGroup) ->
     *gchar;
    pub fn gtk_tool_item_group_get_label_widget(group: *mut GtkToolItemGroup)
     -> *mut GtkWidget;
    pub fn gtk_tool_item_group_get_collapsed(group: *mut GtkToolItemGroup) ->
     gboolean;
    pub fn gtk_tool_item_group_get_ellipsize(group: *mut GtkToolItemGroup) ->
     PangoEllipsizeMode;
    pub fn gtk_tool_item_group_get_header_relief(group: *mut GtkToolItemGroup)
     -> GtkReliefStyle;
    pub fn gtk_tool_item_group_insert(group: *mut GtkToolItemGroup,
                                      item: *mut GtkToolItem, position: gint);
    pub fn gtk_tool_item_group_set_item_position(group: *mut GtkToolItemGroup,
                                                 item: *mut GtkToolItem,
                                                 position: gint);
    pub fn gtk_tool_item_group_get_item_position(group: *mut GtkToolItemGroup,
                                                 item: *mut GtkToolItem) ->
     gint;
    pub fn gtk_tool_item_group_get_n_items(group: *mut GtkToolItemGroup) ->
     guint;
    pub fn gtk_tool_item_group_get_nth_item(group: *mut GtkToolItemGroup,
                                            index: guint) -> *mut GtkToolItem;
    pub fn gtk_tool_item_group_get_drop_item(group: *mut GtkToolItemGroup,
                                             x: gint, y: gint) ->
     *mut GtkToolItem;
    pub fn gtk_tool_palette_get_type() -> GType;
    pub fn gtk_tool_palette_new() -> *mut GtkWidget;
    pub fn gtk_tool_palette_set_group_position(palette: *mut GtkToolPalette,
                                               group: *mut GtkToolItemGroup,
                                               position: gint);
    pub fn gtk_tool_palette_set_exclusive(palette: *mut GtkToolPalette,
                                          group: *mut GtkToolItemGroup,
                                          exclusive: gboolean);
    pub fn gtk_tool_palette_set_expand(palette: *mut GtkToolPalette,
                                       group: *mut GtkToolItemGroup,
                                       expand: gboolean);
    pub fn gtk_tool_palette_get_group_position(palette: *mut GtkToolPalette,
                                               group: *mut GtkToolItemGroup)
     -> gint;
    pub fn gtk_tool_palette_get_exclusive(palette: *mut GtkToolPalette,
                                          group: *mut GtkToolItemGroup) ->
     gboolean;
    pub fn gtk_tool_palette_get_expand(palette: *mut GtkToolPalette,
                                       group: *mut GtkToolItemGroup) ->
     gboolean;
    pub fn gtk_tool_palette_set_icon_size(palette: *mut GtkToolPalette,
                                          icon_size: GtkIconSize);
    pub fn gtk_tool_palette_unset_icon_size(palette: *mut GtkToolPalette);
    pub fn gtk_tool_palette_set_style(palette: *mut GtkToolPalette,
                                      style: GtkToolbarStyle);
    pub fn gtk_tool_palette_unset_style(palette: *mut GtkToolPalette);
    pub fn gtk_tool_palette_get_icon_size(palette: *mut GtkToolPalette) ->
     GtkIconSize;
    pub fn gtk_tool_palette_get_style(palette: *mut GtkToolPalette) ->
     GtkToolbarStyle;
    pub fn gtk_tool_palette_get_drop_item(palette: *mut GtkToolPalette,
                                          x: gint, y: gint) ->
     *mut GtkToolItem;
    pub fn gtk_tool_palette_get_drop_group(palette: *mut GtkToolPalette,
                                           x: gint, y: gint) ->
     *mut GtkToolItemGroup;
    pub fn gtk_tool_palette_get_drag_item(palette: *mut GtkToolPalette,
                                          selection: *GtkSelectionData) ->
     *mut GtkWidget;
    pub fn gtk_tool_palette_set_drag_source(palette: *mut GtkToolPalette,
                                            targets:
                                                GtkToolPaletteDragTargets);
    pub fn gtk_tool_palette_add_drag_dest(palette: *mut GtkToolPalette,
                                          widget: *mut GtkWidget,
                                          flags: GtkDestDefaults,
                                          targets: GtkToolPaletteDragTargets,
                                          actions: GdkDragAction);
    pub fn gtk_tool_palette_get_hadjustment(palette: *mut GtkToolPalette) ->
     *mut GtkAdjustment;
    pub fn gtk_tool_palette_get_vadjustment(palette: *mut GtkToolPalette) ->
     *mut GtkAdjustment;
    pub fn gtk_tool_palette_get_drag_target_item() -> *GtkTargetEntry;
    pub fn gtk_tool_palette_get_drag_target_group() -> *GtkTargetEntry;
    pub fn gtk_tool_shell_get_type() -> GType;
    pub fn gtk_tool_shell_get_icon_size(shell: *mut GtkToolShell) ->
     GtkIconSize;
    pub fn gtk_tool_shell_get_orientation(shell: *mut GtkToolShell) ->
     GtkOrientation;
    pub fn gtk_tool_shell_get_style(shell: *mut GtkToolShell) ->
     GtkToolbarStyle;
    pub fn gtk_tool_shell_get_relief_style(shell: *mut GtkToolShell) ->
     GtkReliefStyle;
    pub fn gtk_tool_shell_rebuild_menu(shell: *mut GtkToolShell);
    pub fn gtk_tool_shell_get_text_orientation(shell: *mut GtkToolShell) ->
     GtkOrientation;
    pub fn gtk_tool_shell_get_text_alignment(shell: *mut GtkToolShell) ->
     gfloat;
    pub fn gtk_tool_shell_get_ellipsize_mode(shell: *mut GtkToolShell) ->
     PangoEllipsizeMode;
    pub fn gtk_tool_shell_get_text_size_group(shell: *mut GtkToolShell) ->
     *mut GtkSizeGroup;
    pub fn gtk_test_init(argcp: *mut c_int,
                         argvp: *mut *mut *mut c_schar, ...);
    pub fn gtk_test_register_all_types();
    pub fn gtk_test_list_all_types(n_types: *mut guint) -> *GType;
    pub fn gtk_test_find_widget(widget: *mut GtkWidget, label_pattern: *gchar,
                                widget_type: GType) -> *mut GtkWidget;
    pub fn gtk_test_create_widget(widget_type: GType,
                                  first_property_name: *gchar, ...) ->
     *mut GtkWidget;
    pub fn gtk_test_create_simple_window(window_title: *gchar,
                                         dialog_text: *gchar) ->
     *mut GtkWidget;
    pub fn gtk_test_display_button_window(window_title: *gchar,
                                          dialog_text: *gchar, ...) ->
     *mut GtkWidget;
    pub fn gtk_test_slider_set_perc(widget: *mut GtkWidget,
                                    percentage: c_double);
    pub fn gtk_test_slider_get_value(widget: *mut GtkWidget) -> c_double;
    pub fn gtk_test_spin_button_click(spinner: *mut GtkSpinButton,
                                      button: guint, upwards: gboolean) ->
     gboolean;
    pub fn gtk_test_widget_wait_for_draw(widget: *mut GtkWidget);
    pub fn gtk_test_widget_click(widget: *mut GtkWidget, button: guint,
                                 modifiers: GdkModifierType) -> gboolean;
    pub fn gtk_test_widget_send_key(widget: *mut GtkWidget, keyval: guint,
                                    modifiers: GdkModifierType) -> gboolean;
    pub fn gtk_test_text_set(widget: *mut GtkWidget, string: *gchar);
    pub fn gtk_test_text_get(widget: *mut GtkWidget) -> *mut gchar;
    pub fn gtk_test_find_sibling(base_widget: *mut GtkWidget,
                                 widget_type: GType) -> *mut GtkWidget;
    pub fn gtk_test_find_label(widget: *mut GtkWidget, label_pattern: *gchar)
     -> *mut GtkWidget;
    pub fn gtk_tree_drag_source_get_type() -> GType;
    pub fn gtk_tree_drag_source_row_draggable(drag_source:
                                                  *mut GtkTreeDragSource,
                                              path: *mut GtkTreePath) ->
     gboolean;
    pub fn gtk_tree_drag_source_drag_data_delete(drag_source:
                                                     *mut GtkTreeDragSource,
                                                 path: *mut GtkTreePath) ->
     gboolean;
    pub fn gtk_tree_drag_source_drag_data_get(drag_source:
                                                  *mut GtkTreeDragSource,
                                              path: *mut GtkTreePath,
                                              selection_data:
                                                  *mut GtkSelectionData) ->
     gboolean;
    pub fn gtk_tree_drag_dest_get_type() -> GType;
    pub fn gtk_tree_drag_dest_drag_data_received(drag_dest:
                                                     *mut GtkTreeDragDest,
                                                 dest: *mut GtkTreePath,
                                                 selection_data:
                                                     *mut GtkSelectionData) ->
     gboolean;
    pub fn gtk_tree_drag_dest_row_drop_possible(drag_dest:
                                                    *mut GtkTreeDragDest,
                                                dest_path: *mut GtkTreePath,
                                                selection_data:
                                                    *mut GtkSelectionData) ->
     gboolean;
    pub fn gtk_tree_set_row_drag_data(selection_data: *mut GtkSelectionData,
                                      tree_model: *mut GtkTreeModel,
                                      path: *mut GtkTreePath) -> gboolean;
    pub fn gtk_tree_get_row_drag_data(selection_data: *mut GtkSelectionData,
                                      tree_model: *mut *mut GtkTreeModel,
                                      path: *mut *mut GtkTreePath) ->
     gboolean;
    pub fn gtk_tree_model_sort_get_type() -> GType;
    pub fn gtk_tree_model_sort_new_with_model(child_model: *mut GtkTreeModel)
     -> *mut GtkTreeModel;
    pub fn gtk_tree_model_sort_get_model(tree_model: *mut GtkTreeModelSort) ->
     *mut GtkTreeModel;
    pub fn gtk_tree_model_sort_convert_child_path_to_path(tree_model_sort:
                                                              *mut GtkTreeModelSort,
                                                          child_path:
                                                              *mut GtkTreePath)
     -> *mut GtkTreePath;
    pub fn gtk_tree_model_sort_convert_child_iter_to_iter(tree_model_sort:
                                                              *mut GtkTreeModelSort,
                                                          sort_iter:
                                                              *mut GtkTreeIter,
                                                          child_iter:
                                                              *mut GtkTreeIter)
     -> gboolean;
    pub fn gtk_tree_model_sort_convert_path_to_child_path(tree_model_sort:
                                                              *mut GtkTreeModelSort,
                                                          sorted_path:
                                                              *mut GtkTreePath)
     -> *mut GtkTreePath;
    pub fn gtk_tree_model_sort_convert_iter_to_child_iter(tree_model_sort:
                                                              *mut GtkTreeModelSort,
                                                          child_iter:
                                                              *mut GtkTreeIter,
                                                          sorted_iter:
                                                              *mut GtkTreeIter);
    pub fn gtk_tree_model_sort_reset_default_sort_func(tree_model_sort:
                                                           *mut GtkTreeModelSort);
    pub fn gtk_tree_model_sort_clear_cache(tree_model_sort:
                                               *mut GtkTreeModelSort);
    pub fn gtk_tree_model_sort_iter_is_valid(tree_model_sort:
                                                 *mut GtkTreeModelSort,
                                             iter: *mut GtkTreeIter) ->
     gboolean;
    pub fn gtk_tree_selection_get_type() -> GType;
    pub fn gtk_tree_selection_set_mode(selection: *mut GtkTreeSelection,
                                       _type: GtkSelectionMode);
    pub fn gtk_tree_selection_get_mode(selection: *mut GtkTreeSelection) ->
     GtkSelectionMode;
    pub fn gtk_tree_selection_set_select_function(selection:
                                                      *mut GtkTreeSelection,
                                                  func: GtkTreeSelectionFunc,
                                                  data: gpointer,
                                                  destroy: GDestroyNotify);
    pub fn gtk_tree_selection_get_user_data(selection: *mut GtkTreeSelection)
     -> gpointer;
    pub fn gtk_tree_selection_get_tree_view(selection: *mut GtkTreeSelection)
     -> *mut GtkTreeView;
    pub fn gtk_tree_selection_get_select_function(selection:
                                                      *mut GtkTreeSelection)
     -> GtkTreeSelectionFunc;
    pub fn gtk_tree_selection_get_selected(selection: *mut GtkTreeSelection,
                                           model: *mut *mut GtkTreeModel,
                                           iter: *mut GtkTreeIter) ->
     gboolean;
    pub fn gtk_tree_selection_get_selected_rows(selection:
                                                    *mut GtkTreeSelection,
                                                model: *mut *mut GtkTreeModel)
     -> *mut GList;
    pub fn gtk_tree_selection_count_selected_rows(selection:
                                                      *mut GtkTreeSelection)
     -> gint;
    pub fn gtk_tree_selection_selected_foreach(selection:
                                                   *mut GtkTreeSelection,
                                               func:
                                                   GtkTreeSelectionForeachFunc,
                                               data: gpointer);
    pub fn gtk_tree_selection_select_path(selection: *mut GtkTreeSelection,
                                          path: *mut GtkTreePath);
    pub fn gtk_tree_selection_unselect_path(selection: *mut GtkTreeSelection,
                                            path: *mut GtkTreePath);
    pub fn gtk_tree_selection_select_iter(selection: *mut GtkTreeSelection,
                                          iter: *mut GtkTreeIter);
    pub fn gtk_tree_selection_unselect_iter(selection: *mut GtkTreeSelection,
                                            iter: *mut GtkTreeIter);
    pub fn gtk_tree_selection_path_is_selected(selection:
                                                   *mut GtkTreeSelection,
                                               path: *mut GtkTreePath) ->
     gboolean;
    pub fn gtk_tree_selection_iter_is_selected(selection:
                                                   *mut GtkTreeSelection,
                                               iter: *mut GtkTreeIter) ->
     gboolean;
    pub fn gtk_tree_selection_select_all(selection: *mut GtkTreeSelection);
    pub fn gtk_tree_selection_unselect_all(selection: *mut GtkTreeSelection);
    pub fn gtk_tree_selection_select_range(selection: *mut GtkTreeSelection,
                                           start_path: *mut GtkTreePath,
                                           end_path: *mut GtkTreePath);
    pub fn gtk_tree_selection_unselect_range(selection: *mut GtkTreeSelection,
                                             start_path: *mut GtkTreePath,
                                             end_path: *mut GtkTreePath);
    pub fn gtk_tree_store_get_type() -> GType;
    pub fn gtk_tree_store_new(n_columns: gint, ...) -> *mut GtkTreeStore;
    pub fn gtk_tree_store_newv(n_columns: gint, types: *mut GType) ->
     *mut GtkTreeStore;
    pub fn gtk_tree_store_set_column_types(tree_store: *mut GtkTreeStore,
                                           n_columns: gint,
                                           types: *mut GType);
    pub fn gtk_tree_store_set_value(tree_store: *mut GtkTreeStore,
                                    iter: *mut GtkTreeIter, column: gint,
                                    value: *mut GValue);
    pub fn gtk_tree_store_set(tree_store: *mut GtkTreeStore,
                              iter: *mut GtkTreeIter, ...);
    pub fn gtk_tree_store_set_valuesv(tree_store: *mut GtkTreeStore,
                                      iter: *mut GtkTreeIter,
                                      columns: *mut gint, values: *mut GValue,
                                      n_values: gint);
    pub fn gtk_tree_store_set_valist(tree_store: *mut GtkTreeStore,
                                     iter: *mut GtkTreeIter,
                                     var_args: va_list);
    pub fn gtk_tree_store_remove(tree_store: *mut GtkTreeStore,
                                 iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_store_insert(tree_store: *mut GtkTreeStore,
                                 iter: *mut GtkTreeIter,
                                 parent: *mut GtkTreeIter, position: gint);
    pub fn gtk_tree_store_insert_before(tree_store: *mut GtkTreeStore,
                                        iter: *mut GtkTreeIter,
                                        parent: *mut GtkTreeIter,
                                        sibling: *mut GtkTreeIter);
    pub fn gtk_tree_store_insert_after(tree_store: *mut GtkTreeStore,
                                       iter: *mut GtkTreeIter,
                                       parent: *mut GtkTreeIter,
                                       sibling: *mut GtkTreeIter);
    pub fn gtk_tree_store_insert_with_values(tree_store: *mut GtkTreeStore,
                                             iter: *mut GtkTreeIter,
                                             parent: *mut GtkTreeIter,
                                             position: gint, ...);
    pub fn gtk_tree_store_insert_with_valuesv(tree_store: *mut GtkTreeStore,
                                              iter: *mut GtkTreeIter,
                                              parent: *mut GtkTreeIter,
                                              position: gint,
                                              columns: *mut gint,
                                              values: *mut GValue,
                                              n_values: gint);
    pub fn gtk_tree_store_prepend(tree_store: *mut GtkTreeStore,
                                  iter: *mut GtkTreeIter,
                                  parent: *mut GtkTreeIter);
    pub fn gtk_tree_store_append(tree_store: *mut GtkTreeStore,
                                 iter: *mut GtkTreeIter,
                                 parent: *mut GtkTreeIter);
    pub fn gtk_tree_store_is_ancestor(tree_store: *mut GtkTreeStore,
                                      iter: *mut GtkTreeIter,
                                      descendant: *mut GtkTreeIter) ->
     gboolean;
    pub fn gtk_tree_store_iter_depth(tree_store: *mut GtkTreeStore,
                                     iter: *mut GtkTreeIter) -> gint;
    pub fn gtk_tree_store_clear(tree_store: *mut GtkTreeStore);
    pub fn gtk_tree_store_iter_is_valid(tree_store: *mut GtkTreeStore,
                                        iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_store_reorder(tree_store: *mut GtkTreeStore,
                                  parent: *mut GtkTreeIter,
                                  new_order: *mut gint);
    pub fn gtk_tree_store_swap(tree_store: *mut GtkTreeStore,
                               a: *mut GtkTreeIter, b: *mut GtkTreeIter);
    pub fn gtk_tree_store_move_before(tree_store: *mut GtkTreeStore,
                                      iter: *mut GtkTreeIter,
                                      position: *mut GtkTreeIter);
    pub fn gtk_tree_store_move_after(tree_store: *mut GtkTreeStore,
                                     iter: *mut GtkTreeIter,
                                     position: *mut GtkTreeIter);
    pub fn gtk_license_get_type() -> GType;
    pub fn gtk_accel_flags_get_type() -> GType;
    pub fn gtk_application_inhibit_flags_get_type() -> GType;
    pub fn gtk_assistant_page_type_get_type() -> GType;
    pub fn gtk_builder_error_get_type() -> GType;
    pub fn gtk_calendar_display_options_get_type() -> GType;
    pub fn gtk_cell_renderer_state_get_type() -> GType;
    pub fn gtk_cell_renderer_mode_get_type() -> GType;
    pub fn gtk_cell_renderer_accel_mode_get_type() -> GType;
    pub fn gtk_css_provider_error_get_type() -> GType;
    pub fn gtk_css_section_type_get_type() -> GType;
    pub fn gtk_debug_flag_get_type() -> GType;
    pub fn gtk_dialog_flags_get_type() -> GType;
    pub fn gtk_response_type_get_type() -> GType;
    pub fn gtk_dest_defaults_get_type() -> GType;
    pub fn gtk_target_flags_get_type() -> GType;
    pub fn gtk_entry_icon_position_get_type() -> GType;
    pub fn gtk_align_get_type() -> GType;
    pub fn gtk_arrow_placement_get_type() -> GType;
    pub fn gtk_arrow_type_get_type() -> GType;
    pub fn gtk_attach_options_get_type() -> GType;
    pub fn gtk_baseline_position_get_type() -> GType;
    pub fn gtk_button_box_style_get_type() -> GType;
    pub fn gtk_delete_type_get_type() -> GType;
    pub fn gtk_direction_type_get_type() -> GType;
    pub fn gtk_expander_style_get_type() -> GType;
    pub fn gtk_icon_size_get_type() -> GType;
    pub fn gtk_sensitivity_type_get_type() -> GType;
    pub fn gtk_text_direction_get_type() -> GType;
    pub fn gtk_justification_get_type() -> GType;
    pub fn gtk_menu_direction_type_get_type() -> GType;
    pub fn gtk_message_type_get_type() -> GType;
    pub fn gtk_movement_step_get_type() -> GType;
    pub fn gtk_scroll_step_get_type() -> GType;
    pub fn gtk_orientation_get_type() -> GType;
    pub fn gtk_corner_type_get_type() -> GType;
    pub fn gtk_pack_type_get_type() -> GType;
    pub fn gtk_path_priority_type_get_type() -> GType;
    pub fn gtk_path_type_get_type() -> GType;
    pub fn gtk_policy_type_get_type() -> GType;
    pub fn gtk_position_type_get_type() -> GType;
    pub fn gtk_relief_style_get_type() -> GType;
    pub fn gtk_resize_mode_get_type() -> GType;
    pub fn gtk_scroll_type_get_type() -> GType;
    pub fn gtk_selection_mode_get_type() -> GType;
    pub fn gtk_shadow_type_get_type() -> GType;
    pub fn gtk_state_type_get_type() -> GType;
    pub fn gtk_toolbar_style_get_type() -> GType;
    pub fn gtk_window_position_get_type() -> GType;
    pub fn gtk_window_type_get_type() -> GType;
    pub fn gtk_wrap_mode_get_type() -> GType;
    pub fn gtk_sort_type_get_type() -> GType;
    pub fn gtk_im_preedit_style_get_type() -> GType;
    pub fn gtk_im_status_style_get_type() -> GType;
    pub fn gtk_pack_direction_get_type() -> GType;
    pub fn gtk_print_pages_get_type() -> GType;
    pub fn gtk_page_set_get_type() -> GType;
    pub fn gtk_number_up_layout_get_type() -> GType;
    pub fn gtk_page_orientation_get_type() -> GType;
    pub fn gtk_print_quality_get_type() -> GType;
    pub fn gtk_print_duplex_get_type() -> GType;
    pub fn gtk_unit_get_type() -> GType;
    pub fn gtk_tree_view_grid_lines_get_type() -> GType;
    pub fn gtk_drag_result_get_type() -> GType;
    pub fn gtk_size_group_mode_get_type() -> GType;
    pub fn gtk_size_request_mode_get_type() -> GType;
    pub fn gtk_scrollable_policy_get_type() -> GType;
    pub fn gtk_state_flags_get_type() -> GType;
    pub fn gtk_region_flags_get_type() -> GType;
    pub fn gtk_junction_sides_get_type() -> GType;
    pub fn gtk_border_style_get_type() -> GType;
    pub fn gtk_level_bar_mode_get_type() -> GType;
    pub fn gtk_input_purpose_get_type() -> GType;
    pub fn gtk_input_hints_get_type() -> GType;
    pub fn gtk_file_chooser_action_get_type() -> GType;
    pub fn gtk_file_chooser_confirmation_get_type() -> GType;
    pub fn gtk_file_chooser_error_get_type() -> GType;
    pub fn gtk_file_filter_flags_get_type() -> GType;
    pub fn gtk_icon_lookup_flags_get_type() -> GType;
    pub fn gtk_icon_theme_error_get_type() -> GType;
    pub fn gtk_icon_view_drop_position_get_type() -> GType;
    pub fn gtk_image_type_get_type() -> GType;
    pub fn gtk_buttons_type_get_type() -> GType;
    pub fn gtk_notebook_tab_get_type() -> GType;
    pub fn gtk_places_open_flags_get_type() -> GType;
    pub fn gtk_print_status_get_type() -> GType;
    pub fn gtk_print_operation_result_get_type() -> GType;
    pub fn gtk_print_operation_action_get_type() -> GType;
    pub fn gtk_print_error_get_type() -> GType;
    pub fn gtk_recent_sort_type_get_type() -> GType;
    pub fn gtk_recent_chooser_error_get_type() -> GType;
    pub fn gtk_recent_filter_flags_get_type() -> GType;
    pub fn gtk_recent_manager_error_get_type() -> GType;
    pub fn gtk_revealer_transition_type_get_type() -> GType;
    pub fn gtk_spin_button_update_policy_get_type() -> GType;
    pub fn gtk_spin_type_get_type() -> GType;
    pub fn gtk_stack_transition_type_get_type() -> GType;
    pub fn gtk_text_buffer_target_info_get_type() -> GType;
    pub fn gtk_text_search_flags_get_type() -> GType;
    pub fn gtk_text_window_type_get_type() -> GType;
    pub fn gtk_toolbar_space_style_get_type() -> GType;
    pub fn gtk_tool_palette_drag_targets_get_type() -> GType;
    pub fn gtk_tree_model_flags_get_type() -> GType;
    pub fn gtk_tree_view_drop_position_get_type() -> GType;
    pub fn gtk_tree_view_column_sizing_get_type() -> GType;
    pub fn gtk_widget_help_type_get_type() -> GType;
    pub fn gtk_rc_flags_get_type() -> GType;
    pub fn gtk_rc_token_type_get_type() -> GType;
    pub fn gtk_ui_manager_item_type_get_type() -> GType;
    pub fn gtk_viewport_get_type() -> GType;
    pub fn gtk_viewport_new(hadjustment: *mut GtkAdjustment,
                            vadjustment: *mut GtkAdjustment) ->
     *mut GtkWidget;
    pub fn gtk_viewport_get_hadjustment(viewport: *mut GtkViewport) ->
     *mut GtkAdjustment;
    pub fn gtk_viewport_get_vadjustment(viewport: *mut GtkViewport) ->
     *mut GtkAdjustment;
    pub fn gtk_viewport_set_hadjustment(viewport: *mut GtkViewport,
                                        adjustment: *mut GtkAdjustment);
    pub fn gtk_viewport_set_vadjustment(viewport: *mut GtkViewport,
                                        adjustment: *mut GtkAdjustment);
    pub fn gtk_viewport_set_shadow_type(viewport: *mut GtkViewport,
                                        _type: GtkShadowType);
    pub fn gtk_viewport_get_shadow_type(viewport: *mut GtkViewport) ->
     GtkShadowType;
    pub fn gtk_viewport_get_bin_window(viewport: *mut GtkViewport) ->
     *mut GdkWindow;
    pub fn gtk_viewport_get_view_window(viewport: *mut GtkViewport) ->
     *mut GdkWindow;
    pub fn gtk_volume_button_get_type() -> GType;
    pub fn gtk_volume_button_new() -> *mut GtkWidget;
    pub fn gtk_widget_path_get_type() -> GType;
    pub fn gtk_widget_path_new() -> *mut GtkWidgetPath;
    pub fn gtk_widget_path_copy(path: *GtkWidgetPath) -> *mut GtkWidgetPath;
    pub fn gtk_widget_path_ref(path: *mut GtkWidgetPath) ->
     *mut GtkWidgetPath;
    pub fn gtk_widget_path_unref(path: *mut GtkWidgetPath);
    pub fn gtk_widget_path_free(path: *mut GtkWidgetPath);
    pub fn gtk_widget_path_to_string(path: *GtkWidgetPath) -> *mut c_schar;
    pub fn gtk_widget_path_length(path: *GtkWidgetPath) -> gint;
    pub fn gtk_widget_path_append_type(path: *mut GtkWidgetPath, _type: GType)
     -> gint;
    pub fn gtk_widget_path_prepend_type(path: *mut GtkWidgetPath,
                                        _type: GType);
    pub fn gtk_widget_path_append_with_siblings(path: *mut GtkWidgetPath,
                                                siblings: *mut GtkWidgetPath,
                                                sibling_index: guint) -> gint;
    pub fn gtk_widget_path_append_for_widget(path: *mut GtkWidgetPath,
                                             widget: *mut GtkWidget) -> gint;
    pub fn gtk_widget_path_iter_get_object_type(path: *GtkWidgetPath,
                                                pos: gint) -> GType;
    pub fn gtk_widget_path_iter_set_object_type(path: *mut GtkWidgetPath,
                                                pos: gint, _type: GType);
    pub fn gtk_widget_path_iter_get_siblings(path: *GtkWidgetPath, pos: gint)
     -> *GtkWidgetPath;
    pub fn gtk_widget_path_iter_get_sibling_index(path: *GtkWidgetPath,
                                                  pos: gint) -> guint;
    pub fn gtk_widget_path_iter_get_name(path: *GtkWidgetPath, pos: gint) ->
     *gchar;
    pub fn gtk_widget_path_iter_set_name(path: *mut GtkWidgetPath, pos: gint,
                                         name: *gchar);
    pub fn gtk_widget_path_iter_has_name(path: *GtkWidgetPath, pos: gint,
                                         name: *gchar) -> gboolean;
    pub fn gtk_widget_path_iter_has_qname(path: *GtkWidgetPath, pos: gint,
                                          qname: GQuark) -> gboolean;
    pub fn gtk_widget_path_iter_add_class(path: *mut GtkWidgetPath, pos: gint,
                                          name: *gchar);
    pub fn gtk_widget_path_iter_remove_class(path: *mut GtkWidgetPath,
                                             pos: gint, name: *gchar);
    pub fn gtk_widget_path_iter_clear_classes(path: *mut GtkWidgetPath,
                                              pos: gint);
    pub fn gtk_widget_path_iter_list_classes(path: *GtkWidgetPath, pos: gint)
     -> *mut GSList;
    pub fn gtk_widget_path_iter_has_class(path: *GtkWidgetPath, pos: gint,
                                          name: *gchar) -> gboolean;
    pub fn gtk_widget_path_iter_has_qclass(path: *GtkWidgetPath, pos: gint,
                                           qname: GQuark) -> gboolean;
    pub fn gtk_widget_path_iter_add_region(path: *mut GtkWidgetPath,
                                           pos: gint, name: *gchar,
                                           flags: GtkRegionFlags);
    pub fn gtk_widget_path_iter_remove_region(path: *mut GtkWidgetPath,
                                              pos: gint, name: *gchar);
    pub fn gtk_widget_path_iter_clear_regions(path: *mut GtkWidgetPath,
                                              pos: gint);
    pub fn gtk_widget_path_iter_list_regions(path: *GtkWidgetPath, pos: gint)
     -> *mut GSList;
    pub fn gtk_widget_path_iter_has_region(path: *GtkWidgetPath, pos: gint,
                                           name: *gchar,
                                           flags: *mut GtkRegionFlags) ->
     gboolean;
    pub fn gtk_widget_path_iter_has_qregion(path: *GtkWidgetPath, pos: gint,
                                            qname: GQuark,
                                            flags: *mut GtkRegionFlags) ->
     gboolean;
    pub fn gtk_widget_path_get_object_type(path: *GtkWidgetPath) -> GType;
    pub fn gtk_widget_path_is_type(path: *GtkWidgetPath, _type: GType) ->
     gboolean;
    pub fn gtk_widget_path_has_parent(path: *GtkWidgetPath, _type: GType) ->
     gboolean;
    pub fn gtk_action_get_type() -> GType;
    pub fn gtk_action_new(name: *gchar, label: *gchar, tooltip: *gchar,
                          stock_id: *gchar) -> *mut GtkAction;
    pub fn gtk_action_get_name(action: *mut GtkAction) -> *gchar;
    pub fn gtk_action_is_sensitive(action: *mut GtkAction) -> gboolean;
    pub fn gtk_action_get_sensitive(action: *mut GtkAction) -> gboolean;
    pub fn gtk_action_set_sensitive(action: *mut GtkAction,
                                    sensitive: gboolean);
    pub fn gtk_action_is_visible(action: *mut GtkAction) -> gboolean;
    pub fn gtk_action_get_visible(action: *mut GtkAction) -> gboolean;
    pub fn gtk_action_set_visible(action: *mut GtkAction, visible: gboolean);
    pub fn gtk_action_activate(action: *mut GtkAction);
    pub fn gtk_action_create_icon(action: *mut GtkAction,
                                  icon_size: GtkIconSize) -> *mut GtkWidget;
    pub fn gtk_action_create_menu_item(action: *mut GtkAction) ->
     *mut GtkWidget;
    pub fn gtk_action_create_tool_item(action: *mut GtkAction) ->
     *mut GtkWidget;
    pub fn gtk_action_create_menu(action: *mut GtkAction) -> *mut GtkWidget;
    pub fn gtk_action_get_proxies(action: *mut GtkAction) -> *mut GSList;
    pub fn gtk_action_connect_accelerator(action: *mut GtkAction);
    pub fn gtk_action_disconnect_accelerator(action: *mut GtkAction);
    pub fn gtk_action_get_accel_path(action: *mut GtkAction) -> *gchar;
    pub fn gtk_action_get_accel_closure(action: *mut GtkAction) ->
     *mut GClosure;
    pub fn gtk_action_block_activate(action: *mut GtkAction);
    pub fn gtk_action_unblock_activate(action: *mut GtkAction);
    pub fn _gtk_action_add_to_proxy_list(action: *mut GtkAction,
                                         proxy: *mut GtkWidget);
    pub fn _gtk_action_remove_from_proxy_list(action: *mut GtkAction,
                                              proxy: *mut GtkWidget);
    pub fn _gtk_action_emit_activate(action: *mut GtkAction);
    pub fn gtk_action_set_accel_path(action: *mut GtkAction,
                                     accel_path: *gchar);
    pub fn gtk_action_set_accel_group(action: *mut GtkAction,
                                      accel_group: *mut GtkAccelGroup);
    pub fn _gtk_action_sync_menu_visible(action: *mut GtkAction,
                                         proxy: *mut GtkWidget,
                                         empty: gboolean);
    pub fn gtk_action_set_label(action: *mut GtkAction, label: *gchar);
    pub fn gtk_action_get_label(action: *mut GtkAction) -> *gchar;
    pub fn gtk_action_set_short_label(action: *mut GtkAction,
                                      short_label: *gchar);
    pub fn gtk_action_get_short_label(action: *mut GtkAction) -> *gchar;
    pub fn gtk_action_set_tooltip(action: *mut GtkAction, tooltip: *gchar);
    pub fn gtk_action_get_tooltip(action: *mut GtkAction) -> *gchar;
    pub fn gtk_action_set_stock_id(action: *mut GtkAction, stock_id: *gchar);
    pub fn gtk_action_get_stock_id(action: *mut GtkAction) -> *gchar;
    pub fn gtk_action_set_gicon(action: *mut GtkAction, icon: *mut GIcon);
    pub fn gtk_action_get_gicon(action: *mut GtkAction) -> *mut GIcon;
    pub fn gtk_action_set_icon_name(action: *mut GtkAction,
                                    icon_name: *gchar);
    pub fn gtk_action_get_icon_name(action: *mut GtkAction) -> *gchar;
    pub fn gtk_action_set_visible_horizontal(action: *mut GtkAction,
                                             visible_horizontal: gboolean);
    pub fn gtk_action_get_visible_horizontal(action: *mut GtkAction) ->
     gboolean;
    pub fn gtk_action_set_visible_vertical(action: *mut GtkAction,
                                           visible_vertical: gboolean);
    pub fn gtk_action_get_visible_vertical(action: *mut GtkAction) ->
     gboolean;
    pub fn gtk_action_set_is_important(action: *mut GtkAction,
                                       is_important: gboolean);
    pub fn gtk_action_get_is_important(action: *mut GtkAction) -> gboolean;
    pub fn gtk_action_set_always_show_image(action: *mut GtkAction,
                                            always_show: gboolean);
    pub fn gtk_action_get_always_show_image(action: *mut GtkAction) ->
     gboolean;
    pub fn gtk_activatable_get_type() -> GType;
    pub fn gtk_activatable_sync_action_properties(activatable:
                                                      *mut GtkActivatable,
                                                  action: *mut GtkAction);
    pub fn gtk_activatable_set_related_action(activatable:
                                                  *mut GtkActivatable,
                                              action: *mut GtkAction);
    pub fn gtk_activatable_get_related_action(activatable:
                                                  *mut GtkActivatable) ->
     *mut GtkAction;
    pub fn gtk_activatable_set_use_action_appearance(activatable:
                                                         *mut GtkActivatable,
                                                     use_appearance:
                                                         gboolean);
    pub fn gtk_activatable_get_use_action_appearance(activatable:
                                                         *mut GtkActivatable)
     -> gboolean;
    pub fn gtk_activatable_do_set_related_action(activatable:
                                                     *mut GtkActivatable,
                                                 action: *mut GtkAction);
    pub fn gtk_stock_add(items: *GtkStockItem, n_items: guint);
    pub fn gtk_stock_add_static(items: *GtkStockItem, n_items: guint);
    pub fn gtk_stock_lookup(stock_id: *gchar, item: *mut GtkStockItem) ->
     gboolean;
    pub fn gtk_stock_list_ids() -> *mut GSList;
    pub fn gtk_stock_item_copy(item: *GtkStockItem) -> *mut GtkStockItem;
    pub fn gtk_stock_item_free(item: *mut GtkStockItem);
    pub fn gtk_stock_set_translate_func(domain: *gchar,
                                        func: GtkTranslateFunc,
                                        data: gpointer,
                                        notify: GDestroyNotify);
    pub fn gtk_action_group_get_type() -> GType;
    pub fn gtk_action_group_new(name: *gchar) -> *mut GtkActionGroup;
    pub fn gtk_action_group_get_name(action_group: *mut GtkActionGroup) ->
     *gchar;
    pub fn gtk_action_group_get_sensitive(action_group: *mut GtkActionGroup)
     -> gboolean;
    pub fn gtk_action_group_set_sensitive(action_group: *mut GtkActionGroup,
                                          sensitive: gboolean);
    pub fn gtk_action_group_get_visible(action_group: *mut GtkActionGroup) ->
     gboolean;
    pub fn gtk_action_group_set_visible(action_group: *mut GtkActionGroup,
                                        visible: gboolean);
    pub fn gtk_action_group_get_accel_group(action_group: *mut GtkActionGroup)
     -> *mut GtkAccelGroup;
    pub fn gtk_action_group_set_accel_group(action_group: *mut GtkActionGroup,
                                            accel_group: *mut GtkAccelGroup);
    pub fn gtk_action_group_get_action(action_group: *mut GtkActionGroup,
                                       action_name: *gchar) -> *mut GtkAction;
    pub fn gtk_action_group_list_actions(action_group: *mut GtkActionGroup) ->
     *mut GList;
    pub fn gtk_action_group_add_action(action_group: *mut GtkActionGroup,
                                       action: *mut GtkAction);
    pub fn gtk_action_group_add_action_with_accel(action_group:
                                                      *mut GtkActionGroup,
                                                  action: *mut GtkAction,
                                                  accelerator: *gchar);
    pub fn gtk_action_group_remove_action(action_group: *mut GtkActionGroup,
                                          action: *mut GtkAction);
    pub fn gtk_action_group_add_actions(action_group: *mut GtkActionGroup,
                                        entries: *GtkActionEntry,
                                        n_entries: guint,
                                        user_data: gpointer);
    pub fn gtk_action_group_add_toggle_actions(action_group:
                                                   *mut GtkActionGroup,
                                               entries: *GtkToggleActionEntry,
                                               n_entries: guint,
                                               user_data: gpointer);
    pub fn gtk_action_group_add_radio_actions(action_group:
                                                  *mut GtkActionGroup,
                                              entries: *GtkRadioActionEntry,
                                              n_entries: guint, value: gint,
                                              on_change: GCallback,
                                              user_data: gpointer);
    pub fn gtk_action_group_add_actions_full(action_group:
                                                 *mut GtkActionGroup,
                                             entries: *GtkActionEntry,
                                             n_entries: guint,
                                             user_data: gpointer,
                                             destroy: GDestroyNotify);
    pub fn gtk_action_group_add_toggle_actions_full(action_group:
                                                        *mut GtkActionGroup,
                                                    entries:
                                                        *GtkToggleActionEntry,
                                                    n_entries: guint,
                                                    user_data: gpointer,
                                                    destroy: GDestroyNotify);
    pub fn gtk_action_group_add_radio_actions_full(action_group:
                                                       *mut GtkActionGroup,
                                                   entries:
                                                       *GtkRadioActionEntry,
                                                   n_entries: guint,
                                                   value: gint,
                                                   on_change: GCallback,
                                                   user_data: gpointer,
                                                   destroy: GDestroyNotify);
    pub fn gtk_action_group_set_translate_func(action_group:
                                                   *mut GtkActionGroup,
                                               func: GtkTranslateFunc,
                                               data: gpointer,
                                               notify: GDestroyNotify);
    pub fn gtk_action_group_set_translation_domain(action_group:
                                                       *mut GtkActionGroup,
                                                   domain: *gchar);
    pub fn gtk_action_group_translate_string(action_group:
                                                 *mut GtkActionGroup,
                                             string: *gchar) -> *gchar;
    pub fn _gtk_action_group_emit_connect_proxy(action_group:
                                                    *mut GtkActionGroup,
                                                action: *mut GtkAction,
                                                proxy: *mut GtkWidget);
    pub fn _gtk_action_group_emit_disconnect_proxy(action_group:
                                                       *mut GtkActionGroup,
                                                   action: *mut GtkAction,
                                                   proxy: *mut GtkWidget);
    pub fn _gtk_action_group_emit_pre_activate(action_group:
                                                   *mut GtkActionGroup,
                                               action: *mut GtkAction);
    pub fn _gtk_action_group_emit_post_activate(action_group:
                                                    *mut GtkActionGroup,
                                                action: *mut GtkAction);
    pub fn gtk_color_selection_get_type() -> GType;
    pub fn gtk_color_selection_new() -> *mut GtkWidget;
    pub fn gtk_color_selection_get_has_opacity_control(colorsel:
                                                           *mut GtkColorSelection)
     -> gboolean;
    pub fn gtk_color_selection_set_has_opacity_control(colorsel:
                                                           *mut GtkColorSelection,
                                                       has_opacity: gboolean);
    pub fn gtk_color_selection_get_has_palette(colorsel:
                                                   *mut GtkColorSelection) ->
     gboolean;
    pub fn gtk_color_selection_set_has_palette(colorsel:
                                                   *mut GtkColorSelection,
                                               has_palette: gboolean);
    pub fn gtk_color_selection_set_current_alpha(colorsel:
                                                     *mut GtkColorSelection,
                                                 alpha: guint16);
    pub fn gtk_color_selection_get_current_alpha(colorsel:
                                                     *mut GtkColorSelection)
     -> guint16;
    pub fn gtk_color_selection_set_previous_alpha(colorsel:
                                                      *mut GtkColorSelection,
                                                  alpha: guint16);
    pub fn gtk_color_selection_get_previous_alpha(colorsel:
                                                      *mut GtkColorSelection)
     -> guint16;
    pub fn gtk_color_selection_set_current_rgba(colorsel:
                                                    *mut GtkColorSelection,
                                                rgba: *GdkRGBA);
    pub fn gtk_color_selection_get_current_rgba(colorsel:
                                                    *mut GtkColorSelection,
                                                rgba: *mut GdkRGBA);
    pub fn gtk_color_selection_set_previous_rgba(colorsel:
                                                     *mut GtkColorSelection,
                                                 rgba: *GdkRGBA);
    pub fn gtk_color_selection_get_previous_rgba(colorsel:
                                                     *mut GtkColorSelection,
                                                 rgba: *mut GdkRGBA);
    pub fn gtk_color_selection_is_adjusting(colorsel: *mut GtkColorSelection)
     -> gboolean;
    pub fn gtk_color_selection_palette_from_string(str: *gchar,
                                                   colors: *mut *mut GdkColor,
                                                   n_colors: *mut gint) ->
     gboolean;
    pub fn gtk_color_selection_palette_to_string(colors: *GdkColor,
                                                 n_colors: gint) ->
     *mut gchar;
    pub fn gtk_color_selection_set_change_palette_with_screen_hook(func:
                                                                       GtkColorSelectionChangePaletteWithScreenFunc)
     -> GtkColorSelectionChangePaletteWithScreenFunc;
    pub fn gtk_color_selection_set_current_color(colorsel:
                                                     *mut GtkColorSelection,
                                                 color: *GdkColor);
    pub fn gtk_color_selection_get_current_color(colorsel:
                                                     *mut GtkColorSelection,
                                                 color: *mut GdkColor);
    pub fn gtk_color_selection_set_previous_color(colorsel:
                                                      *mut GtkColorSelection,
                                                  color: *GdkColor);
    pub fn gtk_color_selection_get_previous_color(colorsel:
                                                      *mut GtkColorSelection,
                                                  color: *mut GdkColor);
    pub fn gtk_color_selection_dialog_get_type() -> GType;
    pub fn gtk_color_selection_dialog_new(title: *gchar) -> *mut GtkWidget;
    pub fn gtk_color_selection_dialog_get_color_selection(colorsel:
                                                              *mut GtkColorSelectionDialog)
     -> *mut GtkWidget;
    pub fn gtk_font_selection_get_type() -> GType;
    pub fn gtk_font_selection_new() -> *mut GtkWidget;
    pub fn gtk_font_selection_get_family_list(fontsel: *mut GtkFontSelection)
     -> *mut GtkWidget;
    pub fn gtk_font_selection_get_face_list(fontsel: *mut GtkFontSelection) ->
     *mut GtkWidget;
    pub fn gtk_font_selection_get_size_entry(fontsel: *mut GtkFontSelection)
     -> *mut GtkWidget;
    pub fn gtk_font_selection_get_size_list(fontsel: *mut GtkFontSelection) ->
     *mut GtkWidget;
    pub fn gtk_font_selection_get_preview_entry(fontsel:
                                                    *mut GtkFontSelection) ->
     *mut GtkWidget;
    pub fn gtk_font_selection_get_family(fontsel: *mut GtkFontSelection) ->
     *mut PangoFontFamily;
    pub fn gtk_font_selection_get_face(fontsel: *mut GtkFontSelection) ->
     *mut PangoFontFace;
    pub fn gtk_font_selection_get_size(fontsel: *mut GtkFontSelection) ->
     gint;
    pub fn gtk_font_selection_get_font_name(fontsel: *mut GtkFontSelection) ->
     *mut gchar;
    pub fn gtk_font_selection_set_font_name(fontsel: *mut GtkFontSelection,
                                            fontname: *gchar) -> gboolean;
    pub fn gtk_font_selection_get_preview_text(fontsel: *mut GtkFontSelection)
     -> *gchar;
    pub fn gtk_font_selection_set_preview_text(fontsel: *mut GtkFontSelection,
                                               text: *gchar);
    pub fn gtk_font_selection_dialog_get_type() -> GType;
    pub fn gtk_font_selection_dialog_new(title: *gchar) -> *mut GtkWidget;
    pub fn gtk_font_selection_dialog_get_ok_button(fsd:
                                                       *mut GtkFontSelectionDialog)
     -> *mut GtkWidget;
    pub fn gtk_font_selection_dialog_get_cancel_button(fsd:
                                                           *mut GtkFontSelectionDialog)
     -> *mut GtkWidget;
    pub fn gtk_font_selection_dialog_get_font_selection(fsd:
                                                            *mut GtkFontSelectionDialog)
     -> *mut GtkWidget;
    pub fn gtk_font_selection_dialog_get_font_name(fsd:
                                                       *mut GtkFontSelectionDialog)
     -> *mut gchar;
    pub fn gtk_font_selection_dialog_set_font_name(fsd:
                                                       *mut GtkFontSelectionDialog,
                                                   fontname: *gchar) ->
     gboolean;
    pub fn gtk_font_selection_dialog_get_preview_text(fsd:
                                                          *mut GtkFontSelectionDialog)
     -> *gchar;
    pub fn gtk_font_selection_dialog_set_preview_text(fsd:
                                                          *mut GtkFontSelectionDialog,
                                                      text: *gchar);
    pub fn gtk_symbolic_color_get_type() -> GType;
    pub fn gtk_symbolic_color_new_literal(color: *GdkRGBA) ->
     *mut GtkSymbolicColor;
    pub fn gtk_symbolic_color_new_name(name: *gchar) -> *mut GtkSymbolicColor;
    pub fn gtk_symbolic_color_new_shade(color: *mut GtkSymbolicColor,
                                        factor: gdouble) ->
     *mut GtkSymbolicColor;
    pub fn gtk_symbolic_color_new_alpha(color: *mut GtkSymbolicColor,
                                        factor: gdouble) ->
     *mut GtkSymbolicColor;
    pub fn gtk_symbolic_color_new_mix(color1: *mut GtkSymbolicColor,
                                      color2: *mut GtkSymbolicColor,
                                      factor: gdouble) ->
     *mut GtkSymbolicColor;
    pub fn gtk_symbolic_color_new_win32(theme_class: *gchar, id: gint) ->
     *mut GtkSymbolicColor;
    pub fn gtk_symbolic_color_ref(color: *mut GtkSymbolicColor) ->
     *mut GtkSymbolicColor;
    pub fn gtk_symbolic_color_unref(color: *mut GtkSymbolicColor);
    pub fn gtk_symbolic_color_to_string(color: *mut GtkSymbolicColor) ->
     *mut c_schar;
    pub fn gtk_symbolic_color_resolve(color: *mut GtkSymbolicColor,
                                      props: *mut GtkStyleProperties,
                                      resolved_color: *mut GdkRGBA) ->
     gboolean;
    pub fn gtk_gradient_get_type() -> GType;
    pub fn gtk_gradient_new_linear(x0: gdouble, y0: gdouble, x1: gdouble,
                                   y1: gdouble) -> *mut GtkGradient;
    pub fn gtk_gradient_new_radial(x0: gdouble, y0: gdouble, radius0: gdouble,
                                   x1: gdouble, y1: gdouble, radius1: gdouble)
     -> *mut GtkGradient;
    pub fn gtk_gradient_add_color_stop(gradient: *mut GtkGradient,
                                       offset: gdouble,
                                       color: *mut GtkSymbolicColor);
    pub fn gtk_gradient_ref(gradient: *mut GtkGradient) -> *mut GtkGradient;
    pub fn gtk_gradient_unref(gradient: *mut GtkGradient);
    pub fn gtk_gradient_resolve(gradient: *mut GtkGradient,
                                props: *mut GtkStyleProperties,
                                resolved_gradient: *mut *mut cairo_pattern_t)
     -> gboolean;
    pub fn gtk_gradient_resolve_for_context(gradient: *mut GtkGradient,
                                            context: *mut GtkStyleContext) ->
     *mut cairo_pattern_t;
    pub fn gtk_gradient_to_string(gradient: *mut GtkGradient) -> *mut c_schar;
    pub fn gtk_handle_box_get_type() -> GType;
    pub fn gtk_handle_box_new() -> *mut GtkWidget;
    pub fn gtk_handle_box_set_shadow_type(handle_box: *mut GtkHandleBox,
                                          _type: GtkShadowType);
    pub fn gtk_handle_box_get_shadow_type(handle_box: *mut GtkHandleBox) ->
     GtkShadowType;
    pub fn gtk_handle_box_set_handle_position(handle_box: *mut GtkHandleBox,
                                              position: GtkPositionType);
    pub fn gtk_handle_box_get_handle_position(handle_box: *mut GtkHandleBox)
     -> GtkPositionType;
    pub fn gtk_handle_box_set_snap_edge(handle_box: *mut GtkHandleBox,
                                        edge: GtkPositionType);
    pub fn gtk_handle_box_get_snap_edge(handle_box: *mut GtkHandleBox) ->
     GtkPositionType;
    pub fn gtk_handle_box_get_child_detached(handle_box: *mut GtkHandleBox) ->
     gboolean;
    pub fn gtk_hbutton_box_get_type() -> GType;
    pub fn gtk_hbutton_box_new() -> *mut GtkWidget;
    pub fn gtk_hbox_get_type() -> GType;
    pub fn gtk_hbox_new(homogeneous: gboolean, spacing: gint) ->
     *mut GtkWidget;
    pub fn gtk_hpaned_get_type() -> GType;
    pub fn gtk_hpaned_new() -> *mut GtkWidget;
    pub fn gtk_hsv_get_type() -> GType;
    pub fn gtk_hsv_new() -> *mut GtkWidget;
    pub fn gtk_hsv_set_color(hsv: *mut GtkHSV, h: c_double, s: c_double,
                             v: c_double);
    pub fn gtk_hsv_get_color(hsv: *mut GtkHSV, h: *mut gdouble,
                             s: *mut gdouble, v: *mut gdouble);
    pub fn gtk_hsv_set_metrics(hsv: *mut GtkHSV, size: gint,
                               ring_width: gint);
    pub fn gtk_hsv_get_metrics(hsv: *mut GtkHSV, size: *mut gint,
                               ring_width: *mut gint);
    pub fn gtk_hsv_is_adjusting(hsv: *mut GtkHSV) -> gboolean;
    pub fn gtk_hscale_get_type() -> GType;
    pub fn gtk_hscale_new(adjustment: *mut GtkAdjustment) -> *mut GtkWidget;
    pub fn gtk_hscale_new_with_range(min: gdouble, max: gdouble,
                                     step: gdouble) -> *mut GtkWidget;
    pub fn gtk_hscrollbar_get_type() -> GType;
    pub fn gtk_hscrollbar_new(adjustment: *mut GtkAdjustment) ->
     *mut GtkWidget;
    pub fn gtk_hseparator_get_type() -> GType;
    pub fn gtk_hseparator_new() -> *mut GtkWidget;
    pub fn gtk_image_menu_item_get_type() -> GType;
    pub fn gtk_image_menu_item_new() -> *mut GtkWidget;
    pub fn gtk_image_menu_item_new_with_label(label: *gchar) ->
     *mut GtkWidget;
    pub fn gtk_image_menu_item_new_with_mnemonic(label: *gchar) ->
     *mut GtkWidget;
    pub fn gtk_image_menu_item_new_from_stock(stock_id: *gchar,
                                              accel_group: *mut GtkAccelGroup)
     -> *mut GtkWidget;
    pub fn gtk_image_menu_item_set_always_show_image(image_menu_item:
                                                         *mut GtkImageMenuItem,
                                                     always_show: gboolean);
    pub fn gtk_image_menu_item_get_always_show_image(image_menu_item:
                                                         *mut GtkImageMenuItem)
     -> gboolean;
    pub fn gtk_image_menu_item_set_image(image_menu_item:
                                             *mut GtkImageMenuItem,
                                         image: *mut GtkWidget);
    pub fn gtk_image_menu_item_get_image(image_menu_item:
                                             *mut GtkImageMenuItem) ->
     *mut GtkWidget;
    pub fn gtk_image_menu_item_set_use_stock(image_menu_item:
                                                 *mut GtkImageMenuItem,
                                             use_stock: gboolean);
    pub fn gtk_image_menu_item_get_use_stock(image_menu_item:
                                                 *mut GtkImageMenuItem) ->
     gboolean;
    pub fn gtk_image_menu_item_set_accel_group(image_menu_item:
                                                   *mut GtkImageMenuItem,
                                               accel_group:
                                                   *mut GtkAccelGroup);
    pub fn gtk_toggle_action_get_type() -> GType;
    pub fn gtk_toggle_action_new(name: *gchar, label: *gchar, tooltip: *gchar,
                                 stock_id: *gchar) -> *mut GtkToggleAction;
    pub fn gtk_toggle_action_toggled(action: *mut GtkToggleAction);
    pub fn gtk_toggle_action_set_active(action: *mut GtkToggleAction,
                                        is_active: gboolean);
    pub fn gtk_toggle_action_get_active(action: *mut GtkToggleAction) ->
     gboolean;
    pub fn gtk_toggle_action_set_draw_as_radio(action: *mut GtkToggleAction,
                                               draw_as_radio: gboolean);
    pub fn gtk_toggle_action_get_draw_as_radio(action: *mut GtkToggleAction)
     -> gboolean;
    pub fn _gtk_toggle_action_set_active(toggle_action: *mut GtkToggleAction,
                                         is_active: gboolean);
    pub fn gtk_radio_action_get_type() -> GType;
    pub fn gtk_radio_action_new(name: *gchar, label: *gchar, tooltip: *gchar,
                                stock_id: *gchar, value: gint) ->
     *mut GtkRadioAction;
    pub fn gtk_radio_action_get_group(action: *mut GtkRadioAction) ->
     *mut GSList;
    pub fn gtk_radio_action_set_group(action: *mut GtkRadioAction,
                                      group: *mut GSList);
    pub fn gtk_radio_action_join_group(action: *mut GtkRadioAction,
                                       group_source: *mut GtkRadioAction);
    pub fn gtk_radio_action_get_current_value(action: *mut GtkRadioAction) ->
     gint;
    pub fn gtk_radio_action_set_current_value(action: *mut GtkRadioAction,
                                              current_value: gint);
    pub fn _gtk_rc_parse_widget_class_path(pattern: *gchar) -> *mut GSList;
    pub fn _gtk_rc_free_widget_class_path(list: *mut GSList);
    pub fn _gtk_rc_match_widget_class(list: *mut GSList, length: gint,
                                      path: *mut gchar,
                                      path_reversed: *mut gchar) -> gboolean;
    pub fn gtk_rc_add_default_file(filename: *gchar);
    pub fn gtk_rc_set_default_files(filenames: *mut *mut gchar);
    pub fn gtk_rc_get_default_files() -> *mut *mut gchar;
    pub fn gtk_rc_get_style(widget: *mut GtkWidget) -> *mut GtkStyle;
    pub fn gtk_rc_get_style_by_paths(settings: *mut GtkSettings,
                                     widget_path: *c_schar,
                                     class_path: *c_schar, _type: GType) ->
     *mut GtkStyle;
    pub fn gtk_rc_reparse_all_for_settings(settings: *mut GtkSettings,
                                           force_load: gboolean) -> gboolean;
    pub fn gtk_rc_reset_styles(settings: *mut GtkSettings);
    pub fn gtk_rc_find_pixmap_in_path(settings: *mut GtkSettings,
                                      scanner: *mut GScanner,
                                      pixmap_file: *gchar) -> *mut gchar;
    pub fn gtk_rc_parse(filename: *gchar);
    pub fn gtk_rc_parse_string(rc_string: *gchar);
    pub fn gtk_rc_reparse_all() -> gboolean;
    pub fn gtk_rc_style_get_type() -> GType;
    pub fn gtk_rc_style_new() -> *mut GtkRcStyle;
    pub fn gtk_rc_style_copy(orig: *mut GtkRcStyle) -> *mut GtkRcStyle;
    pub fn gtk_rc_find_module_in_path(module_file: *gchar) -> *mut gchar;
    pub fn gtk_rc_get_theme_dir() -> *mut gchar;
    pub fn gtk_rc_get_module_dir() -> *mut gchar;
    pub fn gtk_rc_get_im_module_path() -> *mut gchar;
    pub fn gtk_rc_get_im_module_file() -> *mut gchar;
    pub fn gtk_rc_scanner_new() -> *mut GScanner;
    pub fn gtk_rc_parse_color(scanner: *mut GScanner, color: *mut GdkColor) ->
     guint;
    pub fn gtk_rc_parse_color_full(scanner: *mut GScanner,
                                   style: *mut GtkRcStyle,
                                   color: *mut GdkColor) -> guint;
    pub fn gtk_rc_parse_state(scanner: *mut GScanner,
                              state: *mut GtkStateType) -> guint;
    pub fn gtk_rc_parse_priority(scanner: *mut GScanner,
                                 priority: *mut GtkPathPriorityType) -> guint;
    pub fn gtk_recent_action_get_type() -> GType;
    pub fn gtk_recent_action_new(name: *gchar, label: *gchar, tooltip: *gchar,
                                 stock_id: *gchar) -> *mut GtkAction;
    pub fn gtk_recent_action_new_for_manager(name: *gchar, label: *gchar,
                                             tooltip: *gchar,
                                             stock_id: *gchar,
                                             manager: *mut GtkRecentManager)
     -> *mut GtkAction;
    pub fn gtk_recent_action_get_show_numbers(action: *mut GtkRecentAction) ->
     gboolean;
    pub fn gtk_recent_action_set_show_numbers(action: *mut GtkRecentAction,
                                              show_numbers: gboolean);
    pub fn gtk_style_get_type() -> GType;
    pub fn gtk_style_new() -> *mut GtkStyle;
    pub fn gtk_style_copy(style: *mut GtkStyle) -> *mut GtkStyle;
    pub fn gtk_style_attach(style: *mut GtkStyle, window: *mut GdkWindow) ->
     *mut GtkStyle;
    pub fn gtk_style_detach(style: *mut GtkStyle);
    pub fn gtk_style_set_background(style: *mut GtkStyle,
                                    window: *mut GdkWindow,
                                    state_type: GtkStateType);
    pub fn gtk_style_apply_default_background(style: *mut GtkStyle,
                                              cr: *mut cairo_t,
                                              window: *mut GdkWindow,
                                              state_type: GtkStateType,
                                              x: gint, y: gint, width: gint,
                                              height: gint);
    pub fn gtk_style_lookup_icon_set(style: *mut GtkStyle, stock_id: *gchar)
     -> *mut GtkIconSet;
    pub fn gtk_style_lookup_color(style: *mut GtkStyle, color_name: *gchar,
                                  color: *mut GdkColor) -> gboolean;
    pub fn gtk_style_render_icon(style: *mut GtkStyle, source: *GtkIconSource,
                                 direction: GtkTextDirection,
                                 state: GtkStateType, size: GtkIconSize,
                                 widget: *mut GtkWidget, detail: *gchar) ->
     *mut GdkPixbuf;
    pub fn gtk_paint_hline(style: *mut GtkStyle, cr: *mut cairo_t,
                           state_type: GtkStateType, widget: *mut GtkWidget,
                           detail: *gchar, x1: gint, x2: gint, y: gint);
    pub fn gtk_paint_vline(style: *mut GtkStyle, cr: *mut cairo_t,
                           state_type: GtkStateType, widget: *mut GtkWidget,
                           detail: *gchar, y1_: gint, y2_: gint, x: gint);
    pub fn gtk_paint_shadow(style: *mut GtkStyle, cr: *mut cairo_t,
                            state_type: GtkStateType,
                            shadow_type: GtkShadowType,
                            widget: *mut GtkWidget, detail: *gchar, x: gint,
                            y: gint, width: gint, height: gint);
    pub fn gtk_paint_arrow(style: *mut GtkStyle, cr: *mut cairo_t,
                           state_type: GtkStateType,
                           shadow_type: GtkShadowType, widget: *mut GtkWidget,
                           detail: *gchar, arrow_type: GtkArrowType,
                           fill: gboolean, x: gint, y: gint, width: gint,
                           height: gint);
    pub fn gtk_paint_diamond(style: *mut GtkStyle, cr: *mut cairo_t,
                             state_type: GtkStateType,
                             shadow_type: GtkShadowType,
                             widget: *mut GtkWidget, detail: *gchar, x: gint,
                             y: gint, width: gint, height: gint);
    pub fn gtk_paint_box(style: *mut GtkStyle, cr: *mut cairo_t,
                         state_type: GtkStateType, shadow_type: GtkShadowType,
                         widget: *mut GtkWidget, detail: *gchar, x: gint,
                         y: gint, width: gint, height: gint);
    pub fn gtk_paint_flat_box(style: *mut GtkStyle, cr: *mut cairo_t,
                              state_type: GtkStateType,
                              shadow_type: GtkShadowType,
                              widget: *mut GtkWidget, detail: *gchar, x: gint,
                              y: gint, width: gint, height: gint);
    pub fn gtk_paint_check(style: *mut GtkStyle, cr: *mut cairo_t,
                           state_type: GtkStateType,
                           shadow_type: GtkShadowType, widget: *mut GtkWidget,
                           detail: *gchar, x: gint, y: gint, width: gint,
                           height: gint);
    pub fn gtk_paint_option(style: *mut GtkStyle, cr: *mut cairo_t,
                            state_type: GtkStateType,
                            shadow_type: GtkShadowType,
                            widget: *mut GtkWidget, detail: *gchar, x: gint,
                            y: gint, width: gint, height: gint);
    pub fn gtk_paint_tab(style: *mut GtkStyle, cr: *mut cairo_t,
                         state_type: GtkStateType, shadow_type: GtkShadowType,
                         widget: *mut GtkWidget, detail: *gchar, x: gint,
                         y: gint, width: gint, height: gint);
    pub fn gtk_paint_shadow_gap(style: *mut GtkStyle, cr: *mut cairo_t,
                                state_type: GtkStateType,
                                shadow_type: GtkShadowType,
                                widget: *mut GtkWidget, detail: *gchar,
                                x: gint, y: gint, width: gint, height: gint,
                                gap_side: GtkPositionType, gap_x: gint,
                                gap_width: gint);
    pub fn gtk_paint_box_gap(style: *mut GtkStyle, cr: *mut cairo_t,
                             state_type: GtkStateType,
                             shadow_type: GtkShadowType,
                             widget: *mut GtkWidget, detail: *gchar, x: gint,
                             y: gint, width: gint, height: gint,
                             gap_side: GtkPositionType, gap_x: gint,
                             gap_width: gint);
    pub fn gtk_paint_extension(style: *mut GtkStyle, cr: *mut cairo_t,
                               state_type: GtkStateType,
                               shadow_type: GtkShadowType,
                               widget: *mut GtkWidget, detail: *gchar,
                               x: gint, y: gint, width: gint, height: gint,
                               gap_side: GtkPositionType);
    pub fn gtk_paint_focus(style: *mut GtkStyle, cr: *mut cairo_t,
                           state_type: GtkStateType, widget: *mut GtkWidget,
                           detail: *gchar, x: gint, y: gint, width: gint,
                           height: gint);
    pub fn gtk_paint_slider(style: *mut GtkStyle, cr: *mut cairo_t,
                            state_type: GtkStateType,
                            shadow_type: GtkShadowType,
                            widget: *mut GtkWidget, detail: *gchar, x: gint,
                            y: gint, width: gint, height: gint,
                            orientation: GtkOrientation);
    pub fn gtk_paint_handle(style: *mut GtkStyle, cr: *mut cairo_t,
                            state_type: GtkStateType,
                            shadow_type: GtkShadowType,
                            widget: *mut GtkWidget, detail: *gchar, x: gint,
                            y: gint, width: gint, height: gint,
                            orientation: GtkOrientation);
    pub fn gtk_paint_expander(style: *mut GtkStyle, cr: *mut cairo_t,
                              state_type: GtkStateType,
                              widget: *mut GtkWidget, detail: *gchar, x: gint,
                              y: gint, expander_style: GtkExpanderStyle);
    pub fn gtk_paint_layout(style: *mut GtkStyle, cr: *mut cairo_t,
                            state_type: GtkStateType, use_text: gboolean,
                            widget: *mut GtkWidget, detail: *gchar, x: gint,
                            y: gint, layout: *mut PangoLayout);
    pub fn gtk_paint_resize_grip(style: *mut GtkStyle, cr: *mut cairo_t,
                                 state_type: GtkStateType,
                                 widget: *mut GtkWidget, detail: *gchar,
                                 edge: GdkWindowEdge, x: gint, y: gint,
                                 width: gint, height: gint);
    pub fn gtk_paint_spinner(style: *mut GtkStyle, cr: *mut cairo_t,
                             state_type: GtkStateType, widget: *mut GtkWidget,
                             detail: *gchar, step: guint, x: gint, y: gint,
                             width: gint, height: gint);
    pub fn gtk_style_get_style_property(style: *mut GtkStyle,
                                        widget_type: GType,
                                        property_name: *gchar,
                                        value: *mut GValue);
    pub fn gtk_style_get_valist(style: *mut GtkStyle, widget_type: GType,
                                first_property_name: *gchar,
                                var_args: va_list);
    pub fn gtk_style_get(style: *mut GtkStyle, widget_type: GType,
                         first_property_name: *gchar, ...);
    pub fn _gtk_style_new_for_path(screen: *mut GdkScreen,
                                   path: *mut GtkWidgetPath) -> *mut GtkStyle;
    pub fn _gtk_style_shade(a: *GdkColor, b: *mut GdkColor, k: gdouble);
    pub fn gtk_style_has_context(style: *mut GtkStyle) -> gboolean;
    pub fn gtk_widget_style_attach(widget: *mut GtkWidget);
    pub fn gtk_widget_has_rc_style(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_set_style(widget: *mut GtkWidget, style: *mut GtkStyle);
    pub fn gtk_widget_ensure_style(widget: *mut GtkWidget);
    pub fn gtk_widget_get_style(widget: *mut GtkWidget) -> *mut GtkStyle;
    pub fn gtk_widget_modify_style(widget: *mut GtkWidget,
                                   style: *mut GtkRcStyle);
    pub fn gtk_widget_get_modifier_style(widget: *mut GtkWidget) ->
     *mut GtkRcStyle;
    pub fn gtk_widget_modify_fg(widget: *mut GtkWidget, state: GtkStateType,
                                color: *GdkColor);
    pub fn gtk_widget_modify_bg(widget: *mut GtkWidget, state: GtkStateType,
                                color: *GdkColor);
    pub fn gtk_widget_modify_text(widget: *mut GtkWidget, state: GtkStateType,
                                  color: *GdkColor);
    pub fn gtk_widget_modify_base(widget: *mut GtkWidget, state: GtkStateType,
                                  color: *GdkColor);
    pub fn gtk_widget_modify_cursor(widget: *mut GtkWidget,
                                    primary: *GdkColor, secondary: *GdkColor);
    pub fn gtk_widget_modify_font(widget: *mut GtkWidget,
                                  font_desc: *mut PangoFontDescription);
    pub fn gtk_widget_reset_rc_styles(widget: *mut GtkWidget);
    pub fn gtk_widget_get_default_style() -> *mut GtkStyle;
    pub fn gtk_widget_path(widget: *mut GtkWidget, path_length: *mut guint,
                           path: *mut *mut gchar,
                           path_reversed: *mut *mut gchar);
    pub fn gtk_widget_class_path(widget: *mut GtkWidget,
                                 path_length: *mut guint,
                                 path: *mut *mut gchar,
                                 path_reversed: *mut *mut gchar);
    pub fn gtk_widget_render_icon(widget: *mut GtkWidget, stock_id: *gchar,
                                  size: GtkIconSize, detail: *gchar) ->
     *mut GdkPixbuf;
    pub fn gtk_table_get_type() -> GType;
    pub fn gtk_table_new(rows: guint, columns: guint, homogeneous: gboolean)
     -> *mut GtkWidget;
    pub fn gtk_table_resize(table: *mut GtkTable, rows: guint,
                            columns: guint);
    pub fn gtk_table_attach(table: *mut GtkTable, child: *mut GtkWidget,
                            left_attach: guint, right_attach: guint,
                            top_attach: guint, bottom_attach: guint,
                            xoptions: GtkAttachOptions,
                            yoptions: GtkAttachOptions, xpadding: guint,
                            ypadding: guint);
    pub fn gtk_table_attach_defaults(table: *mut GtkTable,
                                     widget: *mut GtkWidget,
                                     left_attach: guint, right_attach: guint,
                                     top_attach: guint, bottom_attach: guint);
    pub fn gtk_table_set_row_spacing(table: *mut GtkTable, row: guint,
                                     spacing: guint);
    pub fn gtk_table_get_row_spacing(table: *mut GtkTable, row: guint) ->
     guint;
    pub fn gtk_table_set_col_spacing(table: *mut GtkTable, column: guint,
                                     spacing: guint);
    pub fn gtk_table_get_col_spacing(table: *mut GtkTable, column: guint) ->
     guint;
    pub fn gtk_table_set_row_spacings(table: *mut GtkTable, spacing: guint);
    pub fn gtk_table_get_default_row_spacing(table: *mut GtkTable) -> guint;
    pub fn gtk_table_set_col_spacings(table: *mut GtkTable, spacing: guint);
    pub fn gtk_table_get_default_col_spacing(table: *mut GtkTable) -> guint;
    pub fn gtk_table_set_homogeneous(table: *mut GtkTable,
                                     homogeneous: gboolean);
    pub fn gtk_table_get_homogeneous(table: *mut GtkTable) -> gboolean;
    pub fn gtk_table_get_size(table: *mut GtkTable, rows: *mut guint,
                              columns: *mut guint);
    pub fn gtk_tearoff_menu_item_get_type() -> GType;
    pub fn gtk_tearoff_menu_item_new() -> *mut GtkWidget;
    pub fn gtk_ui_manager_get_type() -> GType;
    pub fn gtk_ui_manager_new() -> *mut GtkUIManager;
    pub fn gtk_ui_manager_set_add_tearoffs(manager: *mut GtkUIManager,
                                           add_tearoffs: gboolean);
    pub fn gtk_ui_manager_get_add_tearoffs(manager: *mut GtkUIManager) ->
     gboolean;
    pub fn gtk_ui_manager_insert_action_group(manager: *mut GtkUIManager,
                                              action_group:
                                                  *mut GtkActionGroup,
                                              pos: gint);
    pub fn gtk_ui_manager_remove_action_group(manager: *mut GtkUIManager,
                                              action_group:
                                                  *mut GtkActionGroup);
    pub fn gtk_ui_manager_get_action_groups(manager: *mut GtkUIManager) ->
     *mut GList;
    pub fn gtk_ui_manager_get_accel_group(manager: *mut GtkUIManager) ->
     *mut GtkAccelGroup;
    pub fn gtk_ui_manager_get_widget(manager: *mut GtkUIManager, path: *gchar)
     -> *mut GtkWidget;
    pub fn gtk_ui_manager_get_toplevels(manager: *mut GtkUIManager,
                                        types: GtkUIManagerItemType) ->
     *mut GSList;
    pub fn gtk_ui_manager_get_action(manager: *mut GtkUIManager, path: *gchar)
     -> *mut GtkAction;
    pub fn gtk_ui_manager_add_ui_from_string(manager: *mut GtkUIManager,
                                             buffer: *gchar, length: gssize,
                                             error: *mut *mut GError) ->
     guint;
    pub fn gtk_ui_manager_add_ui_from_file(manager: *mut GtkUIManager,
                                           filename: *gchar,
                                           error: *mut *mut GError) -> guint;
    pub fn gtk_ui_manager_add_ui_from_resource(manager: *mut GtkUIManager,
                                               resource_path: *gchar,
                                               error: *mut *mut GError) ->
     guint;
    pub fn gtk_ui_manager_add_ui(manager: *mut GtkUIManager, merge_id: guint,
                                 path: *gchar, name: *gchar, action: *gchar,
                                 _type: GtkUIManagerItemType, top: gboolean);
    pub fn gtk_ui_manager_remove_ui(manager: *mut GtkUIManager,
                                    merge_id: guint);
    pub fn gtk_ui_manager_get_ui(manager: *mut GtkUIManager) -> *mut gchar;
    pub fn gtk_ui_manager_ensure_update(manager: *mut GtkUIManager);
    pub fn gtk_ui_manager_new_merge_id(manager: *mut GtkUIManager) -> guint;
    pub fn gtk_vbutton_box_get_type() -> GType;
    pub fn gtk_vbutton_box_new() -> *mut GtkWidget;
    pub fn gtk_vbox_get_type() -> GType;
    pub fn gtk_vbox_new(homogeneous: gboolean, spacing: gint) ->
     *mut GtkWidget;
    pub fn gtk_vpaned_get_type() -> GType;
    pub fn gtk_vpaned_new() -> *mut GtkWidget;
    pub fn gtk_vscale_get_type() -> GType;
    pub fn gtk_vscale_new(adjustment: *mut GtkAdjustment) -> *mut GtkWidget;
    pub fn gtk_vscale_new_with_range(min: gdouble, max: gdouble,
                                     step: gdouble) -> *mut GtkWidget;
    pub fn gtk_vscrollbar_get_type() -> GType;
    pub fn gtk_vscrollbar_new(adjustment: *mut GtkAdjustment) ->
     *mut GtkWidget;
    pub fn gtk_vseparator_get_type() -> GType;
    pub fn gtk_vseparator_new() -> *mut GtkWidget;
    pub fn gst_object_flags_get_type() -> GType;
    pub fn gst_allocator_flags_get_type() -> GType;
    pub fn gst_bin_flags_get_type() -> GType;
    pub fn gst_buffer_flags_get_type() -> GType;
    pub fn gst_buffer_copy_flags_get_type() -> GType;
    pub fn gst_buffer_pool_acquire_flags_get_type() -> GType;
    pub fn gst_bus_flags_get_type() -> GType;
    pub fn gst_bus_sync_reply_get_type() -> GType;
    pub fn gst_caps_flags_get_type() -> GType;
    pub fn gst_caps_intersect_mode_get_type() -> GType;
    pub fn gst_clock_return_get_type() -> GType;
    pub fn gst_clock_entry_type_get_type() -> GType;
    pub fn gst_clock_flags_get_type() -> GType;
    pub fn gst_debug_graph_details_get_type() -> GType;
    pub fn gst_state_get_type() -> GType;
    pub fn gst_state_change_return_get_type() -> GType;
    pub fn gst_state_change_get_type() -> GType;
    pub fn gst_element_flags_get_type() -> GType;
    pub fn gst_core_error_get_type() -> GType;
    pub fn gst_library_error_get_type() -> GType;
    pub fn gst_resource_error_get_type() -> GType;
    pub fn gst_stream_error_get_type() -> GType;
    pub fn gst_event_type_flags_get_type() -> GType;
    pub fn gst_event_type_get_type() -> GType;
    pub fn gst_qos_type_get_type() -> GType;
    pub fn gst_stream_flags_get_type() -> GType;
    pub fn gst_format_get_type() -> GType;
    pub fn gst_debug_level_get_type() -> GType;
    pub fn gst_debug_color_flags_get_type() -> GType;
    pub fn gst_debug_color_mode_get_type() -> GType;
    pub fn gst_iterator_result_get_type() -> GType;
    pub fn gst_iterator_item_get_type() -> GType;
    pub fn gst_message_type_get_type() -> GType;
    pub fn gst_structure_change_type_get_type() -> GType;
    pub fn gst_stream_status_type_get_type() -> GType;
    pub fn gst_progress_type_get_type() -> GType;
    pub fn gst_meta_flags_get_type() -> GType;
    pub fn gst_memory_flags_get_type() -> GType;
    pub fn gst_map_flags_get_type() -> GType;
    pub fn gst_mini_object_flags_get_type() -> GType;
    pub fn gst_lock_flags_get_type() -> GType;
    pub fn gst_pad_direction_get_type() -> GType;
    pub fn gst_pad_mode_get_type() -> GType;
    pub fn gst_pad_link_return_get_type() -> GType;
    pub fn gst_flow_return_get_type() -> GType;
    pub fn gst_pad_link_check_get_type() -> GType;
    pub fn gst_pad_probe_type_get_type() -> GType;
    pub fn gst_pad_probe_return_get_type() -> GType;
    pub fn gst_pad_flags_get_type() -> GType;
    pub fn gst_pad_presence_get_type() -> GType;
    pub fn gst_pad_template_flags_get_type() -> GType;
    pub fn gst_pipeline_flags_get_type() -> GType;
    pub fn gst_plugin_error_get_type() -> GType;
    pub fn gst_plugin_flags_get_type() -> GType;
    pub fn gst_plugin_dependency_flags_get_type() -> GType;
    pub fn gst_rank_get_type() -> GType;
    pub fn gst_query_type_flags_get_type() -> GType;
    pub fn gst_query_type_get_type() -> GType;
    pub fn gst_buffering_mode_get_type() -> GType;
    pub fn gst_scheduling_flags_get_type() -> GType;
    pub fn gst_seek_type_get_type() -> GType;
    pub fn gst_seek_flags_get_type() -> GType;
    pub fn gst_segment_flags_get_type() -> GType;
    pub fn gst_clock_type_get_type() -> GType;
    pub fn gst_tag_merge_mode_get_type() -> GType;
    pub fn gst_tag_flag_get_type() -> GType;
    pub fn gst_tag_scope_get_type() -> GType;
    pub fn gst_task_state_get_type() -> GType;
    pub fn gst_toc_scope_get_type() -> GType;
    pub fn gst_toc_entry_type_get_type() -> GType;
    pub fn gst_type_find_probability_get_type() -> GType;
    pub fn gst_uri_error_get_type() -> GType;
    pub fn gst_uri_type_get_type() -> GType;
    pub fn gst_search_mode_get_type() -> GType;
    pub fn gst_parse_error_get_type() -> GType;
    pub fn gst_parse_flags_get_type() -> GType;
    pub fn gst_object_get_type() -> GType;
    pub fn gst_object_set_name(object: *mut GstObject, name: *gchar) ->
     gboolean;
    pub fn gst_object_get_name(object: *mut GstObject) -> *mut gchar;
    pub fn gst_object_set_parent(object: *mut GstObject,
                                 parent: *mut GstObject) -> gboolean;
    pub fn gst_object_get_parent(object: *mut GstObject) -> *mut GstObject;
    pub fn gst_object_unparent(object: *mut GstObject);
    pub fn gst_object_has_ancestor(object: *mut GstObject,
                                   ancestor: *mut GstObject) -> gboolean;
    pub fn gst_object_default_deep_notify(object: *mut GObject,
                                          orig: *mut GstObject,
                                          pspec: *mut GParamSpec,
                                          excluded_props: *mut *mut gchar);
    pub fn gst_object_ref(object: gpointer) -> gpointer;
    pub fn gst_object_unref(object: gpointer);
    pub fn gst_object_ref_sink(object: gpointer) -> gpointer;
    pub fn gst_object_replace(oldobj: *mut *mut GstObject,
                              newobj: *mut GstObject) -> gboolean;
    pub fn gst_object_get_path_string(object: *mut GstObject) -> *mut gchar;
    pub fn gst_object_check_uniqueness(list: *mut GList, name: *gchar) ->
     gboolean;
    pub fn gst_clock_get_type() -> GType;
    pub fn gst_clock_set_resolution(clock: *mut GstClock,
                                    resolution: GstClockTime) -> GstClockTime;
    pub fn gst_clock_get_resolution(clock: *mut GstClock) -> GstClockTime;
    pub fn gst_clock_get_time(clock: *mut GstClock) -> GstClockTime;
    pub fn gst_clock_set_calibration(clock: *mut GstClock,
                                     internal: GstClockTime,
                                     external: GstClockTime,
                                     rate_num: GstClockTime,
                                     rate_denom: GstClockTime);
    pub fn gst_clock_get_calibration(clock: *mut GstClock,
                                     internal: *mut GstClockTime,
                                     external: *mut GstClockTime,
                                     rate_num: *mut GstClockTime,
                                     rate_denom: *mut GstClockTime);
    pub fn gst_clock_set_master(clock: *mut GstClock, master: *mut GstClock)
     -> gboolean;
    pub fn gst_clock_get_master(clock: *mut GstClock) -> *mut GstClock;
    pub fn gst_clock_set_timeout(clock: *mut GstClock, timeout: GstClockTime);
    pub fn gst_clock_get_timeout(clock: *mut GstClock) -> GstClockTime;
    pub fn gst_clock_add_observation(clock: *mut GstClock,
                                     slave: GstClockTime,
                                     master: GstClockTime,
                                     r_squared: *mut gdouble) -> gboolean;
    pub fn gst_clock_get_internal_time(clock: *mut GstClock) -> GstClockTime;
    pub fn gst_clock_adjust_unlocked(clock: *mut GstClock,
                                     internal: GstClockTime) -> GstClockTime;
    pub fn gst_clock_unadjust_unlocked(clock: *mut GstClock,
                                       external: GstClockTime) ->
     GstClockTime;
    pub fn gst_clock_new_single_shot_id(clock: *mut GstClock,
                                        time: GstClockTime) -> GstClockID;
    pub fn gst_clock_new_periodic_id(clock: *mut GstClock,
                                     start_time: GstClockTime,
                                     interval: GstClockTime) -> GstClockID;
    pub fn gst_clock_id_ref(id: GstClockID) -> GstClockID;
    pub fn gst_clock_id_unref(id: GstClockID);
    pub fn gst_clock_id_compare_func(id1: gconstpointer, id2: gconstpointer)
     -> gint;
    pub fn gst_clock_id_get_time(id: GstClockID) -> GstClockTime;
    pub fn gst_clock_id_wait(id: GstClockID, jitter: *mut GstClockTimeDiff) ->
     GstClockReturn;
    pub fn gst_clock_id_wait_async(id: GstClockID, func: GstClockCallback,
                                   user_data: gpointer,
                                   destroy_data: GDestroyNotify) ->
     GstClockReturn;
    pub fn gst_clock_id_unschedule(id: GstClockID);
    pub fn gst_clock_single_shot_id_reinit(clock: *mut GstClock,
                                           id: GstClockID, time: GstClockTime)
     -> gboolean;
    pub fn gst_clock_periodic_id_reinit(clock: *mut GstClock, id: GstClockID,
                                        start_time: GstClockTime,
                                        interval: GstClockTime) -> gboolean;
    pub fn gst_control_source_get_type() -> GType;
    pub fn gst_control_source_get_value(_self: *mut GstControlSource,
                                        timestamp: GstClockTime,
                                        value: *mut gdouble) -> gboolean;
    pub fn gst_control_source_get_value_array(_self: *mut GstControlSource,
                                              timestamp: GstClockTime,
                                              interval: GstClockTime,
                                              n_values: guint,
                                              values: *mut gdouble) ->
     gboolean;
    pub fn gst_control_binding_get_type() -> GType;
    pub fn gst_control_binding_sync_values(binding: *mut GstControlBinding,
                                           object: *mut GstObject,
                                           timestamp: GstClockTime,
                                           last_sync: GstClockTime) ->
     gboolean;
    pub fn gst_control_binding_get_value(binding: *mut GstControlBinding,
                                         timestamp: GstClockTime) ->
     *mut GValue;
    pub fn gst_control_binding_get_value_array(binding:
                                                   *mut GstControlBinding,
                                               timestamp: GstClockTime,
                                               interval: GstClockTime,
                                               n_values: guint,
                                               values: gpointer) -> gboolean;
    pub fn gst_control_binding_get_g_value_array(binding:
                                                     *mut GstControlBinding,
                                                 timestamp: GstClockTime,
                                                 interval: GstClockTime,
                                                 n_values: guint,
                                                 values: *mut GValue) ->
     gboolean;
    pub fn gst_control_binding_set_disabled(binding: *mut GstControlBinding,
                                            disabled: gboolean);
    pub fn gst_control_binding_is_disabled(binding: *mut GstControlBinding) ->
     gboolean;
    pub fn gst_object_suggest_next_sync(object: *mut GstObject) ->
     GstClockTime;
    pub fn gst_object_sync_values(object: *mut GstObject,
                                  timestamp: GstClockTime) -> gboolean;
    pub fn gst_object_has_active_control_bindings(object: *mut GstObject) ->
     gboolean;
    pub fn gst_object_set_control_bindings_disabled(object: *mut GstObject,
                                                    disabled: gboolean);
    pub fn gst_object_set_control_binding_disabled(object: *mut GstObject,
                                                   property_name: *gchar,
                                                   disabled: gboolean);
    pub fn gst_object_add_control_binding(object: *mut GstObject,
                                          binding: *mut GstControlBinding) ->
     gboolean;
    pub fn gst_object_get_control_binding(object: *mut GstObject,
                                          property_name: *gchar) ->
     *mut GstControlBinding;
    pub fn gst_object_remove_control_binding(object: *mut GstObject,
                                             binding: *mut GstControlBinding)
     -> gboolean;
    pub fn gst_object_get_value(object: *mut GstObject, property_name: *gchar,
                                timestamp: GstClockTime) -> *mut GValue;
    pub fn gst_object_get_value_array(object: *mut GstObject,
                                      property_name: *gchar,
                                      timestamp: GstClockTime,
                                      interval: GstClockTime, n_values: guint,
                                      values: gpointer) -> gboolean;
    pub fn gst_object_get_g_value_array(object: *mut GstObject,
                                        property_name: *gchar,
                                        timestamp: GstClockTime,
                                        interval: GstClockTime,
                                        n_values: guint, values: *mut GValue)
     -> gboolean;
    pub fn gst_object_get_control_rate(object: *mut GstObject) ->
     GstClockTime;
    pub fn gst_object_set_control_rate(object: *mut GstObject,
                                       control_rate: GstClockTime);
    pub fn gst_mini_object_init(mini_object: *mut GstMiniObject, flags: guint,
                                _type: GType,
                                copy_func: GstMiniObjectCopyFunction,
                                dispose_func: GstMiniObjectDisposeFunction,
                                free_func: GstMiniObjectFreeFunction);
    pub fn gst_mini_object_ref(mini_object: *mut GstMiniObject) ->
     *mut GstMiniObject;
    pub fn gst_mini_object_unref(mini_object: *mut GstMiniObject);
    pub fn gst_mini_object_weak_ref(object: *mut GstMiniObject,
                                    notify: GstMiniObjectNotify,
                                    data: gpointer);
    pub fn gst_mini_object_weak_unref(object: *mut GstMiniObject,
                                      notify: GstMiniObjectNotify,
                                      data: gpointer);
    pub fn gst_mini_object_lock(object: *mut GstMiniObject,
                                flags: GstLockFlags) -> gboolean;
    pub fn gst_mini_object_unlock(object: *mut GstMiniObject,
                                  flags: GstLockFlags);
    pub fn gst_mini_object_is_writable(mini_object: *GstMiniObject) ->
     gboolean;
    pub fn gst_mini_object_make_writable(mini_object: *mut GstMiniObject) ->
     *mut GstMiniObject;
    pub fn gst_mini_object_copy(mini_object: *GstMiniObject) ->
     *mut GstMiniObject;
    pub fn gst_mini_object_set_qdata(object: *mut GstMiniObject,
                                     quark: GQuark, data: gpointer,
                                     destroy: GDestroyNotify);
    pub fn gst_mini_object_get_qdata(object: *mut GstMiniObject,
                                     quark: GQuark) -> gpointer;
    pub fn gst_mini_object_steal_qdata(object: *mut GstMiniObject,
                                       quark: GQuark) -> gpointer;
    pub fn gst_mini_object_replace(olddata: *mut *mut GstMiniObject,
                                   newdata: *mut GstMiniObject) -> gboolean;
    pub fn gst_mini_object_take(olddata: *mut *mut GstMiniObject,
                                newdata: *mut GstMiniObject) -> gboolean;
    pub fn gst_mini_object_steal(olddata: *mut *mut GstMiniObject) ->
     *mut GstMiniObject;
    pub fn gst_memory_get_type() -> GType;
    pub fn gst_memory_init(mem: *mut GstMemory, flags: GstMemoryFlags,
                           allocator: *mut GstAllocator,
                           parent: *mut GstMemory, maxsize: gsize,
                           align: gsize, offset: gsize, size: gsize);
    pub fn gst_memory_is_type(mem: *mut GstMemory, mem_type: *gchar) ->
     gboolean;
    pub fn gst_memory_get_sizes(mem: *mut GstMemory, offset: *mut gsize,
                                maxsize: *mut gsize) -> gsize;
    pub fn gst_memory_resize(mem: *mut GstMemory, offset: gssize,
                             size: gsize);
    pub fn gst_memory_make_mapped(mem: *mut GstMemory, info: *mut GstMapInfo,
                                  flags: GstMapFlags) -> *mut GstMemory;
    pub fn gst_memory_map(mem: *mut GstMemory, info: *mut GstMapInfo,
                          flags: GstMapFlags) -> gboolean;
    pub fn gst_memory_unmap(mem: *mut GstMemory, info: *mut GstMapInfo);
    pub fn gst_memory_copy(mem: *mut GstMemory, offset: gssize, size: gssize)
     -> *mut GstMemory;
    pub fn gst_memory_share(mem: *mut GstMemory, offset: gssize, size: gssize)
     -> *mut GstMemory;
    pub fn gst_memory_is_span(mem1: *mut GstMemory, mem2: *mut GstMemory,
                              offset: *mut gsize) -> gboolean;
    pub fn gst_allocation_params_get_type() -> GType;
    pub fn gst_allocator_get_type() -> GType;
    pub fn gst_allocator_register(name: *gchar, allocator: *mut GstAllocator);
    pub fn gst_allocator_find(name: *gchar) -> *mut GstAllocator;
    pub fn gst_allocator_set_default(allocator: *mut GstAllocator);
    pub fn gst_allocation_params_init(params: *mut GstAllocationParams);
    pub fn gst_allocation_params_copy(params: *GstAllocationParams) ->
     *mut GstAllocationParams;
    pub fn gst_allocation_params_free(params: *mut GstAllocationParams);
    pub fn gst_allocator_alloc(allocator: *mut GstAllocator, size: gsize,
                               params: *mut GstAllocationParams) ->
     *mut GstMemory;
    pub fn gst_allocator_free(allocator: *mut GstAllocator,
                              memory: *mut GstMemory);
    pub fn gst_memory_new_wrapped(flags: GstMemoryFlags, data: gpointer,
                                  maxsize: gsize, offset: gsize, size: gsize,
                                  user_data: gpointer, notify: GDestroyNotify)
     -> *mut GstMemory;
    pub fn gst_buffer_get_type() -> GType;
    pub fn gst_buffer_get_max_memory() -> guint;
    pub fn gst_buffer_new() -> *mut GstBuffer;
    pub fn gst_buffer_new_allocate(allocator: *mut GstAllocator, size: gsize,
                                   params: *mut GstAllocationParams) ->
     *mut GstBuffer;
    pub fn gst_buffer_new_wrapped_full(flags: GstMemoryFlags, data: gpointer,
                                       maxsize: gsize, offset: gsize,
                                       size: gsize, user_data: gpointer,
                                       notify: GDestroyNotify) ->
     *mut GstBuffer;
    pub fn gst_buffer_new_wrapped(data: gpointer, size: gsize) ->
     *mut GstBuffer;
    pub fn gst_buffer_n_memory(buffer: *mut GstBuffer) -> guint;
    pub fn gst_buffer_insert_memory(buffer: *mut GstBuffer, idx: gint,
                                    mem: *mut GstMemory);
    pub fn gst_buffer_replace_memory_range(buffer: *mut GstBuffer, idx: guint,
                                           length: gint, mem: *mut GstMemory);
    pub fn gst_buffer_peek_memory(buffer: *mut GstBuffer, idx: guint) ->
     *mut GstMemory;
    pub fn gst_buffer_get_memory_range(buffer: *mut GstBuffer, idx: guint,
                                       length: gint) -> *mut GstMemory;
    pub fn gst_buffer_remove_memory_range(buffer: *mut GstBuffer, idx: guint,
                                          length: gint);
    pub fn gst_buffer_prepend_memory(buffer: *mut GstBuffer,
                                     mem: *mut GstMemory);
    pub fn gst_buffer_append_memory(buffer: *mut GstBuffer,
                                    mem: *mut GstMemory);
    pub fn gst_buffer_replace_memory(buffer: *mut GstBuffer, idx: guint,
                                     mem: *mut GstMemory);
    pub fn gst_buffer_replace_all_memory(buffer: *mut GstBuffer,
                                         mem: *mut GstMemory);
    pub fn gst_buffer_get_memory(buffer: *mut GstBuffer, idx: guint) ->
     *mut GstMemory;
    pub fn gst_buffer_get_all_memory(buffer: *mut GstBuffer) ->
     *mut GstMemory;
    pub fn gst_buffer_remove_memory(buffer: *mut GstBuffer, idx: guint);
    pub fn gst_buffer_remove_all_memory(buffer: *mut GstBuffer);
    pub fn gst_buffer_find_memory(buffer: *mut GstBuffer, offset: gsize,
                                  size: gsize, idx: *mut guint,
                                  length: *mut guint, skip: *mut gsize) ->
     gboolean;
    pub fn gst_buffer_fill(buffer: *mut GstBuffer, offset: gsize,
                           src: gconstpointer, size: gsize) -> gsize;
    pub fn gst_buffer_extract(buffer: *mut GstBuffer, offset: gsize,
                              dest: gpointer, size: gsize) -> gsize;
    pub fn gst_buffer_memcmp(buffer: *mut GstBuffer, offset: gsize,
                             mem: gconstpointer, size: gsize) -> gint;
    pub fn gst_buffer_memset(buffer: *mut GstBuffer, offset: gsize,
                             val: guint8, size: gsize) -> gsize;
    pub fn gst_buffer_get_sizes_range(buffer: *mut GstBuffer, idx: guint,
                                      length: gint, offset: *mut gsize,
                                      maxsize: *mut gsize) -> gsize;
    pub fn gst_buffer_resize_range(buffer: *mut GstBuffer, idx: guint,
                                   length: gint, offset: gssize, size: gssize)
     -> gboolean;
    pub fn gst_buffer_get_sizes(buffer: *mut GstBuffer, offset: *mut gsize,
                                maxsize: *mut gsize) -> gsize;
    pub fn gst_buffer_get_size(buffer: *mut GstBuffer) -> gsize;
    pub fn gst_buffer_resize(buffer: *mut GstBuffer, offset: gssize,
                             size: gssize);
    pub fn gst_buffer_set_size(buffer: *mut GstBuffer, size: gssize);
    pub fn gst_buffer_map_range(buffer: *mut GstBuffer, idx: guint,
                                length: gint, info: *mut GstMapInfo,
                                flags: GstMapFlags) -> gboolean;
    pub fn gst_buffer_map(buffer: *mut GstBuffer, info: *mut GstMapInfo,
                          flags: GstMapFlags) -> gboolean;
    pub fn gst_buffer_unmap(buffer: *mut GstBuffer, info: *mut GstMapInfo);
    pub fn gst_buffer_extract_dup(buffer: *mut GstBuffer, offset: gsize,
                                  size: gsize, dest: *mut gpointer,
                                  dest_size: *mut gsize);
    pub fn gst_buffer_copy_into(dest: *mut GstBuffer, src: *mut GstBuffer,
                                flags: GstBufferCopyFlags, offset: gsize,
                                size: gsize) -> gboolean;
    pub fn gst_buffer_copy_region(parent: *mut GstBuffer,
                                  flags: GstBufferCopyFlags, offset: gsize,
                                  size: gsize) -> *mut GstBuffer;
    pub fn gst_buffer_append_region(buf1: *mut GstBuffer,
                                    buf2: *mut GstBuffer, offset: gssize,
                                    size: gssize) -> *mut GstBuffer;
    pub fn gst_buffer_append(buf1: *mut GstBuffer, buf2: *mut GstBuffer) ->
     *mut GstBuffer;
    pub fn gst_meta_api_type_register(api: *gchar, tags: *mut *gchar) ->
     GType;
    pub fn gst_meta_api_type_has_tag(api: GType, tag: GQuark) -> gboolean;
    pub fn gst_meta_register(api: GType, _impl: *gchar, size: gsize,
                             init_func: GstMetaInitFunction,
                             free_func: GstMetaFreeFunction,
                             transform_func: GstMetaTransformFunction) ->
     *GstMetaInfo;
    pub fn gst_meta_get_info(_impl: *gchar) -> *GstMetaInfo;
    pub fn gst_meta_api_type_get_tags(api: GType) -> **gchar;
    pub fn gst_buffer_get_meta(buffer: *mut GstBuffer, api: GType) ->
     *mut GstMeta;
    pub fn gst_buffer_add_meta(buffer: *mut GstBuffer, info: *GstMetaInfo,
                               params: gpointer) -> *mut GstMeta;
    pub fn gst_buffer_remove_meta(buffer: *mut GstBuffer, meta: *mut GstMeta)
     -> gboolean;
    pub fn gst_buffer_iterate_meta(buffer: *mut GstBuffer,
                                   state: *mut gpointer) -> *mut GstMeta;
    pub fn gst_buffer_foreach_meta(buffer: *mut GstBuffer,
                                   func: GstBufferForeachMetaFunc,
                                   user_data: gpointer) -> gboolean;
    pub fn gst_buffer_list_get_type() -> GType;
    pub fn gst_buffer_list_new() -> *mut GstBufferList;
    pub fn gst_buffer_list_new_sized(size: guint) -> *mut GstBufferList;
    pub fn gst_buffer_list_length(list: *mut GstBufferList) -> guint;
    pub fn gst_buffer_list_get(list: *mut GstBufferList, idx: guint) ->
     *mut GstBuffer;
    pub fn gst_buffer_list_insert(list: *mut GstBufferList, idx: gint,
                                  buffer: *mut GstBuffer);
    pub fn gst_buffer_list_remove(list: *mut GstBufferList, idx: guint,
                                  length: guint);
    pub fn gst_buffer_list_foreach(list: *mut GstBufferList,
                                   func: GstBufferListFunc,
                                   user_data: gpointer) -> gboolean;
    pub fn gst_date_time_has_year(datetime: *GstDateTime) -> gboolean;
    pub fn gst_date_time_has_month(datetime: *GstDateTime) -> gboolean;
    pub fn gst_date_time_has_day(datetime: *GstDateTime) -> gboolean;
    pub fn gst_date_time_has_time(datetime: *GstDateTime) -> gboolean;
    pub fn gst_date_time_has_second(datetime: *GstDateTime) -> gboolean;
    pub fn gst_date_time_get_year(datetime: *GstDateTime) -> gint;
    pub fn gst_date_time_get_month(datetime: *GstDateTime) -> gint;
    pub fn gst_date_time_get_day(datetime: *GstDateTime) -> gint;
    pub fn gst_date_time_get_hour(datetime: *GstDateTime) -> gint;
    pub fn gst_date_time_get_minute(datetime: *GstDateTime) -> gint;
    pub fn gst_date_time_get_second(datetime: *GstDateTime) -> gint;
    pub fn gst_date_time_get_microsecond(datetime: *GstDateTime) -> gint;
    pub fn gst_date_time_get_time_zone_offset(datetime: *GstDateTime) ->
     gfloat;
    pub fn gst_date_time_new_from_unix_epoch_local_time(secs: gint64) ->
     *mut GstDateTime;
    pub fn gst_date_time_new_from_unix_epoch_utc(secs: gint64) ->
     *mut GstDateTime;
    pub fn gst_date_time_new_local_time(year: gint, month: gint, day: gint,
                                        hour: gint, minute: gint,
                                        seconds: gdouble) -> *mut GstDateTime;
    pub fn gst_date_time_new_y(year: gint) -> *mut GstDateTime;
    pub fn gst_date_time_new_ym(year: gint, month: gint) -> *mut GstDateTime;
    pub fn gst_date_time_new_ymd(year: gint, month: gint, day: gint) ->
     *mut GstDateTime;
    pub fn gst_date_time_new(tzoffset: gfloat, year: gint, month: gint,
                             day: gint, hour: gint, minute: gint,
                             seconds: gdouble) -> *mut GstDateTime;
    pub fn gst_date_time_new_now_local_time() -> *mut GstDateTime;
    pub fn gst_date_time_new_now_utc() -> *mut GstDateTime;
    pub fn gst_date_time_to_iso8601_string(datetime: *mut GstDateTime) ->
     *mut gchar;
    pub fn gst_date_time_new_from_iso8601_string(string: *gchar) ->
     *mut GstDateTime;
    pub fn gst_date_time_to_g_date_time(datetime: *mut GstDateTime) ->
     *mut GDateTime;
    pub fn gst_date_time_new_from_g_date_time(dt: *mut GDateTime) ->
     *mut GstDateTime;
    pub fn gst_date_time_ref(datetime: *mut GstDateTime) -> *mut GstDateTime;
    pub fn gst_date_time_unref(datetime: *mut GstDateTime);
    pub fn gst_structure_get_type() -> GType;
    pub fn gst_structure_new_empty(name: *gchar) -> *mut GstStructure;
    pub fn gst_structure_new_id_empty(quark: GQuark) -> *mut GstStructure;
    pub fn gst_structure_new(name: *gchar, firstfield: *gchar, ...) ->
     *mut GstStructure;
    pub fn gst_structure_new_valist(name: *gchar, firstfield: *gchar,
                                    varargs: va_list) -> *mut GstStructure;
    pub fn gst_structure_new_id(name_quark: GQuark, field_quark: GQuark, ...)
     -> *mut GstStructure;
    pub fn gst_structure_new_from_string(string: *gchar) -> *mut GstStructure;
    pub fn gst_structure_copy(structure: *GstStructure) -> *mut GstStructure;
    pub fn gst_structure_set_parent_refcount(structure: *mut GstStructure,
                                             refcount: *mut gint) -> gboolean;
    pub fn gst_structure_free(structure: *mut GstStructure);
    pub fn gst_structure_get_name(structure: *GstStructure) -> *gchar;
    pub fn gst_structure_get_name_id(structure: *GstStructure) -> GQuark;
    pub fn gst_structure_has_name(structure: *GstStructure, name: *gchar) ->
     gboolean;
    pub fn gst_structure_set_name(structure: *mut GstStructure, name: *gchar);
    pub fn gst_structure_id_set_value(structure: *mut GstStructure,
                                      field: GQuark, value: *GValue);
    pub fn gst_structure_set_value(structure: *mut GstStructure,
                                   fieldname: *gchar, value: *GValue);
    pub fn gst_structure_id_take_value(structure: *mut GstStructure,
                                       field: GQuark, value: *mut GValue);
    pub fn gst_structure_take_value(structure: *mut GstStructure,
                                    fieldname: *gchar, value: *mut GValue);
    pub fn gst_structure_set(structure: *mut GstStructure,
                             fieldname: *gchar, ...);
    pub fn gst_structure_set_valist(structure: *mut GstStructure,
                                    fieldname: *gchar, varargs: va_list);
    pub fn gst_structure_id_set(structure: *mut GstStructure,
                                fieldname: GQuark, ...);
    pub fn gst_structure_id_set_valist(structure: *mut GstStructure,
                                       fieldname: GQuark, varargs: va_list);
    pub fn gst_structure_get_valist(structure: *GstStructure,
                                    first_fieldname: *c_schar, args: va_list)
     -> gboolean;
    pub fn gst_structure_get(structure: *GstStructure,
                             first_fieldname: *c_schar, ...) -> gboolean;
    pub fn gst_structure_id_get_valist(structure: *GstStructure,
                                       first_field_id: GQuark, args: va_list)
     -> gboolean;
    pub fn gst_structure_id_get(structure: *GstStructure,
                                first_field_id: GQuark, ...) -> gboolean;
    pub fn gst_structure_id_get_value(structure: *GstStructure, field: GQuark)
     -> *GValue;
    pub fn gst_structure_get_value(structure: *GstStructure,
                                   fieldname: *gchar) -> *GValue;
    pub fn gst_structure_remove_field(structure: *mut GstStructure,
                                      fieldname: *gchar);
    pub fn gst_structure_remove_fields(structure: *mut GstStructure,
                                       fieldname: *gchar, ...);
    pub fn gst_structure_remove_fields_valist(structure: *mut GstStructure,
                                              fieldname: *gchar,
                                              varargs: va_list);
    pub fn gst_structure_remove_all_fields(structure: *mut GstStructure);
    pub fn gst_structure_get_field_type(structure: *GstStructure,
                                        fieldname: *gchar) -> GType;
    pub fn gst_structure_foreach(structure: *GstStructure,
                                 func: GstStructureForeachFunc,
                                 user_data: gpointer) -> gboolean;
    pub fn gst_structure_map_in_place(structure: *mut GstStructure,
                                      func: GstStructureMapFunc,
                                      user_data: gpointer) -> gboolean;
    pub fn gst_structure_n_fields(structure: *GstStructure) -> gint;
    pub fn gst_structure_nth_field_name(structure: *GstStructure,
                                        index: guint) -> *gchar;
    pub fn gst_structure_id_has_field(structure: *GstStructure, field: GQuark)
     -> gboolean;
    pub fn gst_structure_id_has_field_typed(structure: *GstStructure,
                                            field: GQuark, _type: GType) ->
     gboolean;
    pub fn gst_structure_has_field(structure: *GstStructure,
                                   fieldname: *gchar) -> gboolean;
    pub fn gst_structure_has_field_typed(structure: *GstStructure,
                                         fieldname: *gchar, _type: GType) ->
     gboolean;
    pub fn gst_structure_get_boolean(structure: *GstStructure,
                                     fieldname: *gchar, value: *mut gboolean)
     -> gboolean;
    pub fn gst_structure_get_int(structure: *GstStructure, fieldname: *gchar,
                                 value: *mut gint) -> gboolean;
    pub fn gst_structure_get_uint(structure: *GstStructure, fieldname: *gchar,
                                  value: *mut guint) -> gboolean;
    pub fn gst_structure_get_double(structure: *GstStructure,
                                    fieldname: *gchar, value: *mut gdouble) ->
     gboolean;
    pub fn gst_structure_get_date(structure: *GstStructure, fieldname: *gchar,
                                  value: *mut *mut GDate) -> gboolean;
    pub fn gst_structure_get_date_time(structure: *GstStructure,
                                       fieldname: *gchar,
                                       value: *mut *mut GstDateTime) ->
     gboolean;
    pub fn gst_structure_get_clock_time(structure: *GstStructure,
                                        fieldname: *gchar,
                                        value: *mut GstClockTime) -> gboolean;
    pub fn gst_structure_get_string(structure: *GstStructure,
                                    fieldname: *gchar) -> *gchar;
    pub fn gst_structure_get_enum(structure: *GstStructure, fieldname: *gchar,
                                  enumtype: GType, value: *mut gint) ->
     gboolean;
    pub fn gst_structure_get_fraction(structure: *GstStructure,
                                      fieldname: *gchar,
                                      value_numerator: *mut gint,
                                      value_denominator: *mut gint) ->
     gboolean;
    pub fn gst_structure_to_string(structure: *GstStructure) -> *mut gchar;
    pub fn gst_structure_from_string(string: *gchar, end: *mut *mut gchar) ->
     *mut GstStructure;
    pub fn gst_structure_fixate_field_nearest_int(structure:
                                                      *mut GstStructure,
                                                  field_name: *c_schar,
                                                  target: c_int) -> gboolean;
    pub fn gst_structure_fixate_field_nearest_double(structure:
                                                         *mut GstStructure,
                                                     field_name: *c_schar,
                                                     target: c_double) ->
     gboolean;
    pub fn gst_structure_fixate_field_boolean(structure: *mut GstStructure,
                                              field_name: *c_schar,
                                              target: gboolean) -> gboolean;
    pub fn gst_structure_fixate_field_string(structure: *mut GstStructure,
                                             field_name: *c_schar,
                                             target: *gchar) -> gboolean;
    pub fn gst_structure_fixate_field_nearest_fraction(structure:
                                                           *mut GstStructure,
                                                       field_name: *c_schar,
                                                       target_numerator: gint,
                                                       target_denominator:
                                                           gint) -> gboolean;
    pub fn gst_structure_fixate_field(structure: *mut GstStructure,
                                      field_name: *c_schar) -> gboolean;
    pub fn gst_structure_fixate(structure: *mut GstStructure);
    pub fn gst_structure_is_equal(structure1: *GstStructure,
                                  structure2: *GstStructure) -> gboolean;
    pub fn gst_structure_is_subset(subset: *GstStructure,
                                   superset: *GstStructure) -> gboolean;
    pub fn gst_structure_can_intersect(struct1: *GstStructure,
                                       struct2: *GstStructure) -> gboolean;
    pub fn gst_structure_intersect(struct1: *GstStructure,
                                   struct2: *GstStructure) ->
     *mut GstStructure;
    pub fn gst_caps_features_get_type() -> GType;
    pub fn gst_is_caps_features(obj: gconstpointer) -> gboolean;
    pub fn gst_caps_features_new_empty() -> *mut GstCapsFeatures;
    pub fn gst_caps_features_new_any() -> *mut GstCapsFeatures;
    pub fn gst_caps_features_new(feature1: *gchar, ...) ->
     *mut GstCapsFeatures;
    pub fn gst_caps_features_new_valist(feature1: *gchar, varargs: va_list) ->
     *mut GstCapsFeatures;
    pub fn gst_caps_features_new_id(feature1: GQuark, ...) ->
     *mut GstCapsFeatures;
    pub fn gst_caps_features_new_id_valist(feature1: GQuark, varargs: va_list)
     -> *mut GstCapsFeatures;
    pub fn gst_caps_features_set_parent_refcount(features:
                                                     *mut GstCapsFeatures,
                                                 refcount: *mut gint) ->
     gboolean;
    pub fn gst_caps_features_copy(features: *GstCapsFeatures) ->
     *mut GstCapsFeatures;
    pub fn gst_caps_features_free(features: *mut GstCapsFeatures);
    pub fn gst_caps_features_to_string(features: *GstCapsFeatures) ->
     *mut gchar;
    pub fn gst_caps_features_from_string(features: *gchar) ->
     *mut GstCapsFeatures;
    pub fn gst_caps_features_get_size(features: *GstCapsFeatures) -> guint;
    pub fn gst_caps_features_get_nth(features: *GstCapsFeatures, i: guint) ->
     *gchar;
    pub fn gst_caps_features_get_nth_id(features: *GstCapsFeatures, i: guint)
     -> GQuark;
    pub fn gst_caps_features_contains(features: *GstCapsFeatures,
                                      feature: *gchar) -> gboolean;
    pub fn gst_caps_features_contains_id(features: *GstCapsFeatures,
                                         feature: GQuark) -> gboolean;
    pub fn gst_caps_features_is_equal(features1: *GstCapsFeatures,
                                      features2: *GstCapsFeatures) ->
     gboolean;
    pub fn gst_caps_features_is_any(features: *GstCapsFeatures) -> gboolean;
    pub fn gst_caps_features_add(features: *mut GstCapsFeatures,
                                 feature: *gchar);
    pub fn gst_caps_features_add_id(features: *mut GstCapsFeatures,
                                    feature: GQuark);
    pub fn gst_caps_features_remove(features: *mut GstCapsFeatures,
                                    feature: *gchar);
    pub fn gst_caps_features_remove_id(features: *mut GstCapsFeatures,
                                       feature: GQuark);
    pub fn gst_caps_get_type() -> GType;
    pub fn gst_caps_new_empty() -> *mut GstCaps;
    pub fn gst_caps_new_any() -> *mut GstCaps;
    pub fn gst_caps_new_empty_simple(media_type: *c_schar) -> *mut GstCaps;
    pub fn gst_caps_new_simple(media_type: *c_schar, fieldname: *c_schar, ...)
     -> *mut GstCaps;
    pub fn gst_caps_new_full(struct1: *mut GstStructure, ...) -> *mut GstCaps;
    pub fn gst_caps_new_full_valist(structure: *mut GstStructure,
                                    var_args: va_list) -> *mut GstCaps;
    pub fn gst_static_caps_get_type() -> GType;
    pub fn gst_static_caps_get(static_caps: *mut GstStaticCaps) ->
     *mut GstCaps;
    pub fn gst_static_caps_cleanup(static_caps: *mut GstStaticCaps);
    pub fn gst_caps_append(caps1: *mut GstCaps, caps2: *mut GstCaps);
    pub fn gst_caps_append_structure(caps: *mut GstCaps,
                                     structure: *mut GstStructure);
    pub fn gst_caps_append_structure_full(caps: *mut GstCaps,
                                          structure: *mut GstStructure,
                                          features: *mut GstCapsFeatures);
    pub fn gst_caps_remove_structure(caps: *mut GstCaps, idx: guint);
    pub fn gst_caps_merge(caps1: *mut GstCaps, caps2: *mut GstCaps) ->
     *mut GstCaps;
    pub fn gst_caps_merge_structure(caps: *mut GstCaps,
                                    structure: *mut GstStructure) ->
     *mut GstCaps;
    pub fn gst_caps_merge_structure_full(caps: *mut GstCaps,
                                         structure: *mut GstStructure,
                                         features: *mut GstCapsFeatures) ->
     *mut GstCaps;
    pub fn gst_caps_get_size(caps: *GstCaps) -> guint;
    pub fn gst_caps_get_structure(caps: *GstCaps, index: guint) ->
     *mut GstStructure;
    pub fn gst_caps_steal_structure(caps: *mut GstCaps, index: guint) ->
     *mut GstStructure;
    pub fn gst_caps_set_features(caps: *mut GstCaps, index: guint,
                                 features: *mut GstCapsFeatures);
    pub fn gst_caps_get_features(caps: *GstCaps, index: guint) ->
     *mut GstCapsFeatures;
    pub fn gst_caps_copy_nth(caps: *GstCaps, nth: guint) -> *mut GstCaps;
    pub fn gst_caps_truncate(caps: *mut GstCaps) -> *mut GstCaps;
    pub fn gst_caps_set_value(caps: *mut GstCaps, field: *c_schar,
                              value: *GValue);
    pub fn gst_caps_set_simple(caps: *mut GstCaps, field: *c_schar, ...);
    pub fn gst_caps_set_simple_valist(caps: *mut GstCaps, field: *c_schar,
                                      varargs: va_list);
    pub fn gst_caps_is_any(caps: *GstCaps) -> gboolean;
    pub fn gst_caps_is_empty(caps: *GstCaps) -> gboolean;
    pub fn gst_caps_is_fixed(caps: *GstCaps) -> gboolean;
    pub fn gst_caps_is_always_compatible(caps1: *GstCaps, caps2: *GstCaps) ->
     gboolean;
    pub fn gst_caps_is_subset(subset: *GstCaps, superset: *GstCaps) ->
     gboolean;
    pub fn gst_caps_is_subset_structure(caps: *GstCaps,
                                        structure: *GstStructure) -> gboolean;
    pub fn gst_caps_is_subset_structure_full(caps: *GstCaps,
                                             structure: *GstStructure,
                                             features: *GstCapsFeatures) ->
     gboolean;
    pub fn gst_caps_is_equal(caps1: *GstCaps, caps2: *GstCaps) -> gboolean;
    pub fn gst_caps_is_equal_fixed(caps1: *GstCaps, caps2: *GstCaps) ->
     gboolean;
    pub fn gst_caps_can_intersect(caps1: *GstCaps, caps2: *GstCaps) ->
     gboolean;
    pub fn gst_caps_is_strictly_equal(caps1: *GstCaps, caps2: *GstCaps) ->
     gboolean;
    pub fn gst_caps_intersect(caps1: *mut GstCaps, caps2: *mut GstCaps) ->
     *mut GstCaps;
    pub fn gst_caps_intersect_full(caps1: *mut GstCaps, caps2: *mut GstCaps,
                                   mode: GstCapsIntersectMode) ->
     *mut GstCaps;
    pub fn gst_caps_subtract(minuend: *mut GstCaps, subtrahend: *mut GstCaps)
     -> *mut GstCaps;
    pub fn gst_caps_normalize(caps: *mut GstCaps) -> *mut GstCaps;
    pub fn gst_caps_simplify(caps: *mut GstCaps) -> *mut GstCaps;
    pub fn gst_caps_fixate(caps: *mut GstCaps) -> *mut GstCaps;
    pub fn gst_caps_to_string(caps: *GstCaps) -> *mut gchar;
    pub fn gst_caps_from_string(string: *gchar) -> *mut GstCaps;
    pub fn gst_iterator_get_type() -> GType;
    pub fn gst_iterator_new(size: guint, _type: GType, lock: *mut GMutex,
                            master_cookie: *mut guint32,
                            copy: GstIteratorCopyFunction,
                            next: GstIteratorNextFunction,
                            item: GstIteratorItemFunction,
                            resync: GstIteratorResyncFunction,
                            free: GstIteratorFreeFunction) ->
     *mut GstIterator;
    pub fn gst_iterator_new_list(_type: GType, lock: *mut GMutex,
                                 master_cookie: *mut guint32,
                                 list: *mut *mut GList, owner: *mut GObject,
                                 item: GstIteratorItemFunction) ->
     *mut GstIterator;
    pub fn gst_iterator_new_single(_type: GType, object: *GValue) ->
     *mut GstIterator;
    pub fn gst_iterator_copy(it: *GstIterator) -> *mut GstIterator;
    pub fn gst_iterator_next(it: *mut GstIterator, elem: *mut GValue) ->
     GstIteratorResult;
    pub fn gst_iterator_resync(it: *mut GstIterator);
    pub fn gst_iterator_free(it: *mut GstIterator);
    pub fn gst_iterator_push(it: *mut GstIterator, other: *mut GstIterator);
    pub fn gst_iterator_filter(it: *mut GstIterator, func: GCompareFunc,
                               user_data: *GValue) -> *mut GstIterator;
    pub fn gst_iterator_fold(it: *mut GstIterator,
                             func: GstIteratorFoldFunction, ret: *mut GValue,
                             user_data: gpointer) -> GstIteratorResult;
    pub fn gst_iterator_foreach(it: *mut GstIterator,
                                func: GstIteratorForeachFunction,
                                user_data: gpointer) -> GstIteratorResult;
    pub fn gst_iterator_find_custom(it: *mut GstIterator, func: GCompareFunc,
                                    elem: *mut GValue, user_data: gpointer) ->
     gboolean;
    pub fn gst_format_get_name(format: GstFormat) -> *gchar;
    pub fn gst_format_to_quark(format: GstFormat) -> GQuark;
    pub fn gst_format_register(nick: *gchar, description: *gchar) ->
     GstFormat;
    pub fn gst_format_get_by_nick(nick: *gchar) -> GstFormat;
    pub fn gst_formats_contains(formats: *GstFormat, format: GstFormat) ->
     gboolean;
    pub fn gst_format_get_details(format: GstFormat) -> *GstFormatDefinition;
    pub fn gst_format_iterate_definitions() -> *mut GstIterator;
    pub fn gst_segment_get_type() -> GType;
    pub fn gst_segment_new() -> *mut GstSegment;
    pub fn gst_segment_copy(segment: *GstSegment) -> *mut GstSegment;
    pub fn gst_segment_copy_into(src: *GstSegment, dest: *mut GstSegment);
    pub fn gst_segment_free(segment: *mut GstSegment);
    pub fn gst_segment_init(segment: *mut GstSegment, format: GstFormat);
    pub fn gst_segment_to_stream_time(segment: *GstSegment, format: GstFormat,
                                      position: guint64) -> guint64;
    pub fn gst_segment_to_running_time(segment: *GstSegment,
                                       format: GstFormat, position: guint64)
     -> guint64;
    pub fn gst_segment_to_position(segment: *GstSegment, format: GstFormat,
                                   running_time: guint64) -> guint64;
    pub fn gst_segment_set_running_time(segment: *mut GstSegment,
                                        format: GstFormat,
                                        running_time: guint64) -> gboolean;
    pub fn gst_segment_clip(segment: *GstSegment, format: GstFormat,
                            start: guint64, stop: guint64,
                            clip_start: *mut guint64, clip_stop: *mut guint64)
     -> gboolean;
    pub fn gst_segment_do_seek(segment: *mut GstSegment, rate: gdouble,
                               format: GstFormat, flags: GstSeekFlags,
                               start_type: GstSeekType, start: guint64,
                               stop_type: GstSeekType, stop: guint64,
                               update: *mut gboolean) -> gboolean;
    pub fn gst_sample_get_type() -> GType;
    pub fn gst_sample_new(buffer: *mut GstBuffer, caps: *mut GstCaps,
                          segment: *GstSegment, info: *mut GstStructure) ->
     *mut GstSample;
    pub fn gst_sample_get_buffer(sample: *mut GstSample) -> *mut GstBuffer;
    pub fn gst_sample_get_caps(sample: *mut GstSample) -> *mut GstCaps;
    pub fn gst_sample_get_segment(sample: *mut GstSample) -> *mut GstSegment;
    pub fn gst_sample_get_info(sample: *mut GstSample) -> *GstStructure;
    pub fn gst_tag_list_get_type() -> GType;
    pub fn gst_tag_register(name: *gchar, flag: GstTagFlag, _type: GType,
                            nick: *gchar, blurb: *gchar,
                            func: GstTagMergeFunc);
    pub fn gst_tag_register_static(name: *gchar, flag: GstTagFlag,
                                   _type: GType, nick: *gchar, blurb: *gchar,
                                   func: GstTagMergeFunc);
    pub fn gst_tag_merge_use_first(dest: *mut GValue, src: *GValue);
    pub fn gst_tag_merge_strings_with_comma(dest: *mut GValue, src: *GValue);
    pub fn gst_tag_exists(tag: *gchar) -> gboolean;
    pub fn gst_tag_get_type(tag: *gchar) -> GType;
    pub fn gst_tag_get_nick(tag: *gchar) -> *gchar;
    pub fn gst_tag_get_description(tag: *gchar) -> *gchar;
    pub fn gst_tag_get_flag(tag: *gchar) -> GstTagFlag;
    pub fn gst_tag_is_fixed(tag: *gchar) -> gboolean;
    pub fn gst_tag_list_new_empty() -> *mut GstTagList;
    pub fn gst_tag_list_new(tag: *gchar, ...) -> *mut GstTagList;
    pub fn gst_tag_list_new_valist(var_args: va_list) -> *mut GstTagList;
    pub fn gst_tag_list_set_scope(list: *mut GstTagList, scope: GstTagScope);
    pub fn gst_tag_list_get_scope(list: *GstTagList) -> GstTagScope;
    pub fn gst_tag_list_to_string(list: *GstTagList) -> *mut gchar;
    pub fn gst_tag_list_new_from_string(str: *gchar) -> *mut GstTagList;
    pub fn gst_tag_list_n_tags(list: *GstTagList) -> gint;
    pub fn gst_tag_list_nth_tag_name(list: *GstTagList, index: guint) ->
     *gchar;
    pub fn gst_tag_list_is_empty(list: *GstTagList) -> gboolean;
    pub fn gst_tag_list_is_equal(list1: *GstTagList, list2: *GstTagList) ->
     gboolean;
    pub fn gst_tag_list_insert(into: *mut GstTagList, from: *GstTagList,
                               mode: GstTagMergeMode);
    pub fn gst_tag_list_merge(list1: *GstTagList, list2: *GstTagList,
                              mode: GstTagMergeMode) -> *mut GstTagList;
    pub fn gst_tag_list_get_tag_size(list: *GstTagList, tag: *gchar) -> guint;
    pub fn gst_tag_list_add(list: *mut GstTagList, mode: GstTagMergeMode,
                            tag: *gchar, ...);
    pub fn gst_tag_list_add_values(list: *mut GstTagList,
                                   mode: GstTagMergeMode, tag: *gchar, ...);
    pub fn gst_tag_list_add_valist(list: *mut GstTagList,
                                   mode: GstTagMergeMode, tag: *gchar,
                                   var_args: va_list);
    pub fn gst_tag_list_add_valist_values(list: *mut GstTagList,
                                          mode: GstTagMergeMode, tag: *gchar,
                                          var_args: va_list);
    pub fn gst_tag_list_add_value(list: *mut GstTagList,
                                  mode: GstTagMergeMode, tag: *gchar,
                                  value: *GValue);
    pub fn gst_tag_list_remove_tag(list: *mut GstTagList, tag: *gchar);
    pub fn gst_tag_list_foreach(list: *GstTagList, func: GstTagForeachFunc,
                                user_data: gpointer);
    pub fn gst_tag_list_get_value_index(list: *GstTagList, tag: *gchar,
                                        index: guint) -> *GValue;
    pub fn gst_tag_list_copy_value(dest: *mut GValue, list: *GstTagList,
                                   tag: *gchar) -> gboolean;
    pub fn gst_tag_list_get_boolean(list: *GstTagList, tag: *gchar,
                                    value: *mut gboolean) -> gboolean;
    pub fn gst_tag_list_get_boolean_index(list: *GstTagList, tag: *gchar,
                                          index: guint, value: *mut gboolean)
     -> gboolean;
    pub fn gst_tag_list_get_int(list: *GstTagList, tag: *gchar,
                                value: *mut gint) -> gboolean;
    pub fn gst_tag_list_get_int_index(list: *GstTagList, tag: *gchar,
                                      index: guint, value: *mut gint) ->
     gboolean;
    pub fn gst_tag_list_get_uint(list: *GstTagList, tag: *gchar,
                                 value: *mut guint) -> gboolean;
    pub fn gst_tag_list_get_uint_index(list: *GstTagList, tag: *gchar,
                                       index: guint, value: *mut guint) ->
     gboolean;
    pub fn gst_tag_list_get_int64(list: *GstTagList, tag: *gchar,
                                  value: *mut gint64) -> gboolean;
    pub fn gst_tag_list_get_int64_index(list: *GstTagList, tag: *gchar,
                                        index: guint, value: *mut gint64) ->
     gboolean;
    pub fn gst_tag_list_get_uint64(list: *GstTagList, tag: *gchar,
                                   value: *mut guint64) -> gboolean;
    pub fn gst_tag_list_get_uint64_index(list: *GstTagList, tag: *gchar,
                                         index: guint, value: *mut guint64) ->
     gboolean;
    pub fn gst_tag_list_get_float(list: *GstTagList, tag: *gchar,
                                  value: *mut gfloat) -> gboolean;
    pub fn gst_tag_list_get_float_index(list: *GstTagList, tag: *gchar,
                                        index: guint, value: *mut gfloat) ->
     gboolean;
    pub fn gst_tag_list_get_double(list: *GstTagList, tag: *gchar,
                                   value: *mut gdouble) -> gboolean;
    pub fn gst_tag_list_get_double_index(list: *GstTagList, tag: *gchar,
                                         index: guint, value: *mut gdouble) ->
     gboolean;
    pub fn gst_tag_list_get_string(list: *GstTagList, tag: *gchar,
                                   value: *mut *mut gchar) -> gboolean;
    pub fn gst_tag_list_get_string_index(list: *GstTagList, tag: *gchar,
                                         index: guint, value: *mut *mut gchar)
     -> gboolean;
    pub fn gst_tag_list_peek_string_index(list: *GstTagList, tag: *gchar,
                                          index: guint, value: *mut *gchar) ->
     gboolean;
    pub fn gst_tag_list_get_pointer(list: *GstTagList, tag: *gchar,
                                    value: *mut gpointer) -> gboolean;
    pub fn gst_tag_list_get_pointer_index(list: *GstTagList, tag: *gchar,
                                          index: guint, value: *mut gpointer)
     -> gboolean;
    pub fn gst_tag_list_get_date(list: *GstTagList, tag: *gchar,
                                 value: *mut *mut GDate) -> gboolean;
    pub fn gst_tag_list_get_date_index(list: *GstTagList, tag: *gchar,
                                       index: guint, value: *mut *mut GDate)
     -> gboolean;
    pub fn gst_tag_list_get_date_time(list: *GstTagList, tag: *gchar,
                                      value: *mut *mut GstDateTime) ->
     gboolean;
    pub fn gst_tag_list_get_date_time_index(list: *GstTagList, tag: *gchar,
                                            index: guint,
                                            value: *mut *mut GstDateTime) ->
     gboolean;
    pub fn gst_tag_list_get_sample(list: *GstTagList, tag: *gchar,
                                   sample: *mut *mut GstSample) -> gboolean;
    pub fn gst_tag_list_get_sample_index(list: *GstTagList, tag: *gchar,
                                         index: guint,
                                         sample: *mut *mut GstSample) ->
     gboolean;
    pub fn gst_toc_get_type() -> GType;
    pub fn gst_toc_entry_get_type() -> GType;
    pub fn gst_toc_new(scope: GstTocScope) -> *mut GstToc;
    pub fn gst_toc_get_scope(toc: *GstToc) -> GstTocScope;
    pub fn gst_toc_set_tags(toc: *mut GstToc, tags: *mut GstTagList);
    pub fn gst_toc_merge_tags(toc: *mut GstToc, tags: *mut GstTagList,
                              mode: GstTagMergeMode);
    pub fn gst_toc_get_tags(toc: *GstToc) -> *mut GstTagList;
    pub fn gst_toc_append_entry(toc: *mut GstToc, entry: *mut GstTocEntry);
    pub fn gst_toc_get_entries(toc: *GstToc) -> *mut GList;
    pub fn gst_toc_dump(toc: *mut GstToc);
    pub fn gst_toc_entry_new(_type: GstTocEntryType, uid: *gchar) ->
     *mut GstTocEntry;
    pub fn gst_toc_find_entry(toc: *GstToc, uid: *gchar) -> *mut GstTocEntry;
    pub fn gst_toc_entry_get_entry_type(entry: *GstTocEntry) ->
     GstTocEntryType;
    pub fn gst_toc_entry_get_uid(entry: *GstTocEntry) -> *gchar;
    pub fn gst_toc_entry_append_sub_entry(entry: *mut GstTocEntry,
                                          subentry: *mut GstTocEntry);
    pub fn gst_toc_entry_get_sub_entries(entry: *GstTocEntry) -> *mut GList;
    pub fn gst_toc_entry_set_tags(entry: *mut GstTocEntry,
                                  tags: *mut GstTagList);
    pub fn gst_toc_entry_merge_tags(entry: *mut GstTocEntry,
                                    tags: *mut GstTagList,
                                    mode: GstTagMergeMode);
    pub fn gst_toc_entry_get_tags(entry: *GstTocEntry) -> *mut GstTagList;
    pub fn gst_toc_entry_is_alternative(entry: *GstTocEntry) -> gboolean;
    pub fn gst_toc_entry_is_sequence(entry: *GstTocEntry) -> gboolean;
    pub fn gst_toc_entry_set_start_stop_times(entry: *mut GstTocEntry,
                                              start: gint64, stop: gint64);
    pub fn gst_toc_entry_get_start_stop_times(entry: *GstTocEntry,
                                              start: *mut gint64,
                                              stop: *mut gint64) -> gboolean;
    pub fn gst_toc_entry_get_toc(entry: *mut GstTocEntry) -> *mut GstToc;
    pub fn gst_toc_entry_get_parent(entry: *mut GstTocEntry) ->
     *mut GstTocEntry;
    pub fn gst_toc_entry_type_get_nick(_type: GstTocEntryType) -> *gchar;
    pub fn gst_context_get_type() -> GType;
    pub fn gst_context_new(context_type: *gchar, persistent: gboolean) ->
     *mut GstContext;
    pub fn gst_context_get_context_type(context: *GstContext) -> *gchar;
    pub fn gst_context_has_context_type(context: *GstContext,
                                        context_type: *gchar) -> gboolean;
    pub fn gst_context_get_structure(context: *GstContext) -> *GstStructure;
    pub fn gst_context_writable_structure(context: *mut GstContext) ->
     *mut GstStructure;
    pub fn gst_context_is_persistent(context: *GstContext) -> gboolean;
    pub fn gst_query_type_get_name(_type: GstQueryType) -> *gchar;
    pub fn gst_query_type_to_quark(_type: GstQueryType) -> GQuark;
    pub fn gst_query_type_get_flags(_type: GstQueryType) -> GstQueryTypeFlags;
    pub fn gst_query_get_type() -> GType;
    pub fn gst_query_new_custom(_type: GstQueryType,
                                structure: *mut GstStructure) ->
     *mut GstQuery;
    pub fn gst_query_get_structure(query: *mut GstQuery) -> *GstStructure;
    pub fn gst_query_writable_structure(query: *mut GstQuery) ->
     *mut GstStructure;
    pub fn gst_query_new_position(format: GstFormat) -> *mut GstQuery;
    pub fn gst_query_set_position(query: *mut GstQuery, format: GstFormat,
                                  cur: gint64);
    pub fn gst_query_parse_position(query: *mut GstQuery,
                                    format: *mut GstFormat, cur: *mut gint64);
    pub fn gst_query_new_duration(format: GstFormat) -> *mut GstQuery;
    pub fn gst_query_set_duration(query: *mut GstQuery, format: GstFormat,
                                  duration: gint64);
    pub fn gst_query_parse_duration(query: *mut GstQuery,
                                    format: *mut GstFormat,
                                    duration: *mut gint64);
    pub fn gst_query_new_latency() -> *mut GstQuery;
    pub fn gst_query_set_latency(query: *mut GstQuery, live: gboolean,
                                 min_latency: GstClockTime,
                                 max_latency: GstClockTime);
    pub fn gst_query_parse_latency(query: *mut GstQuery, live: *mut gboolean,
                                   min_latency: *mut GstClockTime,
                                   max_latency: *mut GstClockTime);
    pub fn gst_query_new_convert(src_format: GstFormat, value: gint64,
                                 dest_format: GstFormat) -> *mut GstQuery;
    pub fn gst_query_set_convert(query: *mut GstQuery, src_format: GstFormat,
                                 src_value: gint64, dest_format: GstFormat,
                                 dest_value: gint64);
    pub fn gst_query_parse_convert(query: *mut GstQuery,
                                   src_format: *mut GstFormat,
                                   src_value: *mut gint64,
                                   dest_format: *mut GstFormat,
                                   dest_value: *mut gint64);
    pub fn gst_query_new_segment(format: GstFormat) -> *mut GstQuery;
    pub fn gst_query_set_segment(query: *mut GstQuery, rate: gdouble,
                                 format: GstFormat, start_value: gint64,
                                 stop_value: gint64);
    pub fn gst_query_parse_segment(query: *mut GstQuery, rate: *mut gdouble,
                                   format: *mut GstFormat,
                                   start_value: *mut gint64,
                                   stop_value: *mut gint64);
    pub fn gst_query_new_seeking(format: GstFormat) -> *mut GstQuery;
    pub fn gst_query_set_seeking(query: *mut GstQuery, format: GstFormat,
                                 seekable: gboolean, segment_start: gint64,
                                 segment_end: gint64);
    pub fn gst_query_parse_seeking(query: *mut GstQuery,
                                   format: *mut GstFormat,
                                   seekable: *mut gboolean,
                                   segment_start: *mut gint64,
                                   segment_end: *mut gint64);
    pub fn gst_query_new_formats() -> *mut GstQuery;
    pub fn gst_query_set_formats(query: *mut GstQuery, n_formats: gint, ...);
    pub fn gst_query_set_formatsv(query: *mut GstQuery, n_formats: gint,
                                  formats: *GstFormat);
    pub fn gst_query_parse_n_formats(query: *mut GstQuery,
                                     n_formats: *mut guint);
    pub fn gst_query_parse_nth_format(query: *mut GstQuery, nth: guint,
                                      format: *mut GstFormat);
    pub fn gst_query_new_buffering(format: GstFormat) -> *mut GstQuery;
    pub fn gst_query_set_buffering_percent(query: *mut GstQuery,
                                           busy: gboolean, percent: gint);
    pub fn gst_query_parse_buffering_percent(query: *mut GstQuery,
                                             busy: *mut gboolean,
                                             percent: *mut gint);
    pub fn gst_query_set_buffering_stats(query: *mut GstQuery,
                                         mode: GstBufferingMode, avg_in: gint,
                                         avg_out: gint,
                                         buffering_left: gint64);
    pub fn gst_query_parse_buffering_stats(query: *mut GstQuery,
                                           mode: *mut GstBufferingMode,
                                           avg_in: *mut gint,
                                           avg_out: *mut gint,
                                           buffering_left: *mut gint64);
    pub fn gst_query_set_buffering_range(query: *mut GstQuery,
                                         format: GstFormat, start: gint64,
                                         stop: gint64,
                                         estimated_total: gint64);
    pub fn gst_query_parse_buffering_range(query: *mut GstQuery,
                                           format: *mut GstFormat,
                                           start: *mut gint64,
                                           stop: *mut gint64,
                                           estimated_total: *mut gint64);
    pub fn gst_query_add_buffering_range(query: *mut GstQuery, start: gint64,
                                         stop: gint64) -> gboolean;
    pub fn gst_query_get_n_buffering_ranges(query: *mut GstQuery) -> guint;
    pub fn gst_query_parse_nth_buffering_range(query: *mut GstQuery,
                                               index: guint,
                                               start: *mut gint64,
                                               stop: *mut gint64) -> gboolean;
    pub fn gst_query_new_uri() -> *mut GstQuery;
    pub fn gst_query_parse_uri(query: *mut GstQuery, uri: *mut *mut gchar);
    pub fn gst_query_set_uri(query: *mut GstQuery, uri: *gchar);
    pub fn gst_query_parse_uri_redirection(query: *mut GstQuery,
                                           uri: *mut *mut gchar);
    pub fn gst_query_set_uri_redirection(query: *mut GstQuery, uri: *gchar);
    pub fn gst_query_new_allocation(caps: *mut GstCaps, need_pool: gboolean)
     -> *mut GstQuery;
    pub fn gst_query_parse_allocation(query: *mut GstQuery,
                                      caps: *mut *mut GstCaps,
                                      need_pool: *mut gboolean);
    pub fn gst_query_add_allocation_pool(query: *mut GstQuery,
                                         pool: *mut GstBufferPool,
                                         size: guint, min_buffers: guint,
                                         max_buffers: guint);
    pub fn gst_query_get_n_allocation_pools(query: *mut GstQuery) -> guint;
    pub fn gst_query_parse_nth_allocation_pool(query: *mut GstQuery,
                                               index: guint,
                                               pool: *mut *mut GstBufferPool,
                                               size: *mut guint,
                                               min_buffers: *mut guint,
                                               max_buffers: *mut guint);
    pub fn gst_query_set_nth_allocation_pool(query: *mut GstQuery,
                                             index: guint,
                                             pool: *mut GstBufferPool,
                                             size: guint, min_buffers: guint,
                                             max_buffers: guint);
    pub fn gst_query_remove_nth_allocation_pool(query: *mut GstQuery,
                                                index: guint);
    pub fn gst_query_add_allocation_param(query: *mut GstQuery,
                                          allocator: *mut GstAllocator,
                                          params: *GstAllocationParams);
    pub fn gst_query_get_n_allocation_params(query: *mut GstQuery) -> guint;
    pub fn gst_query_parse_nth_allocation_param(query: *mut GstQuery,
                                                index: guint,
                                                allocator:
                                                    *mut *mut GstAllocator,
                                                params:
                                                    *mut GstAllocationParams);
    pub fn gst_query_set_nth_allocation_param(query: *mut GstQuery,
                                              index: guint,
                                              allocator: *mut GstAllocator,
                                              params: *GstAllocationParams);
    pub fn gst_query_remove_nth_allocation_param(query: *mut GstQuery,
                                                 index: guint);
    pub fn gst_query_add_allocation_meta(query: *mut GstQuery, api: GType,
                                         params: *GstStructure);
    pub fn gst_query_get_n_allocation_metas(query: *mut GstQuery) -> guint;
    pub fn gst_query_parse_nth_allocation_meta(query: *mut GstQuery,
                                               index: guint,
                                               params: *mut *GstStructure) ->
     GType;
    pub fn gst_query_remove_nth_allocation_meta(query: *mut GstQuery,
                                                index: guint);
    pub fn gst_query_find_allocation_meta(query: *mut GstQuery, api: GType,
                                          index: *mut guint) -> gboolean;
    pub fn gst_query_new_scheduling() -> *mut GstQuery;
    pub fn gst_query_set_scheduling(query: *mut GstQuery,
                                    flags: GstSchedulingFlags, minsize: gint,
                                    maxsize: gint, align: gint);
    pub fn gst_query_parse_scheduling(query: *mut GstQuery,
                                      flags: *mut GstSchedulingFlags,
                                      minsize: *mut gint, maxsize: *mut gint,
                                      align: *mut gint);
    pub fn gst_query_add_scheduling_mode(query: *mut GstQuery,
                                         mode: GstPadMode);
    pub fn gst_query_get_n_scheduling_modes(query: *mut GstQuery) -> guint;
    pub fn gst_query_parse_nth_scheduling_mode(query: *mut GstQuery,
                                               index: guint) -> GstPadMode;
    pub fn gst_query_has_scheduling_mode(query: *mut GstQuery,
                                         mode: GstPadMode) -> gboolean;
    pub fn gst_query_has_scheduling_mode_with_flags(query: *mut GstQuery,
                                                    mode: GstPadMode,
                                                    flags: GstSchedulingFlags)
     -> gboolean;
    pub fn gst_query_new_accept_caps(caps: *mut GstCaps) -> *mut GstQuery;
    pub fn gst_query_parse_accept_caps(query: *mut GstQuery,
                                       caps: *mut *mut GstCaps);
    pub fn gst_query_set_accept_caps_result(query: *mut GstQuery,
                                            result: gboolean);
    pub fn gst_query_parse_accept_caps_result(query: *mut GstQuery,
                                              result: *mut gboolean);
    pub fn gst_query_new_caps(filter: *mut GstCaps) -> *mut GstQuery;
    pub fn gst_query_parse_caps(query: *mut GstQuery,
                                filter: *mut *mut GstCaps);
    pub fn gst_query_set_caps_result(query: *mut GstQuery,
                                     caps: *mut GstCaps);
    pub fn gst_query_parse_caps_result(query: *mut GstQuery,
                                       caps: *mut *mut GstCaps);
    pub fn gst_query_new_drain() -> *mut GstQuery;
    pub fn gst_query_new_context(context_type: *gchar) -> *mut GstQuery;
    pub fn gst_query_parse_context_type(query: *mut GstQuery,
                                        context_type: *mut *gchar) ->
     gboolean;
    pub fn gst_query_set_context(query: *mut GstQuery,
                                 context: *mut GstContext);
    pub fn gst_query_parse_context(query: *mut GstQuery,
                                   context: *mut *mut GstContext);
    pub fn gst_message_get_type() -> GType;
    pub fn gst_message_type_get_name(_type: GstMessageType) -> *gchar;
    pub fn gst_message_type_to_quark(_type: GstMessageType) -> GQuark;
    pub fn gst_message_new_custom(_type: GstMessageType, src: *mut GstObject,
                                  structure: *mut GstStructure) ->
     *mut GstMessage;
    pub fn gst_message_get_structure(message: *mut GstMessage) ->
     *GstStructure;
    pub fn gst_message_has_name(message: *mut GstMessage, name: *gchar) ->
     gboolean;
    pub fn gst_message_get_seqnum(message: *mut GstMessage) -> guint32;
    pub fn gst_message_set_seqnum(message: *mut GstMessage, seqnum: guint32);
    pub fn gst_message_new_eos(src: *mut GstObject) -> *mut GstMessage;
    pub fn gst_message_new_error(src: *mut GstObject, error: *mut GError,
                                 debug: *gchar) -> *mut GstMessage;
    pub fn gst_message_parse_error(message: *mut GstMessage,
                                   gerror: *mut *mut GError,
                                   debug: *mut *mut gchar);
    pub fn gst_message_new_warning(src: *mut GstObject, error: *mut GError,
                                   debug: *gchar) -> *mut GstMessage;
    pub fn gst_message_parse_warning(message: *mut GstMessage,
                                     gerror: *mut *mut GError,
                                     debug: *mut *mut gchar);
    pub fn gst_message_new_info(src: *mut GstObject, error: *mut GError,
                                debug: *gchar) -> *mut GstMessage;
    pub fn gst_message_parse_info(message: *mut GstMessage,
                                  gerror: *mut *mut GError,
                                  debug: *mut *mut gchar);
    pub fn gst_message_new_tag(src: *mut GstObject, tag_list: *mut GstTagList)
     -> *mut GstMessage;
    pub fn gst_message_parse_tag(message: *mut GstMessage,
                                 tag_list: *mut *mut GstTagList);
    pub fn gst_message_new_buffering(src: *mut GstObject, percent: gint) ->
     *mut GstMessage;
    pub fn gst_message_parse_buffering(message: *mut GstMessage,
                                       percent: *mut gint);
    pub fn gst_message_set_buffering_stats(message: *mut GstMessage,
                                           mode: GstBufferingMode,
                                           avg_in: gint, avg_out: gint,
                                           buffering_left: gint64);
    pub fn gst_message_parse_buffering_stats(message: *mut GstMessage,
                                             mode: *mut GstBufferingMode,
                                             avg_in: *mut gint,
                                             avg_out: *mut gint,
                                             buffering_left: *mut gint64);
    pub fn gst_message_new_state_changed(src: *mut GstObject,
                                         oldstate: GstState,
                                         newstate: GstState,
                                         pending: GstState) ->
     *mut GstMessage;
    pub fn gst_message_parse_state_changed(message: *mut GstMessage,
                                           oldstate: *mut GstState,
                                           newstate: *mut GstState,
                                           pending: *mut GstState);
    pub fn gst_message_new_state_dirty(src: *mut GstObject) ->
     *mut GstMessage;
    pub fn gst_message_new_step_done(src: *mut GstObject, format: GstFormat,
                                     amount: guint64, rate: gdouble,
                                     flush: gboolean, intermediate: gboolean,
                                     duration: guint64, eos: gboolean) ->
     *mut GstMessage;
    pub fn gst_message_parse_step_done(message: *mut GstMessage,
                                       format: *mut GstFormat,
                                       amount: *mut guint64,
                                       rate: *mut gdouble,
                                       flush: *mut gboolean,
                                       intermediate: *mut gboolean,
                                       duration: *mut guint64,
                                       eos: *mut gboolean);
    pub fn gst_message_new_clock_provide(src: *mut GstObject,
                                         clock: *mut GstClock,
                                         ready: gboolean) -> *mut GstMessage;
    pub fn gst_message_parse_clock_provide(message: *mut GstMessage,
                                           clock: *mut *mut GstClock,
                                           ready: *mut gboolean);
    pub fn gst_message_new_clock_lost(src: *mut GstObject,
                                      clock: *mut GstClock) ->
     *mut GstMessage;
    pub fn gst_message_parse_clock_lost(message: *mut GstMessage,
                                        clock: *mut *mut GstClock);
    pub fn gst_message_new_new_clock(src: *mut GstObject,
                                     clock: *mut GstClock) -> *mut GstMessage;
    pub fn gst_message_parse_new_clock(message: *mut GstMessage,
                                       clock: *mut *mut GstClock);
    pub fn gst_message_new_application(src: *mut GstObject,
                                       structure: *mut GstStructure) ->
     *mut GstMessage;
    pub fn gst_message_new_element(src: *mut GstObject,
                                   structure: *mut GstStructure) ->
     *mut GstMessage;
    pub fn gst_message_new_segment_start(src: *mut GstObject,
                                         format: GstFormat, position: gint64)
     -> *mut GstMessage;
    pub fn gst_message_parse_segment_start(message: *mut GstMessage,
                                           format: *mut GstFormat,
                                           position: *mut gint64);
    pub fn gst_message_new_segment_done(src: *mut GstObject,
                                        format: GstFormat, position: gint64)
     -> *mut GstMessage;
    pub fn gst_message_parse_segment_done(message: *mut GstMessage,
                                          format: *mut GstFormat,
                                          position: *mut gint64);
    pub fn gst_message_new_duration_changed(src: *mut GstObject) ->
     *mut GstMessage;
    pub fn gst_message_new_latency(src: *mut GstObject) -> *mut GstMessage;
    pub fn gst_message_new_async_start(src: *mut GstObject) ->
     *mut GstMessage;
    pub fn gst_message_new_async_done(src: *mut GstObject,
                                      running_time: GstClockTime) ->
     *mut GstMessage;
    pub fn gst_message_parse_async_done(message: *mut GstMessage,
                                        running_time: *mut GstClockTime);
    pub fn gst_message_new_structure_change(src: *mut GstObject,
                                            _type: GstStructureChangeType,
                                            owner: *mut GstElement,
                                            busy: gboolean) ->
     *mut GstMessage;
    pub fn gst_message_parse_structure_change(message: *mut GstMessage,
                                              _type:
                                                  *mut GstStructureChangeType,
                                              owner: *mut *mut GstElement,
                                              busy: *mut gboolean);
    pub fn gst_message_new_stream_status(src: *mut GstObject,
                                         _type: GstStreamStatusType,
                                         owner: *mut GstElement) ->
     *mut GstMessage;
    pub fn gst_message_parse_stream_status(message: *mut GstMessage,
                                           _type: *mut GstStreamStatusType,
                                           owner: *mut *mut GstElement);
    pub fn gst_message_set_stream_status_object(message: *mut GstMessage,
                                                object: *GValue);
    pub fn gst_message_get_stream_status_object(message: *mut GstMessage) ->
     *GValue;
    pub fn gst_message_new_request_state(src: *mut GstObject, state: GstState)
     -> *mut GstMessage;
    pub fn gst_message_parse_request_state(message: *mut GstMessage,
                                           state: *mut GstState);
    pub fn gst_message_new_step_start(src: *mut GstObject, active: gboolean,
                                      format: GstFormat, amount: guint64,
                                      rate: gdouble, flush: gboolean,
                                      intermediate: gboolean) ->
     *mut GstMessage;
    pub fn gst_message_parse_step_start(message: *mut GstMessage,
                                        active: *mut gboolean,
                                        format: *mut GstFormat,
                                        amount: *mut guint64,
                                        rate: *mut gdouble,
                                        flush: *mut gboolean,
                                        intermediate: *mut gboolean);
    pub fn gst_message_new_qos(src: *mut GstObject, live: gboolean,
                               running_time: guint64, stream_time: guint64,
                               timestamp: guint64, duration: guint64) ->
     *mut GstMessage;
    pub fn gst_message_set_qos_values(message: *mut GstMessage,
                                      jitter: gint64, proportion: gdouble,
                                      quality: gint);
    pub fn gst_message_set_qos_stats(message: *mut GstMessage,
                                     format: GstFormat, processed: guint64,
                                     dropped: guint64);
    pub fn gst_message_parse_qos(message: *mut GstMessage,
                                 live: *mut gboolean,
                                 running_time: *mut guint64,
                                 stream_time: *mut guint64,
                                 timestamp: *mut guint64,
                                 duration: *mut guint64);
    pub fn gst_message_parse_qos_values(message: *mut GstMessage,
                                        jitter: *mut gint64,
                                        proportion: *mut gdouble,
                                        quality: *mut gint);
    pub fn gst_message_parse_qos_stats(message: *mut GstMessage,
                                       format: *mut GstFormat,
                                       processed: *mut guint64,
                                       dropped: *mut guint64);
    pub fn gst_message_new_progress(src: *mut GstObject,
                                    _type: GstProgressType, code: *gchar,
                                    text: *gchar) -> *mut GstMessage;
    pub fn gst_message_parse_progress(message: *mut GstMessage,
                                      _type: *mut GstProgressType,
                                      code: *mut *mut gchar,
                                      text: *mut *mut gchar);
    pub fn gst_message_new_toc(src: *mut GstObject, toc: *mut GstToc,
                               updated: gboolean) -> *mut GstMessage;
    pub fn gst_message_parse_toc(message: *mut GstMessage,
                                 toc: *mut *mut GstToc,
                                 updated: *mut gboolean);
    pub fn gst_message_new_reset_time(src: *mut GstObject,
                                      running_time: GstClockTime) ->
     *mut GstMessage;
    pub fn gst_message_parse_reset_time(message: *mut GstMessage,
                                        running_time: *mut GstClockTime);
    pub fn gst_message_new_stream_start(src: *mut GstObject) ->
     *mut GstMessage;
    pub fn gst_message_set_group_id(message: *mut GstMessage,
                                    group_id: guint);
    pub fn gst_message_parse_group_id(message: *mut GstMessage,
                                      group_id: *mut guint) -> gboolean;
    pub fn gst_message_new_need_context(src: *mut GstObject,
                                        context_type: *gchar) ->
     *mut GstMessage;
    pub fn gst_message_parse_context_type(message: *mut GstMessage,
                                          context_type: *mut *gchar) ->
     gboolean;
    pub fn gst_message_new_have_context(src: *mut GstObject,
                                        context: *mut GstContext) ->
     *mut GstMessage;
    pub fn gst_message_parse_have_context(message: *mut GstMessage,
                                          context: *mut *mut GstContext);
    pub fn gst_event_type_get_name(_type: GstEventType) -> *gchar;
    pub fn gst_event_type_to_quark(_type: GstEventType) -> GQuark;
    pub fn gst_event_type_get_flags(_type: GstEventType) -> GstEventTypeFlags;
    pub fn gst_event_get_type() -> GType;
    pub fn gst_event_new_custom(_type: GstEventType,
                                structure: *mut GstStructure) ->
     *mut GstEvent;
    pub fn gst_event_get_structure(event: *mut GstEvent) -> *GstStructure;
    pub fn gst_event_writable_structure(event: *mut GstEvent) ->
     *mut GstStructure;
    pub fn gst_event_has_name(event: *mut GstEvent, name: *gchar) -> gboolean;
    pub fn gst_event_get_seqnum(event: *mut GstEvent) -> guint32;
    pub fn gst_event_set_seqnum(event: *mut GstEvent, seqnum: guint32);
    pub fn gst_event_new_stream_start(stream_id: *gchar) -> *mut GstEvent;
    pub fn gst_event_parse_stream_start(event: *mut GstEvent,
                                        stream_id: *mut *gchar);
    pub fn gst_event_set_stream_flags(event: *mut GstEvent,
                                      flags: GstStreamFlags);
    pub fn gst_event_parse_stream_flags(event: *mut GstEvent,
                                        flags: *mut GstStreamFlags);
    pub fn gst_event_set_group_id(event: *mut GstEvent, group_id: guint);
    pub fn gst_event_parse_group_id(event: *mut GstEvent,
                                    group_id: *mut guint) -> gboolean;
    pub fn gst_event_new_flush_start() -> *mut GstEvent;
    pub fn gst_event_new_flush_stop(reset_time: gboolean) -> *mut GstEvent;
    pub fn gst_event_parse_flush_stop(event: *mut GstEvent,
                                      reset_time: *mut gboolean);
    pub fn gst_event_new_eos() -> *mut GstEvent;
    pub fn gst_event_new_gap(timestamp: GstClockTime, duration: GstClockTime)
     -> *mut GstEvent;
    pub fn gst_event_parse_gap(event: *mut GstEvent,
                               timestamp: *mut GstClockTime,
                               duration: *mut GstClockTime);
    pub fn gst_event_new_caps(caps: *mut GstCaps) -> *mut GstEvent;
    pub fn gst_event_parse_caps(event: *mut GstEvent,
                                caps: *mut *mut GstCaps);
    pub fn gst_event_new_segment(segment: *GstSegment) -> *mut GstEvent;
    pub fn gst_event_parse_segment(event: *mut GstEvent,
                                   segment: *mut *GstSegment);
    pub fn gst_event_copy_segment(event: *mut GstEvent,
                                  segment: *mut GstSegment);
    pub fn gst_event_new_tag(taglist: *mut GstTagList) -> *mut GstEvent;
    pub fn gst_event_parse_tag(event: *mut GstEvent,
                               taglist: *mut *mut GstTagList);
    pub fn gst_event_new_toc(toc: *mut GstToc, updated: gboolean) ->
     *mut GstEvent;
    pub fn gst_event_parse_toc(event: *mut GstEvent, toc: *mut *mut GstToc,
                               updated: *mut gboolean);
    pub fn gst_event_new_buffer_size(format: GstFormat, minsize: gint64,
                                     maxsize: gint64, async: gboolean) ->
     *mut GstEvent;
    pub fn gst_event_parse_buffer_size(event: *mut GstEvent,
                                       format: *mut GstFormat,
                                       minsize: *mut gint64,
                                       maxsize: *mut gint64,
                                       async: *mut gboolean);
    pub fn gst_event_new_sink_message(name: *gchar, msg: *mut GstMessage) ->
     *mut GstEvent;
    pub fn gst_event_parse_sink_message(event: *mut GstEvent,
                                        msg: *mut *mut GstMessage);
    pub fn gst_event_new_qos(_type: GstQOSType, proportion: gdouble,
                             diff: GstClockTimeDiff, timestamp: GstClockTime)
     -> *mut GstEvent;
    pub fn gst_event_parse_qos(event: *mut GstEvent, _type: *mut GstQOSType,
                               proportion: *mut gdouble,
                               diff: *mut GstClockTimeDiff,
                               timestamp: *mut GstClockTime);
    pub fn gst_event_new_seek(rate: gdouble, format: GstFormat,
                              flags: GstSeekFlags, start_type: GstSeekType,
                              start: gint64, stop_type: GstSeekType,
                              stop: gint64) -> *mut GstEvent;
    pub fn gst_event_parse_seek(event: *mut GstEvent, rate: *mut gdouble,
                                format: *mut GstFormat,
                                flags: *mut GstSeekFlags,
                                start_type: *mut GstSeekType,
                                start: *mut gint64,
                                stop_type: *mut GstSeekType,
                                stop: *mut gint64);
    pub fn gst_event_new_navigation(structure: *mut GstStructure) ->
     *mut GstEvent;
    pub fn gst_event_new_latency(latency: GstClockTime) -> *mut GstEvent;
    pub fn gst_event_parse_latency(event: *mut GstEvent,
                                   latency: *mut GstClockTime);
    pub fn gst_event_new_step(format: GstFormat, amount: guint64,
                              rate: gdouble, flush: gboolean,
                              intermediate: gboolean) -> *mut GstEvent;
    pub fn gst_event_parse_step(event: *mut GstEvent, format: *mut GstFormat,
                                amount: *mut guint64, rate: *mut gdouble,
                                flush: *mut gboolean,
                                intermediate: *mut gboolean);
    pub fn gst_event_new_reconfigure() -> *mut GstEvent;
    pub fn gst_event_new_toc_select(uid: *gchar) -> *mut GstEvent;
    pub fn gst_event_parse_toc_select(event: *mut GstEvent,
                                      uid: *mut *mut gchar);
    pub fn gst_event_new_segment_done(format: GstFormat, position: gint64) ->
     *mut GstEvent;
    pub fn gst_event_parse_segment_done(event: *mut GstEvent,
                                        format: *mut GstFormat,
                                        position: *mut gint64);
    pub fn gst_task_pool_get_type() -> GType;
    pub fn gst_task_pool_new() -> *mut GstTaskPool;
    pub fn gst_task_pool_prepare(pool: *mut GstTaskPool,
                                 error: *mut *mut GError);
    pub fn gst_task_pool_push(pool: *mut GstTaskPool,
                              func: GstTaskPoolFunction, user_data: gpointer,
                              error: *mut *mut GError) -> gpointer;
    pub fn gst_task_pool_join(pool: *mut GstTaskPool, id: gpointer);
    pub fn gst_task_pool_cleanup(pool: *mut GstTaskPool);
    pub fn gst_task_cleanup_all();
    pub fn gst_task_get_type() -> GType;
    pub fn gst_task_new(func: GstTaskFunction, user_data: gpointer,
                        notify: GDestroyNotify) -> *mut GstTask;
    pub fn gst_task_set_lock(task: *mut GstTask, mutex: *mut GRecMutex);
    pub fn gst_task_get_pool(task: *mut GstTask) -> *mut GstTaskPool;
    pub fn gst_task_set_pool(task: *mut GstTask, pool: *mut GstTaskPool);
    pub fn gst_task_set_enter_callback(task: *mut GstTask,
                                       enter_func: GstTaskThreadFunc,
                                       user_data: gpointer,
                                       notify: GDestroyNotify);
    pub fn gst_task_set_leave_callback(task: *mut GstTask,
                                       leave_func: GstTaskThreadFunc,
                                       user_data: gpointer,
                                       notify: GDestroyNotify);
    pub fn gst_task_get_state(task: *mut GstTask) -> GstTaskState;
    pub fn gst_task_set_state(task: *mut GstTask, state: GstTaskState) ->
     gboolean;
    pub fn gst_task_start(task: *mut GstTask) -> gboolean;
    pub fn gst_task_stop(task: *mut GstTask) -> gboolean;
    pub fn gst_task_pause(task: *mut GstTask) -> gboolean;
    pub fn gst_task_join(task: *mut GstTask) -> gboolean;
    pub fn gst_pad_template_get_type() -> GType;
    pub fn gst_static_pad_template_get_type() -> GType;
    pub fn gst_pad_template_new(name_template: *gchar,
                                direction: GstPadDirection,
                                presence: GstPadPresence, caps: *mut GstCaps)
     -> *mut GstPadTemplate;
    pub fn gst_static_pad_template_get(pad_template:
                                           *mut GstStaticPadTemplate) ->
     *mut GstPadTemplate;
    pub fn gst_static_pad_template_get_caps(templ: *mut GstStaticPadTemplate)
     -> *mut GstCaps;
    pub fn gst_pad_template_get_caps(templ: *mut GstPadTemplate) ->
     *mut GstCaps;
    pub fn gst_pad_template_pad_created(templ: *mut GstPadTemplate,
                                        pad: *mut GstPad);
    pub fn gst_flow_get_name(ret: GstFlowReturn) -> *gchar;
    pub fn gst_flow_to_quark(ret: GstFlowReturn) -> GQuark;
    pub fn gst_pad_probe_info_get_event(info: *mut GstPadProbeInfo) ->
     *mut GstEvent;
    pub fn gst_pad_probe_info_get_query(info: *mut GstPadProbeInfo) ->
     *mut GstQuery;
    pub fn gst_pad_probe_info_get_buffer(info: *mut GstPadProbeInfo) ->
     *mut GstBuffer;
    pub fn gst_pad_probe_info_get_buffer_list(info: *mut GstPadProbeInfo) ->
     *mut GstBufferList;
    pub fn gst_pad_get_type() -> GType;
    pub fn gst_pad_new(name: *gchar, direction: GstPadDirection) ->
     *mut GstPad;
    pub fn gst_pad_new_from_template(templ: *mut GstPadTemplate, name: *gchar)
     -> *mut GstPad;
    pub fn gst_pad_new_from_static_template(templ: *mut GstStaticPadTemplate,
                                            name: *gchar) -> *mut GstPad;
    pub fn gst_pad_get_direction(pad: *mut GstPad) -> GstPadDirection;
    pub fn gst_pad_set_active(pad: *mut GstPad, active: gboolean) -> gboolean;
    pub fn gst_pad_is_active(pad: *mut GstPad) -> gboolean;
    pub fn gst_pad_activate_mode(pad: *mut GstPad, mode: GstPadMode,
                                 active: gboolean) -> gboolean;
    pub fn gst_pad_add_probe(pad: *mut GstPad, mask: GstPadProbeType,
                             callback: GstPadProbeCallback,
                             user_data: gpointer,
                             destroy_data: GDestroyNotify) -> gulong;
    pub fn gst_pad_remove_probe(pad: *mut GstPad, id: gulong);
    pub fn gst_pad_is_blocked(pad: *mut GstPad) -> gboolean;
    pub fn gst_pad_is_blocking(pad: *mut GstPad) -> gboolean;
    pub fn gst_pad_mark_reconfigure(pad: *mut GstPad);
    pub fn gst_pad_needs_reconfigure(pad: *mut GstPad) -> gboolean;
    pub fn gst_pad_check_reconfigure(pad: *mut GstPad) -> gboolean;
    pub fn gst_pad_set_element_private(pad: *mut GstPad, _priv: gpointer);
    pub fn gst_pad_get_element_private(pad: *mut GstPad) -> gpointer;
    pub fn gst_pad_get_pad_template(pad: *mut GstPad) -> *mut GstPadTemplate;
    pub fn gst_pad_store_sticky_event(pad: *mut GstPad, event: *mut GstEvent)
     -> GstFlowReturn;
    pub fn gst_pad_get_sticky_event(pad: *mut GstPad,
                                    event_type: GstEventType, idx: guint) ->
     *mut GstEvent;
    pub fn gst_pad_sticky_events_foreach(pad: *mut GstPad,
                                         foreach_func:
                                             GstPadStickyEventsForeachFunction,
                                         user_data: gpointer);
    pub fn gst_pad_set_activate_function_full(pad: *mut GstPad,
                                              activate:
                                                  GstPadActivateFunction,
                                              user_data: gpointer,
                                              notify: GDestroyNotify);
    pub fn gst_pad_set_activatemode_function_full(pad: *mut GstPad,
                                                  activatemode:
                                                      GstPadActivateModeFunction,
                                                  user_data: gpointer,
                                                  notify: GDestroyNotify);
    pub fn gst_pad_set_chain_function_full(pad: *mut GstPad,
                                           chain: GstPadChainFunction,
                                           user_data: gpointer,
                                           notify: GDestroyNotify);
    pub fn gst_pad_set_chain_list_function_full(pad: *mut GstPad,
                                                chainlist:
                                                    GstPadChainListFunction,
                                                user_data: gpointer,
                                                notify: GDestroyNotify);
    pub fn gst_pad_set_getrange_function_full(pad: *mut GstPad,
                                              get: GstPadGetRangeFunction,
                                              user_data: gpointer,
                                              notify: GDestroyNotify);
    pub fn gst_pad_set_event_function_full(pad: *mut GstPad,
                                           event: GstPadEventFunction,
                                           user_data: gpointer,
                                           notify: GDestroyNotify);
    pub fn gst_pad_set_link_function_full(pad: *mut GstPad,
                                          link: GstPadLinkFunction,
                                          user_data: gpointer,
                                          notify: GDestroyNotify);
    pub fn gst_pad_set_unlink_function_full(pad: *mut GstPad,
                                            unlink: GstPadUnlinkFunction,
                                            user_data: gpointer,
                                            notify: GDestroyNotify);
    pub fn gst_pad_can_link(srcpad: *mut GstPad, sinkpad: *mut GstPad) ->
     gboolean;
    pub fn gst_pad_link(srcpad: *mut GstPad, sinkpad: *mut GstPad) ->
     GstPadLinkReturn;
    pub fn gst_pad_link_full(srcpad: *mut GstPad, sinkpad: *mut GstPad,
                             flags: GstPadLinkCheck) -> GstPadLinkReturn;
    pub fn gst_pad_unlink(srcpad: *mut GstPad, sinkpad: *mut GstPad) ->
     gboolean;
    pub fn gst_pad_is_linked(pad: *mut GstPad) -> gboolean;
    pub fn gst_pad_get_peer(pad: *mut GstPad) -> *mut GstPad;
    pub fn gst_pad_get_pad_template_caps(pad: *mut GstPad) -> *mut GstCaps;
    pub fn gst_pad_get_current_caps(pad: *mut GstPad) -> *mut GstCaps;
    pub fn gst_pad_has_current_caps(pad: *mut GstPad) -> gboolean;
    pub fn gst_pad_get_allowed_caps(pad: *mut GstPad) -> *mut GstCaps;
    pub fn gst_pad_get_offset(pad: *mut GstPad) -> gint64;
    pub fn gst_pad_set_offset(pad: *mut GstPad, offset: gint64);
    pub fn gst_pad_push(pad: *mut GstPad, buffer: *mut GstBuffer) ->
     GstFlowReturn;
    pub fn gst_pad_push_list(pad: *mut GstPad, list: *mut GstBufferList) ->
     GstFlowReturn;
    pub fn gst_pad_pull_range(pad: *mut GstPad, offset: guint64, size: guint,
                              buffer: *mut *mut GstBuffer) -> GstFlowReturn;
    pub fn gst_pad_push_event(pad: *mut GstPad, event: *mut GstEvent) ->
     gboolean;
    pub fn gst_pad_event_default(pad: *mut GstPad, parent: *mut GstObject,
                                 event: *mut GstEvent) -> gboolean;
    pub fn gst_pad_chain(pad: *mut GstPad, buffer: *mut GstBuffer) ->
     GstFlowReturn;
    pub fn gst_pad_chain_list(pad: *mut GstPad, list: *mut GstBufferList) ->
     GstFlowReturn;
    pub fn gst_pad_get_range(pad: *mut GstPad, offset: guint64, size: guint,
                             buffer: *mut *mut GstBuffer) -> GstFlowReturn;
    pub fn gst_pad_send_event(pad: *mut GstPad, event: *mut GstEvent) ->
     gboolean;
    pub fn gst_pad_start_task(pad: *mut GstPad, func: GstTaskFunction,
                              user_data: gpointer, notify: GDestroyNotify) ->
     gboolean;
    pub fn gst_pad_pause_task(pad: *mut GstPad) -> gboolean;
    pub fn gst_pad_stop_task(pad: *mut GstPad) -> gboolean;
    pub fn gst_pad_set_iterate_internal_links_function_full(pad: *mut GstPad,
                                                            iterintlink:
                                                                GstPadIterIntLinkFunction,
                                                            user_data:
                                                                gpointer,
                                                            notify:
                                                                GDestroyNotify);
    pub fn gst_pad_iterate_internal_links(pad: *mut GstPad) ->
     *mut GstIterator;
    pub fn gst_pad_iterate_internal_links_default(pad: *mut GstPad,
                                                  parent: *mut GstObject) ->
     *mut GstIterator;
    pub fn gst_pad_query(pad: *mut GstPad, query: *mut GstQuery) -> gboolean;
    pub fn gst_pad_peer_query(pad: *mut GstPad, query: *mut GstQuery) ->
     gboolean;
    pub fn gst_pad_set_query_function_full(pad: *mut GstPad,
                                           query: GstPadQueryFunction,
                                           user_data: gpointer,
                                           notify: GDestroyNotify);
    pub fn gst_pad_query_default(pad: *mut GstPad, parent: *mut GstObject,
                                 query: *mut GstQuery) -> gboolean;
    pub fn gst_pad_forward(pad: *mut GstPad, forward: GstPadForwardFunction,
                           user_data: gpointer) -> gboolean;
    pub fn gst_pad_mode_get_name(mode: GstPadMode) -> *gchar;
    pub fn gst_bus_get_type() -> GType;
    pub fn gst_bus_new() -> *mut GstBus;
    pub fn gst_bus_post(bus: *mut GstBus, message: *mut GstMessage) ->
     gboolean;
    pub fn gst_bus_have_pending(bus: *mut GstBus) -> gboolean;
    pub fn gst_bus_peek(bus: *mut GstBus) -> *mut GstMessage;
    pub fn gst_bus_pop(bus: *mut GstBus) -> *mut GstMessage;
    pub fn gst_bus_pop_filtered(bus: *mut GstBus, types: GstMessageType) ->
     *mut GstMessage;
    pub fn gst_bus_timed_pop(bus: *mut GstBus, timeout: GstClockTime) ->
     *mut GstMessage;
    pub fn gst_bus_timed_pop_filtered(bus: *mut GstBus, timeout: GstClockTime,
                                      types: GstMessageType) ->
     *mut GstMessage;
    pub fn gst_bus_set_flushing(bus: *mut GstBus, flushing: gboolean);
    pub fn gst_bus_set_sync_handler(bus: *mut GstBus, func: GstBusSyncHandler,
                                    user_data: gpointer,
                                    notify: GDestroyNotify);
    pub fn gst_bus_create_watch(bus: *mut GstBus) -> *mut GSource;
    pub fn gst_bus_add_watch_full(bus: *mut GstBus, priority: gint,
                                  func: GstBusFunc, user_data: gpointer,
                                  notify: GDestroyNotify) -> guint;
    pub fn gst_bus_add_watch(bus: *mut GstBus, func: GstBusFunc,
                             user_data: gpointer) -> guint;
    pub fn gst_bus_poll(bus: *mut GstBus, events: GstMessageType,
                        timeout: GstClockTime) -> *mut GstMessage;
    pub fn gst_bus_async_signal_func(bus: *mut GstBus,
                                     message: *mut GstMessage, data: gpointer)
     -> gboolean;
    pub fn gst_bus_sync_signal_handler(bus: *mut GstBus,
                                       message: *mut GstMessage,
                                       data: gpointer) -> GstBusSyncReply;
    pub fn gst_bus_add_signal_watch(bus: *mut GstBus);
    pub fn gst_bus_add_signal_watch_full(bus: *mut GstBus, priority: gint);
    pub fn gst_bus_remove_signal_watch(bus: *mut GstBus);
    pub fn gst_bus_enable_sync_message_emission(bus: *mut GstBus);
    pub fn gst_bus_disable_sync_message_emission(bus: *mut GstBus);
    pub fn gst_plugin_error_quark() -> GQuark;
    pub fn gst_plugin_get_type() -> GType;
    pub fn gst_plugin_register_static(major_version: gint,
                                      minor_version: gint, name: *gchar,
                                      description: *gchar,
                                      init_func: GstPluginInitFunc,
                                      version: *gchar, license: *gchar,
                                      source: *gchar, package: *gchar,
                                      origin: *gchar) -> gboolean;
    pub fn gst_plugin_register_static_full(major_version: gint,
                                           minor_version: gint, name: *gchar,
                                           description: *gchar,
                                           init_full_func:
                                               GstPluginInitFullFunc,
                                           version: *gchar, license: *gchar,
                                           source: *gchar, package: *gchar,
                                           origin: *gchar,
                                           user_data: gpointer) -> gboolean;
    pub fn gst_plugin_get_name(plugin: *mut GstPlugin) -> *gchar;
    pub fn gst_plugin_get_description(plugin: *mut GstPlugin) -> *gchar;
    pub fn gst_plugin_get_filename(plugin: *mut GstPlugin) -> *gchar;
    pub fn gst_plugin_get_version(plugin: *mut GstPlugin) -> *gchar;
    pub fn gst_plugin_get_license(plugin: *mut GstPlugin) -> *gchar;
    pub fn gst_plugin_get_source(plugin: *mut GstPlugin) -> *gchar;
    pub fn gst_plugin_get_package(plugin: *mut GstPlugin) -> *gchar;
    pub fn gst_plugin_get_origin(plugin: *mut GstPlugin) -> *gchar;
    pub fn gst_plugin_get_release_date_string(plugin: *mut GstPlugin) ->
     *gchar;
    pub fn gst_plugin_get_cache_data(plugin: *mut GstPlugin) -> *GstStructure;
    pub fn gst_plugin_set_cache_data(plugin: *mut GstPlugin,
                                     cache_data: *mut GstStructure);
    pub fn gst_plugin_is_loaded(plugin: *mut GstPlugin) -> gboolean;
    pub fn gst_plugin_load_file(filename: *gchar, error: *mut *mut GError) ->
     *mut GstPlugin;
    pub fn gst_plugin_load(plugin: *mut GstPlugin) -> *mut GstPlugin;
    pub fn gst_plugin_load_by_name(name: *gchar) -> *mut GstPlugin;
    pub fn gst_plugin_add_dependency(plugin: *mut GstPlugin,
                                     env_vars: *mut *gchar,
                                     paths: *mut *gchar, names: *mut *gchar,
                                     flags: GstPluginDependencyFlags);
    pub fn gst_plugin_add_dependency_simple(plugin: *mut GstPlugin,
                                            env_vars: *gchar, paths: *gchar,
                                            names: *gchar,
                                            flags: GstPluginDependencyFlags);
    pub fn gst_plugin_list_free(list: *mut GList);
    pub fn gst_plugin_feature_get_type() -> GType;
    pub fn gst_plugin_feature_load(feature: *mut GstPluginFeature) ->
     *mut GstPluginFeature;
    pub fn gst_plugin_feature_set_rank(feature: *mut GstPluginFeature,
                                       rank: guint);
    pub fn gst_plugin_feature_get_rank(feature: *mut GstPluginFeature) ->
     guint;
    pub fn gst_plugin_feature_get_plugin(feature: *mut GstPluginFeature) ->
     *mut GstPlugin;
    pub fn gst_plugin_feature_get_plugin_name(feature: *mut GstPluginFeature)
     -> *gchar;
    pub fn gst_plugin_feature_list_free(list: *mut GList);
    pub fn gst_plugin_feature_list_copy(list: *mut GList) -> *mut GList;
    pub fn gst_plugin_feature_list_debug(list: *mut GList);
    pub fn gst_plugin_feature_check_version(feature: *mut GstPluginFeature,
                                            min_major: guint,
                                            min_minor: guint,
                                            min_micro: guint) -> gboolean;
    pub fn gst_plugin_feature_rank_compare_func(p1: gconstpointer,
                                                p2: gconstpointer) -> gint;
    pub fn gst_uri_error_quark() -> GQuark;
    pub fn gst_uri_protocol_is_valid(protocol: *gchar) -> gboolean;
    pub fn gst_uri_protocol_is_supported(_type: GstURIType, protocol: *gchar)
     -> gboolean;
    pub fn gst_uri_is_valid(uri: *gchar) -> gboolean;
    pub fn gst_uri_get_protocol(uri: *gchar) -> *mut gchar;
    pub fn gst_uri_has_protocol(uri: *gchar, protocol: *gchar) -> gboolean;
    pub fn gst_uri_get_location(uri: *gchar) -> *mut gchar;
    pub fn gst_uri_construct(protocol: *gchar, location: *gchar) ->
     *mut gchar;
    pub fn gst_filename_to_uri(filename: *gchar, error: *mut *mut GError) ->
     *mut gchar;
    pub fn gst_element_make_from_uri(_type: GstURIType, uri: *gchar,
                                     elementname: *gchar,
                                     error: *mut *mut GError) ->
     *mut GstElement;
    pub fn gst_uri_handler_get_type() -> GType;
    pub fn gst_uri_handler_get_uri_type(handler: *mut GstURIHandler) ->
     GstURIType;
    pub fn gst_uri_handler_get_protocols(handler: *mut GstURIHandler) ->
     **gchar;
    pub fn gst_uri_handler_get_uri(handler: *mut GstURIHandler) -> *mut gchar;
    pub fn gst_uri_handler_set_uri(handler: *mut GstURIHandler, uri: *gchar,
                                   error: *mut *mut GError) -> gboolean;
    pub fn gst_element_factory_get_type() -> GType;
    pub fn gst_element_factory_find(name: *gchar) -> *mut GstElementFactory;
    pub fn gst_element_factory_get_element_type(factory:
                                                    *mut GstElementFactory) ->
     GType;
    pub fn gst_element_factory_get_metadata(factory: *mut GstElementFactory,
                                            key: *gchar) -> *gchar;
    pub fn gst_element_factory_get_metadata_keys(factory:
                                                     *mut GstElementFactory)
     -> *mut *mut gchar;
    pub fn gst_element_factory_get_num_pad_templates(factory:
                                                         *mut GstElementFactory)
     -> guint;
    pub fn gst_element_factory_get_static_pad_templates(factory:
                                                            *mut GstElementFactory)
     -> *GList;
    pub fn gst_element_factory_get_uri_type(factory: *mut GstElementFactory)
     -> GstURIType;
    pub fn gst_element_factory_get_uri_protocols(factory:
                                                     *mut GstElementFactory)
     -> **gchar;
    pub fn gst_element_factory_has_interface(factory: *mut GstElementFactory,
                                             interfacename: *gchar) ->
     gboolean;
    pub fn gst_element_factory_create(factory: *mut GstElementFactory,
                                      name: *gchar) -> *mut GstElement;
    pub fn gst_element_factory_make(factoryname: *gchar, name: *gchar) ->
     *mut GstElement;
    pub fn gst_element_register(plugin: *mut GstPlugin, name: *gchar,
                                rank: guint, _type: GType) -> gboolean;
    pub fn gst_element_factory_list_is_type(factory: *mut GstElementFactory,
                                            _type: GstElementFactoryListType)
     -> gboolean;
    pub fn gst_element_factory_list_get_elements(_type:
                                                     GstElementFactoryListType,
                                                 minrank: GstRank) ->
     *mut GList;
    pub fn gst_element_factory_list_filter(list: *mut GList, caps: *GstCaps,
                                           direction: GstPadDirection,
                                           subsetonly: gboolean) ->
     *mut GList;
    pub fn gst_element_class_add_pad_template(klass: *mut GstElementClass,
                                              templ: *mut GstPadTemplate);
    pub fn gst_element_class_get_pad_template(element_class:
                                                  *mut GstElementClass,
                                              name: *gchar) ->
     *mut GstPadTemplate;
    pub fn gst_element_class_get_pad_template_list(element_class:
                                                       *mut GstElementClass)
     -> *mut GList;
    pub fn gst_element_class_set_metadata(klass: *mut GstElementClass,
                                          longname: *gchar,
                                          classification: *gchar,
                                          description: *gchar,
                                          author: *gchar);
    pub fn gst_element_class_set_static_metadata(klass: *mut GstElementClass,
                                                 longname: *gchar,
                                                 classification: *gchar,
                                                 description: *gchar,
                                                 author: *gchar);
    pub fn gst_element_class_add_metadata(klass: *mut GstElementClass,
                                          key: *gchar, value: *gchar);
    pub fn gst_element_class_add_static_metadata(klass: *mut GstElementClass,
                                                 key: *gchar, value: *gchar);
    pub fn gst_element_class_get_metadata(klass: *mut GstElementClass,
                                          key: *gchar) -> *gchar;
    pub fn gst_element_get_type() -> GType;
    pub fn gst_element_provide_clock(element: *mut GstElement) ->
     *mut GstClock;
    pub fn gst_element_get_clock(element: *mut GstElement) -> *mut GstClock;
    pub fn gst_element_set_clock(element: *mut GstElement,
                                 clock: *mut GstClock) -> gboolean;
    pub fn gst_element_set_base_time(element: *mut GstElement,
                                     time: GstClockTime);
    pub fn gst_element_get_base_time(element: *mut GstElement) ->
     GstClockTime;
    pub fn gst_element_set_start_time(element: *mut GstElement,
                                      time: GstClockTime);
    pub fn gst_element_get_start_time(element: *mut GstElement) ->
     GstClockTime;
    pub fn gst_element_set_bus(element: *mut GstElement, bus: *mut GstBus);
    pub fn gst_element_get_bus(element: *mut GstElement) -> *mut GstBus;
    pub fn gst_element_set_context(element: *mut GstElement,
                                   context: *mut GstContext);
    pub fn gst_element_add_pad(element: *mut GstElement, pad: *mut GstPad) ->
     gboolean;
    pub fn gst_element_remove_pad(element: *mut GstElement, pad: *mut GstPad)
     -> gboolean;
    pub fn gst_element_no_more_pads(element: *mut GstElement);
    pub fn gst_element_get_static_pad(element: *mut GstElement, name: *gchar)
     -> *mut GstPad;
    pub fn gst_element_get_request_pad(element: *mut GstElement, name: *gchar)
     -> *mut GstPad;
    pub fn gst_element_request_pad(element: *mut GstElement,
                                   templ: *mut GstPadTemplate, name: *gchar,
                                   caps: *GstCaps) -> *mut GstPad;
    pub fn gst_element_release_request_pad(element: *mut GstElement,
                                           pad: *mut GstPad);
    pub fn gst_element_iterate_pads(element: *mut GstElement) ->
     *mut GstIterator;
    pub fn gst_element_iterate_src_pads(element: *mut GstElement) ->
     *mut GstIterator;
    pub fn gst_element_iterate_sink_pads(element: *mut GstElement) ->
     *mut GstIterator;
    pub fn gst_element_send_event(element: *mut GstElement,
                                  event: *mut GstEvent) -> gboolean;
    pub fn gst_element_seek(element: *mut GstElement, rate: gdouble,
                            format: GstFormat, flags: GstSeekFlags,
                            start_type: GstSeekType, start: gint64,
                            stop_type: GstSeekType, stop: gint64) -> gboolean;
    pub fn gst_element_query(element: *mut GstElement, query: *mut GstQuery)
     -> gboolean;
    pub fn gst_element_post_message(element: *mut GstElement,
                                    message: *mut GstMessage) -> gboolean;
    pub fn _gst_element_error_printf(format: *gchar, ...) -> *mut gchar;
    pub fn gst_element_message_full(element: *mut GstElement,
                                    _type: GstMessageType, domain: GQuark,
                                    code: gint, text: *mut gchar,
                                    debug: *mut gchar, file: *gchar,
                                    function: *gchar, line: gint);
    pub fn gst_element_is_locked_state(element: *mut GstElement) -> gboolean;
    pub fn gst_element_set_locked_state(element: *mut GstElement,
                                        locked_state: gboolean) -> gboolean;
    pub fn gst_element_sync_state_with_parent(element: *mut GstElement) ->
     gboolean;
    pub fn gst_element_get_state(element: *mut GstElement,
                                 state: *mut GstState, pending: *mut GstState,
                                 timeout: GstClockTime) ->
     GstStateChangeReturn;
    pub fn gst_element_set_state(element: *mut GstElement, state: GstState) ->
     GstStateChangeReturn;
    pub fn gst_element_abort_state(element: *mut GstElement);
    pub fn gst_element_change_state(element: *mut GstElement,
                                    transition: GstStateChange) ->
     GstStateChangeReturn;
    pub fn gst_element_continue_state(element: *mut GstElement,
                                      ret: GstStateChangeReturn) ->
     GstStateChangeReturn;
    pub fn gst_element_lost_state(element: *mut GstElement);
    pub fn gst_element_get_factory(element: *mut GstElement) ->
     *mut GstElementFactory;
    pub fn gst_bin_get_type() -> GType;
    pub fn gst_bin_new(name: *gchar) -> *mut GstElement;
    pub fn gst_bin_add(bin: *mut GstBin, element: *mut GstElement) ->
     gboolean;
    pub fn gst_bin_remove(bin: *mut GstBin, element: *mut GstElement) ->
     gboolean;
    pub fn gst_bin_get_by_name(bin: *mut GstBin, name: *gchar) ->
     *mut GstElement;
    pub fn gst_bin_get_by_name_recurse_up(bin: *mut GstBin, name: *gchar) ->
     *mut GstElement;
    pub fn gst_bin_get_by_interface(bin: *mut GstBin, iface: GType) ->
     *mut GstElement;
    pub fn gst_bin_iterate_elements(bin: *mut GstBin) -> *mut GstIterator;
    pub fn gst_bin_iterate_sorted(bin: *mut GstBin) -> *mut GstIterator;
    pub fn gst_bin_iterate_recurse(bin: *mut GstBin) -> *mut GstIterator;
    pub fn gst_bin_iterate_sinks(bin: *mut GstBin) -> *mut GstIterator;
    pub fn gst_bin_iterate_sources(bin: *mut GstBin) -> *mut GstIterator;
    pub fn gst_bin_iterate_all_by_interface(bin: *mut GstBin, iface: GType) ->
     *mut GstIterator;
    pub fn gst_bin_recalculate_latency(bin: *mut GstBin) -> gboolean;
    pub fn gst_buffer_pool_get_type() -> GType;
    pub fn gst_buffer_pool_new() -> *mut GstBufferPool;
    pub fn gst_buffer_pool_set_active(pool: *mut GstBufferPool,
                                      active: gboolean) -> gboolean;
    pub fn gst_buffer_pool_is_active(pool: *mut GstBufferPool) -> gboolean;
    pub fn gst_buffer_pool_set_config(pool: *mut GstBufferPool,
                                      config: *mut GstStructure) -> gboolean;
    pub fn gst_buffer_pool_get_config(pool: *mut GstBufferPool) ->
     *mut GstStructure;
    pub fn gst_buffer_pool_get_options(pool: *mut GstBufferPool) ->
     *mut *gchar;
    pub fn gst_buffer_pool_has_option(pool: *mut GstBufferPool,
                                      option: *gchar) -> gboolean;
    pub fn gst_buffer_pool_config_set_params(config: *mut GstStructure,
                                             caps: *mut GstCaps, size: guint,
                                             min_buffers: guint,
                                             max_buffers: guint);
    pub fn gst_buffer_pool_config_get_params(config: *mut GstStructure,
                                             caps: *mut *mut GstCaps,
                                             size: *mut guint,
                                             min_buffers: *mut guint,
                                             max_buffers: *mut guint) ->
     gboolean;
    pub fn gst_buffer_pool_config_set_allocator(config: *mut GstStructure,
                                                allocator: *mut GstAllocator,
                                                params: *GstAllocationParams);
    pub fn gst_buffer_pool_config_get_allocator(config: *mut GstStructure,
                                                allocator:
                                                    *mut *mut GstAllocator,
                                                params:
                                                    *mut GstAllocationParams)
     -> gboolean;
    pub fn gst_buffer_pool_config_n_options(config: *mut GstStructure) ->
     guint;
    pub fn gst_buffer_pool_config_add_option(config: *mut GstStructure,
                                             option: *gchar);
    pub fn gst_buffer_pool_config_get_option(config: *mut GstStructure,
                                             index: guint) -> *gchar;
    pub fn gst_buffer_pool_config_has_option(config: *mut GstStructure,
                                             option: *gchar) -> gboolean;
    pub fn gst_buffer_pool_acquire_buffer(pool: *mut GstBufferPool,
                                          buffer: *mut *mut GstBuffer,
                                          params:
                                              *mut GstBufferPoolAcquireParams)
     -> GstFlowReturn;
    pub fn gst_buffer_pool_release_buffer(pool: *mut GstBufferPool,
                                          buffer: *mut GstBuffer);
    pub fn gst_child_proxy_get_type() -> GType;
    pub fn gst_child_proxy_get_child_by_name(parent: *mut GstChildProxy,
                                             name: *gchar) -> *mut GObject;
    pub fn gst_child_proxy_get_children_count(parent: *mut GstChildProxy) ->
     guint;
    pub fn gst_child_proxy_get_child_by_index(parent: *mut GstChildProxy,
                                              index: guint) -> *mut GObject;
    pub fn gst_child_proxy_lookup(object: *mut GstChildProxy, name: *gchar,
                                  target: *mut *mut GObject,
                                  pspec: *mut *mut GParamSpec) -> gboolean;
    pub fn gst_child_proxy_get_property(object: *mut GstChildProxy,
                                        name: *gchar, value: *mut GValue);
    pub fn gst_child_proxy_get_valist(object: *mut GstChildProxy,
                                      first_property_name: *gchar,
                                      var_args: va_list);
    pub fn gst_child_proxy_get(object: *mut GstChildProxy,
                               first_property_name: *gchar, ...);
    pub fn gst_child_proxy_set_property(object: *mut GstChildProxy,
                                        name: *gchar, value: *GValue);
    pub fn gst_child_proxy_set_valist(object: *mut GstChildProxy,
                                      first_property_name: *gchar,
                                      var_args: va_list);
    pub fn gst_child_proxy_set(object: *mut GstChildProxy,
                               first_property_name: *gchar, ...);
    pub fn gst_child_proxy_child_added(parent: *mut GstChildProxy,
                                       child: *mut GObject, name: *gchar);
    pub fn gst_child_proxy_child_removed(parent: *mut GstChildProxy,
                                         child: *mut GObject, name: *gchar);
    pub fn gst_debug_bin_to_dot_file(bin: *mut GstBin,
                                     details: GstDebugGraphDetails,
                                     file_name: *gchar);
    pub fn gst_debug_bin_to_dot_file_with_ts(bin: *mut GstBin,
                                             details: GstDebugGraphDetails,
                                             file_name: *gchar);
    pub fn __errno_location() -> *mut c_int;
    pub fn gst_error_get_message(domain: GQuark, code: gint) -> *mut gchar;
    pub fn gst_stream_error_quark() -> GQuark;
    pub fn gst_core_error_quark() -> GQuark;
    pub fn gst_resource_error_quark() -> GQuark;
    pub fn gst_library_error_quark() -> GQuark;
    pub fn gst_proxy_pad_get_type() -> GType;
    pub fn gst_proxy_pad_get_internal(pad: *mut GstProxyPad) ->
     *mut GstProxyPad;
    pub fn gst_proxy_pad_iterate_internal_links_default(pad: *mut GstPad,
                                                        parent:
                                                            *mut GstObject) ->
     *mut GstIterator;
    pub fn gst_proxy_pad_chain_default(pad: *mut GstPad,
                                       parent: *mut GstObject,
                                       buffer: *mut GstBuffer) ->
     GstFlowReturn;
    pub fn gst_proxy_pad_chain_list_default(pad: *mut GstPad,
                                            parent: *mut GstObject,
                                            list: *mut GstBufferList) ->
     GstFlowReturn;
    pub fn gst_proxy_pad_getrange_default(pad: *mut GstPad,
                                          parent: *mut GstObject,
                                          offset: guint64, size: guint,
                                          buffer: *mut *mut GstBuffer) ->
     GstFlowReturn;
    pub fn gst_ghost_pad_get_type() -> GType;
    pub fn gst_ghost_pad_new(name: *gchar, target: *mut GstPad) ->
     *mut GstPad;
    pub fn gst_ghost_pad_new_no_target(name: *gchar, dir: GstPadDirection) ->
     *mut GstPad;
    pub fn gst_ghost_pad_new_from_template(name: *gchar, target: *mut GstPad,
                                           templ: *mut GstPadTemplate) ->
     *mut GstPad;
    pub fn gst_ghost_pad_new_no_target_from_template(name: *gchar,
                                                     templ:
                                                         *mut GstPadTemplate)
     -> *mut GstPad;
    pub fn gst_ghost_pad_get_target(gpad: *mut GstGhostPad) -> *mut GstPad;
    pub fn gst_ghost_pad_set_target(gpad: *mut GstGhostPad,
                                    newtarget: *mut GstPad) -> gboolean;
    pub fn gst_ghost_pad_construct(gpad: *mut GstGhostPad) -> gboolean;
    pub fn gst_ghost_pad_activate_mode_default(pad: *mut GstPad,
                                               parent: *mut GstObject,
                                               mode: GstPadMode,
                                               active: gboolean) -> gboolean;
    pub fn gst_ghost_pad_internal_activate_mode_default(pad: *mut GstPad,
                                                        parent:
                                                            *mut GstObject,
                                                        mode: GstPadMode,
                                                        active: gboolean) ->
     gboolean;
    pub fn gst_debug_log(category: *mut GstDebugCategory,
                         level: GstDebugLevel, file: *gchar, function: *gchar,
                         line: gint, object: *mut GObject,
                         format: *gchar, ...);
    pub fn gst_debug_log_valist(category: *mut GstDebugCategory,
                                level: GstDebugLevel, file: *gchar,
                                function: *gchar, line: gint,
                                object: *mut GObject, format: *gchar,
                                args: va_list);
    pub fn _gst_debug_category_new(name: *gchar, color: guint,
                                   description: *gchar) ->
     *mut GstDebugCategory;
    pub fn _gst_debug_get_category(name: *gchar) -> *mut GstDebugCategory;
    pub fn _gst_debug_dump_mem(cat: *mut GstDebugCategory, file: *gchar,
                               func: *gchar, line: gint, obj: *mut GObject,
                               msg: *gchar, data: *guint8, length: guint);
    pub fn _gst_debug_register_funcptr(func: GstDebugFuncPtr,
                                       ptrname: *gchar);
    pub fn _gst_debug_nameof_funcptr(func: GstDebugFuncPtr) -> *gchar;
    pub fn gst_debug_message_get(message: *mut GstDebugMessage) -> *gchar;
    pub fn gst_debug_log_default(category: *mut GstDebugCategory,
                                 level: GstDebugLevel, file: *gchar,
                                 function: *gchar, line: gint,
                                 object: *mut GObject,
                                 message: *mut GstDebugMessage,
                                 unused: gpointer);
    pub fn gst_debug_level_get_name(level: GstDebugLevel) -> *gchar;
    pub fn gst_debug_add_log_function(func: GstLogFunction,
                                      user_data: gpointer,
                                      notify: GDestroyNotify);
    pub fn gst_debug_remove_log_function(func: GstLogFunction) -> guint;
    pub fn gst_debug_remove_log_function_by_data(data: gpointer) -> guint;
    pub fn gst_debug_set_active(active: gboolean);
    pub fn gst_debug_is_active() -> gboolean;
    pub fn gst_debug_set_colored(colored: gboolean);
    pub fn gst_debug_set_color_mode(mode: GstDebugColorMode);
    pub fn gst_debug_set_color_mode_from_string(mode: *gchar);
    pub fn gst_debug_is_colored() -> gboolean;
    pub fn gst_debug_get_color_mode() -> GstDebugColorMode;
    pub fn gst_debug_set_default_threshold(level: GstDebugLevel);
    pub fn gst_debug_get_default_threshold() -> GstDebugLevel;
    pub fn gst_debug_set_threshold_for_name(name: *gchar,
                                            level: GstDebugLevel);
    pub fn gst_debug_set_threshold_from_string(list: *gchar, reset: gboolean);
    pub fn gst_debug_unset_threshold_for_name(name: *gchar);
    pub fn gst_debug_category_free(category: *mut GstDebugCategory);
    pub fn gst_debug_category_set_threshold(category: *mut GstDebugCategory,
                                            level: GstDebugLevel);
    pub fn gst_debug_category_reset_threshold(category:
                                                  *mut GstDebugCategory);
    pub fn gst_debug_category_get_threshold(category: *mut GstDebugCategory)
     -> GstDebugLevel;
    pub fn gst_debug_category_get_name(category: *mut GstDebugCategory) ->
     *gchar;
    pub fn gst_debug_category_get_color(category: *mut GstDebugCategory) ->
     guint;
    pub fn gst_debug_category_get_description(category: *mut GstDebugCategory)
     -> *gchar;
    pub fn gst_debug_get_all_categories() -> *mut GSList;
    pub fn gst_debug_construct_term_color(colorinfo: guint) -> *mut gchar;
    pub fn gst_debug_construct_win_color(colorinfo: guint) -> gint;
    pub fn gst_debug_print_stack_trace();
    pub fn gst_int_range_get_type() -> GType;
    pub fn gst_int64_range_get_type() -> GType;
    pub fn gst_double_range_get_type() -> GType;
    pub fn gst_fraction_range_get_type() -> GType;
    pub fn gst_fraction_get_type() -> GType;
    pub fn gst_value_list_get_type() -> GType;
    pub fn gst_value_array_get_type() -> GType;
    pub fn gst_bitmask_get_type() -> GType;
    pub fn gst_g_thread_get_type() -> GType;
    pub fn gst_date_time_get_type() -> GType;
    pub fn gst_value_register(table: *GstValueTable);
    pub fn gst_value_init_and_copy(dest: *mut GValue, src: *GValue);
    pub fn gst_value_serialize(value: *GValue) -> *mut gchar;
    pub fn gst_value_deserialize(dest: *mut GValue, src: *gchar) -> gboolean;
    pub fn gst_value_list_append_value(value: *mut GValue,
                                       append_value: *GValue);
    pub fn gst_value_list_append_and_take_value(value: *mut GValue,
                                                append_value: *mut GValue);
    pub fn gst_value_list_prepend_value(value: *mut GValue,
                                        prepend_value: *GValue);
    pub fn gst_value_list_concat(dest: *mut GValue, value1: *GValue,
                                 value2: *GValue);
    pub fn gst_value_list_merge(dest: *mut GValue, value1: *GValue,
                                value2: *GValue);
    pub fn gst_value_list_get_size(value: *GValue) -> guint;
    pub fn gst_value_list_get_value(value: *GValue, index: guint) -> *GValue;
    pub fn gst_value_array_append_value(value: *mut GValue,
                                        append_value: *GValue);
    pub fn gst_value_array_append_and_take_value(value: *mut GValue,
                                                 append_value: *mut GValue);
    pub fn gst_value_array_prepend_value(value: *mut GValue,
                                         prepend_value: *GValue);
    pub fn gst_value_array_get_size(value: *GValue) -> guint;
    pub fn gst_value_array_get_value(value: *GValue, index: guint) -> *GValue;
    pub fn gst_value_set_int_range(value: *mut GValue, start: gint,
                                   end: gint);
    pub fn gst_value_set_int_range_step(value: *mut GValue, start: gint,
                                        end: gint, step: gint);
    pub fn gst_value_get_int_range_min(value: *GValue) -> gint;
    pub fn gst_value_get_int_range_max(value: *GValue) -> gint;
    pub fn gst_value_get_int_range_step(value: *GValue) -> gint;
    pub fn gst_value_set_int64_range(value: *mut GValue, start: gint64,
                                     end: gint64);
    pub fn gst_value_set_int64_range_step(value: *mut GValue, start: gint64,
                                          end: gint64, step: gint64);
    pub fn gst_value_get_int64_range_min(value: *GValue) -> gint64;
    pub fn gst_value_get_int64_range_max(value: *GValue) -> gint64;
    pub fn gst_value_get_int64_range_step(value: *GValue) -> gint64;
    pub fn gst_value_set_double_range(value: *mut GValue, start: gdouble,
                                      end: gdouble);
    pub fn gst_value_get_double_range_min(value: *GValue) -> gdouble;
    pub fn gst_value_get_double_range_max(value: *GValue) -> gdouble;
    pub fn gst_value_get_caps(value: *GValue) -> *GstCaps;
    pub fn gst_value_set_caps(value: *mut GValue, caps: *GstCaps);
    pub fn gst_value_get_structure(value: *GValue) -> *GstStructure;
    pub fn gst_value_set_structure(value: *mut GValue,
                                   structure: *GstStructure);
    pub fn gst_value_get_caps_features(value: *GValue) -> *GstCapsFeatures;
    pub fn gst_value_set_caps_features(value: *mut GValue,
                                       features: *GstCapsFeatures);
    pub fn gst_value_set_fraction(value: *mut GValue, numerator: gint,
                                  denominator: gint);
    pub fn gst_value_get_fraction_numerator(value: *GValue) -> gint;
    pub fn gst_value_get_fraction_denominator(value: *GValue) -> gint;
    pub fn gst_value_fraction_multiply(product: *mut GValue, factor1: *GValue,
                                       factor2: *GValue) -> gboolean;
    pub fn gst_value_fraction_subtract(dest: *mut GValue, minuend: *GValue,
                                       subtrahend: *GValue) -> gboolean;
    pub fn gst_value_set_fraction_range(value: *mut GValue, start: *GValue,
                                        end: *GValue);
    pub fn gst_value_set_fraction_range_full(value: *mut GValue,
                                             numerator_start: gint,
                                             denominator_start: gint,
                                             numerator_end: gint,
                                             denominator_end: gint);
    pub fn gst_value_get_fraction_range_min(value: *GValue) -> *GValue;
    pub fn gst_value_get_fraction_range_max(value: *GValue) -> *GValue;
    pub fn gst_value_get_bitmask(value: *GValue) -> guint64;
    pub fn gst_value_set_bitmask(value: *mut GValue, bitmask: guint64);
    pub fn gst_value_compare(value1: *GValue, value2: *GValue) -> gint;
    pub fn gst_value_can_compare(value1: *GValue, value2: *GValue) ->
     gboolean;
    pub fn gst_value_is_subset(value1: *GValue, value2: *GValue) -> gboolean;
    pub fn gst_value_union(dest: *mut GValue, value1: *GValue,
                           value2: *GValue) -> gboolean;
    pub fn gst_value_can_union(value1: *GValue, value2: *GValue) -> gboolean;
    pub fn gst_value_intersect(dest: *mut GValue, value1: *GValue,
                               value2: *GValue) -> gboolean;
    pub fn gst_value_can_intersect(value1: *GValue, value2: *GValue) ->
     gboolean;
    pub fn gst_value_subtract(dest: *mut GValue, minuend: *GValue,
                              subtrahend: *GValue) -> gboolean;
    pub fn gst_value_can_subtract(minuend: *GValue, subtrahend: *GValue) ->
     gboolean;
    pub fn gst_value_is_fixed(value: *GValue) -> gboolean;
    pub fn gst_value_fixate(dest: *mut GValue, src: *GValue) -> gboolean;
    pub fn gst_param_spec_fraction_get_type() -> GType;
    pub fn gst_param_spec_fraction(name: *gchar, nick: *gchar, blurb: *gchar,
                                   min_num: gint, min_denom: gint,
                                   max_num: gint, max_denom: gint,
                                   default_num: gint, default_denom: gint,
                                   flags: GParamFlags) -> *mut GParamSpec;
    pub fn gst_pipeline_get_type() -> GType;
    pub fn gst_pipeline_new(name: *gchar) -> *mut GstElement;
    pub fn gst_pipeline_get_bus(pipeline: *mut GstPipeline) -> *mut GstBus;
    pub fn gst_pipeline_use_clock(pipeline: *mut GstPipeline,
                                  clock: *mut GstClock);
    pub fn gst_pipeline_set_clock(pipeline: *mut GstPipeline,
                                  clock: *mut GstClock) -> gboolean;
    pub fn gst_pipeline_get_clock(pipeline: *mut GstPipeline) ->
     *mut GstClock;
    pub fn gst_pipeline_auto_clock(pipeline: *mut GstPipeline);
    pub fn gst_pipeline_set_delay(pipeline: *mut GstPipeline,
                                  delay: GstClockTime);
    pub fn gst_pipeline_get_delay(pipeline: *mut GstPipeline) -> GstClockTime;
    pub fn gst_pipeline_set_auto_flush_bus(pipeline: *mut GstPipeline,
                                           auto_flush: gboolean);
    pub fn gst_pipeline_get_auto_flush_bus(pipeline: *mut GstPipeline) ->
     gboolean;
    pub fn gst_poll_new(controllable: gboolean) -> *mut GstPoll;
    pub fn gst_poll_new_timer() -> *mut GstPoll;
    pub fn gst_poll_free(set: *mut GstPoll);
    pub fn gst_poll_get_read_gpollfd(set: *mut GstPoll, fd: *mut GPollFD);
    pub fn gst_poll_fd_init(fd: *mut GstPollFD);
    pub fn gst_poll_add_fd(set: *mut GstPoll, fd: *mut GstPollFD) -> gboolean;
    pub fn gst_poll_remove_fd(set: *mut GstPoll, fd: *mut GstPollFD) ->
     gboolean;
    pub fn gst_poll_fd_ctl_write(set: *mut GstPoll, fd: *mut GstPollFD,
                                 active: gboolean) -> gboolean;
    pub fn gst_poll_fd_ctl_read(set: *mut GstPoll, fd: *mut GstPollFD,
                                active: gboolean) -> gboolean;
    pub fn gst_poll_fd_ignored(set: *mut GstPoll, fd: *mut GstPollFD);
    pub fn gst_poll_fd_has_closed(set: *GstPoll, fd: *mut GstPollFD) ->
     gboolean;
    pub fn gst_poll_fd_has_error(set: *GstPoll, fd: *mut GstPollFD) ->
     gboolean;
    pub fn gst_poll_fd_can_read(set: *GstPoll, fd: *mut GstPollFD) ->
     gboolean;
    pub fn gst_poll_fd_can_write(set: *GstPoll, fd: *mut GstPollFD) ->
     gboolean;
    pub fn gst_poll_wait(set: *mut GstPoll, timeout: GstClockTime) -> gint;
    pub fn gst_poll_set_controllable(set: *mut GstPoll,
                                     controllable: gboolean) -> gboolean;
    pub fn gst_poll_restart(set: *mut GstPoll);
    pub fn gst_poll_set_flushing(set: *mut GstPoll, flushing: gboolean);
    pub fn gst_poll_write_control(set: *mut GstPoll) -> gboolean;
    pub fn gst_poll_read_control(set: *mut GstPoll) -> gboolean;
    pub fn gst_preset_get_type() -> GType;
    pub fn gst_preset_get_preset_names(preset: *mut GstPreset) ->
     *mut *mut gchar;
    pub fn gst_preset_get_property_names(preset: *mut GstPreset) ->
     *mut *mut gchar;
    pub fn gst_preset_load_preset(preset: *mut GstPreset, name: *gchar) ->
     gboolean;
    pub fn gst_preset_save_preset(preset: *mut GstPreset, name: *gchar) ->
     gboolean;
    pub fn gst_preset_rename_preset(preset: *mut GstPreset, old_name: *gchar,
                                    new_name: *gchar) -> gboolean;
    pub fn gst_preset_delete_preset(preset: *mut GstPreset, name: *gchar) ->
     gboolean;
    pub fn gst_preset_set_meta(preset: *mut GstPreset, name: *gchar,
                               tag: *gchar, value: *gchar) -> gboolean;
    pub fn gst_preset_get_meta(preset: *mut GstPreset, name: *gchar,
                               tag: *gchar, value: *mut *mut gchar) ->
     gboolean;
    pub fn gst_preset_set_app_dir(app_dir: *gchar) -> gboolean;
    pub fn gst_preset_get_app_dir() -> *gchar;
    pub fn gst_registry_get_type() -> GType;
    pub fn gst_registry_get() -> *mut GstRegistry;
    pub fn gst_registry_scan_path(registry: *mut GstRegistry, path: *gchar) ->
     gboolean;
    pub fn gst_registry_add_plugin(registry: *mut GstRegistry,
                                   plugin: *mut GstPlugin) -> gboolean;
    pub fn gst_registry_remove_plugin(registry: *mut GstRegistry,
                                      plugin: *mut GstPlugin);
    pub fn gst_registry_add_feature(registry: *mut GstRegistry,
                                    feature: *mut GstPluginFeature) ->
     gboolean;
    pub fn gst_registry_remove_feature(registry: *mut GstRegistry,
                                       feature: *mut GstPluginFeature);
    pub fn gst_registry_get_plugin_list(registry: *mut GstRegistry) ->
     *mut GList;
    pub fn gst_registry_plugin_filter(registry: *mut GstRegistry,
                                      filter: GstPluginFilter,
                                      first: gboolean, user_data: gpointer) ->
     *mut GList;
    pub fn gst_registry_feature_filter(registry: *mut GstRegistry,
                                       filter: GstPluginFeatureFilter,
                                       first: gboolean, user_data: gpointer)
     -> *mut GList;
    pub fn gst_registry_get_feature_list(registry: *mut GstRegistry,
                                         _type: GType) -> *mut GList;
    pub fn gst_registry_get_feature_list_by_plugin(registry: *mut GstRegistry,
                                                   name: *gchar) ->
     *mut GList;
    pub fn gst_registry_get_feature_list_cookie(registry: *mut GstRegistry) ->
     guint32;
    pub fn gst_registry_find_plugin(registry: *mut GstRegistry, name: *gchar)
     -> *mut GstPlugin;
    pub fn gst_registry_find_feature(registry: *mut GstRegistry, name: *gchar,
                                     _type: GType) -> *mut GstPluginFeature;
    pub fn gst_registry_lookup(registry: *mut GstRegistry, filename: *c_schar)
     -> *mut GstPlugin;
    pub fn gst_registry_lookup_feature(registry: *mut GstRegistry,
                                       name: *c_schar) ->
     *mut GstPluginFeature;
    pub fn gst_registry_check_feature_version(registry: *mut GstRegistry,
                                              feature_name: *gchar,
                                              min_major: guint,
                                              min_minor: guint,
                                              min_micro: guint) -> gboolean;
    pub fn gst_system_clock_get_type() -> GType;
    pub fn gst_system_clock_obtain() -> *mut GstClock;
    pub fn gst_tag_setter_get_type() -> GType;
    pub fn gst_tag_setter_reset_tags(setter: *mut GstTagSetter);
    pub fn gst_tag_setter_merge_tags(setter: *mut GstTagSetter,
                                     list: *GstTagList,
                                     mode: GstTagMergeMode);
    pub fn gst_tag_setter_add_tags(setter: *mut GstTagSetter,
                                   mode: GstTagMergeMode, tag: *gchar, ...);
    pub fn gst_tag_setter_add_tag_values(setter: *mut GstTagSetter,
                                         mode: GstTagMergeMode,
                                         tag: *gchar, ...);
    pub fn gst_tag_setter_add_tag_valist(setter: *mut GstTagSetter,
                                         mode: GstTagMergeMode, tag: *gchar,
                                         var_args: va_list);
    pub fn gst_tag_setter_add_tag_valist_values(setter: *mut GstTagSetter,
                                                mode: GstTagMergeMode,
                                                tag: *gchar,
                                                var_args: va_list);
    pub fn gst_tag_setter_add_tag_value(setter: *mut GstTagSetter,
                                        mode: GstTagMergeMode, tag: *gchar,
                                        value: *GValue);
    pub fn gst_tag_setter_get_tag_list(setter: *mut GstTagSetter) ->
     *GstTagList;
    pub fn gst_tag_setter_set_tag_merge_mode(setter: *mut GstTagSetter,
                                             mode: GstTagMergeMode);
    pub fn gst_tag_setter_get_tag_merge_mode(setter: *mut GstTagSetter) ->
     GstTagMergeMode;
    pub fn gst_toc_setter_get_type() -> GType;
    pub fn gst_toc_setter_reset(setter: *mut GstTocSetter);
    pub fn gst_toc_setter_get_toc(setter: *mut GstTocSetter) -> *mut GstToc;
    pub fn gst_toc_setter_set_toc(setter: *mut GstTocSetter,
                                  toc: *mut GstToc);
    pub fn gst_type_find_get_type() -> GType;
    pub fn gst_type_find_peek(find: *mut GstTypeFind, offset: gint64,
                              size: guint) -> *guint8;
    pub fn gst_type_find_suggest(find: *mut GstTypeFind, probability: guint,
                                 caps: *mut GstCaps);
    pub fn gst_type_find_suggest_simple(find: *mut GstTypeFind,
                                        probability: guint,
                                        media_type: *c_schar,
                                        fieldname: *c_schar, ...);
    pub fn gst_type_find_get_length(find: *mut GstTypeFind) -> guint64;
    pub fn gst_type_find_register(plugin: *mut GstPlugin, name: *gchar,
                                  rank: guint, func: GstTypeFindFunction,
                                  extensions: *gchar,
                                  possible_caps: *mut GstCaps, data: gpointer,
                                  data_notify: GDestroyNotify) -> gboolean;
    pub fn gst_type_find_factory_get_type() -> GType;
    pub fn gst_type_find_factory_get_list() -> *mut GList;
    pub fn gst_type_find_factory_get_extensions(factory:
                                                    *mut GstTypeFindFactory)
     -> **gchar;
    pub fn gst_type_find_factory_get_caps(factory: *mut GstTypeFindFactory) ->
     *mut GstCaps;
    pub fn gst_type_find_factory_has_function(factory:
                                                  *mut GstTypeFindFactory) ->
     gboolean;
    pub fn gst_type_find_factory_call_function(factory:
                                                   *mut GstTypeFindFactory,
                                               find: *mut GstTypeFind);
    pub fn gst_parse_error_quark() -> GQuark;
    pub fn gst_parse_context_get_type() -> GType;
    pub fn gst_parse_context_new() -> *mut GstParseContext;
    pub fn gst_parse_context_get_missing_elements(context:
                                                      *mut GstParseContext) ->
     *mut *mut gchar;
    pub fn gst_parse_context_free(context: *mut GstParseContext);
    pub fn gst_parse_launch(pipeline_description: *gchar,
                            error: *mut *mut GError) -> *mut GstElement;
    pub fn gst_parse_launchv(argv: *mut *gchar, error: *mut *mut GError) ->
     *mut GstElement;
    pub fn gst_parse_launch_full(pipeline_description: *gchar,
                                 context: *mut GstParseContext,
                                 flags: GstParseFlags,
                                 error: *mut *mut GError) -> *mut GstElement;
    pub fn gst_parse_launchv_full(argv: *mut *gchar,
                                  context: *mut GstParseContext,
                                  flags: GstParseFlags,
                                  error: *mut *mut GError) -> *mut GstElement;
    pub fn gst_util_set_value_from_string(value: *mut GValue,
                                          value_str: *gchar);
    pub fn gst_util_set_object_arg(object: *mut GObject, name: *gchar,
                                   value: *gchar);
    pub fn gst_util_dump_mem(mem: *guchar, size: guint);
    pub fn gst_util_gdouble_to_guint64(value: gdouble) -> guint64;
    pub fn gst_util_guint64_to_gdouble(value: guint64) -> gdouble;
    pub fn gst_util_uint64_scale(val: guint64, num: guint64, denom: guint64)
     -> guint64;
    pub fn gst_util_uint64_scale_round(val: guint64, num: guint64,
                                       denom: guint64) -> guint64;
    pub fn gst_util_uint64_scale_ceil(val: guint64, num: guint64,
                                      denom: guint64) -> guint64;
    pub fn gst_util_uint64_scale_int(val: guint64, num: gint, denom: gint) ->
     guint64;
    pub fn gst_util_uint64_scale_int_round(val: guint64, num: gint,
                                           denom: gint) -> guint64;
    pub fn gst_util_uint64_scale_int_ceil(val: guint64, num: gint,
                                          denom: gint) -> guint64;
    pub fn gst_util_seqnum_next() -> guint32;
    pub fn gst_util_seqnum_compare(s1: guint32, s2: guint32) -> gint32;
    pub fn gst_util_group_id_next() -> guint;
    pub fn gst_object_default_error(source: *mut GstObject, error: *GError,
                                    debug: *gchar);
    pub fn gst_element_create_all_pads(element: *mut GstElement);
    pub fn gst_element_get_compatible_pad(element: *mut GstElement,
                                          pad: *mut GstPad,
                                          caps: *mut GstCaps) -> *mut GstPad;
    pub fn gst_element_get_compatible_pad_template(element: *mut GstElement,
                                                   compattempl:
                                                       *mut GstPadTemplate) ->
     *mut GstPadTemplate;
    pub fn gst_element_state_get_name(state: GstState) -> *gchar;
    pub fn gst_element_state_change_return_get_name(state_ret:
                                                        GstStateChangeReturn)
     -> *gchar;
    pub fn gst_element_link(src: *mut GstElement, dest: *mut GstElement) ->
     gboolean;
    pub fn gst_element_link_many(element_1: *mut GstElement,
                                 element_2: *mut GstElement, ...) -> gboolean;
    pub fn gst_element_link_filtered(src: *mut GstElement,
                                     dest: *mut GstElement,
                                     filter: *mut GstCaps) -> gboolean;
    pub fn gst_element_unlink(src: *mut GstElement, dest: *mut GstElement);
    pub fn gst_element_unlink_many(element_1: *mut GstElement,
                                   element_2: *mut GstElement, ...);
    pub fn gst_element_link_pads(src: *mut GstElement, srcpadname: *gchar,
                                 dest: *mut GstElement, destpadname: *gchar)
     -> gboolean;
    pub fn gst_element_link_pads_full(src: *mut GstElement,
                                      srcpadname: *gchar,
                                      dest: *mut GstElement,
                                      destpadname: *gchar,
                                      flags: GstPadLinkCheck) -> gboolean;
    pub fn gst_element_unlink_pads(src: *mut GstElement, srcpadname: *gchar,
                                   dest: *mut GstElement,
                                   destpadname: *gchar);
    pub fn gst_element_link_pads_filtered(src: *mut GstElement,
                                          srcpadname: *gchar,
                                          dest: *mut GstElement,
                                          destpadname: *gchar,
                                          filter: *mut GstCaps) -> gboolean;
    pub fn gst_element_seek_simple(element: *mut GstElement,
                                   format: GstFormat,
                                   seek_flags: GstSeekFlags, seek_pos: gint64)
     -> gboolean;
    pub fn gst_element_factory_can_sink_all_caps(factory:
                                                     *mut GstElementFactory,
                                                 caps: *GstCaps) -> gboolean;
    pub fn gst_element_factory_can_src_all_caps(factory:
                                                    *mut GstElementFactory,
                                                caps: *GstCaps) -> gboolean;
    pub fn gst_element_factory_can_sink_any_caps(factory:
                                                     *mut GstElementFactory,
                                                 caps: *GstCaps) -> gboolean;
    pub fn gst_element_factory_can_src_any_caps(factory:
                                                    *mut GstElementFactory,
                                                caps: *GstCaps) -> gboolean;
    pub fn gst_element_query_position(element: *mut GstElement,
                                      format: GstFormat, cur: *mut gint64) ->
     gboolean;
    pub fn gst_element_query_duration(element: *mut GstElement,
                                      format: GstFormat,
                                      duration: *mut gint64) -> gboolean;
    pub fn gst_element_query_convert(element: *mut GstElement,
                                     src_format: GstFormat, src_val: gint64,
                                     dest_format: GstFormat,
                                     dest_val: *mut gint64) -> gboolean;
    pub fn gst_pad_use_fixed_caps(pad: *mut GstPad);
    pub fn gst_pad_get_parent_element(pad: *mut GstPad) -> *mut GstElement;
    pub fn gst_pad_proxy_query_accept_caps(pad: *mut GstPad,
                                           query: *mut GstQuery) -> gboolean;
    pub fn gst_pad_proxy_query_caps(pad: *mut GstPad, query: *mut GstQuery) ->
     gboolean;
    pub fn gst_pad_query_position(pad: *mut GstPad, format: GstFormat,
                                  cur: *mut gint64) -> gboolean;
    pub fn gst_pad_query_duration(pad: *mut GstPad, format: GstFormat,
                                  duration: *mut gint64) -> gboolean;
    pub fn gst_pad_query_convert(pad: *mut GstPad, src_format: GstFormat,
                                 src_val: gint64, dest_format: GstFormat,
                                 dest_val: *mut gint64) -> gboolean;
    pub fn gst_pad_query_caps(pad: *mut GstPad, filter: *mut GstCaps) ->
     *mut GstCaps;
    pub fn gst_pad_query_accept_caps(pad: *mut GstPad, caps: *mut GstCaps) ->
     gboolean;
    pub fn gst_pad_peer_query_position(pad: *mut GstPad, format: GstFormat,
                                       cur: *mut gint64) -> gboolean;
    pub fn gst_pad_peer_query_duration(pad: *mut GstPad, format: GstFormat,
                                       duration: *mut gint64) -> gboolean;
    pub fn gst_pad_peer_query_convert(pad: *mut GstPad, src_format: GstFormat,
                                      src_val: gint64, dest_format: GstFormat,
                                      dest_val: *mut gint64) -> gboolean;
    pub fn gst_pad_peer_query_caps(pad: *mut GstPad, filter: *mut GstCaps) ->
     *mut GstCaps;
    pub fn gst_pad_peer_query_accept_caps(pad: *mut GstPad,
                                          caps: *mut GstCaps) -> gboolean;
    pub fn gst_pad_create_stream_id(pad: *mut GstPad, parent: *mut GstElement,
                                    stream_id: *gchar) -> *mut gchar;
    pub fn gst_pad_create_stream_id_printf(pad: *mut GstPad,
                                           parent: *mut GstElement,
                                           stream_id: *gchar, ...) ->
     *mut gchar;
    pub fn gst_pad_create_stream_id_printf_valist(pad: *mut GstPad,
                                                  parent: *mut GstElement,
                                                  stream_id: *gchar,
                                                  var_args: va_list) ->
     *mut gchar;
    pub fn gst_pad_get_stream_id(pad: *mut GstPad) -> *mut gchar;
    pub fn gst_bin_add_many(bin: *mut GstBin,
                            element_1: *mut GstElement, ...);
    pub fn gst_bin_remove_many(bin: *mut GstBin,
                               element_1: *mut GstElement, ...);
    pub fn gst_bin_find_unlinked_pad(bin: *mut GstBin,
                                     direction: GstPadDirection) ->
     *mut GstPad;
    pub fn gst_parse_bin_from_description(bin_description: *gchar,
                                          ghost_unlinked_pads: gboolean,
                                          err: *mut *mut GError) ->
     *mut GstElement;
    pub fn gst_parse_bin_from_description_full(bin_description: *gchar,
                                               ghost_unlinked_pads: gboolean,
                                               context: *mut GstParseContext,
                                               flags: GstParseFlags,
                                               err: *mut *mut GError) ->
     *mut GstElement;
    pub fn gst_util_get_timestamp() -> GstClockTime;
    pub fn gst_util_array_binary_search(array: gpointer, num_elements: guint,
                                        element_size: gsize,
                                        search_func: GCompareDataFunc,
                                        mode: GstSearchMode,
                                        search_data: gconstpointer,
                                        user_data: gpointer) -> gpointer;
    pub fn gst_util_greatest_common_divisor(a: gint, b: gint) -> gint;
    pub fn gst_util_greatest_common_divisor_int64(a: gint64, b: gint64) ->
     gint64;
    pub fn gst_util_fraction_to_double(src_n: gint, src_d: gint,
                                       dest: *mut gdouble);
    pub fn gst_util_double_to_fraction(src: gdouble, dest_n: *mut gint,
                                       dest_d: *mut gint);
    pub fn gst_util_fraction_multiply(a_n: gint, a_d: gint, b_n: gint,
                                      b_d: gint, res_n: *mut gint,
                                      res_d: *mut gint) -> gboolean;
    pub fn gst_util_fraction_add(a_n: gint, a_d: gint, b_n: gint, b_d: gint,
                                 res_n: *mut gint, res_d: *mut gint) ->
     gboolean;
    pub fn gst_util_fraction_compare(a_n: gint, a_d: gint, b_n: gint,
                                     b_d: gint) -> gint;
    pub fn gst_init(argc: *mut c_int, argv: c_void);
    pub fn gst_init_check(argc: *mut c_int, argv: c_void,
                          err: *mut *mut GError) -> gboolean;
    pub fn gst_is_initialized() -> gboolean;
    pub fn gst_init_get_option_group() -> *mut GOptionGroup;
    pub fn gst_deinit();
    pub fn gst_version(major: *mut guint, minor: *mut guint,
                       micro: *mut guint, nano: *mut guint);
    pub fn gst_version_string() -> *mut gchar;
    pub fn gst_segtrap_is_enabled() -> gboolean;
    pub fn gst_segtrap_set_enabled(enabled: gboolean);
    pub fn gst_registry_fork_is_enabled() -> gboolean;
    pub fn gst_registry_fork_set_enabled(enabled: gboolean);
    pub fn gst_update_registry() -> gboolean;
}
